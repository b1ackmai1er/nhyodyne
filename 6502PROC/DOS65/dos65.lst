ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65.asm
Current file: dos65.asm

000000r 1               ;sysgen
000000r 1               ;version 2.15-a
000000r 1               ;released:	30 november 1985 (2.10)
000000r 1               ;last revised:	2 may 1996 (2.11)
000000r 1               ;			eliminated word mode for 1024 blocks
000000r 1               ;			made extent a single byte
000000r 1               ;		3 may 1996 (2.12)
000000r 1               ;			added initial exm related code
000000r 1               ;		11 may 1996 (2.13)
000000r 1               ;			added use of exm in getblk
000000r 1               ;			added code to set exm & cexm1f
000000r 1               ;			corrected errors
000000r 1               ;		19 may 1996 (2.14)
000000r 1               ;			changed ccm ren to "to from" syntax
000000r 1               ;			allowed _ in file names
000000r 1               ;		13 march 2008 (2.15)
000000r 1               ;			reformatted for TASM & ASM210+
000000r 1               ;			eliminated dependence on "IBM" format
000000r 1               ;			  by reading first sector # using SIM+51
000000r 1               ;			  TRANSLATE code. If translate
000000r 1               ;			  does not have first physical sector in first
000000r 1               ;			  position this approach may not work.
000000r 1               ;			  SIM can also perform no translation at all.
000000r 1               ;			  Also assumes BOOT & SIM both know correct
000000r 1               ;			  starting sector for cold & warm boot. It
000000r 1               ;			  should work regardless of physical sector
000000r 1               ;			  size as long as existing SIM is configured
000000r 1               ;			  correctly for destination drive. BOOT
000000r 1               ;			  must correctly handle sectors > 128 bytes
000000r 1               ;			  as must WARM BOOT in SIM.
000000r 1               ;			  In any case BOOT and WARM BOOT must
000000r 1               ;			  read sectors in sequential order, i.e.,
000000r 1               ;			  no interleave.
000000r 1               ;this program contains the complete dos/65 operating
000000r 1               ;system except for the boot and sim.
000000r 1               ;when used by the system operator this program
000000r 1               ;provides the capability to construct a new
000000r 1               ;operating system including the users boot and sim.
000000r 1               ;the system is relocated to fit the memory size
000000r 1               ;specified by the user and is written onto
000000r 1               ;the system tracks of the specified drive.
000000r 1               ;improvements over version 2.0 include:
000000r 1               ;	use of "from to" syntax for ren
000000r 1               ;	addition of go command
000000r 1               ;	addition of load command
000000r 1               ;	ability to enter numbers as decimal or hex
000000r 1               ;	address parameter added to save
000000r 1               ;	error checking in sysgen (write)
000000r 1               ;	write type for deblocking added
000000r 1               ;	page zero 0 & 1 not used
000000r 1               ;	allow _ in file names
000000r 1               ;base addresses and definitions
000000r 1               btejmp	=	$100		;warm boot jump
000000r 1               pemjmp	=	$103		;jump to pem
000000r 1               iostat	=	$106		;i/o status
000000r 1               dflfcb	=	$107		;default fcb
000000r 1               dflbuf	=	$128		;default buffer
000000r 1               memmovr =	$200		;subr to move data from ram/rom disks
000000r 1               tea	=	$800		;tea start
000000r 1               ;zero page for setup
000000r 1               trknum	=	$02			;current track
000000r 1               dcbadd	=	$04			;dcb address
000000r 1               nmsstr	=	$06			;number system tracks
000000r 1               nsectr	=	$08			;number sectors per track
000000r 1               ttlsec	=	$0A			;total sectors to write
000000r 1               trkcnt	=	ttlsec
000000r 1               size	=	$0B			;ascii size
000000r 1               lokim	=	$0D			;low kim limit
000000r 1               hikim	=	$0F			;high kim limit
000000r 1               offset	=	$11			;relocation offset
000000r 1               kimcnt	=	$13			;kim counter
000000r 1               pointr	=	$14			;pointer
000000r 1               lengt	=	$16			;inst length
000000r 1               point	=	$17			;relocate pointer
000000r 1               adjust	=	$19			;relocate distance
000000r 1               kimpnt	=	$1B			;kim file index
000000r 1               savex	=	$1C			;save for x
000000r 1               savey	=	$1D			;save for y
000000r 1               number	=	$1E			;input pack buffer
000000r 1               dstdrv	=	$20			;destination drive
000000r 1               defalt	=	$21			;default drive
000000r 1               seccnt	=	$22			;sector count
000000r 1               secnum	=	$24			;sector number
000000r 1               curccm	=	$26			;start of current ccm
000000r 1               simlng	=	$28			;length of sim
000000r 1               room	=	$2A			;memory needed for sysgen
000000r 1               stksav	=	$2C			;save stack register
000000r 1               frstsc	=	$2D			;first sector number of disk
000000r 1               dskcfpc	=	$2E			;pointer to disk configuration table
000000r 1               cmdlnp	=	$30			;pointer to command line buffer
000000r 1               lastzp	=	$32
000000r 1               ;fixed parameters
000000r 1               lf	=	$a		;linefeeed
000000r 1               cr	=	$d		;return
000000r 1               eof	=	$1a		;end of file
000000r 1               null	=	0		;null
000000r 1               ctlc	=	3		;abort
000000r 1               ctle	=	5		;physical cr lf
000000r 1               ctli	=	9		;tab character
000000r 1               ctlp	=	$10		;toggle printer
000000r 1               ctlr	=	$12		;repeat line
000000r 1               ctls	=	$13		;freeze
000000r 1               ctlx	=	$18		;cancel
000000r 1               semico	=	$3b		;semicolon
000000r 1               delete	=	$08		;delete character
000000r 1               numcmd	=	36		;number commands
000000r 1               
000000r 1               DEBUG	=	0		; assemble with debug information on
000000r 1               
000000r 1               
000000r 1                		.segment "LOADER"
000000r 1               		.ORG $b7E0
00B7E0  1  F3           		.BYTE 		$F3 			;DI - DISABLE INTERRUPTS
00B7E1  1  01 00 48     		.BYTE 		$01,$00,$48    		;LD	BC,$3E00 -BYTES TO MOVE
00B7E4  1  11 00 38     		.BYTE 		$11,$00,$38    		;LD	DE,$3800 -DESTINATION ADDRESS (6502 IS !A15)
00B7E7  1  21 20 01     		.BYTE 		$21,$20,$01	    	;LD	HL,$0120 -SOURCE ADDRESS
00B7EA  1  ED B0        		.BYTE 		$ED,$B0       		;LDIR  	-COPY RAM
00B7EC  1  21 FC 7F     		.BYTE 		$21,$FC,$7F	    	;LD	HL,$7FFC -VECTOR
00B7EF  1  3E A6        		.BYTE		$3E,<boot		;LD 	A,<BOOT
00B7F1  1  77           		.BYTE 		$77			;LD 	(HL),A
00B7F2  1  21 FD 7F     		.BYTE 		$21,$FD,$7F	    	;LD	HL,$7FFD -VECTOR
00B7F5  1  3E CD        		.BYTE		$3E,>boot		;LD 	A,<BOOT
00B7F7  1  77           		.BYTE 		$77			;LD 	(HL),A
00B7F8  1  DB FF        		.BYTE		$DB,$FF       		;IN 	A,$FF    -ENABLE 6502
00B7FA  1               ;
00B7FA  1               ;
00B7FA  1               		.PC02
00B7FA  1                               .segment "OS"
00B7FA  1               		.ORG $B800
00B800  1               		.include "ccmnhy.asm"
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               ;
00B800  2               ;	Nhyodyne dos/65 dos/65 console command module (ccm)
00B800  2               ;
00B800  2               ;  DWERNER 12/20/2021 	ported to Nhyodyne
00B800  2               ;  DWERNER 12/30/2021   changed .COM files to .CO6 files to reduce confusion when
00B800  2               ;                       sharing CP/M file system images
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               
00B800  2               ;ccm unique definitions
00B800  2               nbuilt	=	7		;number built in commands
00B800  2               ;main program
00B800  2               				; warm boot vector
00B800  2  4C 18 CE     		JMP wboot
00B803  2  D8           ccm:	cld			;set binary mode
00B804  2  48           	pha			;save drive number
00B805  2  20 FA BB     	jsr	rstdsk		;initialize system
00B808  2  68           	pla			;restore drive num
00B809  2  20 FE BB     	jsr	slctds		;select drive
00B80C  2  AD 8A CC     	lda	sysdef+6	;get line length
00B80F  2  4A           	lsr	a		;divide
00B810  2  4A           	lsr	a		;by
00B811  2  4A           	lsr	a		;16
00B812  2  4A           	lsr	a		;for dir
00B813  2  8D F4 BF     	sta	sixten		;and save
00B816  2  AD 41 BF     	lda	cnslng		;get buffer length
00B819  2  D0 3C        	bne	mrecmd		;if more handle it
00B81B  2  A2 FF        ccmlpe:	ldx	#$ff		;set
00B81D  2  9A           	txs			;stack
00B81E  2  D8           	cld			;set binary mode
00B81F  2  A9 11        	lda	#17		; SEND A XON
00B821  2  20 EE BB     	jsr	chrout		; ----------
00B824  2  20 67 BC     	jsr	hdrout		;send header
00B827  2  A9 3E        	lda	#'>'		;then print
00B829  2  20 EE BB     	jsr	chrout		;prompt
00B82C  2  AD 89 BE     	lda	cnsbvc		;point to start
00B82F  2  AC 8A BE     	ldy	cnsbvc+1	;of buffer
00B832  2  20 F2 BB     	jsr	rdebuf		;do buffer read
00B835  2  A0 00        	ldy	#0		;clear index
00B837  2  AE 41 BF     	ldx	cnslng		;get length
00B83A  2  F0 DF        	beq	ccmlpe		;loop if empty
00B83C  2  B9 42 BF     lwrupr:	lda	cnstxt,y	;else get char
00B83F  2  C9 61        	cmp	#'a'		;if less than a
00B841  2  90 09        	bcc	nxtchg		;skip convert
00B843  2  C9 7B        	cmp	#'z'+1		;if over z
00B845  2  B0 05        	bcs	nxtchg		;skip convert
00B847  2  29 5F        	and	#%01011111	;else convert
00B849  2  99 42 BF     	sta	cnstxt,y	;put back in buffer
00B84C  2  C8           nxtchg:	iny			;bump index
00B84D  2  CA           	dex			;count down
00B84E  2  D0 EC        	bne	lwrupr		;loop if more
00B850  2  8A           	txa			;set a to zero
00B851  2  99 42 BF     	sta	cnstxt,y	;insert stopper
00B854  2  8D E5 BF     	sta	cnbfpt		;initialize pointer
00B857  2  20 A2 BD     mrecmd:	jsr	stdflb		;set default buffer
00B85A  2  20 29 BC     	jsr	intdsk		;get drive number
00B85D  2  8D E6 BF     	sta	dfldsk		;store as default
00B860  2  20 A3 BC     	jsr	prslin		;parse command
00B863  2  D0 64        	bne	cmderr		;error if afn
00B865  2  AD E7 BF     	lda	tmpdsk		;get temporary
00B868  2  F0 04        	beq	nodrch		;if zero ok
00B86A  2  A9 15        	lda	#nbuilt*3	;else set and
00B86C  2  D0 2E        	bne	dotrns		;do transient
00B86E  2  A9 00        nodrch:	lda	#0		;clear
00B870  2  AA           	tax			;table index
00B871  2  8D EA BF     	sta	ccmcount		;and count
00B874  2  A0 01        tsnxfn:	ldy	#1		;set fcb index
00B876  2  BD 1B BF     tsnxch:	lda	fnctbl,x	;get table entry
00B879  2  F0 1A        	beq	gotcmd		;if zero got it
00B87B  2  D9 C1 BF     	cmp	fcbone,y	;else test
00B87E  2  D0 04        	bne	nocmpr		;no good if not =
00B880  2  E8           	inx			;bump
00B881  2  C8           	iny			;pointers
00B882  2  D0 F2        	bne	tsnxch		;and loop
00B884  2  E8           nocmpr:	inx			;go to end
00B885  2  BD 1B BF     	lda	fnctbl,x	;of table
00B888  2  D0 FA        	bne	nocmpr		;entry
00B88A  2  E8           	inx			;point to next
00B88B  2  EE EA BF     	inc	ccmcount		;bump count
00B88E  2  AD EA BF     	lda	ccmcount		;and if not
00B891  2  C9 07        	cmp	#nbuilt		;limit then
00B893  2  D0 DF        	bne	tsnxfn		;try next
00B895  2  AD EA BF     gotcmd:	lda	ccmcount		;get count
00B898  2  0A           	asl	a		;multiply by two
00B899  2  6D EA BF     	adc	ccmcount		;then add for x3
00B89C  2  AA           dotrns:	tax			;use as index
00B89D  2  E8           	inx			;bump to pass jmp
00B89E  2  BD 94 BE     	lda	xqfntb,x	;to get
00B8A1  2  BC 95 BE     	ldy	xqfntb+1,x	;entry address
00B8A4  2  8D E8 BF     	sta	vector		;then set
00B8A7  2  8C E9 BF     	sty	vector+1	;vector
00B8AA  2  AD 8D BE     	lda	extcvc+1	;save
00B8AD  2  48           	pha			;return
00B8AE  2  AD 8C BE     	lda	extcvc		;address
00B8B1  2  48           	pha			;on stack
00B8B2  2  6C E8 BF     	jmp	(vector)	;execute
00B8B5  2  20 32 BC     extcmd:	jsr	rstddr		;restore default
00B8B8  2  20 A3 BC     extwod:	jsr	prslin		;parse more
00B8BB  2  AD C2 BF     	lda	fcbone+1	;if first
00B8BE  2  38           	sec			;character
00B8BF  2  E9 20        	sbc	#' '		;not a space
00B8C1  2  0D E7 BF     	ora	tmpdsk		;or if temporary
00B8C4  2  D0 03        	bne	cmderr		;then an error
00B8C6  2  4C 1B B8     	jmp	ccmlpe		;else loop
00B8C9  2               ;command error syntax handler
00B8C9  2  20 DF BB     cmderr:	jsr	ccrlf		;do a cr lf
00B8CC  2  AC EB BF     	ldy	curpnt		;get command pointer
00B8CF  2  B9 42 BF     cmerlp:	lda	cnstxt,y	;get char
00B8D2  2  F0 0A        	beq	cmerex		;if null then done
00B8D4  2  C9 20        	cmp	#' '		;if space
00B8D6  2  F0 06        	beq	cmerex		;then done
00B8D8  2  20 70 BC     	jsr	cotsxy		;output with save
00B8DB  2  C8           	iny			;point to next
00B8DC  2  D0 F1        	bne	cmerlp		;and loop
00B8DE  2  A9 3F        cmerex:	lda	#'?'		;send a
00B8E0  2  20 EE BB     	jsr	chrout		;question mark
00B8E3  2  4C 1B B8     	jmp	ccmlpe		;and start over
00B8E6  2               ;execute dir command
00B8E6  2               ; dir <afn>
00B8E6  2  20 A3 BC     dir:	jsr	prslin		;find object file
00B8E9  2  20 A9 BD     	jsr	clrslt		;clear auto and select
00B8EC  2  A9 20        	lda	#' '		;if name
00B8EE  2  CD C2 BF     	cmp	fcbone+1	;and
00B8F1  2  D0 0F        	bne	findfr		;type are
00B8F3  2  CD CA BF     	cmp	fcbone+9	;not empty
00B8F6  2  D0 0A        	bne	findfr		;then use it
00B8F8  2  A9 3F        	lda	#'?'		;else
00B8FA  2  A0 0B        	ldy	#11		;fill
00B8FC  2  99 C1 BF     fillqu:	sta	fcbone,y	;fcb
00B8FF  2  88           	dey			;with
00B900  2  D0 FA        	bne	fillqu		;question marks
00B902  2  20 5D BC     findfr:	jsr	srchf1		;search for first match
00B905  2  30 56        	bmi	notfnd		;error if none
00B907  2  AD F4 BF     fnddir:	lda	sixten		;set across
00B90A  2  8D F3 BF     	sta	across		;to four
00B90D  2  20 DF BB     	jsr	ccrlf		;do a crlf
00B910  2  20 6A BC     dirl:	jsr	hdr		;do header
00B913  2  A9 3A        	lda	#':'		;then a
00B915  2  20 EE BB     	jsr	chrout		;colon
00B918  2  AD EC BF     	lda	diradd		;get number
00B91B  2  0A           	asl	a		;and
00B91C  2  0A           	asl	a		;multiply
00B91D  2  0A           	asl	a		;by
00B91E  2  0A           	asl	a		;thirty two
00B91F  2  0A           	asl	a		;then
00B920  2  29 60        	and	#%01100000	;mask out insignificant
00B922  2  A8           	tay			;make a pointer
00B923  2  C8           	iny			;and bump
00B924  2  A2 01        	ldx	#1		;set counter
00B926  2  B9 28 01     nmelpe:	lda	dflbuf,y	;get name
00B929  2  20 70 BC     	jsr	cotsxy		;else send to console
00B92C  2  C8           noname:	iny			;bump index
00B92D  2  E8           	inx			;and count
00B92E  2  E0 0C        	cpx	#12		;if count is 12
00B930  2  F0 0C        	beq	endnme		;then done
00B932  2  E0 09        	cpx	#9		;or if not 9
00B934  2  D0 F0        	bne	nmelpe		;then loop
00B936  2  A9 2E        	lda	#'.'		;else send
00B938  2  20 70 BC     	jsr	cotsxy		;a period
00B93B  2  4C 26 B9     	jmp	nmelpe		;and loop
00B93E  2  20 F6 BB     endnme:	jsr	chkcst		;check console status
00B941  2  D0 19        	bne	extdir		;if key down quit
00B943  2  20 95 BC     	jsr	setone		;else point to fcb
00B946  2  20 0E BC     	jsr	srchnx		;else search for next
00B949  2  8D EC BF     	sta	diradd		;save number
00B94C  2  30 0E        	bmi	extdir		;quit if not found
00B94E  2  CE F3 BF     	dec	across		;drop count
00B951  2  F0 B4        	beq	fnddir		;new line if 0
00B953  2  20 EC BB     	jsr	spcout		;send
00B956  2  20 EC BB     	jsr	spcout		;two spaces
00B959  2  4C 10 B9     	jmp	dirl		;and stay
00B95C  2  60           extdir:	rts			;else done
00B95D  2               ;not found error handler
00B95D  2  A0 34        notfnd:	ldy	#ntfnms		;point to message
00B95F  2  4C BE BD     	jmp	sndmsg		;send and exit
00B962  2               ;execute ren command
00B962  2               ; ren <ufn> <ufn>
00B962  2               ;where first ufn is from name and second is to name
00B962  2  20 A3 BC     ren:	jsr	prslin		;get old name
00B965  2  D0 57        	bne	renerr		;error if afn
00B967  2  20 9C BC     	jsr	tmpold		;save drive
00B96A  2  20 A9 BD     	jsr	clrslt		;clear auto and select
00B96D  2  20 5D BC     	jsr	srchf1		;if file does not exist
00B970  2  30 4F        	bmi	fntfnd		;then an error
00B972  2  20 DE BD     	jsr	frssec		;move name to second half
00B975  2  AC E5 BF     	ldy	cnbfpt		;get pointer
00B978  2  B9 42 BF     	lda	cnstxt,y	;and then char
00B97B  2  C9 20        	cmp	#' '		;if not a space
00B97D  2  D0 3C        	bne	rensyn		;then error
00B97F  2  20 A3 BC     	jsr	prslin		;get new name
00B982  2  D0 37        	bne	rensyn		;error if afn
00B984  2  AD E7 BF     	lda	tmpdsk		;get new drive
00B987  2  F0 12        	beq	nonwdr		;if zero ok
00B989  2  CD F0 BF     	cmp	oldtmp		;compare to old
00B98C  2  F0 0D        	beq	nonwdr		;ok if same
00B98E  2  38           	sec			;drop for default check
00B98F  2  E9 01        	sbc	#1
00B991  2  CD E6 BF     	cmp	dfldsk		;if not default
00B994  2  D0 25        	bne	rensyn		;is error
00B996  2  AD F0 BF     	lda	oldtmp		;and then if from not
00B999  2  D0 20        	bne	rensyn		;default is error
00B99B  2  AD F0 BF     nonwdr:	lda	oldtmp		;else get old
00B99E  2  8D E7 BF     	sta	tmpdsk		;and save
00B9A1  2  A9 00        	lda	#0		;clear
00B9A3  2  8D D1 BF     	sta	fcbone+16
00B9A6  2  20 A9 BD     	jsr	clrslt		;reselect
00B9A9  2  20 5D BC     	jsr	srchf1		;search for old
00B9AC  2  10 09        	bpl	filexs		;error if found
00B9AE  2  20 DE BD     	jsr	frssec		;swap names
00B9B1  2  20 95 BC     	jsr	setone		;point to fcb
00B9B4  2  4C 25 BC     	jmp	renmfl		;and do it
00B9B7  2               ;ren file exists error handler
00B9B7  2  A0 3E        filexs:	ldy	#flexms		;point to
00B9B9  2  D0 08        	bne	remsg		;and send
00B9BB  2               ;ren syntax error handler
00B9BB  2  20 32 BC     rensyn:	jsr	rstddr		;restore default
00B9BE  2  4C C9 B8     renerr:	jmp	cmderr		;do error
00B9C1  2               ;ren source file not found error handler
00B9C1  2  A0 34        fntfnd:	ldy	#ntfnms		;point to
00B9C3  2  4C BE BD     remsg:	jmp	sndmsg		;and send
00B9C6  2               ;execute save command
00B9C6  2               ; save <length> <drive:>ufn (<address>)
00B9C6  2  A9 00        save:	lda	#<tea		;set start address to tea start
00B9C8  2  A0 08        	ldy	#>tea
00B9CA  2  8D FA BF     	sta	sadr
00B9CD  2  8C FB BF     	sty	sadr+1
00B9D0  2  20 03 BE     	jsr	bldnum		;calculate length
00B9D3  2  D0 7A        	bne	saverr		;error if > 255 pages
00B9D5  2  8D EF BF     	sta	length		;else save low
00B9D8  2  0D EF BF     	ora	length		;test for zero length
00B9DB  2  F0 72        	beq	saverr		;error if is
00B9DD  2  20 A3 BC     	jsr	prslin		;get file name
00B9E0  2  D0 6D        	bne	saverr		;error if afn
00B9E2  2  20 DE BD     	jsr	frssec		;move name to second half
00B9E5  2  20 9C BC     	jsr	tmpold		;save drive
00B9E8  2  20 03 BE     	jsr	bldnum		;it is so find value
00B9EB  2  AE C2 BF     	ldx	fcbone+1	;see if there
00B9EE  2  E0 20        	cpx	#' '
00B9F0  2  F0 0A        	beq	nosadr		;it is not
00B9F2  2  8D FA BF     	sta	sadr		;and set address
00B9F5  2  8C FB BF     	sty	sadr+1
00B9F8  2  C0 02        	cpy	#2		;make sure is high enough
00B9FA  2  90 53        	bcc	saverr		;error if not
00B9FC  2  20 F1 BD     nosadr:	jsr	secfrs		;move name back
00B9FF  2  20 A9 BD     	jsr	clrslt		;clear auto and select
00BA02  2  20 12 BC     	jsr	dlt1		;delete
00BA05  2  20 95 BC     	jsr	setone		;then create
00BA08  2  20 21 BC     	jsr	cratfl		;new file
00BA0B  2  30 45        	bmi	noroom		;say no room if error
00BA0D  2  20 48 BC     	jsr	open1		;open file
00BA10  2  30 44        	bmi	noopen		;if error
00BA12  2  18           	clc			;now find end page
00BA13  2  AD FB BF     	lda	sadr+1
00BA16  2  6D EF BF     	adc	length
00BA19  2  8D EF BF     	sta	length
00BA1C  2  AD FA BF     	lda	sadr		;get start address
00BA1F  2  AC FB BF     	ldy	sadr+1
00BA22  2  8D F1 BF     wrtmre:	sta	dskbuf		;set
00BA25  2  8C F2 BF     	sty	dskbuf+1	;buffer
00BA28  2  20 C2 CA     	jsr	mv128		;move data to buffer
00BA2B  2  20 95 BC     	jsr	setone		;point to fcb
00BA2E  2  20 1D BC     	jsr	wrrcrd		;write record
00BA31  2  D0 27        	bne	wrterr		;exit if error
00BA33  2  18           	clc			;else
00BA34  2  AD F1 BF     	lda	dskbuf		;get old
00BA37  2  AC F2 BF     	ldy	dskbuf+1	;buffer
00BA3A  2  69 80        	adc	#128		;add 128
00BA3C  2  90 03        	bcc	donotc		;if carry
00BA3E  2  C8           	iny			;bump upper
00BA3F  2  F0 05        	beq	clssav		;done if page zero
00BA41  2  CC EF BF     donotc:	cpy	length		;loop if upper
00BA44  2  D0 DC        	bne	wrtmre		;not at limit
00BA46  2  20 95 BC     clssav:	jsr	setone		;else point to
00BA49  2  20 06 BC     	jsr	clsefl		;and close file
00BA4C  2  30 10        	bmi	cantcl		;say so if error
00BA4E  2  60           extera:	rts
00BA4F  2               ;save error handler
00BA4F  2  4C C9 B8     saverr:	jmp	cmderr		;do error
00BA52  2               ;save no room error handler
00BA52  2  A0 01        noroom:	ldy	#nospms		;point to
00BA54  2  D0 0A        	bne	semsg		;and send
00BA56  2               ;save can not open error handler
00BA56  2  A0 55        noopen:	ldy	#cnnoms		;point to
00BA58  2  D0 06        	bne	semsg		;and send
00BA5A  2               ;save write error handler
00BA5A  2  A0 62        wrterr:	ldy	#wrerms		;point
00BA5C  2  D0 02        	bne	semsg		;to and send
00BA5E  2               ;save can not close error
00BA5E  2  A0 0A        cantcl:	ldy	#ntclms		;point to
00BA60  2  4C BE BD     semsg:	jmp	sndmsg		;and send
00BA63  2               ;execute era command
00BA63  2               ; era <afn>
00BA63  2  20 A3 BC     era:	jsr	prslin		;get file name
00BA66  2  C9 0B        	cmp	#11		;if not all ?
00BA68  2  D0 13        	bne	nteral		;then skip verify
00BA6A  2  A0 18        	ldy	#alflms		;else point to
00BA6C  2  20 BE BD     	jsr	sndmsg		;and send all files
00BA6F  2  20 E8 BB     	jsr	cnsrde		;get an input
00BA72  2  48           	pha			;and save
00BA73  2  20 DF BB     	jsr	ccrlf		;do a cr lf
00BA76  2  68           	pla			;restore char
00BA77  2  29 5F        	and	#$5f		;convert to upper case
00BA79  2  C9 59        	cmp	#'Y'		;if not y
00BA7B  2  D0 D1        	bne	extera		;then quit
00BA7D  2  20 A9 BD     nteral:	jsr	clrslt		;clear auto and select
00BA80  2  4C 12 BC     	jmp	dlt1		;delete first
00BA83  2               ;execute type command
00BA83  2               ; type d:ufn
00BA83  2  20 A3 BC     type:	jsr	prslin		;get file
00BA86  2  D0 30        	bne	typafn		;error if afn
00BA88  2  20 45 BC     	jsr	casdo1		;clear - select - open file 1
00BA8B  2  30 32        	bmi	notype		;error if not found
00BA8D  2  20 DF BB     	jsr	ccrlf		;else do cr lf
00BA90  2  20 57 BC     typmre:	jsr	read1		;read record
00BA93  2  F0 04        	beq	okread		;if ok continue
00BA95  2  10 20        	bpl	exttyp		;exit if just end
00BA97  2  30 22        	bmi	typerr		;else error
00BA99  2  A2 00        okread:	ldx	#0		;clear index
00BA9B  2  BD 28 01     typlpe:	lda	dflbuf,x	;get char
00BA9E  2  C9 1A        	cmp	#eof		;if eof
00BAA0  2  F0 15        	beq	exttyp		;then exit
00BAA2  2  20 70 BC     	jsr	cotsxy		;else send
00BAA5  2  20 F6 BB     	jsr	chkcst		;if key down
00BAA8  2  D0 08        	bne	exttok		;then exit
00BAAA  2  AE ED BF     	ldx	savx		;else get index
00BAAD  2  E8           	inx			;bump it
00BAAE  2  10 EB        	bpl	typlpe		;and loop if < 128
00BAB0  2  30 DE        	bmi	typmre		;else read more
00BAB2  2  A2 06        exttok:	ldx	#6		;clear console
00BAB4  2  20 03 01     	jsr	pemjmp		;with no echo
00BAB7  2  60           exttyp:	rts
00BAB8  2               ;type syntax error handler
00BAB8  2  4C C9 B8     typafn:	jmp	cmderr		;error return
00BABB  2               ;type read error handler
00BABB  2  A0 29        typerr:	ldy	#rderms		;point to
00BABD  2  D0 02        	bne	temsg		;and send
00BABF  2               ;type not found error handler
00BABF  2  A0 34        notype:	ldy	#ntfnms		;point to
00BAC1  2  4C BE BD     temsg:	jmp	sndmsg		;and send
00BAC4  2               ;execute load command
00BAC4  2               ; load <ufn> (<address>)
00BAC4  2  20 D3 BD     load:	jsr	setddb		;set load start to tea start
00BAC7  2  20 A3 BC     	jsr	prslin		;build fcb
00BACA  2  D0 EC        	bne	typafn		;error if afn
00BACC  2  20 DE BD     	jsr	frssec		;save in second half
00BACF  2  20 9C BC     	jsr	tmpold		;save file
00BAD2  2  20 03 BE     	jsr	bldnum		;find start address
00BAD5  2  AE C2 BF     	ldx	fcbone+1	;see if number
00BAD8  2  E0 20        	cpx	#' '
00BADA  2  F0 03        	beq	usedfl		;if none use default
00BADC  2  20 D7 BD     	jsr	setdb		;and set
00BADF  2  20 F1 BD     usedfl:	jsr	secfrs		;move name back
00BAE2  2  20 45 BC     	jsr	casdo1		;clear - select - open file 1
00BAE5  2  30 D8        	bmi	notype		;exit if not found
00BAE7  2  AD F1 BF     	lda	dskbuf		;get load start
00BAEA  2  AC F2 BF     	ldy	dskbuf+1
00BAED  2  20 2D BC     lcmdlp:	jsr	setbuf		;set as disk buffer
00BAF0  2  20 57 BC     	jsr	read1		;read record
00BAF3  2  D0 06        	bne	loadnd		;done if not zero
00BAF5  2  20 AF CA     	jsr	adjdb		;bump address
00BAF8  2  4C ED BA     	jmp	lcmdlp		;and loop
00BAFB  2  30 BE        loadnd:	bmi	typerr		;if error say so
00BAFD  2  4C A2 BD     	jmp	stdflb		;back to default buffer
00BB00  2               ;execute go command
00BB00  2               ; go (<address>)
00BB00  2  20 03 BE     go:	jsr	bldnum		;get address
00BB03  2  AE C2 BF     	ldx	fcbone+1	;get first char
00BB06  2  E0 20        	cpx	#' '		;see if nothing
00BB08  2  F0 03        	beq	nolnum		;nothing so use tea
00BB0A  2  4C 74 BB     	jmp	godoit		;then execute
00BB0D  2  4C 70 BB     nolnum:	jmp	gotea
00BB10  2               ;execute trns (transient) command
00BB10  2               ; <ufn> (<fn>) (<fn>)
00BB10  2  AD C2 BF     trns:	lda	fcbone+1	;get first char
00BB13  2  C9 20        	cmp	#' '		;if not space
00BB15  2  D0 11        	bne	chktyp		;check type
00BB17  2  AD E7 BF     	lda	tmpdsk		;else test temp
00BB1A  2  F0 09        	beq	skpdrv		;if none skip
00BB1C  2  38           	sec			;else convert
00BB1D  2  E9 01        	sbc	#1		;to number
00BB1F  2  8D E6 BF     	sta	dfldsk		;set default
00BB22  2  20 FE BB     	jsr	slctds		;and select
00BB25  2  4C B8 B8     skpdrv:	jmp	extwod		;return
00BB28  2  AD CA BF     chktyp:	lda	fcbone+9	;get type
00BB2B  2  C9 20        	cmp	#' '		;if space
00BB2D  2  F0 03        	beq	typemp		;then ok
00BB2F  2  4C D7 BB     	jmp	trnerr		;else error
00BB32  2  A2 02        typemp:	ldx	#2		;make
00BB34  2  BD E2 BF     setcom:	lda	typcom,x	;type
00BB37  2  9D CA BF     	sta	fcbone+9,x	;com
00BB3A  2  CA           	dex			;then
00BB3B  2  10 F7        	bpl	setcom		;continue
00BB3D  2  20 45 BC     	jsr	casdo1		;clear - select - open file one
00BB40  2  10 03        	bpl	gottrn		;jump if ok
00BB42  2  4C D4 BB     	jmp	topner		;else do error
00BB45  2  20 D3 BD     gottrn:	jsr	setddb		;set start to tea
00BB48  2  20 2D BC     nxtrcr:	jsr	setbuf		;set address
00BB4B  2  20 57 BC     	jsr	read1		;read fcb 1
00BB4E  2  D0 1E        	bne	endlde		;branch if error or eof
00BB50  2  20 AF CA     	jsr	adjdb		;adjust address up by 128
00BB53  2  CD 8F BE     	cmp	ccmvc		;if new low
00BB56  2  90 07        	bcc	tryhig		;ok try high
00BB58  2  CC 90 BE     	cpy	ccmvc+1		;else if high
00BB5B  2  90 EB        	bcc	nxtrcr		;ok do more
00BB5D  2  B0 07        	bcs	chklnd		;else check for end
00BB5F  2  CC 90 BE     tryhig:	cpy	ccmvc+1		;if high less
00BB62  2  90 E4        	bcc	nxtrcr		;then ok
00BB64  2  F0 E2        	beq	nxtrcr		;or ok if same
00BB66  2  20 A2 BD     chklnd:	jsr	stdflb		;set buffer to default
00BB69  2  20 57 BC     	jsr	read1		;read (should be eof)
00BB6C  2  F0 6C        	beq	tlderr		;error if more
00BB6E  2  30 6A        endlde:	bmi	tlderr		;do error
00BB70  2  A9 00        gotea:	lda	#<tea		;set go address to tea start
00BB72  2  A0 08        	ldy	#>tea
00BB74  2  8D C9 BB     godoit:	sta	do+1		;set to ay
00BB77  2  8C CA BB     	sty	do+2
00BB7A  2  20 32 BC     	jsr	rstddr		;else restore default
00BB7D  2  20 A3 BC     	jsr	prslin		;parse file
00BB80  2  AD E7 BF     	lda	tmpdsk		;set auto
00BB83  2  8D C1 BF     	sta	fcbone		;select position
00BB86  2  A2 10        	ldx	#16		;do a second
00BB88  2  20 A5 BC     	jsr	prsmre		;fcb if there
00BB8B  2  AD E7 BF     	lda	tmpdsk		;set auto select
00BB8E  2  8D D1 BF     	sta	fcbone+16	;again
00BB91  2  A0 00        	ldy	#0		;clear record
00BB93  2  8C E1 BF     	sty	fcbone+32	;counter
00BB96  2  A2 20        	ldx	#32		;move
00BB98  2  BD C1 BF     movfcb:	lda	fcbone,x	;all
00BB9B  2  9D 07 01     	sta	dflfcb,x	;to
00BB9E  2  CA           	dex			;default
00BB9F  2  10 F7        	bpl	movfcb		;fcb
00BBA1  2  E8           	inx			;set x to zero
00BBA2  2  B9 42 BF     tstbuf:	lda	cnstxt,y	;get char
00BBA5  2  F0 07        	beq	isnull		;if null jump
00BBA7  2  C9 20        	cmp	#' '		;or if space
00BBA9  2  F0 03        	beq	isnull		;jump
00BBAB  2  C8           	iny			;else bump pointer
00BBAC  2  D0 F4        	bne	tstbuf		;and loop
00BBAE  2  A9 00        isnull:	lda	#0		;clear
00BBB0  2  8D 28 01     	sta	dflbuf		;count
00BBB3  2  B9 42 BF     movbuf:	lda	cnstxt,y	;get char
00BBB6  2  9D 29 01     	sta	dflbuf+1,x	;and move
00BBB9  2  F0 07        	beq	fillov		;exit if null
00BBBB  2  E8           	inx			;increment
00BBBC  2  C8           	iny			;counters
00BBBD  2  EE 28 01     	inc	dflbuf		;and length
00BBC0  2  D0 F1        	bne	movbuf		;and loop
00BBC2  2  20 DF BB     fillov:	jsr	ccrlf		;do a cr lf
00BBC5  2  20 A2 BD     	jsr	stdflb		;set default
00BBC8  2  20 00 08     do:	jsr	tea		;execute
00BBCB  2  AD E6 BF     	lda	dfldsk		;get default
00BBCE  2  20 FE BB     	jsr	slctds		;and set
00BBD1  2  4C 1B B8     	jmp	ccmlpe		;then loop
00BBD4  2               ;trns syntax error handler
00BBD4  2  20 32 BC     topner:	jsr	rstddr		;restore default
00BBD7  2  4C C9 B8     trnerr:	jmp	cmderr		;do error
00BBDA  2               ;trns load error
00BBDA  2  A0 4A        tlderr:	ldy	#lderms		;point to
00BBDC  2  4C BE BD     	jmp	sndmsg		;and send
00BBDF  2               ;carriage return and linefeed
00BBDF  2  A9 0D        ccrlf:	lda	#cr		;get a cr
00BBE1  2  20 EE BB     	jsr	chrout		;send
00BBE4  2  A9 0A        	lda	#lf		;get a lf
00BBE6  2  D0 06        	bne	chrout		;and send
00BBE8  2               ;pem entry routines
00BBE8  2  A2 01        cnsrde:	ldx	#1		;console read
00BBEA  2  D0 43        	bne	pemgo
00BBEC  2  A9 20        spcout:	lda	#' '		;output space
00BBEE  2  A2 02        chrout:	ldx	#2		;console output
00BBF0  2  D0 3D        	bne	pemgo
00BBF2  2  A2 0A        rdebuf:	ldx	#10		;buffered input
00BBF4  2  D0 39        	bne	pemgo
00BBF6  2  A2 0B        chkcst:	ldx	#11		;check console
00BBF8  2  D0 35        	bne	pemgo
00BBFA  2  A2 0D        rstdsk:	ldx	#13		;initialize system
00BBFC  2  D0 31        	bne	pemgo
00BBFE  2  A2 0E        slctds:	ldx	#14		;select drive
00BC00  2  D0 2D        	bne	pemgo
00BC02  2  A2 0F        openfl:	ldx	#15		;open file
00BC04  2  D0 29        	bne	pemgo
00BC06  2  A2 10        clsefl:	ldx	#16		;close file
00BC08  2  D0 25        	bne	pemgo
00BC0A  2  A2 11        srchfr:	ldx	#17		;first match
00BC0C  2  D0 21        	bne	pemgo
00BC0E  2  A2 12        srchnx:	ldx	#18		;next match
00BC10  2  D0 1D        	bne	pemgo
00BC12  2               ;delete file one
00BC12  2  20 95 BC     dlt1:	jsr	setone		;point to fcb
00BC15  2  A2 13        dltfil:	ldx	#19		;delete file
00BC17  2  D0 16        	bne	pemgo
00BC19  2  A2 14        rdrcrd:	ldx	#20		;read record
00BC1B  2  D0 12        	bne	pemgo
00BC1D  2  A2 15        wrrcrd:	ldx	#21		;write record
00BC1F  2  D0 0E        	bne	pemgo
00BC21  2  A2 16        cratfl:	ldx	#22		;create file
00BC23  2  D0 0A        	bne	pemgo
00BC25  2  A2 17        renmfl:	ldx	#23		;rename file
00BC27  2  D0 06        	bne	pemgo
00BC29  2  A2 19        intdsk:	ldx	#25		;read drive num
00BC2B  2  D0 02        	bne	pemgo
00BC2D  2  A2 1A        setbuf:	ldx	#26		;set buffer add
00BC2F  2  4C 03 01     pemgo:	jmp	pemjmp		;go to pem
00BC32  2               ;restore default drive
00BC32  2  AD E7 BF     rstddr:	lda	tmpdsk		;if temp drive
00BC35  2  F0 1F        	beq	extddr		;zero then exit
00BC37  2  38           	sec			;else
00BC38  2  E9 01        	sbc	#1		;subtract one
00BC3A  2  CD E6 BF     	cmp	dfldsk		;compare to default
00BC3D  2  F0 17        	beq	extddr		;exit if same
00BC3F  2  AD E6 BF     seldfl:	lda	dfldsk		;else get default
00BC42  2  4C FE BB     	jmp	slctds		;select
00BC45  2               ;clear auto - select disk - open file at fcbone
00BC45  2  20 A9 BD     casdo1:	jsr	clrslt		;clear auto and select
00BC48  2               ;open file one
00BC48  2               ; returns:n=1 if not found
00BC48  2  A9 00        open1:	lda	#0		;clear
00BC4A  2  8D E1 BF     	sta	fcbone+32	;record number
00BC4D  2  20 95 BC     	jsr	setone		;point to fcb
00BC50  2  20 02 BC     	jsr	openfl		;open it
00BC53  2  8D EC BF     	sta	diradd		;save number
00BC56  2  60           extddr:	rts
00BC57  2               ;read file one
00BC57  2  20 95 BC     read1:	jsr	setone		;point to fcb
00BC5A  2  4C 19 BC     	jmp	rdrcrd		;do read
00BC5D  2               ;search for first file one
00BC5D  2               ; returns:n=1 if not found
00BC5D  2  20 95 BC     srchf1:	jsr	setone		;point to fcb
00BC60  2  20 0A BC     	jsr	srchfr		;search for first
00BC63  2  8D EC BF     	sta	diradd		;save number
00BC66  2  60           	rts
00BC67  2               ;header output
00BC67  2  20 DF BB     hdrout:	jsr	ccrlf		;do cr lf
00BC6A  2  20 29 BC     hdr:	jsr	intdsk		;get drive number
00BC6D  2  18           	clc			;make
00BC6E  2  69 41        	adc	#'A'		;a letter
00BC70  2               ;output with save of x and y
00BC70  2               ;this routine calls the pem resident routine
00BC70  2               ;tstchr to see if a char is a printing char.
00BC70  2               ;if it is then c=1 upon return from tstchr.
00BC70  2  8E ED BF     cotsxy:	stx	savx		;save x
00BC73  2  8C EE BF     	sty	savy		;and y
00BC76  2  20 B9 C8     	jsr	tstchr		;see if printing
00BC79  2  B0 10        	bcs	isprnt		;jump if is
00BC7B  2  48           	pha			;else save
00BC7C  2  AD 88 CC     	lda	sysdef+4	;get invert
00BC7F  2  20 EE BB     	jsr	chrout		;send it
00BC82  2  68           	pla			;get char
00BC83  2  09 40        	ora	#'@'		;make printing
00BC85  2  20 EE BB     	jsr	chrout		;send it
00BC88  2  AD 87 CC     	lda	sysdef+3	;get normal
00BC8B  2  20 EE BB     isprnt:	jsr	chrout		;do output
00BC8E  2  AC EE BF     	ldy	savy		;get y
00BC91  2  AE ED BF     	ldx	savx		;and x
00BC94  2  60           	rts
00BC95  2               ;set up fcb one pointer
00BC95  2  AD 92 BE     setone:	lda	fcb1vc		;low
00BC98  2  AC 93 BE     	ldy	fcb1vc+1	;and high
00BC9B  2  60           	rts
00BC9C  2               ;save tmpdsk in oldtmp
00BC9C  2  AD E7 BF     tmpold:	lda	tmpdsk
00BC9F  2  8D F0 BF     	sta	oldtmp
00BCA2  2  60           	rts
00BCA3  2               ;parse command line
00BCA3  2  A2 00        prslin:	ldx	#0		;clear index
00BCA5  2  8A           prsmre:	txa			;save
00BCA6  2  48           	pha			;index
00BCA7  2  A9 00        	lda	#0		;clear temp
00BCA9  2  8D E7 BF     	sta	tmpdsk		;drive flag
00BCAC  2  AC E5 BF     	ldy	cnbfpt		;get buffer pointer
00BCAF  2  20 70 BD     	jsr	skpspc		;find first non-space
00BCB2  2  8C EB BF     	sty	curpnt		;save index
00BCB5  2  F0 0D        	beq	nulchr		;jump if null
00BCB7  2  29 0F        	and	#%00001111	;else look at 4 lsbs
00BCB9  2  48           	pha			;and save
00BCBA  2  C8           	iny			;point to next char
00BCBB  2  B9 42 BF     	lda	cnstxt,y	;and get it
00BCBE  2  C9 3A        	cmp	#':'		;if a colon
00BCC0  2  F0 0A        	beq	drvinp		;jump and set drive
00BCC2  2  68           	pla			;else clear stack
00BCC3  2  88           	dey			;backup index
00BCC4  2  AD E6 BF     nulchr:	lda	dfldsk		;set automatic
00BCC7  2  9D C1 BF     	sta	fcbone,x	;to default
00BCCA  2  10 08        	bpl	trynme		;then parse name
00BCCC  2  68           drvinp:	pla			;get number
00BCCD  2  8D E7 BF     	sta	tmpdsk		;set temp flag
00BCD0  2  9D C1 BF     	sta	fcbone,x	;and fcb
00BCD3  2  C8           	iny			;point past colon
00BCD4  2  A9 08        trynme:	lda	#8		;set name count
00BCD6  2  8D EA BF     	sta	ccmcount		;to eight
00BCD9  2  20 7D BD     tstnme:	jsr	tstlgl		;test for illegal
00BCDC  2  F0 1D        	beq	flnmsp		;if illegal jump
00BCDE  2  E8           	inx			;bump pointer
00BCDF  2  C9 2A        	cmp	#'*'		;if not *
00BCE1  2  D0 07        	bne	notafn		;skip ? fill
00BCE3  2  A9 3F        	lda	#'?'		;get a ?
00BCE5  2  9D C1 BF     	sta	fcbone,x	;store
00BCE8  2  D0 04        	bne	nxtout		;and jump
00BCEA  2  9D C1 BF     notafn:	sta	fcbone,x	;store char
00BCED  2  C8           	iny			;bump source
00BCEE  2  CE EA BF     nxtout:	dec	ccmcount		;drop counter down
00BCF1  2  D0 E6        	bne	tstnme		;and loop
00BCF3  2  20 7D BD     skpmre:	jsr	tstlgl		;if illegal
00BCF6  2  F0 11        	beq	trytyp		;try type
00BCF8  2  C8           	iny			;else bump index
00BCF9  2  D0 F8        	bne	skpmre		;and loop
00BCFB  2  E8           flnmsp:	inx			;next position
00BCFC  2  A9 20        	lda	#' '		;get a space
00BCFE  2  9D C1 BF     	sta	fcbone,x	;store
00BD01  2  CE EA BF     	dec	ccmcount		;count down
00BD04  2  D0 F5        	bne	flnmsp		;and loop
00BD06  2  B9 42 BF     	lda	cnstxt,y	;get char again
00BD09  2  48           trytyp:	pha			;save char
00BD0A  2  A9 03        	lda	#3		;set count
00BD0C  2  8D EA BF     	sta	ccmcount		;to three
00BD0F  2  68           	pla			;get char
00BD10  2  C9 2E        	cmp	#'.'		;if not .
00BD12  2  D0 23        	bne	fltysp		;then fill spaces
00BD14  2  C8           	iny			;else bump source
00BD15  2  20 7D BD     tsttyp:	jsr	tstlgl		;if not legal
00BD18  2  F0 1D        	beq	fltysp		;then fill spaces
00BD1A  2  E8           	inx			;else bump index
00BD1B  2  C9 2A        	cmp	#'*'		;if not *
00BD1D  2  D0 07        	bne	notaft		;then skip fill
00BD1F  2  A9 3F        	lda	#'?'		;else get ?
00BD21  2  9D C1 BF     	sta	fcbone,x	;move to fcb
00BD24  2  D0 04        	bne	mrtyfl		;and loop
00BD26  2  9D C1 BF     notaft:	sta	fcbone,x	;move char to fcb
00BD29  2  C8           	iny			;bump source
00BD2A  2  CE EA BF     mrtyfl:	dec	ccmcount		;count down
00BD2D  2  D0 E6        	bne	tsttyp		;and loop
00BD2F  2  20 7D BD     nttype:	jsr	tstlgl		;if illegal
00BD32  2  F0 0E        	beq	filnul		;fill out nulls
00BD34  2  C8           	iny			;else bump source
00BD35  2  D0 F8        	bne	nttype		;and loop
00BD37  2  E8           fltysp:	inx			;bump fcb pointer
00BD38  2  A9 20        	lda	#' '		;get space
00BD3A  2  9D C1 BF     	sta	fcbone,x	;put in fcb
00BD3D  2  CE EA BF     	dec	ccmcount		;count down
00BD40  2  D0 F5        	bne	fltysp		;and continue
00BD42  2  A9 03        filnul:	lda	#3		;clear
00BD44  2  8D EA BF     	sta	ccmcount		;three
00BD47  2  E8           mrnlty:	inx			;bump fcb pointer
00BD48  2  A9 00        	lda	#0		;get a zero
00BD4A  2  9D C1 BF     	sta	fcbone,x	;move to fcb
00BD4D  2  CE EA BF     	dec	ccmcount		;count down
00BD50  2  D0 F5        	bne	mrnlty		;loop until done
00BD52  2  8C E5 BF     	sty	cnbfpt		;update start pointer
00BD55  2  A9 00        	lda	#0		;clear
00BD57  2  8D EA BF     	sta	ccmcount		;count
00BD5A  2  68           	pla			;restore stack
00BD5B  2  A8           	tay			;move to index
00BD5C  2  A2 0B        	ldx	#11		;counter to 11
00BD5E  2  C8           tstqus:	iny			;point to
00BD5F  2  B9 C1 BF     	lda	fcbone,y	;and get char
00BD62  2  C9 3F        	cmp	#'?'		;if not a ?
00BD64  2  D0 03        	bne	nxtqus		;then jump
00BD66  2  EE EA BF     	inc	ccmcount		;else bump count
00BD69  2  CA           nxtqus:	dex			;loop until
00BD6A  2  D0 F2        	bne	tstqus		;11 tested
00BD6C  2  AD EA BF     	lda	ccmcount		;get count
00BD6F  2  60           	rts			;and return
00BD70  2               ;skip space
00BD70  2  B9 42 BF     skpspc:	lda	cnstxt,y	;get char
00BD73  2  F0 07        	beq	extskp		;jump if null
00BD75  2  C9 20        	cmp	#' '		;if not space
00BD77  2  D0 03        	bne	extskp		;then exit
00BD79  2  C8           	iny			;else go to next
00BD7A  2  D0 F4        	bne	skpspc		;and test
00BD7C  2  60           extskp:	rts
00BD7D  2               ;test legal
00BD7D  2  B9 42 BF     tstlgl:	lda	cnstxt,y	;get char
00BD80  2  F0 1C        	beq	extlgl
00BD82  2  C9 20        	cmp	#' '		;if space
00BD84  2  90 19        	bcc	badinp		;ok - less is error
00BD86  2  F0 16        	beq	extlgl
00BD88  2  C9 3D        	cmp	#'='
00BD8A  2  F0 12        	beq	extlgl
00BD8C  2  C9 2E        	cmp	#'.'
00BD8E  2  F0 0E        	beq	extlgl
00BD90  2  C9 3A        	cmp	#':'
00BD92  2  F0 0A        	beq	extlgl
00BD94  2  C9 3B        	cmp	#semico
00BD96  2  F0 06        	beq	extlgl
00BD98  2  C9 3C        	cmp	#'<'
00BD9A  2  F0 02        	beq	extlgl
00BD9C  2  C9 3E        	cmp	#'>'
00BD9E  2  60           extlgl:	rts
00BD9F  2  4C C9 B8     badinp:	jmp	cmderr
00BDA2  2               ;set default buffer address
00BDA2  2  A9 28        stdflb:	lda	#<dflbuf 	;point to
00BDA4  2  A0 01        	ldy	#>dflbuf	;location
00BDA6  2  4C 2D BC     	jmp	setbuf		;and set
00BDA9  2               ;clear automatic and select
00BDA9  2  A9 00        clrslt:	lda	#0		;clear auto
00BDAB  2  8D C1 BF     	sta	fcbone		;select
00BDAE  2  AD E7 BF     slttmp:	lda	tmpdsk		;get temp
00BDB1  2  F0 1F        	beq	extsnd		;if zero exit
00BDB3  2  38           	sec			;else subtract
00BDB4  2  E9 01        	sbc	#1		;one
00BDB6  2  CD E6 BF     	cmp	dfldsk		;if same as default
00BDB9  2  F0 17        	beq	extsnd		;then quit
00BDBB  2  4C FE BB     	jmp	slctds		;else set
00BDBE  2               ;send message
00BDBE  2  8C EE BF     sndmsg:	sty	savy		;save index
00BDC1  2  20 DF BB     	jsr	ccrlf		;do cr and lf
00BDC4  2  AC EE BF     	ldy	savy		;get index
00BDC7  2  B9 AD BE     lpesnd:	lda	msgtbl,y	;get char
00BDCA  2  F0 06        	beq	extsnd		;if null quit
00BDCC  2  20 70 BC     	jsr	cotsxy		;else send
00BDCF  2  C8           	iny			;point to next
00BDD0  2  D0 F5        	bne	lpesnd		;and loop
00BDD2  2  60           extsnd:	rts
00BDD3  2               ;set load start address
00BDD3  2  A9 00        setddb:	lda	#<tea		;to tea start
00BDD5  2  A0 08        	ldy	#>tea
00BDD7  2  8D F1 BF     setdb:	sta	dskbuf		;to ay
00BDDA  2  8C F2 BF     	sty	dskbuf+1
00BDDD  2  60           	rts
00BDDE  2               ;move first part of fcb to second half
00BDDE  2               ;and move second part to first part.
00BDDE  2               ;only ren depends upon this routine to actually
00BDDE  2               ;swap fcb halves.
00BDDE  2               ;alters:a,x,p
00BDDE  2               ;returns:x=$ff
00BDDE  2  A2 0F        frssec:	ldx	#15		;set index to last
00BDE0  2  BD C1 BF     frsclp:	lda	fcbone,x	;get byte
00BDE3  2  BC D1 BF     	ldy	fcbone+16,x
00BDE6  2  9D D1 BF     	sta	fcbone+16,x	;move it
00BDE9  2  98           	tya
00BDEA  2  9D C1 BF     	sta	fcbone,x
00BDED  2  CA           	dex
00BDEE  2  10 F0        	bpl	frsclp		;until 16 moved
00BDF0  2  60           	rts
00BDF1  2               ;move second part of fcb to first half
00BDF1  2               ;restore tmpdsk from save location
00BDF1  2               ;alters:a,x,p
00BDF1  2               ;returns:x=$ff
00BDF1  2  A2 0F        secfrs:	ldx	#15		;set index to last
00BDF3  2  BD D1 BF     scfrlp:	lda	fcbone+16,x	;get byte
00BDF6  2  9D C1 BF     	sta	fcbone,x	;move it
00BDF9  2  CA           	dex
00BDFA  2  10 F7        	bpl	scfrlp		;loop until done
00BDFC  2  AD F0 BF     	lda	oldtmp		;get old flag
00BDFF  2  8D E7 BF     	sta	tmpdsk		;and set
00BE02  2  60           	rts
00BE03  2               ;build a number from command line and leave in num
00BE03  2               ;will handle either decimal (e.g., 578) or hexadecimal (e.g., $3f2)
00BE03  2               ;move parse index past number
00BE03  2               ;modifies:all
00BE03  2               ;returns:a,y set to low and high of number
00BE03  2               ;	 flags set according to y which is high part of number
00BE03  2  A9 09        bldnum:	lda	#9		;preset to decimal
00BE05  2  8D F5 BF     	sta	moduls
00BE08  2  20 A3 BC     	jsr	prslin		;put in fcb
00BE0B  2  AD E7 BF     	lda	tmpdsk		;if temp
00BE0E  2  D0 67        	bne	numerr		;is error
00BE10  2  8D F6 BF     	sta	num		;else clear num
00BE13  2  8D F7 BF     	sta	num+1
00BE16  2  A8           	tay			;and index
00BE17  2  B9 C2 BF     	lda	fcbone+1,y	;get first char
00BE1A  2  C9 24        	cmp	#'$'		;see if hex signal
00BE1C  2  D0 06        	bne	bnumlp		;skip if not
00BE1E  2  A9 0F        	lda	#15		;set for modulus
00BE20  2  8D F5 BF     	sta	moduls
00BE23  2  C8           	iny			;bump past $
00BE24  2  C8           bnumlp:	iny			;next char
00BE25  2  B9 C1 BF     	lda	fcbone,y	;get digit
00BE28  2  C9 20        	cmp	#' '		;see if space
00BE2A  2  F0 4E        	beq	endnlp		;done if is
00BE2C  2  20 99 CA     	jsr	tstdec		;see if decimal
00BE2F  2  90 0E        	bcc	usedig		;use if is
00BE31  2  20 A3 CA     	jsr	tsthex		;see if hex
00BE34  2  B0 41        	bcs	numerr		;error if not
00BE36  2  E9 06        	sbc	#6		;remove offset
00BE38  2  A2 0F        	ldx	#15		;test for hex modulus
00BE3A  2  EC F5 BF     	cpx	moduls
00BE3D  2  D0 38        	bne	numerr		;error if not
00BE3F  2  29 0F        usedig:	and	#%00001111	;eliminate ascii bias
00BE41  2  48           	pha			;save result
00BE42  2  AD F6 BF     	lda	num		;move number to temp
00BE45  2  8D F8 BF     	sta	tnum
00BE48  2  AD F7 BF     	lda	num+1
00BE4B  2  8D F9 BF     	sta	tnum+1
00BE4E  2  AE F5 BF     	ldx	moduls		;get modulus
00BE51  2  18           	clc
00BE52  2  AD F6 BF     addlpe:	lda	num		;add number to itself
00BE55  2  6D F8 BF     	adc	tnum
00BE58  2  8D F6 BF     	sta	num
00BE5B  2  AD F7 BF     	lda	num+1		;modulus times
00BE5E  2  6D F9 BF     	adc	tnum+1
00BE61  2  8D F7 BF     	sta	num+1
00BE64  2  B0 11        	bcs	numerr		;error if carry out
00BE66  2  CA           	dex
00BE67  2  D0 E9        	bne	addlpe		;loop if more
00BE69  2  68           	pla			;get input back
00BE6A  2  6D F6 BF     	adc	num		;add in
00BE6D  2  8D F6 BF     	sta	num
00BE70  2  90 B2        	bcc	bnumlp		;loop if no carry
00BE72  2  EE F7 BF     	inc	num+1		;else bump high
00BE75  2  D0 AD        	bne	bnumlp		;and loop for more
00BE77  2               ;error in bldnum - handle and quit
00BE77  2  4C C9 B8     numerr:	jmp	cmderr		;do general error
00BE7A  2               ;end of use of name part - check type
00BE7A  2  AD CA BF     endnlp:	lda	fcbone+9	;get first
00BE7D  2  C9 20        	cmp	#' '		;see if space
00BE7F  2  D0 F6        	bne	numerr		;error if not
00BE81  2  AD F6 BF     	lda	num		;return with result
00BE84  2  AC F7 BF     	ldy	num+1
00BE87  2  60           	rts
00BE88  2               ;relocatable vectors
00BE88  2  4C           	.byte	$4c
00BE89  2  40 BF        cnsbvc:	.word	cnsbuf
00BE8B  2  4C           	.byte	$4c
00BE8C  2  B4 B8        extcvc:	.word	extcmd-1
00BE8E  2  4C           	.byte	$4c
00BE8F  2  03 B8        ccmvc:	.word	ccm
00BE91  2  4C           	.byte	$4c
00BE92  2  C1 BF        fcb1vc:	.word	fcbone
00BE94  2               ;function entry vector
00BE94  2  4C E6 B8     xqfntb:	jmp	dir
00BE97  2  4C C6 B9     	jmp	save
00BE9A  2  4C 63 BA     	jmp	era
00BE9D  2  4C 83 BA     	jmp	type
00BEA0  2  4C 62 B9     	jmp	ren
00BEA3  2  4C 00 BB     	jmp	go
00BEA6  2  4C C4 BA     	jmp	load
00BEA9  2  4C 10 BB     	jmp	trns
00BEAC  2               ;terminator for relocation
00BEAC  2  FF           	.byte	$ff
00BEAD  2               ;messages
00BEAD  2               msgtbl:
00BEAD  2  00           	.byte 0
00BEAE  2               nospms	=	*-msgtbl
00BEAE  2  4E 4F 20 53  	.byte	"NO SPACE",0
00BEB2  2  50 41 43 45  
00BEB6  2  00           
00BEB7  2               ntclms	=	*-msgtbl
00BEB7  2  43 41 4E 20  	.byte "CAN NOT CLOSE",0
00BEBB  2  4E 4F 54 20  
00BEBF  2  43 4C 4F 53  
00BEC5  2               alflms	=	*-msgtbl
00BEC5  2  41 4C 4C 20  	.byte "ALL FILES (Y/N)?",0
00BEC9  2  46 49 4C 45  
00BECD  2  53 20 28 59  
00BED6  2               rderms	=	*-msgtbl
00BED6  2  52 45 41 44  	.byte	"READ ERROR",0
00BEDA  2  20 45 52 52  
00BEDE  2  4F 52 00     
00BEE1  2               ntfnms	=	*-msgtbl
00BEE1  2  4E 4F 54 20  	.byte	"NOT FOUND",0
00BEE5  2  46 4F 55 4E  
00BEE9  2  44 00        
00BEEB  2               flexms	=	*-msgtbl
00BEEB  2  46 49 4C 45  	.byte "FILE EXISTS",0
00BEEF  2  20 45 58 49  
00BEF3  2  53 54 53 00  
00BEF7  2               lderms	=	*-msgtbl
00BEF7  2  4C 4F 41 44  	.byte "LOAD ERROR",0
00BEFB  2  20 45 52 52  
00BEFF  2  4F 52 00     
00BF02  2               cnnoms	=	*-msgtbl
00BF02  2  43 41 4E 20  	.byte "CAN NOT OPEN",0
00BF06  2  4E 4F 54 20  
00BF0A  2  4F 50 45 4E  
00BF0F  2               wrerms	=	*-msgtbl
00BF0F  2  57 52 49 54  	.byte "WRITE ERROR",0
00BF13  2  45 20 45 52  
00BF17  2  52 4F 52 00  
00BF1B  2               ;function name table
00BF1B  2  44 49 52 20  fnctbl:	.byte	"DIR ",0
00BF1F  2  00           
00BF20  2  53 41 56 45  	.byte	"SAVE ",0
00BF24  2  20 00        
00BF26  2  45 52 41 20  	.byte	"ERA ",0
00BF2A  2  00           
00BF2B  2  54 59 50 45  	.byte	"TYPE ",0
00BF2F  2  20 00        
00BF31  2  52 45 4E 20  	.byte	"REN ",0
00BF35  2  00           
00BF36  2  47 4F 20 00  	.byte	"GO ",0
00BF3A  2  4C 4F 41 44  	.byte	"LOAD ",0
00BF3E  2  20 00        
00BF40  2               ;input buffer
00BF40  2               cnsbuf:
00BF40  2  7F           cnsmax: .byte 127
00BF41  2  00           cnslng: .byte 0
00BF42  2               cnstxt:
00BF42  2  xx xx xx xx  	.res 127
00BF46  2  xx xx xx xx  
00BF4A  2  xx xx xx xx  
00BFC1  2               ;fcb one
00BFC1  2               fcbone:
00BFC1  2  xx xx xx xx  	.res 33
00BFC5  2  xx xx xx xx  
00BFC9  2  xx xx xx xx  
00BFE2  2               ;com type field
00BFE2  2  43 4F 36     typcom:	.byte	"CO6"
00BFE5  2               ;variable storage
00BFE5  2  00           cnbfpt:	.byte	0		;buffer index
00BFE6  2  00           dfldsk:	.byte	0		;default drive
00BFE7  2  00           tmpdsk:	.byte	0		;temporary dvive
00BFE8  2               ;align vector on word boundary
00BFE8  2               	.align 2
00BFE8  2  00 00        vector:	.word	0		;execution vector
00BFEA  2  00           ccmcount:	.byte	0		;counter
00BFEB  2  00           curpnt:	.byte	0		;input parse start
00BFEC  2  00           diradd:	.byte	0		;directory number
00BFED  2  00           savx:	.byte	0		;save x location
00BFEE  2  00           savy:	.byte	0		;save y location
00BFEF  2  00           length:	.byte	0		;number tages to save
00BFF0  2  00           oldtmp:	.byte	0		;temp drive in ren
00BFF1  2  00 08        dskbuf:	.word	tea		;disk buffer start
00BFF3  2  00           across:	.byte	0		;dir count on line
00BFF4  2  00           sixten:	.byte	0		;line length div 16
00BFF5  2  09           moduls:	.byte	9		;modulus-1 for number input
00BFF6  2  00 00        num:	.word	0		;input number
00BFF8  2  00 00        tnum:	.word	0		;temp in bldnum
00BFFA  2  00 08        sadr:	.word	tea		;save start address
00BFFC  2               
00BFFC  1               		.include "pem215.asm"
00BFFC  2               ;-------------------------------
00BFFC  2               ;dos/65 primitive execution module (pem)
00BFFC  2               ;-------------------------------
00BFFC  2               ;zero page data storage
00BFFC  2               addinp	=	$02		;initialized to a,y
00BFFC  2               bufadd	=	$04		;buffer address
00BFFC  2               alcpnt	=	$06		;allocation map pointer
00BFFC  2               chkpnt	=	$08		;checksum map pointer
00BFFC  2               numvar	=	8		;eight bytes
00BFFC  2               ;main program
00BFFC  2               ; input:x=command,a=value,a&y=address
00BFFC  2               ; returns:a=value,a&y=address
00BFFC  2               ; alters:all
00BFFC  2               pem:
00BFFC  2  D8           	cld			;set binary mode
00BFFD  2  8D 90 CB     	sta	bytinp		;save input
00C000  2  8D D4 CB     	sta	lowin		;value and
00C003  2  8C 91 CB     	sty	bytinp+1	;save high
00C006  2  8C D5 CB     	sty	lowin+1		;address
00C009  2  8E 92 CB     	stx	cmdinp		;and command
00C00C  2  E0 24        	cpx	#numcmd		;if invalid
00C00E  2  B0 50        	bcs	extpem		;then exit
00C010  2  BD 4C CB     	lda	swctbl,x	;if flag zero
00C013  2  F0 08        	beq	noswin		;skip switch
00C015  2  A9 FF        	lda	#255		;else set
00C017  2  8D 8F CB     	sta	swcflg		;memory switch flag
00C01A  2  20 E7 C2     	jsr	switch		;move data to page zero
00C01D  2  A9 00        noswin:	lda	#0		;clear drive
00C01F  2  8D 97 CB     	sta	tmpdrv		;switch flag
00C022  2  AD 92 CB     	lda	cmdinp		;get command
00C025  2  0A           	asl	a		;multiply by two
00C026  2  6D 92 CB     	adc	cmdinp		;then add to get x3
00C029  2  AA           	tax			;and make a pointer
00C02A  2  E8           	inx			;bump to pass jmp
00C02B  2  BD 74 C0     	lda	cmdtbl,x	;get command
00C02E  2  BC 75 C0     	ldy	cmdtbl+1,x	;address
00C031  2  8D 98 CB     	sta	xqtvec		;and put
00C034  2  8C 99 CB     	sty	xqtvec+1	;in vector
00C037  2  AD DC CA     	lda	extevc+1	;get return
00C03A  2  48           	pha			;address
00C03B  2  AD DB CA     	lda	extevc		;and push
00C03E  2  48           	pha			;as return
00C03F  2  AD 90 CB     	lda	bytinp		;get input value
00C042  2  AC 91 CB     	ldy	bytinp+1
00C045  2  6C 98 CB     	jmp	(xqtvec)	;then execute
00C048  2  8D 93 CB     extexq:	sta	bytout		;save value
00C04B  2  8C 94 CB     	sty	addout+1	;and address
00C04E  2  AD 97 CB     	lda	tmpdrv		;get temp drive
00C051  2  F0 0D        	beq	extpem		;if zero skip switch
00C053  2  A0 00        	ldy	#0		;else
00C055  2  91 02        	sta	(addinp),y	;put back in fcb
00C057  2  AD A1 CB     	lda	olddrv		;get old drive number
00C05A  2  8D 90 CB     	sta	bytinp		;set input value
00C05D  2  20 02 C3     	jsr	chgdrv		;then switch back
00C060  2  2C 8F CB     extpem:	bit	swcflg		;test memory switch
00C063  2  10 08        	bpl	noswot		;if not set skip
00C065  2  20 E7 C2     	jsr	switch		;else do memory switch
00C068  2  A9 00        	lda	#0		;clear
00C06A  2  8D 8F CB     	sta	swcflg		;flag
00C06D  2  AC 94 CB     noswot:	ldy	addout+1	;get address
00C070  2  AD 93 CB     	lda	bytout		;and value (address low)
00C073  2  60           	rts
00C074  2               ;command vector table
00C074  2  4C E8 C0     cmdtbl:	jmp	xwboot		;warm boot
00C077  2  4C D9 C2     	jmp	xcnsin		;console input with echo
00C07A  2  4C 11 C9     	jmp	sndchr		;console output
00C07D  2  4C 63 CC     	jmp	sim+21		;tape reader
00C080  2  4C 60 CC     	jmp	sim+18		;tape punch
00C083  2  4C 5D CC     	jmp	sim+15		;printer output
00C086  2  4C 83 C8     	jmp	getcon		;console input w/o echo
00C089  2  4C 1D C1     	jmp	xgtios		;read i/o status
00C08C  2  4C 28 C1     	jmp	xstios		;set i/o status
00C08F  2  4C C8 C8     	jmp	sndstr		;print buffer
00C092  2  4C 7D C9     	jmp	bufinp		;read buffer
00C095  2  4C 93 C8     	jmp	kbdsts		;test console ready
00C098  2  4C 7B CC     	jmp	sim+45		;read list status
00C09B  2  4C 30 C3     	jmp	xintds		;initialize system
00C09E  2  4C 02 C3     	jmp	chgdrv		;log in drive
00C0A1  2  4C AD C5     	jmp	xopen		;open file
00C0A4  2  4C E8 C5     	jmp	xclose		;close file
00C0A7  2  4C 0C C6     	jmp	xfndfr		;find first match
00C0AA  2  4C 38 C1     	jmp	xfndnx		;find next match
00C0AD  2  4C A0 C1     	jmp	xdltfl		;delete file
00C0B0  2  4C 40 C1     	jmp	xread		;read record
00C0B3  2  4C C5 C1     	jmp	xwrite		;write record
00C0B6  2  4C AF C6     	jmp	xmake		;create file
00C0B9  2  4C 7E C1     	jmp	xrenme		;rename file
00C0BC  2  4C 30 C1     	jmp	xintlg		;interrogate log in status
00C0BF  2  4C 2C C1     	jmp	xintdr		;interrogate current drive
00C0C2  2  4C F7 C2     	jmp	chgdma		;set buffer address
00C0C5  2  4C 21 C1     	jmp	xrdalv		;read allocation map start
00C0C8  2  4C 6B C5     	jmp	setron		;set r/w status
00C0CB  2  4C 34 C1     	jmp	xrdros		;read r/w status
00C0CE  2  4C E0 C0     	jmp	setlst		;set list echo status
00C0D1  2  4C E4 C0     	jmp	lststs		;read list echo status
00C0D4  2  4C F8 C0     	jmp	xrtclo		;read low clock
00C0D7  2  4C 0C C1     	jmp	xrtchi		;read high clock
00C0DA  2  4C 16 C1     	jmp	xrddcb		;read dcb address
00C0DD  2  4C 81 CC     	jmp	sim+51		;translate sector
00C0E0  2               ;set list echo status
00C0E0  2  8D 8D CB     setlst:	sta	lstflg		;set flag
00C0E3  2  60           	rts
00C0E4  2               ;read list echo status
00C0E4  2  AD 8D CB     lststs:	lda	lstflg		;read flag
00C0E7  2  60           	rts
00C0E8  2               ;execute warm boot
00C0E8  2               ; ***this command does not return to pem***
00C0E8  2               ; ***instead it jumps to sim, resets	***
00C0E8  2               ; ***system and stack and jumps to ccm. ***
00C0E8  2  2C 8F CB     xwboot:	bit	swcflg		;test memory switch flag
00C0EB  2  10 08        	bpl	dowmbt		;if clear do not
00C0ED  2  20 E7 C2     	jsr	switch		;switch memory
00C0F0  2  A9 00        	lda	#0		;clear
00C0F2  2  8D 8F CB     	sta	swcflg		;flag
00C0F5  2  4C 51 CC     dowmbt:	jmp	sim+3		;go to sim
00C0F8  2               
00C0F8  2               ;execute read real time clock
00C0F8  2  20 7E CC     xrtclo:	jsr	sim+48		;read clock
00C0FB  2               
00C0FB  2  8D BD CB     	sta	rtclk		;save low
00C0FE  2  8C BE CB     	sty	rtclk+1		;middle
00C101  2  8E BF CB     	stx	rtclk+2		;high
00C104  2  8A           	txa
00C105  2  29 80        	and	#%10000000	;test for valid
00C107  2  A8           	tay
00C108  2  AD BD CB     	lda	rtclk		;get low
00C10B  2  60           	rts
00C10C  2               ;execute read real time clock high
00C10C  2  AD BF CB     xrtchi:	lda	rtclk+2		;get high
00C10F  2  29 7F        	and	#%01111111	;clear status
00C111  2  A8           	tay
00C112  2  AD BE CB     	lda	rtclk+1		;get middle
00C115  2  60           	rts
00C116  2               ;execute read dcb address
00C116  2  AD 6A C3     xrddcb:	lda	cptdcb+1	;get address
00C119  2  AC 6B C3     	ldy	cptdcb+2
00C11C  2  60           	rts
00C11D  2               ;execute read i/o status
00C11D  2  AD 06 01     xgtios:	lda	iostat		;get status byte
00C120  2  60           	rts
00C121  2               ;execute read allocation map starting address
00C121  2  AD CC CB     xrdalv:	lda	alcmap		;get
00C124  2  AC CD CB     	ldy	alcmap+1	;starting address
00C127  2  60           	rts			;then return
00C128  2               ;execute set i/o status
00C128  2  8D 06 01     xstios:	sta	iostat		;set status
00C12B  2  60           	rts
00C12C  2               ;execute interrogate current drive
00C12C  2  AD A2 CB     xintdr:	lda	curdrv		;get number
00C12F  2  60           	rts
00C130  2               ;execute read log in status
00C130  2  AD A3 CB     xintlg:	lda	lginvc		;get status
00C133  2  60           	rts
00C134  2               ;execute read read/write status
00C134  2  AD A4 CB     xrdros:	lda	ronlst		;get status
00C137  2  60           	rts
00C138  2               ;execute find next match
00C138  2  20 10 C3     xfndnx:	jsr	autodr		;auto drive select
00C13B  2  A9 0D        	lda	#13		;match including
00C13D  2  4C 19 C6     	jmp	search		;extent
00C140  2               ;execute read next record
00C140  2  20 10 C3     xread:	jsr	autodr		;auto drive select
00C143  2  20 8D C5     	jsr	inrcct		;initialize record counters
00C146  2  AD AD CB     	lda	nxtrec		;if next record less
00C149  2  CD AE CB     	cmp	numrec		;then number records
00C14C  2  90 13        	bcc	tryrde		;then try to read
00C14E  2  C9 80        	cmp	#128		;but if not and
00C150  2  F0 03        	beq	tryext		;is max try to extend
00C152  2  A9 01        rdeeof:	lda	#1		;else set eof
00C154  2  60           	rts			;code and return
00C155  2  A2 01        tryext:	ldx	#1		;try for a read
00C157  2  20 EB C6     	jsr	extend		;file extension
00C15A  2  C9 00        	cmp	#0		;if not ok exit eof
00C15C  2  D0 F4        	bne	rdeeof		;with jump back
00C15E  2  8D AD CB     	sta	nxtrec		;clear next record
00C161  2  20 7C C7     tryrde:	jsr	getblk		;and get block
00C164  2  AD A8 CB     	lda	blknum		;if block not zero
00C167  2  0D A9 CB     	ora	blknum+1
00C16A  2  D0 03        	bne	dorde		;do the read
00C16C  2  A9 02        	lda	#2		;else set unwritten
00C16E  2  60           	rts			;code and exit
00C16F  2  20 5E C6     dorde:	jsr	calrcn		;calculate record number
00C172  2  20 AA C4     	jsr	sttrsc		;set track and sector
00C175  2  20 35 C8     	jsr	rdesec		;do sector read
00C178  2  20 9C C5     	jsr	updtrc		;update counters
00C17B  2  A9 00        	lda	#0		;return w/o error
00C17D  2  60           extrde:	rts
00C17E  2               ;execute file rename
00C17E  2  20 10 C3     xrenme:	jsr	autodr		;automatic drive select
00C181  2  20 12 C8     	jsr	tstron		;test for r/o
00C184  2  A9 0C        	lda	#12		;match name
00C186  2  20 11 C6     	jsr	frstsr		;and type
00C189  2  30 14        	bmi	extren		;exit if not found
00C18B  2  A9 00        doren:	lda	#0		;clear drive select
00C18D  2  A0 10        	ldy	#16		;in new name
00C18F  2  91 02        	sta	(addinp),y	;part of fcb
00C191  2  A9 0C        	lda	#12		;then move
00C193  2  A2 10        	ldx	#16		;new name
00C195  2  20 7E C6     	jsr	dirchg		;to directory
00C198  2  A9 0C        	lda	#12		;see if
00C19A  2  20 19 C6     	jsr	search		;another match
00C19D  2  10 EC        	bpl	doren		;loop if found
00C19F  2  60           extren:	rts			;number
00C1A0  2               ;execute delete file
00C1A0  2  20 10 C3     xdltfl:	jsr	autodr		;automatic drive select
00C1A3  2  20 12 C8     	jsr	tstron		;test for r/o
00C1A6  2  A9 0C        	lda	#12		;match name
00C1A8  2  20 11 C6     	jsr	frstsr		;and type
00C1AB  2  30 17        	bmi	extdlt		;done if not found
00C1AD  2  A2 00        dodlt:	ldx	#0		;else do a
00C1AF  2  20 E2 C7     	jsr	mapdir		;delete
00C1B2  2  AC A7 CB     	ldy	subrec		;then change
00C1B5  2  AD 4B CB     	lda	empty		;byte zero to
00C1B8  2  91 04        	sta	(bufadd),y	;empty code
00C1BA  2  20 3B C8     	jsr	updtck		;then update directory
00C1BD  2  A9 0C        	lda	#12		;search
00C1BF  2  20 19 C6     	jsr	search		;for next
00C1C2  2  10 E9        	bpl	dodlt		;loop if found
00C1C4  2  60           extdlt:	rts			;exit
00C1C5  2               ;execute write next record
00C1C5  2  20 10 C3     xwrite:	jsr	autodr		;automatic drive select
00C1C8  2  20 12 C8     	jsr	tstron		;test for r/o
00C1CB  2  20 8D C5     	jsr	inrcct		;initialize counters
00C1CE  2  AD AD CB     	lda	nxtrec		;get next record
00C1D1  2  C9 80        	cmp	#128		;compare to max
00C1D3  2  90 03        	bcc	ntexte		;continue if less
00C1D5  2  A9 01        	lda	#1		;else flag as extend
00C1D7  2  60           	rts			;error and exit
00C1D8  2  20 7C C7     ntexte:	jsr	getblk		;calculate block num
00C1DB  2  A9 00        	lda	#0		;say normal write
00C1DD  2  8D D1 CB     	sta	pemwrtype		;for now
00C1E0  2  AD A8 CB     	lda	blknum		;get it and if
00C1E3  2  0D A9 CB     	ora	blknum+1
00C1E6  2  F0 03        	beq	*+5		;zero then get number
00C1E8  2  4C A8 C2     	jmp	blkopn		;else go write
00C1EB  2  A9 02        	lda	#2		;say unalloc write
00C1ED  2  8D D1 CB     	sta	pemwrtype
00C1F0  2  AD 89 CB     	lda	fcbind		;get index from prior
00C1F3  2  48           	pha			;and save
00C1F4  2  C9 10        	cmp	#16		;if first block
00C1F6  2  F0 1A        	beq	isfrst		;then don't change
00C1F8  2  A8           	tay			;else make an index
00C1F9  2  88           	dey			;point to last
00C1FA  2  2C B8 CB     	bit	blmode		;test mode
00C1FD  2  10 01        	bpl	*+3		;done if byte
00C1FF  2  88           	dey			;else drop for word
00C200  2  B1 02        	lda	(addinp),y	;and get that number
00C202  2  8D A8 CB     	sta	blknum		;store as starting
00C205  2  C8           	iny			;bump for word
00C206  2  A9 00        	lda	#0		;preset for byte
00C208  2  2C B8 CB     	bit	blmode		;test mode
00C20B  2  10 02        	bpl	*+4		;done if byte
00C20D  2  B1 02        	lda	(addinp),y	;else get high
00C20F  2  8D A9 CB     	sta	blknum+1	;then set high
00C212  2  AD A8 CB     isfrst:	lda	blknum		;get block
00C215  2  8D 9D CB     	sta	lkdown		;set lower and
00C218  2  8D 9F CB     	sta	lookup		;upper pointers
00C21B  2  AD A9 CB     	lda	blknum+1	;now set high part
00C21E  2  8D 9E CB     	sta	lkdown+1
00C221  2  8D A0 CB     	sta	lookup+1
00C224  2  AD 9F CB     srblag:	lda	lookup		;if upper pointer
00C227  2  CD C3 CB     	cmp	maxblk		;not at max
00C22A  2  D0 08        	bne	upnemx		;then keep going
00C22C  2  AC A0 CB     	ldy	lookup+1	;now check high
00C22F  2  CC C4 CB     	cpy	maxblk+1
00C232  2  F0 12        	beq	tstdwn		;go test down
00C234  2  EE 9F CB     upnemx:	inc	lookup		;else bump upper
00C237  2  D0 03        	bne	*+5
00C239  2  EE A0 CB     	inc	lookup+1
00C23C  2  AD 9D CB     	lda	lkdown		;then if lower
00C23F  2  0D 9E CB     	ora	lkdown+1
00C242  2  F0 18        	beq	dotest		;is zero start test
00C244  2  D0 0B        	bne	dcdown		;else drop lower
00C246  2  AD 9D CB     tstdwn:	lda	lkdown		;if upper & lower at
00C249  2  0D 9E CB     	ora	lkdown+1
00C24C  2  D0 03        	bne	dcdown		;drop if not zero
00C24E  2  A8           	tay			;also set y
00C24F  2  F0 30        	beq	extsbl		;then exit
00C251  2  AD 9D CB     dcdown:	lda	lkdown		;drop lower
00C254  2  D0 03        	bne	*+5
00C256  2  CE 9E CB     	dec	lkdown+1
00C259  2  CE 9D CB     	dec	lkdown
00C25C  2  AD 9D CB     dotest:	lda	lkdown		;get lower
00C25F  2  AC 9E CB     	ldy	lkdown+1
00C262  2  20 4F C5     	jsr	tstblk		;and test
00C265  2  D0 09        	bne	trylup		;if full try upper
00C267  2  AD 9D CB     	lda	lkdown		;else use lower
00C26A  2  AC 9E CB     	ldy	lkdown+1
00C26D  2  4C 81 C2     	jmp	extsbl		;as result
00C270  2  AD 9F CB     trylup:	lda	lookup		;get upper
00C273  2  AC A0 CB     	ldy	lookup+1
00C276  2  20 4F C5     	jsr	tstblk		;if full
00C279  2  D0 A9        	bne	srblag		;then loop
00C27B  2  AD 9F CB     	lda	lookup		;else use upper
00C27E  2  AC A0 CB     	ldy	lookup+1
00C281  2  8D A8 CB     extsbl:	sta	blknum		;then save number
00C284  2  8C A9 CB     	sty	blknum+1
00C287  2  0D A9 CB     	ora	blknum+1	;see if zero
00C28A  2  D0 04        	bne	gtgood		;then proceed
00C28C  2  68           	pla			;clear stack
00C28D  2  A9 02        	lda	#2		;set end
00C28F  2  60           	rts			;of data return
00C290  2  AD A8 CB     gtgood:	lda	blknum		;get low again
00C293  2  20 63 C5     	jsr	setblk		;set allocation map
00C296  2  68           	pla			;get block
00C297  2  A8           	tay			;pointer back
00C298  2  AD A8 CB     	lda	blknum		;get number
00C29B  2  91 02        	sta	(addinp),y	;and put in fcb
00C29D  2  AD A9 CB     	lda	blknum+1	;get high
00C2A0  2  C8           	iny
00C2A1  2  2C B8 CB     	bit	blmode		;test mode
00C2A4  2  10 02        	bpl	*+4		;done if byte
00C2A6  2  91 02        	sta	(addinp),y	;else set high
00C2A8  2  20 5E C6     blkopn:	jsr	calrcn		;calculate record num
00C2AB  2  20 AA C4     	jsr	sttrsc		;set track and sector
00C2AE  2  20 41 C8     	jsr	wrtsec		;do write
00C2B1  2  AE AD CB     	ldx	nxtrec		;get next record
00C2B4  2  EC AE CB     	cpx	numrec		;if less than max
00C2B7  2  90 05        	bcc	notful		;then ok
00C2B9  2  E8           	inx			;else bump count
00C2BA  2  8E AE CB     	stx	numrec		;and save
00C2BD  2  CA           	dex			;back down
00C2BE  2  E0 7F        notful:	cpx	#127		;if not at max
00C2C0  2  D0 11        	bne	noawex		;skip extending
00C2C2  2  20 9C C5     	jsr	updtrc		;update record counters
00C2C5  2  A2 00        	ldx	#0		;do write
00C2C7  2  20 EB C6     	jsr	extend		;file extension
00C2CA  2  C9 00        	cmp	#0		;if not ok
00C2CC  2  D0 0A        	bne	extwrt		;exit
00C2CE  2  A9 FF        	lda	#255		;else start counter
00C2D0  2  8D AD CB     	sta	nxtrec		;at one short
00C2D3  2  20 9C C5     noawex:	jsr	updtrc		;then update counters
00C2D6  2  A9 00        	lda	#0		;good return
00C2D8  2  60           extwrt:	rts			;exit
00C2D9  2               ;execute console input
00C2D9  2  20 83 C8     xcnsin:	jsr	getcon		;get input
00C2DC  2  20 B9 C8     	jsr	tstchr		;test it and
00C2DF  2  90 05        	bcc	extxci		;if control exit
00C2E1  2  48           	pha			;else save
00C2E2  2  20 11 C9     	jsr	sndchr		;echo
00C2E5  2  68           	pla			;restore
00C2E6  2  60           extxci:	rts			;return
00C2E7  2               ;switch memory
00C2E7  2               ;page zero block begins at $02 and is numvar bytes long.
00C2E7  2  A2 07        switch:	ldx	#numvar-1	;get number to switch
00C2E9  2  B5 02        nxtswh:	lda	2,x		;get zero page
00C2EB  2  BC D4 CB     	ldy	varblk,x	;and save area
00C2EE  2  9D D4 CB     	sta	varblk,x	;save zero
00C2F1  2  94 02        	sty	2,x		;and high
00C2F3  2  CA           	dex			;count down
00C2F4  2  10 F3        	bpl	nxtswh		;and loop until done
00C2F6  2  60           drvsme:	rts			;then return
00C2F7  2               ;change dma address
00C2F7  2               ; input:addinp=address
00C2F7  2               ; returns:none
00C2F7  2               ; alters:all
00C2F7  2  A5 02        chgdma:	lda	addinp		;get low
00C2F9  2  A4 03        	ldy	addinp+1	;and high address
00C2FB  2  85 04        	sta	bufadd		;then store
00C2FD  2  84 05        	sty	bufadd+1	;in address
00C2FF  2  4C 72 CC     	jmp	sim+36		;then go to sim
00C302  2               
00C302  2               ;change drive
00C302  2               ; input:bytinp
00C302  2               ; returns:none
00C302  2               ; alters:all
00C302  2  AD 90 CB     chgdrv:	lda	bytinp		;get input
00C305  2  CD A2 CB     	cmp	curdrv		;if same as current
00C308  2  F0 EC        	beq	drvsme		;do nothing
00C30A  2  8D A2 CB     	sta	curdrv		;else change current
00C30D  2  4C 43 C3     	jmp	mapdrv		;then log it in
00C310  2               ;automatic drive select
00C310  2               ; input:(addinp) 0=no change
00C310  2               ; 1-8 or 'A'-'H' = change
00C310  2               ; returns:none
00C310  2               ; alters:all
00C310  2  A0 00        autodr:	ldy	#0		;get
00C312  2  B1 02        	lda	(addinp),y	;first byte of fcb
00C314  2  F0 19        	beq	qtatdr		;if zero quit
00C316  2  38           	sec			;set carry for
00C317  2  E9 01        	sbc	#1		;subtract one
00C319  2  29 07        	and	#%00000111	;look at three lsbs
00C31B  2  8D 90 CB     	sta	bytinp		;make parameter
00C31E  2  AD A2 CB     	lda	curdrv		;get current
00C321  2  8D A1 CB     	sta	olddrv		;and save
00C324  2  B1 02        	lda	(addinp),y	;get fcb entry
00C326  2  8D 97 CB     	sta	tmpdrv		;and save as flag
00C329  2  98           	tya			;set a to 0
00C32A  2  91 02        	sta	(addinp),y	;clear byte zero in fcb
00C32C  2  20 02 C3     	jsr	chgdrv		;then select new drive
00C32F  2  60           qtatdr:	rts			;and return
00C330  2               ;execute initialize system
00C330  2               ; input:none
00C330  2               ; returns:none
00C330  2               ; alters:all,curdrv,lginvc,bufadd
00C330  2  A9 02        xintds:	lda	#DEFDRV		;set current
00C332  2  8D A2 CB     	sta	curdrv		;drive to a
00C335  2  8D A3 CB     	sta	lginvc		;clear log in status
00C338  2  A9 28        	lda	#<dflbuf	;get default buffer
00C33A  2  A0 01        	ldy	#>dflbuf	;address
00C33C  2  85 02        	sta	addinp		;and set up
00C33E  2  84 03        	sty	addinp+1	;parameters
00C340  2  20 F7 C2     	jsr	chgdma		;change address
00C343  2               
00C343  2               ;log in drive and set pointers and maps
00C343  2               ; input:curdrv
00C343  2               ; returns:none
00C343  2               ; alters:all
00C343  2  AD A2 CB     mapdrv:	lda	curdrv		;if current drive
00C346  2  C9 08        	cmp	#8		;is 0 to 7
00C348  2  90 0F        	bcc	vlddrv		;then log it in
00C34A  2  20 64 C8     drserr:	jsr	errout		;send error message
00C34D  2  AD DE CA     	lda	sltmvc		;point to
00C350  2  AC DF CA     	ldy	sltmvc+1	;select message
00C353  2  20 C8 C8     	jsr	sndstr		;and send it
00C356  2               
00C356  2  4C E8 C0     	jmp	xwboot		;and abort
00C359  2               
00C359  2  20 69 CC     vlddrv:	jsr	sim+27		;go to sim to set
00C35C  2  8D 6A C3     	sta	cptdcb+1	;save
00C35F  2  8C 6B C3     	sty	cptdcb+2
00C362  2  0D 6B C3     	ora	cptdcb+2	;see if invalid
00C365  2  F0 E3        	beq	drserr		;error if is
00C367  2               ;capture dcb
00C367  2  A0 0D        	ldy	#14-1		;do 14 bytes
00C369  2  B9 FF FF     cptdcb:	lda	$ffff,y		;get value from sim
00C36C  2  99 C3 CB     	sta	dcb,y		;store it
00C36F  2  88           	dey
00C370  2  10 F7        	bpl	cptdcb		;loop for more
00C372  2  AD C9 CB     	lda	blkscd		;get block size code
00C375  2  A8           	tay			;save in y
00C376  2  18           	clc
00C377  2  69 03        	adc	#3		;convert to sxb
00C379  2  8D BC CB     	sta	sxb		;and save
00C37C  2  B9 83 CB     	lda	sabtbl,y	;get sab
00C37F  2  8D BB CB     	sta	sab		;and set
00C382  2  AD CA CB     	lda	maxdir		;get max dir
00C385  2  8D B9 CB     	sta	maxdrc		;set max dir record
00C388  2  AD CB CB     	lda	maxdir+1
00C38B  2  4A           	lsr	a		;divide by 4
00C38C  2  6E B9 CB     	ror	maxdrc
00C38F  2  4A           	lsr	a
00C390  2  6E B9 CB     	ror	maxdrc
00C393  2  8D BA CB     	sta	maxdrc+1	;then save high
00C396  2  A9 00        	lda	#0		;set mode to byte
00C398  2  8D B8 CB     	sta	blmode
00C39B  2  AD C4 CB     	lda	maxblk+1	;branch if max block
00C39E  2  F0 05        	beq	ntm255		;not over 255
00C3A0  2               ;if y=0 when the following line is executed it means
00C3A0  2               ;that the user has put an illegal combination into
00C3A0  2               ;the disk definition table. may want to consider
00C3A0  2               ;putting some error checking here in the future if
00C3A0  2               ;there is space in pem.
00C3A0  2  88           	dey			;back up index
00C3A1  2  38           	sec			;else set mode to word
00C3A2  2  6E B8 CB     	ror	blmode
00C3A5  2  B9 80 CB     ntm255:	lda	exmtbl,y	;get extent mask
00C3A8  2  8D D2 CB     	sta	exm
00C3AB  2               
00C3AB  2  38           	sec			;now calculate cexm1f
00C3AC  2  A9 1F        	lda	#31
00C3AE  2  F9 80 CB     	sbc	exmtbl,y
00C3B1  2  8D D3 CB     	sta	cexm1f
00C3B4  2  AE A2 CB     	ldx	curdrv		;get drive as pointer
00C3B7  2  BD 78 CB     	lda	bitmap,x	;get bit
00C3BA  2  2D A3 CB     	and	lginvc		;if logged in
00C3BD  2  D0 0C        	bne	extstm		;then exit
00C3BF  2  BD 78 CB     	lda	bitmap,x	;get bit back
00C3C2  2  0D A3 CB     	ora	lginvc		;set in log-in
00C3C5  2  8D A3 CB     	sta	lginvc		;and update
00C3C8  2  4C CC C3     	jmp	flinal		;then fill in maps
00C3CB  2               
00C3CB  2  60           extstm:	rts			;and return
00C3CC  2               ;fill in allocation map
00C3CC  2  20 26 C8     flinal:	jsr	setrw		;set to read/write
00C3CF  2  AD C3 CB     	lda	maxblk		;divide max block by
00C3D2  2  8D C0 CB     	sta	gpcnt		;eight to get max
00C3D5  2  AD C4 CB     	lda	maxblk+1
00C3D8  2  A2 03        	ldx	#3
00C3DA  2  4A           clcnab:	lsr	a		;use a for speed
00C3DB  2  6E C0 CB     	ror	gpcnt
00C3DE  2  CA           	dex
00C3DF  2  D0 F9        	bne	clcnab		;loop if more
00C3E1  2  8D C1 CB     	sta	gpcnt+1		;save high
00C3E4  2  EE C0 CB     	inc	gpcnt		;bump by one
00C3E7  2  D0 03        	bne	*+5
00C3E9  2  EE C1 CB     	inc	gpcnt+1		;with carry
00C3EC  2  AD CC CB     	lda	alcmap		;get map start
00C3EF  2  AC CD CB     	ldy	alcmap+1
00C3F2  2  85 06        	sta	alcpnt		;set pointer to start
00C3F4  2  84 07        	sty	alcpnt+1
00C3F6  2  A0 00        	ldy	#0		;clear index
00C3F8  2  A9 00        clraml:	lda	#0		;clear byte
00C3FA  2  91 06        	sta	(alcpnt),y	;put in map
00C3FC  2  E6 06        	inc	alcpnt		;bump pointer
00C3FE  2  D0 02        	bne	*+4
00C400  2  E6 07        	inc	alcpnt+1	;with carry
00C402  2  AD C0 CB     	lda	gpcnt		;get low of count
00C405  2  D0 03        	bne	*+5		;skip if not zero
00C407  2  CE C1 CB     	dec	gpcnt+1		;else drop high
00C40A  2  CE C0 CB     	dec	gpcnt		;always drop low
00C40D  2  AD C0 CB     	lda	gpcnt		;test for zero
00C410  2  0D C1 CB     	ora	gpcnt+1
00C413  2  D0 E3        	bne	clraml		;loop if more
00C415  2               ;at this point complete map is cleared
00C415  2  AD B9 CB     	lda	maxdrc		;get low of max dir record
00C418  2  8D C0 CB     	sta	gpcnt
00C41B  2  AD BA CB     	lda	maxdrc+1	;high in a
00C41E  2  AE BC CB     	ldx	sxb		;set x according to block size
00C421  2  4A           clcmdb:	lsr	a		;do division
00C422  2  6E C0 CB     	ror	gpcnt
00C425  2  CA           	dex
00C426  2  D0 F9        	bne	clcmdb		;until x is zero
00C428  2  8D C1 CB     	sta	gpcnt+1		;set high
00C42B  2  EE C0 CB     	inc	gpcnt		;then bump by one
00C42E  2  D0 03        	bne	*+5
00C430  2  EE C1 CB     	inc	gpcnt+1
00C433  2  8E A8 CB     	stx	blknum		;clear block number
00C436  2  8E A9 CB     	stx	blknum+1
00C439  2  AD A8 CB     fildal:	lda	blknum		;get block number
00C43C  2  AC A9 CB     	ldy	blknum+1
00C43F  2  20 63 C5     	jsr	setblk		;set bit
00C442  2  EE A8 CB     	inc	blknum		;bump block number
00C445  2  D0 03        	bne	*+5
00C447  2  EE A9 CB     	inc	blknum+1
00C44A  2  AD C0 CB     	lda	gpcnt		;get low of count
00C44D  2  D0 03        	bne	*+5		;skip if not zero
00C44F  2  CE C1 CB     	dec	gpcnt+1		;else drop high
00C452  2  CE C0 CB     	dec	gpcnt		;always do low
00C455  2  AD C0 CB     	lda	gpcnt		;test for zero
00C458  2  0D C1 CB     	ora	gpcnt+1
00C45B  2  D0 DC        	bne	fildal		;loop if more
00C45D  2               ;at this point directory space is mapped
00C45D  2  20 7C C4     	jsr	intdrv		;initialize drive
00C460  2  20 D6 C7     	jsr	cldrnm		;clear directory number
00C463  2  A2 01        fillpe:	ldx	#1		;parameter for fill
00C465  2  20 1E C7     	jsr	nxtdir		;execute for next directory
00C468  2  30 11        	bmi	extfil		;done if invalid
00C46A  2  AC A7 CB     	ldy	subrec		;get offset
00C46D  2  B1 04        	lda	(bufadd),y	;get empty/valid flag
00C46F  2  C9 E5        	cmp	#$e5		;if empty
00C471  2  F0 F0        	beq	fillpe		;try next
00C473  2  A2 01        	ldx	#1		;parameter for fill in
00C475  2  20 E2 C7     	jsr	mapdir		;do directory map
00C478  2  4C 63 C4     	jmp	fillpe		;then loop
00C47B  2  60           extfil:	rts			;return
00C47C  2               ;initialize drive
00C47C  2               ; input:nsystr
00C47C  2               ; returns:none
00C47C  2               ; alters:all
00C47C  2  20 66 CC     intdrv:	jsr	sim+24		;home then
00C47F  2               
00C47F  2  AD C7 CB     	lda	nsystr		;get number of system tracks
00C482  2  AC C8 CB     	ldy	nsystr+1
00C485  2  4C 6C CC     	jmp	sim+30		;and set in sim
00C488  2               
00C488  2               ;directory record set up
00C488  2               ; input:dirnum
00C488  2               ; returns:none
00C488  2               ; alters:all,recnum,dirrec
00C488  2  AD A6 CB     drrcsu:	lda	dirnum+1	;move high dir number
00C48B  2  8D A9 CB     	sta	recnum+1	;to record number
00C48E  2  AD A5 CB     	lda	dirnum		;divide
00C491  2  4E A9 CB     	lsr	recnum+1	;directory by four
00C494  2  6A           	ror	a
00C495  2  4E A9 CB     	lsr	recnum+1
00C498  2  6A           	ror	a
00C499  2  8D AF CB     	sta	dirrec		;and save
00C49C  2  8D A8 CB     	sta	recnum		;set low record number
00C49F  2  AD A9 CB     	lda	recnum+1	;get high
00C4A2  2  8D B0 CB     	sta	dirrec+1	;and set
00C4A5  2  A9 00        	lda	#0		;clear top byte
00C4A7  2  8D AA CB     	sta	recnum+2
00C4AA  2               ;set track and sector
00C4AA  2               ; input:recnum
00C4AA  2               ; returns:none
00C4AA  2               ; alters:all,countr,trkctr
00C4AA  2  A2 00        sttrsc:	ldx	#0		;clear track counter
00C4AC  2  8E C2 CB     	stx	trkctr
00C4AF  2  8E 9A CB     	stx	countr		;and record
00C4B2  2  8E 9B CB     	stx	countr+1	;counter
00C4B5  2  8E 9C CB     	stx	countr+2
00C4B8  2  AD A8 CB     trnxtr:	lda	recnum		;from
00C4BB  2  CD 9A CB     	cmp	countr		;record number
00C4BE  2  AD A9 CB     	lda	recnum+1	;and if a
00C4C1  2  ED 9B CB     	sbc	countr+1	;borrow then
00C4C4  2  AD AA CB     	lda	recnum+2
00C4C7  2  ED 9C CB     	sbc	countr+2
00C4CA  2  90 21        	bcc	higher		;gone too far
00C4CC  2  18           	clc			;else
00C4CD  2  AD 9A CB     	lda	countr		;get counter
00C4D0  2  6D C5 CB     	adc	sectrk		;add sectors per track
00C4D3  2  8D 9A CB     	sta	countr		;sectors per track
00C4D6  2  AD 9B CB     	lda	countr+1
00C4D9  2  6D C6 CB     	adc	sectrk+1
00C4DC  2  8D 9B CB     	sta	countr+1
00C4DF  2  90 03        	bcc	bumptr		;done if no carry
00C4E1  2  EE 9C CB     	inc	countr+2	;else bump high
00C4E4  2  E8           bumptr:	inx			;increase track count
00C4E5  2  D0 D1        	bne	trnxtr		;with carry
00C4E7  2  EE C2 CB     	inc	trkctr
00C4EA  2  4C B8 C4     	jmp	trnxtr		;then loop
00C4ED  2  CA           higher:	dex			;back up track
00C4EE  2  E0 FF        	cpx	#$ff		;see if wrap around
00C4F0  2  D0 03        	bne	*+5		;wasn't
00C4F2  2  CE C2 CB     	dec	trkctr		;else drop high
00C4F5  2  8A           	txa			;move to a
00C4F6  2  18           	clc			;add starting track
00C4F7  2  6D C7 CB     	adc	nsystr
00C4FA  2  AA           	tax			;save in x
00C4FB  2  AD C2 CB     	lda	trkctr
00C4FE  2  6D C8 CB     	adc	nsystr+1
00C501  2  A8           	tay			;move to correct registers
00C502  2  8A           	txa
00C503  2  20 6C CC     	jsr	sim+30		;then set in sim
00C506  2               
00C506  2  38           	sec			;back
00C507  2  AD 9A CB     	lda	countr		;counter down
00C50A  2  ED C5 CB     	sbc	sectrk		;by sectors per track
00C50D  2  8D 9A CB     	sta	countr		;and save
00C510  2  AD 9B CB     	lda	countr+1
00C513  2  ED C6 CB     	sbc	sectrk+1
00C516  2  8D 9B CB     	sta	countr+1
00C519  2  38           	sec			;now
00C51A  2  AD A8 CB     	lda	recnum		;find difference
00C51D  2  ED 9A CB     	sbc	countr		;as sector
00C520  2  AA           	tax			;save in x
00C521  2  AD A9 CB     	lda	recnum+1
00C524  2  ED 9B CB     	sbc	countr+1
00C527  2  A8           	tay			;move to correct registers
00C528  2  8A           	txa
00C529  2  20 81 CC     	jsr	sim+51		;translate
00C52C  2               
00C52C  2  4C 6F CC     	jmp	sim+33		;and set through sim
00C52F  2               
00C52F  2               ;get block bit mask and index
00C52F  2               ; input:a&y=block number
00C52F  2               ; returns:a=bit mask and y=0
00C52F  2               ; alters:all and alcpnt
00C52F  2  48           blkmsk:	pha			;save block number
00C530  2  84 07        	sty	alcpnt+1	;including high
00C532  2  A0 03        	ldy	#3		;divide by eight
00C534  2  46 07        blkmlp:	lsr	alcpnt+1	;shift high
00C536  2  6A           	ror	a
00C537  2  88           	dey			;loop until done
00C538  2  D0 FA        	bne	blkmlp
00C53A  2  18           	clc			;now add map start
00C53B  2  6D CC CB     	adc	alcmap
00C53E  2  85 06        	sta	alcpnt
00C540  2  A5 07        	lda	alcpnt+1
00C542  2  6D CD CB     	adc	alcmap+1
00C545  2  85 07        	sta	alcpnt+1
00C547  2  68           	pla			;get number back
00C548  2  29 07        	and	#%00000111	;look at 3 lsbs
00C54A  2  AA           	tax			;get
00C54B  2  BD 70 CB     	lda	bitmsk,x	;mask
00C54E  2  60           	rts			;and return
00C54F  2               ;test block
00C54F  2               ; input:a&y=block number
00C54F  2               ; returns:z=1 if unassigned
00C54F  2               ; 	   =0 if assigned and bit in a is set
00C54F  2               ; alters:all
00C54F  2  20 2F C5     tstblk:	jsr	blkmsk		;get mask and index
00C552  2  31 06        	and	(alcpnt),y	;mask with map entry
00C554  2  60           	rts			;then return
00C555  2               ;alter block status
00C555  2               ; input:a&y=block number,x=1 if set
00C555  2               ;		   	  =0 if reset
00C555  2               ; returns:none
00C555  2               ; alters:all and allocation map
00C555  2  E0 01        altalc:	cpx	#1		;if set
00C557  2  F0 0A        	beq	setblk		;go do it
00C559  2  20 2F C5     clrblk:	jsr	blkmsk		;else get mask
00C55C  2  49 FF        	eor	#$ff		;and complement
00C55E  2  31 06        	and	(alcpnt),y	;preserve others
00C560  2  91 06        	sta	(alcpnt),y	;and save
00C562  2  60           	rts			;then return
00C563  2  20 2F C5     setblk:	jsr	blkmsk		;get mask
00C566  2  11 06        	ora	(alcpnt),y	;set bit
00C568  2  91 06        	sta	(alcpnt),y	;and put back
00C56A  2  60           	rts			;then return
00C56B  2               ;set current drive to read only
00C56B  2               ; input:curdrv,ronlst,bitmap
00C56B  2               ; returns:none
00C56B  2               ; alters:a,x,p and ronlst
00C56B  2  AE A2 CB     setron:	ldx	curdrv		;get number
00C56E  2  BD 78 CB     	lda	bitmap,x	;and get mask
00C571  2  0D A4 CB     	ora	ronlst		;or with status
00C574  2  8D A4 CB     	sta	ronlst		;and put back
00C577  2  60           	rts			;then return
00C578  2               ;calculate checksum of buffer @ bufadd
00C578  2               ; input: buffer@(bufadd)
00C578  2               ; returns:a=checksum
00C578  2               ; alters:a,y,p
00C578  2  A9 00        clcchk:	lda	#0		;clear accumulator
00C57A  2  A0 7F        	ldy	#127		;start at end
00C57C  2  18           chkmre:	clc			;no carry
00C57D  2  71 04        	adc	(bufadd),y	;add byte
00C57F  2  88           	dey			;count down
00C580  2  10 FA        	bpl	chkmre		;and loop until done
00C582  2  60           	rts			;then return
00C583  2               ;check read/write status
00C583  2               ; input:curdrv,ronlst
00C583  2               ; returns:z=0 if r/o or z=1 if r/w
00C583  2               ; alters:a,x,p
00C583  2  AE A2 CB     chkron:	ldx	curdrv		;get current drive
00C586  2  BD 78 CB     	lda	bitmap,x	;get mask
00C589  2  2D A4 CB     	and	ronlst		;and test status
00C58C  2  60           	rts
00C58D  2               ;initialize record counters from fcb
00C58D  2               ; input:fcb@(addinp)
00C58D  2               ; returns:none
00C58D  2               ; alters:a,y,p,nxtrec,numrec
00C58D  2  A0 20        inrcct:	ldy	#32		;next record offset
00C58F  2  B1 02        	lda	(addinp),y	;get next record
00C591  2  8D AD CB     	sta	nxtrec		;and save
00C594  2  A0 0F        	ldy	#15		;number records offset
00C596  2  B1 02        	lda	(addinp),y	;get number
00C598  2  8D AE CB     	sta	numrec		;and save
00C59B  2  60           	rts			;and return
00C59C  2               ;update record counters in fcb
00C59C  2               ; input:nxtrec,numrec
00C59C  2               ; returns:none
00C59C  2               ; alters:all,fcb@(addinp)
00C59C  2  AE AD CB     updtrc:	ldx	nxtrec		;get next record
00C59F  2  E8           	inx			;bump it
00C5A0  2  8A           	txa			;transfer
00C5A1  2  A0 20        	ldy	#32		;set offset
00C5A3  2  91 02        	sta	(addinp),y	;and store in fcb
00C5A5  2  AD AE CB     	lda	numrec		;get number
00C5A8  2  A0 0F        	ldy	#15		;and its offset
00C5AA  2  91 02        	sta	(addinp),y	;and store
00C5AC  2  60           	rts			;then return
00C5AD  2               ;execute open file
00C5AD  2  20 10 C3     xopen:	jsr	autodr		;auto drive select
00C5B0  2               ;open file
00C5B0  2               ; input:fcb @ (addinp)
00C5B0  2               ; returns:n=1 if not found,a=dirmod (255 if not found)
00C5B0  2               ; alters:all
00C5B0  2  20 0F C6     opnfle:	jsr	fndf13		;match all including extent
00C5B3  2  30 32        	bmi	extopn		;done if not found
00C5B5  2  A9 0C        	lda	#12		;point to first char
00C5B7  2  0D A7 CB     	ora	subrec		;add offset
00C5BA  2  A8           	tay			;make it a pointer
00C5BB  2  B1 04        nxopmv:	lda	(bufadd),y	;get buffer contents
00C5BD  2  AA           	tax			;and save
00C5BE  2  98           	tya			;save index
00C5BF  2  29 1F        	and	#%00011111	;remove offset
00C5C1  2  A8           	tay			;back to index
00C5C2  2  8A           	txa			;get byte back
00C5C3  2  91 02        	sta	(addinp),y	;and store in fcb
00C5C5  2  98           	tya			;get index
00C5C6  2  0D A7 CB     	ora	subrec		;add offset back
00C5C9  2  A8           	tay			;and make index again
00C5CA  2  C8           	iny			;next position
00C5CB  2  98           	tya			;if index
00C5CC  2  29 1F        	and	#%00011111	;not gone past
00C5CE  2  D0 EB        	bne	nxopmv		;end then loop
00C5D0  2               ;now correct extent and max records
00C5D0  2  A0 0C        	ldy	#12		;point at extent in fcb
00C5D2  2  AD 8A CB     	lda	savext		;get save from search
00C5D5  2  D1 02        	cmp	(addinp),y	;compare
00C5D7  2  F0 0B        	beq	extsme		;jump ahead if same
00C5D9  2  91 02        	sta	(addinp),y	;else change extent
00C5DB  2  A9 80        	lda	#128		;assume fcb ext < dir ext
00C5DD  2  90 01        	bcc	fcbxls		;jump ahead if true
00C5DF  2  0A           	asl	a		;clear a
00C5E0  2  A0 0F        fcbxls:	ldy	#15		;point to max
00C5E2  2  91 02        	sta	(addinp),y	;and set
00C5E4  2  AD B1 CB     extsme:	lda	dirmod		;else get number
00C5E7  2  60           extopn:	rts			;and return
00C5E8  2               ;execute close file
00C5E8  2  20 10 C3     xclose:	jsr	autodr		;auto drive select
00C5EB  2               ;close file
00C5EB  2               ;if file is r/o then no actual close
00C5EB  2               ;operation is performed.
00C5EB  2               ; input:fcb @ (addinp)
00C5EB  2               ; returns:n=1 if not valid,a=dirmod (255 if invalid)
00C5EB  2               ; alters:all
00C5EB  2  20 0F C6     clsfle:	jsr	fndf13		;match including extent
00C5EE  2  30 1B        	bmi	extcls		;exit if not found
00C5F0  2  20 83 C5     	jsr	chkron		;see if r/o
00C5F3  2  D0 13        	bne	noclse		;branch if is
00C5F5  2               ;now set flag to ensure directory extent and number of
00C5F5  2               ;records fields are only changed if necessary.
00C5F5  2               ;The decision to change is determined by whether or
00C5F5  2               ;not the system is closing an extent less than the
00C5F5  2               ;maximum extent in the directory entry. If that is
00C5F5  2               ;the case, the directory extent and number of record
00C5F5  2               ;fields are not changed.
00C5F5  2  A0 0C        	ldy	#12		;get extent
00C5F7  2  B1 02        	lda	(addinp),y
00C5F9  2  48           	pha			;save it
00C5FA  2  98           	tya			;now look in directory
00C5FB  2  0D A7 CB     	ora	subrec
00C5FE  2  A8           	tay
00C5FF  2  68           	pla			;get extent back
00C600  2  D1 04        	cmp	(bufadd),y
00C602  2  6E 88 CB     	ror	skpdir		;save result
00C605  2               ;now go do it
00C605  2  20 7A C6     	jsr	updtdr		;update directory
00C608  2  AD B1 CB     noclse:	lda	dirmod		;get directory number
00C60B  2  60           extcls:	rts			;and return
00C60C  2               ;execute find first match
00C60C  2  20 10 C3     xfndfr:	jsr	autodr		;auto drive select
00C60F  2  A9 0D        fndf13:	lda	#13		;match including extent
00C611  2               ;search for first match
00C611  2               ; input:a=number char to match
00C611  2               ; returns:n=1 if invalid,a=dirmod (255 if invalid)
00C611  2               ; alters:all
00C611  2  48           frstsr:	pha			;save number to match
00C612  2  20 D6 C7     	jsr	cldrnm		;clear directory number to -1
00C615  2  20 7C C4     	jsr	intdrv		;and drive
00C618  2  68           	pla			;get number to match
00C619  2               ;search for directory match
00C619  2               ; input:a=number char to match
00C619  2               ; returns:n=1 if not found,a=dirmod (255 if invalid)
00C619  2               ; alters:all
00C619  2  8D AB CB     search:	sta	chrcnt		;save number
00C61C  2  A2 00        newtry:	ldx	#0		;set for search
00C61E  2  8E AC CB     	stx	cmppnt		;clear pointer
00C621  2  20 1E C7     	jsr	nxtdir		;get next entry
00C624  2  30 37        	bmi	exitsr		;exit if not found
00C626  2  AE AB CB     	ldx	chrcnt		;get count
00C629  2  AC AC CB     mremch:	ldy	cmppnt		;get pointer
00C62C  2  EE AC CB     	inc	cmppnt		;and bump
00C62F  2  B1 02        	lda	(addinp),y	;get fcb entry
00C631  2  C0 0C        	cpy	#12		;see if at extent
00C633  2  D0 13        	bne	notaex		;jump if not
00C635  2  8D 8A CB     	sta	savext		;save for later use
00C638  2  48           	pha			;save extent
00C639  2  98           	tya			;change to directory
00C63A  2  0D A7 CB     	ora	subrec		;coordinates
00C63D  2  A8           	tay
00C63E  2  68           	pla			;get extent back
00C63F  2  51 04        	eor	(bufadd),y	;exclusive or with dir
00C641  2  2D D3 CB     	and	cexm1f		;and with exm complement + 1f
00C644  2  F0 11        	beq	trynxt		;ok if zero
00C646  2  D0 D4        	bne	newtry		;else get next directory
00C648  2  C9 3F        notaex:	cmp	#'?'		;if a ? then
00C64A  2  F0 0B        	beq	trynxt		;is a match
00C64C  2  48           	pha			;save char
00C64D  2  98           	tya			;then add
00C64E  2  0D A7 CB     	ora	subrec		;offset to
00C651  2  A8           	tay			;make pointer
00C652  2  68           	pla			;get char back
00C653  2  D1 04        	cmp	(bufadd),y	;if not same
00C655  2  D0 C5        	bne	newtry		;try next directory
00C657  2  CA           trynxt:	dex			;else count number down
00C658  2  D0 CF        	bne	mremch		;and loop if more
00C65A  2  AD B1 CB     	lda	dirmod		;return with directory
00C65D  2  60           exitsr:	rts			;number mod 4
00C65E  2               ;calculate logical record number
00C65E  2               ; input:blknum
00C65E  2               ; returns:none
00C65E  2               ; alters:a,x,p,recnum
00C65E  2  AE BC CB     calrcn:	ldx	sxb		;set x according to blkscd
00C661  2  0E A8 CB     mulmre:	asl	blknum		;multiply block
00C664  2  2E A9 CB     	rol	blknum+1	;number
00C667  2  2E AA CB     	rol	blknum+2
00C66A  2  CA           	dex			;by code
00C66B  2  D0 F4        	bne	mulmre
00C66D  2  AD BB CB     	lda	sab		;set mask in a
00C670  2  2D AD CB     	and	nxtrec		;and with next record
00C673  2  0D A8 CB     	ora	recnum		;or with number
00C676  2  8D A8 CB     	sta	recnum		;and save
00C679  2  60           	rts
00C67A  2               ;update directory
00C67A  2  A9 20        updtdr:	lda	#32		;change all
00C67C  2  A2 00        	ldx	#0		;from start
00C67E  2               ;change directory entry
00C67E  2               ; input:a=number char to change,x=starting position,fcb@(addinp)
00C67E  2               ; returns:none
00C67E  2               ; alters:all,directory,checksums
00C67E  2  8D AB CB     dirchg:	sta	chrcnt		;save count
00C681  2  CE AB CB     	dec	chrcnt		;back up
00C684  2  18           mrechg:	clc			;clear carry
00C685  2  8A           	txa			;get offset
00C686  2  6D AB CB     	adc	chrcnt		;compute index
00C689  2  A8           	tay			;and set
00C68A  2  C0 0C        	cpy	#12		;see if at extent
00C68C  2  F0 04        	beq	docare		;if so do special
00C68E  2  C0 0F        	cpy	#15		;see if at number rec
00C690  2  D0 05        	bne	dntcar		;if not skip
00C692  2  2C 88 CB     docare:	bit	skpdir		;check flag
00C695  2  10 0D        	bpl	nochng		;skip if ok
00C697  2  B1 02        dntcar:	lda	(addinp),y	;get char
00C699  2  48           	pha			;save it
00C69A  2  AD AB CB     	lda	chrcnt		;get count
00C69D  2  0D A7 CB     	ora	subrec		;add offset
00C6A0  2  A8           	tay			;make an index
00C6A1  2  68           	pla			;get char back
00C6A2  2  91 04        	sta	(bufadd),y	;and put in buffer
00C6A4  2  CE AB CB     nochng:	dec	chrcnt		;count down
00C6A7  2  10 DB        	bpl	mrechg		;and loop
00C6A9  2  20 88 C4     	jsr	drrcsu		;set it up
00C6AC  2  4C 3B C8     	jmp	updtck		;and do change
00C6AF  2               ;execute create file
00C6AF  2  20 10 C3     xmake:	jsr	autodr		;auto drive select
00C6B2  2               ;create file
00C6B2  2               ; input:fcb@(addinp)
00C6B2  2               ; returns:n=1 if not valid,a=dirmod (255 if not valid)
00C6B2  2               ; alters:dirnum,dirmod,fcb@(addinp)
00C6B2  2  20 12 C8     mkefle:	jsr	tstron		;test for r/o
00C6B5  2  A5 02        	lda	addinp		;save fcb
00C6B7  2  48           	pha			;address
00C6B8  2  A5 03        	lda	addinp+1	;on
00C6BA  2  48           	pha			;stack
00C6BB  2  AD E1 CA     	lda	empdvc		;then point
00C6BE  2  AC E2 CA     	ldy	empdvc+1	;to empty
00C6C1  2  85 02        	sta	addinp		;dummy
00C6C3  2  84 03        	sty	addinp+1	;fcb
00C6C5  2  A9 01        	lda	#1		;match only
00C6C7  2  20 11 C6     	jsr	frstsr		;first char
00C6CA  2  68           	pla			;restore
00C6CB  2  85 03        	sta	addinp+1	;fcb
00C6CD  2  68           	pla			;address
00C6CE  2  85 02        	sta	addinp		;from stack
00C6D0  2  AD B1 CB     	lda	dirmod		;get number mod 4
00C6D3  2  30 15        	bmi	extmke		;quit if not found
00C6D5  2  A0 0D        	ldy	#13		;else set up
00C6D7  2  A9 00        	lda	#0		;to clear
00C6D9  2  91 02        mkeagn:	sta	(addinp),y	;rest of
00C6DB  2  C8           	iny			;fcb
00C6DC  2  C0 21        	cpy	#33		;including next
00C6DE  2  D0 F9        	bne	mkeagn		;record
00C6E0  2               ;the next two lines ensure that the extent and
00C6E0  2               ;number of records fields are updated
00C6E0  2  38           	sec
00C6E1  2  6E 88 CB     	ror	skpdir
00C6E4  2  20 7A C6     	jsr	updtdr		;update directory
00C6E7  2  AD B1 CB     	lda	dirmod		;get number
00C6EA  2  60           extmke:	rts			;and quit
00C6EB  2               ;extend file
00C6EB  2               ; input:fcb@(addinp), x=1 read
00C6EB  2               ;		        0 write
00C6EB  2  8E 96 CB     extend:	stx	exrwfl		;save parameter
00C6EE  2  20 EB C5     	jsr	clsfle		;close current extent
00C6F1  2  30 2A        	bmi	extext		;exit if not found
00C6F3  2  A0 0C        	ldy	#12		;else
00C6F5  2  B1 02        	lda	(addinp),y	;get extent
00C6F7  2  18           	clc			;and
00C6F8  2  69 01        	adc	#1		;add one
00C6FA  2  29 1F        	and	#%00011111	;see if overflow
00C6FC  2  F0 17        	beq	exteof		;eof if so
00C6FE  2  91 02        	sta	(addinp),y	;and save
00C700  2  20 0F C6     	jsr	fndf13		;see if next extent exists
00C703  2  10 0B        	bpl	opnext		;if so open
00C705  2  AD 96 CB     	lda	exrwfl		;if not and is write then create
00C708  2  D0 13        	bne	extext		;else return as eof
00C70A  2  20 B2 C6     dwrtex:	jsr	mkefle		;create file
00C70D  2  4C 13 C7     	jmp	tstext		;and test
00C710  2  20 B0 C5     opnext:	jsr	opnfle		;open
00C713  2  10 03        tstext:	bpl	extnok		;continue if ok
00C715  2  A9 01        exteof:	lda	#1		;else set eof
00C717  2  60           	rts			;and return
00C718  2  20 8D C5     extnok:	jsr	inrcct		;initialize counters
00C71B  2  A9 00        	lda	#0		;good
00C71D  2  60           extext:	rts			;return
00C71E  2               ;set up next directory block
00C71E  2               ; input:dirnum,x=1 for update checksum
00C71E  2               ; returns:a=dirmod (255 if invalid),n=1 if invalid
00C71E  2               ; alters:alll,dirnum,dirmod
00C71E  2  8A           nxtdir:	txa			;save operation
00C71F  2  48           	pha			;on stack
00C720  2  EE A5 CB     	inc	dirnum		;bump directory
00C723  2  D0 03        	bne	*+5
00C725  2  EE A6 CB     	inc	dirnum+1
00C728  2  AD CA CB     	lda	maxdir		;if not at limit continue
00C72B  2  CD A5 CB     	cmp	dirnum
00C72E  2  AD CB CB     	lda	maxdir+1
00C731  2  ED A6 CB     	sbc	dirnum+1
00C734  2  B0 05        	bcs	gtnxdr		;then continue
00C736  2  68           	pla			;else clear stack
00C737  2  AA           	tax			;and set x
00C738  2  4C D6 C7     	jmp	cldrnm		;set to invalid
00C73B  2  AD A5 CB     gtnxdr:	lda	dirnum		;get low again
00C73E  2  29 03        	and	#%00000011	;look at 2 lsbs
00C740  2  8D B1 CB     	sta	dirmod		;save mod 4
00C743  2  0A           	asl	a		;multiply
00C744  2  0A           	asl	a		;by
00C745  2  0A           	asl	a		;32 to
00C746  2  0A           	asl	a		;get pointer
00C747  2  0A           	asl	a		;offset
00C748  2  8D A7 CB     	sta	subrec		;and save
00C74B  2  F0 05        	beq	getdir		;if zero read new
00C74D  2  68           	pla			;else clear stack
00C74E  2  AA           	tax			;set x
00C74F  2  4C 5A C7     	jmp	gotdir		;and exit
00C752  2  20 88 C4     getdir:	jsr	drrcsu		;set up to read
00C755  2  20 35 C8     	jsr	rdesec		;do read
00C758  2  68           	pla			;get operation
00C759  2  AA           	tax			;code
00C75A  2               ;;;;;;	jsr	chksop		;do it
00C75A  2  AD B1 CB     gotdir:	lda	dirmod		;and return
00C75D  2  60           exnxdr:	rts			;with number
00C75E  2               ;checksum operation
00C75E  2               ;this routine assumes calling routine has checked for
00C75E  2               ;valid dirnum and hence valid dirrec
00C75E  2               ; input:chkflg,dirrec,x (1=update else check)
00C75E  2               ; returns:none
00C75E  2               ; alters:map@(chkmap)
00C75E  2  2C CE CB     chksop:	bit	chkflg		;check flag
00C761  2  30 FA        	bmi	exnxdr		;done if set
00C763  2  CA           	dex			;dec code
00C764  2  D0 09        	bne	tstchk		;if not zero test
00C766  2  20 78 C5     	jsr	clcchk		;else calculate
00C769  2  20 C0 C7     	jsr	clcckp		;calculate pointer
00C76C  2  91 08        	sta	(chkpnt),y	;and save
00C76E  2  60           	rts			;then return
00C76F  2  20 78 C5     tstchk:	jsr	clcchk		;do calculation
00C772  2  20 C0 C7     	jsr	clcckp		;calculate pointer
00C775  2  D1 08        	cmp	(chkpnt),y	;compare to old
00C777  2  F0 E4        	beq	exnxdr		;if equal ok
00C779  2  4C 6B C5     	jmp	setron		;else set to r/o
00C77C  2               ;get block number
00C77C  2               ; input:nxtrec,blmode,fcb@(addinp),sxb,exm
00C77C  2               ; returns:none
00C77C  2               ; alters:all,blknum
00C77C  2  AE BC CB     getblk:	ldx	sxb		;set x according to blkscd
00C77F  2  AD AD CB     	lda	nxtrec		;get next record
00C782  2  4A           gblp:	lsr	a		;divide by 2 x times
00C783  2  CA           	dex
00C784  2  D0 FC        	bne	gblp
00C786  2  8D A8 CB     	sta	blknum		;save previous as temp
00C789  2               ;use extent as offset but first use sxb to create param
00C789  2  38           	sec
00C78A  2  A9 08        	lda	#8
00C78C  2  ED BC CB     	sbc	sxb
00C78F  2  AA           	tax
00C790  2               ;now get extent from fcb
00C790  2  A0 0C        	ldy	#12
00C792  2  B1 02        	lda	(addinp),y
00C794  2  2D D2 CB     	and	exm		;and with mask
00C797  2  4A           	lsr	a		;shift with lsb to c
00C798  2  2A           gbxlp:	rol	a		;now go other way
00C799  2  CA           	dex
00C79A  2  D0 FC        	bne	gbxlp
00C79C  2  18           	clc			;now add saved value
00C79D  2  6D A8 CB     	adc	blknum		;back
00C7A0  2  2C B8 CB     	bit	blmode		;test mode
00C7A3  2  10 01        	bpl	*+3		;skip if byte
00C7A5  2  0A           	asl	a		;else times two
00C7A6  2  18           	clc			;then add
00C7A7  2  69 10        	adc	#16		;offset into fcb
00C7A9  2  8D 89 CB     	sta	fcbind		;save for later
00C7AC  2  A8           	tay			;set index
00C7AD  2  B1 02        	lda	(addinp),y	;get number
00C7AF  2  8D A8 CB     	sta	blknum		;store
00C7B2  2  C8           	iny
00C7B3  2  A9 00        	lda	#0		;clear
00C7B5  2  2C B8 CB     	bit	blmode		;test mode
00C7B8  2  10 02        	bpl	*+4		;skip if byte
00C7BA  2  B1 02        	lda	(addinp),y	;else get high
00C7BC  2  8D A9 CB     	sta	blknum+1	;high byte
00C7BF  2  60           	rts			;and return
00C7C0  2               ;calculate chkpnt as function of dirrec and chkmap
00C7C0  2               ; input:dirrec,chkmap
00C7C0  2               ; returns:y=0
00C7C0  2               ; alters:y,p,chkpnt
00C7C0  2  48           clcckp:	pha			;save a
00C7C1  2  18           	clc
00C7C2  2  AD AF CB     	lda	dirrec		;add record number
00C7C5  2  6D CF CB     	adc	chkmap		;to start
00C7C8  2  85 08        	sta	chkpnt
00C7CA  2  AD B0 CB     	lda	dirrec+1
00C7CD  2  6D D0 CB     	adc	chkmap+1
00C7D0  2  85 09        	sta	chkpnt+1
00C7D2  2  A0 00        	ldy	#0
00C7D4  2  68           	pla			;get a back
00C7D5  2  60           	rts
00C7D6  2               ;clear directory number to $ffff
00C7D6  2               ; input:none
00C7D6  2               ; returns:a=$ff,n=1,z=0
00C7D6  2               ; alters:a,p,dirnum,dirmod
00C7D6  2  A9 FF        cldrnm:	lda	#$ff		;set to $ff
00C7D8  2  8D A5 CB     	sta	dirnum
00C7DB  2  8D A6 CB     	sta	dirnum+1
00C7DE  2  8D B1 CB     	sta	dirmod
00C7E1  2  60           	rts
00C7E2  2               ;change allocation map
00C7E2  2               ; input:subrec,directory record @ (bufadd)
00C7E2  2               ; returns:none
00C7E2  2               ; alters:all,allocation map
00C7E2  2  18           mapdir:	clc			;add 16 to
00C7E3  2  AD A7 CB     	lda	subrec		;to subrec to point
00C7E6  2  69 10        	adc	#16		;to block number field
00C7E8  2  A8           	tay			;make index
00C7E9  2  8C B6 CB     lpmpdr:	sty	mpdrsy		;save index
00C7EC  2  8A           	txa			;save x
00C7ED  2  48           	pha			;operation
00C7EE  2  B1 04        	lda	(bufadd),y	;get block number
00C7F0  2  8D B7 CB     	sta	mpdrtm		;save in temp
00C7F3  2  C8           	iny			;bump index for word
00C7F4  2  20 76 C8     	jsr	gthibn		;get high part of number
00C7F7  2  0D B7 CB     mpdrnw:	ora	mpdrtm		;see if zero
00C7FA  2  F0 0A        	beq	skpedr		;skip if zero
00C7FC  2  20 76 C8     	jsr	gthibn		;get high again
00C7FF  2  A8           	tay			;move to y
00C800  2  AD B7 CB     	lda	mpdrtm		;get low again
00C803  2  20 55 C5     	jsr	altalc		;else alter map
00C806  2  68           skpedr:	pla			;get operation
00C807  2  AA           	tax			;back
00C808  2  AC B6 CB     	ldy	mpdrsy		;get index back
00C80B  2  C8           	iny			;bump it
00C80C  2  98           	tya			;if still
00C80D  2  29 0F        	and	#%00001111	;in field
00C80F  2  D0 D8        	bne	lpmpdr		;then loop
00C811  2  60           	rts			;else quit
00C812  2               ;test r/w status
00C812  2               ;does warm boot if r/o
00C812  2               ; input:curdrv,ronlst
00C812  2               ; returns:none
00C812  2               ; alters:a,x,p
00C812  2  20 83 C5     tstron:	jsr	chkron		;test bit
00C815  2  F0 1D        	beq	exttro		;exit if r/w
00C817  2  20 64 C8     	jsr	errout		;else send error
00C81A  2  AD E4 CA     	lda	rommvc		;point to r/o
00C81D  2  AC E5 CA     	ldy	rommvc+1	;message
00C820  2  20 C8 C8     	jsr	sndstr		;send it
00C823  2  4C E8 C0     	jmp	xwboot		;then abort
00C826  2               ;set current drive to r/w
00C826  2               ; input:curdrv,ronlst
00C826  2               ; returns:ronlst
00C826  2               ; alters:a,x,p,ronlst
00C826  2  AE A2 CB     setrw:	ldx	curdrv		;get drive
00C829  2  BD 78 CB     	lda	bitmap,x	;and mask
00C82C  2  49 FF        	eor	#$ff		;complement
00C82E  2  2D A4 CB     	and	ronlst		;and with status
00C831  2  8D A4 CB     	sta	ronlst		;save
00C834  2  60           exttro:	rts			;return
00C835  2               ;read sector
00C835  2  20 75 CC     rdesec:	jsr	sim+39		;do read
00C838  2               
00C838  2  4C 47 C8     	jmp	chkrwe		;check for error
00C83B  2               ;update checksum and directory
00C83B  2  A2 01        updtck:	ldx	#1		;set for update
00C83D  2               ;;;;;	jsr	chksop		;do it
00C83D  2  A9 01        	lda	#1		;say is directory op
00C83F  2  D0 03        	bne	secwrt		;do it
00C841  2               ;write sector
00C841  2  AD D1 CB     wrtsec:	lda	pemwrtype		;get write type
00C844  2  20 78 CC     secwrt:	jsr	sim+42		;do write
00C847  2               
00C847  2  C9 00        chkrwe:	cmp	#0		;if not ok
00C849  2  F0 E9        	beq	exttro		;done if zero
00C84B  2               ;read/write error
00C84B  2  20 64 C8     rwerrt:	jsr	errout		;send error message
00C84E  2  AD E7 CA     	lda	bdsmvc		;point to
00C851  2  AC E8 CA     	ldy	bdsmvc+1	;bad sector message
00C854  2  20 C8 C8     	jsr	sndstr		;and send
00C857  2  20 83 C8     	jsr	getcon		;get input
00C85A  2  C9 0D        	cmp	#cr		;if a cr
00C85C  2  F0 03        	beq	ignerr		;then continue
00C85E  2  4C E8 C0     	jmp	xwboot		;else abort
00C861  2  4C 5F CA     ignerr:	jmp	pcrlf		;crlf and return
00C864  2               ;error output routine
00C864  2               ; input:curdrv,pemmvc
00C864  2               ; returns:none
00C864  2               ; alters:all
00C864  2  AD EA CA     errout:	lda	pemmvc		;point to
00C867  2  AC EB CA     	ldy	pemmvc+1	;error message
00C86A  2  20 C8 C8     	jsr	sndstr		;send it
00C86D  2  AD A2 CB     	lda	curdrv		;get drive number
00C870  2  18           	clc			;add
00C871  2  69 41        	adc	#'A'		;ascii a
00C873  2  4C 11 C9     	jmp	sndchr		;and send it
00C876  2               ;get high part of block number if word (zero if byte)
00C876  2               ; input:y=index to high,blmode,directory@(bufadd)+subrec
00C876  2               ; returns:a=high part of block number
00C876  2               ; alters:a,p,mpdrsy iff word
00C876  2  A9 00        gthibn:	lda	#0		;preset for byte
00C878  2  2C B8 CB     	bit	blmode		;test mode
00C87B  2  10 05        	bpl	gthiex		;done if byte
00C87D  2  B1 04        	lda	(bufadd),y	;get high
00C87F  2  8C B6 CB     	sty	mpdrsy		;alter y
00C882  2  60           gthiex:	rts
00C883  2               ;get console input
00C883  2               ; input:pndkey
00C883  2               ; returns:a=character
00C883  2               ; alters:all,pndkey
00C883  2               getcon:
00C883  2  AD 8C CB     	lda	pndkey		;get pending
00C886  2  48           	pha			;save it
00C887  2  A9 00        	lda	#0		;clear
00C889  2  8D 8C CB     	sta	pndkey		;pending
00C88C  2  68           	pla			;restore
00C88D  2  D0 03        	bne	extget		;exit if not null
00C88F  2  20 57 CC     	jsr	sim+9		;else get new
00C892  2               
00C892  2  60           extget:	rts			;and return
00C893  2               ;check keyboard status
00C893  2               ;handles <ctl-s> for freeze and <ctl-c> for boot
00C893  2               ; input:pndkey
00C893  2               ; returns:a=0 if no input or <>0 if input
00C893  2               ; alters:all,pndkey
00C893  2               kbdsts:
00C893  2  AD 8C CB     	lda	pndkey		;get pending
00C896  2  D0 20        	bne	extkbd		;if there quit
00C898  2  20 54 CC     	jsr	sim+6		;else test
00C89B  2  C9 00        	CMP	#$00		;if zero
00C89D  2  F0 19        	beq	extkbd		;exit
00C89F  2  20 57 CC     	jsr	sim+9		;else get input
00C8A2  2  C9 13        	cmp	#ctls		;if not freeze
00C8A4  2  D0 0D        	bne	newpnd		;save input
00C8A6  2  20 57 CC     	jsr	sim+9		;else wait for more
00C8A9  2  C9 03        	cmp	#ctlc		;if not abort
00C8AB  2  D0 03        	bne	nowarm		;then jump
00C8AD  2  4C E8 C0     	jmp	xwboot		;else do warm boot
00C8B0  2  A9 00        nowarm:	lda	#0		;clear
00C8B2  2  60           	rts			;and return
00C8B3  2  8D 8C CB     newpnd:	sta	pndkey		;save
00C8B6  2  A9 FF        	lda	#$ff		;set ready
00C8B8  2               extkbd:
00C8B8  2  60           	rts			;and return
00C8B9  2               ;test character
00C8B9  2               ; input:a=character
00C8B9  2               ; returns:c=0 if control or c=1 if printing
00C8B9  2               ; alters:p
00C8B9  2  C9 0D        tstchr:	cmp	#cr		;if cr
00C8BB  2  F0 0A        	beq	chtext		;quit
00C8BD  2  C9 0A        	cmp	#lf		;if linefeed
00C8BF  2  F0 06        	beq	chtext		;quit
00C8C1  2  C9 09        	cmp	#ctli		;if tab
00C8C3  2  F0 02        	beq	chtext		;quit
00C8C5  2  C9 20        	cmp	#' '		;see if control
00C8C7  2  60           chtext:	rts			;and return
00C8C8  2               ;send string ending in $
00C8C8  2               ; input:ay=string address
00C8C8  2               ; returns:none
00C8C8  2               ; alters:all,index,sndlpe+1 and +2
00C8C8  2  8D D1 C8     sndstr:	sta	sndlpe+1	;set pointer
00C8CB  2  8C D2 C8     	sty	sndlpe+2
00C8CE  2  A0 00        	ldy	#0
00C8D0  2  B9 FF FF     sndlpe:	lda	$ffff,y		;get char
00C8D3  2  C9 24        	cmp	#'$'		;if terminator
00C8D5  2  F0 0C        	beq	sndext		;then exit
00C8D7  2  C8           	iny			;else bump
00C8D8  2  8C B2 CB     	sty	index		;and save
00C8DB  2  20 11 C9     	jsr	sndchr		;send char
00C8DE  2  AC B2 CB     	ldy	index		;get index
00C8E1  2  D0 ED        	bne	sndlpe		;and loop
00C8E3  2  60           sndext:	rts			;return
00C8E4  2               ;send char to printer if enabled
00C8E4  2               ; input:a=character,lstflg
00C8E4  2               ; returns:a=character
00C8E4  2               ; alters:x,y,p
00C8E4  2               lstout:
00C8E4  2  2C 8D CB     	bit	lstflg		;test flag
00C8E7  2  10 0A        	bpl	extlst		;exit if off
00C8E9  2  2C B4 CB     	bit	outflg		;test output flag
00C8EC  2  30 05        	bmi	extlst		;done if set
00C8EE  2  48           	pha			;save char
00C8EF  2  20 5D CC     	jsr	sim+15		;send
00C8F2  2  68           	pla			;get char
00C8F3  2  60           extlst:	rts			;and done
00C8F4  2               ;output a character
00C8F4  2               ; input:a=character,console definition block in sim
00C8F4  2               ; returns:none
00C8F4  2               ; alters:all,positn
00C8F4  2  20 B9 C8     output:	jsr	tstchr		;test it
00C8F7  2  B0 18        	bcs	sndchr		;if not control jump
00C8F9  2  48           	pha			;else save
00C8FA  2  AD 88 CC     	lda	sysdef+4	;get invert
00C8FD  2  20 2A C9     	jsr	nolist		;send to console
00C900  2  A9 5E        	lda	#'^'		;get arrow
00C902  2  20 E4 C8     	jsr	lstout		;send to printer
00C905  2  68           	pla			;get character
00C906  2  09 40        	ora	#'A'-1		;convert to ascii
00C908  2  20 22 C9     	jsr	pchrot		;send to all
00C90B  2  AD 87 CC     	lda	sysdef+3	;get normal
00C90E  2  4C 2A C9     	jmp	nolist		;to console
00C911  2  C9 09        sndchr:	cmp	#ctli		;if not tab
00C913  2  D0 0D        	bne	pchrot		;send
00C915  2  A9 20        tabspc:	lda	#' '		;else get space
00C917  2  20 22 C9     	jsr	pchrot		;send
00C91A  2  AD 8E CB     	lda	positn		;get count
00C91D  2  29 07        	and	#7		;if not mod 8
00C91F  2  D0 F4        	bne	tabspc		;loop
00C921  2  60           	rts			;else exit
00C922  2  48           pchrot:	pha			;save char
00C923  2  20 93 C8     	jsr	kbdsts		;test input
00C926  2  68           	pla			;restore
00C927  2  20 E4 C8     	jsr	lstout		;to printer if on
00C92A  2  48           nolist:	pha			;save again
00C92B  2  2C B4 CB     	bit	outflg		;test flag
00C92E  2  30 03        	bmi	*+5		;done if set
00C930  2  20 5A CC     	jsr	sim+12		;to console
00C933  2  68           	pla			;restore
00C934  2  EE 8E CB     	inc	positn		;bump col
00C937  2  C9 20        	cmp	#' '		;if space or more
00C939  2  B0 26        	bcs	extchr		;is ok
00C93B  2  CD 86 CC     	cmp	sysdef+2	;also ok
00C93E  2  F0 21        	beq	extchr		;if forward
00C940  2  CE 8E CB     	dec	positn		;else drop back
00C943  2  CD 84 CC     	cmp	sysdef+0	;see if bs
00C946  2  D0 06        	bne	tryotr		;branch if not
00C948  2  CE 8E CB     	dec	positn		;else drop again
00C94B  2  30 0F        	bmi	zrocol		;zero if <0
00C94D  2  60           	rts			;else ok
00C94E  2  C9 0D        tryotr:	cmp	#cr		;if a cr
00C950  2  F0 0A        	beq	zrocol		;clear col
00C952  2  CD 8B CC     	cmp	sysdef+7	;if a formfeed
00C955  2  F0 05        	beq	zrocol		;also clear
00C957  2  CD 8C CC     	cmp	sysdef+8	;if not home
00C95A  2  D0 05        	bne	extchr		;then done
00C95C  2  A9 00        zrocol:	lda	#0		;clear
00C95E  2  8D 8E CB     	sta	positn		;column
00C961  2  60           extchr:	rts			;and exit
00C962  2               ;go to left and space past prompt
00C962  2               ; input:frscol,positn
00C962  2               ; returns:none
00C962  2               ; alters:positn
00C962  2  A9 0D        spcovr:	lda	#cr		;get cr
00C964  2  20 22 C9     	jsr	pchrot		;send to all
00C967  2  A9 0A        	lda	#lf		;send lf
00C969  2  20 E4 C8     	jsr	lstout		;only to printer
00C96C  2  AD 8B CB     mreovr:	lda	frscol		;get first
00C96F  2  CD 8E CB     	cmp	positn		;see if there
00C972  2  F0 ED        	beq	extchr		;done if is
00C974  2  AD 86 CC     	lda	sysdef+2	;get forward
00C977  2  20 2A C9     	jsr	nolist		;send it
00C97A  2  4C 6C C9     	jmp	mreovr		;and loop
00C97D  2               ;buffered read
00C97D  2               ; input:buffer@(addinp)
00C97D  2               ; returns:none
00C97D  2               ; alters:all,buffer@(addinp)
00C97D  2  A9 00        bufinp:	lda	#0		;clear
00C97F  2  A0 01        	ldy	#1		;length
00C981  2  91 02        	sta	(addinp),y	;position in buffer
00C983  2  8C 95 CB     	sty	bufpsn		;set point to 1
00C986  2  AD 8E CB     	lda	positn		;get current
00C989  2  8D 8B CB     	sta	frscol		;and save
00C98C  2  20 83 C8     nxtinp:	jsr	getcon		;get input
00C98F  2  AC 95 CB     	ldy	bufpsn		;get index
00C992  2  C9 0D        	cmp	#cr		;if not a cr
00C994  2  D0 03        	bne	notcr		;then jump
00C996  2  4C 5C CA     	jmp	endlin		;else done
00C999  2  C9 08        notcr:	cmp	#delete		;if not delete
00C99B  2  D0 5E        	bne	ntdelt		;then jump
00C99D  2  C0 01        	cpy	#1		;else if start
00C99F  2  F0 EB        	beq	nxtinp		;then loop
00C9A1  2  B1 02        	lda	(addinp),y	;get last
00C9A3  2  48           	pha			;save char
00C9A4  2  A0 01        	ldy	#1		;point to count
00C9A6  2  38           	sec			;set carry
00C9A7  2  B1 02        	lda	(addinp),y	;get count
00C9A9  2  E9 01        	sbc	#1		;decrement
00C9AB  2  91 02        	sta	(addinp),y	;then save
00C9AD  2  68           	pla			;restore char
00C9AE  2  CE 95 CB     	dec	bufpsn		;backup pointer
00C9B1  2  C9 20        	cmp	#' '		;if space or more
00C9B3  2  B0 40        	bcs	nrmbs		;just backspace
00C9B5  2  C9 09        	cmp	#ctli		;see if tab
00C9B7  2  D0 30        	bne	ctlbs		;if not is control
00C9B9  2  38           	sec			;set flag
00C9BA  2  6E B4 CB     	ror	outflg
00C9BD  2  AD 8E CB     	lda	positn		;get position and save
00C9C0  2  8D B5 CB     	sta	lstcol
00C9C3  2  20 62 C9     	jsr	spcovr		;else go back
00C9C6  2  20 69 CA     	jsr	rptlne		;and retype
00C9C9  2  AD 8E CB     	lda	positn		;get new last position
00C9CC  2  48           	pha			;save on stack
00C9CD  2  38           	sec			;subtract to get delta
00C9CE  2  AD B5 CB     	lda	lstcol
00C9D1  2  ED 8E CB     	sbc	positn
00C9D4  2  8D B5 CB     	sta	lstcol		;and save
00C9D7  2  0E B4 CB     	asl	outflg		;clear flag
00C9DA  2  20 89 CA     bstab:	jsr	dobs		;do one
00C9DD  2  CE B5 CB     	dec	lstcol		;drop count
00C9E0  2  D0 F8        	bne	bstab		;loop if more
00C9E2  2  68           	pla			;get position
00C9E3  2  8D 8E CB     	sta	positn		;and set
00C9E6  2  4C 8C C9     	jmp	nxtinp		;then loop
00C9E9  2  AD 87 CC     ctlbs:	lda	sysdef+3	;get normal
00C9EC  2  20 85 CA     	jsr	chkbs		;bs if printing
00C9EF  2  AD 88 CC     	lda	sysdef+4	;same for invert
00C9F2  2  20 85 CA     	jsr	chkbs		;then delete char itself
00C9F5  2  20 89 CA     nrmbs:	jsr	dobs		;do a backspace
00C9F8  2  4C 8C C9     	jmp	nxtinp		;and loop
00C9FB  2  C9 10        ntdelt:	cmp	#ctlp		;if not ctl-p
00C9FD  2  D0 0B        	bne	ntctlp		;then jump
00C9FF  2  AD 8D CB     	lda	lstflg		;else get printer flag
00CA02  2  49 FF        	eor	#$ff		;complement
00CA04  2  8D 8D CB     	sta	lstflg		;save
00CA07  2  4C 8C C9     	jmp	nxtinp		;and loop
00CA0A  2  C9 18        ntctlp:	cmp	#ctlx		;if not ctl-x
00CA0C  2  D0 0C        	bne	ntctlx		;then jump
00CA0E  2  20 62 C9     	jsr	spcovr		;restart
00CA11  2  AD 85 CC     	lda	sysdef+1	;get clear to eol
00CA14  2  20 2A C9     	jsr	nolist		;send it
00CA17  2  4C 7D C9     	jmp	bufinp		;and start over
00CA1A  2  C9 12        ntctlx:	cmp	#ctlr		;if not ctl-r
00CA1C  2  D0 09        	bne	ntctlr		;then jump
00CA1E  2  20 62 C9     	jsr	spcovr		;restart
00CA21  2  20 69 CA     	jsr	rptlne		;retype line
00CA24  2  4C 8C C9     	jmp	nxtinp		;and start over
00CA27  2  C8           ntctlr:	iny			;next position
00CA28  2  91 02        	sta	(addinp),y	;store char
00CA2A  2  48           	pha			;and save
00CA2B  2  8C 95 CB     	sty	bufpsn		;index
00CA2E  2  A0 01        	ldy	#1		;point to count
00CA30  2  98           	tya			;set a to 1
00CA31  2  18           	clc			;then
00CA32  2  71 02        	adc	(addinp),y	;add count
00CA34  2  91 02        	sta	(addinp),y	;and save
00CA36  2  68           	pla			;restore char
00CA37  2  20 F4 C8     dontsv:	jsr	output		;send char
00CA3A  2  AC 95 CB     	ldy	bufpsn		;get index
00CA3D  2  B1 02        	lda	(addinp),y	;get char
00CA3F  2  C9 03        	cmp	#ctlc		;if not ctl-c
00CA41  2  D0 0B        	bne	ignrcc		;ignore
00CA43  2  A0 01        	ldy	#1		;get count
00CA45  2  B1 02        	lda	(addinp),y	;from buffer
00CA47  2  C9 01        	cmp	#1		;if not at start
00CA49  2  D0 03        	bne	ignrcc		;ignore
00CA4B  2  4C E8 C0     	jmp	xwboot		;else do warm boot
00CA4E  2  A0 01        ignrcc:	ldy	#1		;get
00CA50  2  B1 02        	lda	(addinp),y	;count
00CA52  2  88           	dey			;point to max
00CA53  2  D1 02        	cmp	(addinp),y	;if length
00CA55  2  B0 03        	bcs	lineen		;at max jump
00CA57  2  4C 8C C9     	jmp	nxtinp		;else loop
00CA5A  2  A9 0D        lineen:	lda	#cr		;get a cr
00CA5C  2  4C 22 C9     endlin:	jmp	pchrot		;and send
00CA5F  2               ;cr and lf
00CA5F  2  A9 0D        pcrlf:	lda	#cr		;then a
00CA61  2  20 22 C9     	jsr	pchrot		;cr
00CA64  2  A9 0A        	lda	#lf		;and a
00CA66  2  4C 22 C9     	jmp	pchrot		;lf
00CA69  2               ;retype line
00CA69  2  AD 95 CB     rptlne:	lda	bufpsn		;save point
00CA6C  2  8D B3 CB     	sta	numcnt		;as count
00CA6F  2  A9 01        	lda	#1		;start position
00CA71  2  48           	pha			;save
00CA72  2  68           mrerpt:	pla			;get position
00CA73  2  CE B3 CB     	dec	numcnt		;count down
00CA76  2  D0 01        	bne	*+3		;continue if more
00CA78  2  60           	rts			;else done
00CA79  2  A8           	tay			;else make index
00CA7A  2  C8           	iny			;and bump
00CA7B  2  98           	tya			;save
00CA7C  2  48           	pha			;on stack
00CA7D  2  B1 02        	lda	(addinp),y	;get char
00CA7F  2  20 F4 C8     	jsr	output		;send
00CA82  2  4C 72 CA     	jmp	mrerpt		;and loop
00CA85  2               ;check for printing and backspace if needed
00CA85  2  C9 20        chkbs:	cmp	#' '		;compare to space
00CA87  2  90 19        	bcc	extdec		;not printing so done
00CA89  2               ;do a backspace
00CA89  2  AD 84 CC     dobs:	lda	sysdef+0	;get backspace
00CA8C  2  48           	pha			;save it
00CA8D  2  20 2A C9     	jsr	nolist		;send
00CA90  2  A9 20        	lda	#' '		;get space
00CA92  2  20 2A C9     	jsr	nolist		;send
00CA95  2  68           	pla			;get backspace
00CA96  2  4C 2A C9     	jmp	nolist		;send it
00CA99  2               ;test for decimal digit
00CA99  2               ;if decimal then c=0 else c=1
00CA99  2  C9 30        tstdec:	cmp	#'0'		;if under 0
00CA9B  2  90 04        	bcc	notdec		;then not decimal
00CA9D  2  C9 3A        	cmp	#'9'+1		;if 9 or under is ok
00CA9F  2  90 01        	bcc	extdec
00CAA1  2  38           notdec:	sec			;else not a match
00CAA2  2  60           extdec:	rts
00CAA3  2               ;test for hexadecimal digit
00CAA3  2               ;if hex then c=0 else c=1
00CAA3  2  20 99 CA     tsthex:	jsr	tstdec		;first try decimal
00CAA6  2  90 FA        	bcc	extdec		;ok if dec
00CAA8  2  C9 41        	cmp	#'A'		;if under A
00CAAA  2  90 F5        	bcc	notdec		;then not hex
00CAAC  2  C9 47        	cmp	#'F'+1		;set c in F compare
00CAAE  2  60           	rts
00CAAF  2               ;bump load address by 128 and return in ay
00CAAF  2  AD F1 BF     adjdb:	lda	dskbuf		;get old
00CAB2  2  AC F2 BF     	ldy	dskbuf+1	;address
00CAB5  2  18           	clc			;and bump
00CAB6  2  69 80        	adc	#128		;by 128
00CAB8  2  8D F1 BF     	sta	dskbuf		;save low
00CABB  2  90 04        	bcc	*+6		;then bump
00CABD  2  C8           	iny			;and save
00CABE  2  8C F2 BF     	sty	dskbuf+1	;high as needed
00CAC1  2  60           	rts
00CAC2  2               ;move record from disk buffer to default buffer
00CAC2  2  AD F1 BF     mv128:	lda	dskbuf		;get address
00CAC5  2  AC F2 BF     	ldy	dskbuf+1
00CAC8  2  8D D1 CA     	sta	mvfrom+1	;and set pointer
00CACB  2  8C D2 CA     	sty	mvfrom+2
00CACE  2  A2 00        	ldx	#0		;clear index
00CAD0  2  BD FF FF     mvfrom:	lda	$ffff,x		;get byte
00CAD3  2  9D 28 01     	sta	dflbuf,x	;move it
00CAD6  2  E8           	inx
00CAD7  2  10 F7        	bpl	mvfrom		;loop until done
00CAD9  2  60           	rts
00CADA  2               
00CADA  2               ;relocatable vectors
00CADA  2  4C           	.byte	$4c
00CADB  2  47 C0        extevc:	.word	extexq-1
00CADD  2  4C           	.byte	$4c
00CADE  2  3A CB        sltmvc:	.word	sltmsg
00CAE0  2  4C           	.byte	$4c
00CAE1  2  4B CB        empdvc:	.word	empty
00CAE3  2  4C           	.byte	$4c
00CAE4  2  F0 CA        rommvc:	.word	romsg
00CAE6  2  4C           	.byte	$4c
00CAE7  2  F7 CA        bdsmvc:	.word	bdsmsg
00CAE9  2  4C           	.byte	$4c
00CAEA  2  2A CB        pemmvc:	.word	pemmsg
00CAEC  2  4C           	.byte	$4c
00CAED  2  C3 CB        dcbevc:	.word	dcb
00CAEF  2               ;relocation stopper
00CAEF  2  FF           	.byte	$ff
00CAF0  2               ;messages
00CAF0  2  20 2D 20 52  romsg:	.byte	" - R/O$"
00CAF4  2  2F 4F 24     
00CAF7  2  20 2D 20 42  bdsmsg:	.byte	" - BAD SECTOR"
00CAFB  2  41 44 20 53  
00CAFF  2  45 43 54 4F  
00CB04  2  0D 0A 3C 52  	.byte	cr,lf,"<RET> TO IGNORE -- <OTHER> "
00CB08  2  45 54 3E 20  
00CB0C  2  54 4F 20 49  
00CB21  2  54 4F 20 41  	.byte	"TO ABORT$"
00CB25  2  42 4F 52 54  
00CB29  2  24           
00CB2A  2  0D 0A 50 45  pemmsg:	.byte	cr,lf,"PEM ERROR ON $"
00CB2E  2  4D 20 45 52  
00CB32  2  52 4F 52 20  
00CB3A  2  20 2D 20 49  sltmsg:	.byte	" - INVALID DRIVE$"
00CB3E  2  4E 56 41 4C  
00CB42  2  49 44 20 44  
00CB4B  2               
00CB4B  2               ;dummy fcb
00CB4B  2  E5           empty:	.byte	$e5
00CB4C  2               ;zero page switch enable table
00CB4C  2  00 00 00 00  swctbl:	.byte	0,0,0,0,0,0,0,0
00CB50  2  00 00 00 00  
00CB54  2  00 00 01 00  	.byte	0,0,1,0,0,1,1,1
00CB58  2  00 01 01 01  
00CB5C  2  01 01 01 01  	.byte	1,1,1,1,1,1,1,1
00CB60  2  01 01 01 01  
00CB64  2  00 00 01 00  	.byte	0,0,1,0,0,0,0,0
00CB68  2  00 00 00 00  
00CB6C  2  00 00 00 00  	.byte	0,0,0,0
00CB70  2               ;bit mask table
00CB70  2  80 40 20 10  bitmsk:	.byte	128,64,32,16,8,4,2,1
00CB74  2  08 04 02 01  
00CB78  2               ;bit map table
00CB78  2  01 02 04 08  bitmap:	.byte	1,2,4,8,16,32,64,128
00CB7C  2  10 20 40 80  
00CB80  2               ;extent mask table (also uses 3 bytes in sabtbl
00CB80  2  00 01 03     exmtbl:	.byte	0,1,3
00CB83  2               ;sab table
00CB83  2  07 0F 1F 3F  sabtbl:	.byte	7,15,31,63,127
00CB87  2  7F           
00CB88  2               ;variable storage
00CB88  2  00           skpdir:	.byte	0		;positive if no change
00CB89  2  00           fcbind:	.byte	0		;index to block number
00CB8A  2  00           savext:	.byte	0		;save extent
00CB8B  2  00           frscol:	.byte	0		;first col
00CB8C  2  00           pndkey:	.byte	0		;pending input
00CB8D  2  00           lstflg:	.byte	0		;printer flag
00CB8E  2  00           positn:	.byte	0		;print position
00CB8F  2  00           swcflg:	.byte	0		;zero page switch flag
00CB90  2  00 00        bytinp:	.word	0		;input value
00CB92  2  00           cmdinp:	.byte	0		;input command
00CB93  2  00 00        addout:	.word	0		;output address
00CB95  2               bytout	=	addout		;output value
00CB95  2  00           bufpsn:	.byte	0		;input buffer position
00CB96  2  00           exrwfl:	.byte	0		;extend flag
00CB97  2  00           tmpdrv:	.byte	0		;temporary drive number
00CB98  2               ;align xqtvec on word boundary
00CB98  2               	.align 2
00CB98  2  00 00        xqtvec:	.word	0		;command vector
00CB9A  2  00 00        countr:	.word	0		;record counter
00CB9C  2  00           	.byte	0		;overflow
00CB9D  2  00 00        lkdown:	.word	0		;down pnt. for block search
00CB9F  2  00 00        lookup:	.word	0		;up pnt. for block search
00CBA1  2  00           olddrv:	.byte	0		;old drive number
00CBA2  2  00           curdrv:	.byte	0		;current drive
00CBA3  2  00           lginvc:	.byte	0		;log in status
00CBA4  2  00           ronlst:	.byte	0		;read write status
00CBA5  2  00 00        dirnum:	.word	0		;directory number
00CBA7  2  00           subrec:	.byte	0		;directory offset
00CBA8  2  00 00        recnum:	.word	0		;record number
00CBAA  2               blknum	=	recnum		;block number
00CBAA  2  00           	.byte	0		;overflow
00CBAB  2  00           chrcnt:	.byte	0		;character count
00CBAC  2  00           cmppnt:	.byte	0		;comparison pointer
00CBAD  2  00           nxtrec:	.byte	0		;next record
00CBAE  2  00           numrec:	.byte	0		;number records
00CBAF  2  00 00        dirrec:	.word	0		;directory record
00CBB1  2  00           dirmod:	.byte	0		;directory mod 4
00CBB2  2  00           index:	.byte	0		;buffer index
00CBB3  2  00           numcnt:	.byte	0		;counter
00CBB4  2  00           outflg:	.byte	0		;output enable flag
00CBB5  2  00           lstcol:	.byte	0		;last column
00CBB6  2  00           mpdrsy:	.byte	0		;save for y in mapdir
00CBB7  2  00           mpdrtm:	.byte	0		;temp in mapdir
00CBB8  2  00           blmode:	.byte	0		;<128 if byte else word
00CBB9  2  00 00        maxdrc:	.word	0		;max directory record
00CBBB  2  00           sab:	.byte	0		;mask for block
00CBBC  2  00           sxb:	.byte	0		;shift for block
00CBBD  2  00 00 00     rtclk:	.byte	0,0,0		;real time clock
00CBC0  2  00 00        gpcnt:	.word	0		;gp counter
00CBC2  2  00           trkctr:	.byte	0		;track counter
00CBC3  2               ;following region is used to capture dcb
00CBC3  2               dcb:
00CBC3  2  00 00        maxblk:	.word	0		;maximum block number
00CBC5  2  00 00        sectrk:	.word	0		;sectors per track
00CBC7  2  00 00        nsystr:	.word	0		;number system tracks
00CBC9  2  00           blkscd:	.byte	0		;block size code
00CBCA  2  00 00        maxdir:	.word	0		;maximum directory number
00CBCC  2  00 00        alcmap:	.word	0		;address of allocation map
00CBCE  2  00           chkflg:	.byte	0		;check flag
00CBCF  2  00 00        chkmap:	.word	0		;address of checksum map
00CBD1  2  00           pemwrtype:	.byte	0		;write type 0=norm,1=dir,2=unalloc
00CBD2  2  00           exm:	.byte	0		;extent mask
00CBD3  2  00           cexm1f:	.byte	0		;exm complemented and 1f
00CBD4  2               ;zero page save block
00CBD4  2               varblk:
00CBD4  2  00 00        lowin:	.word	0
00CBD6  2  00 00        	.word	0		;save bufadd
00CBD8  2  00 00        	.word	0		;save alcpnt
00CBDA  2  00 00        	.word	0		;save chkpnt
00CBDC  2               
00CBDC  1               		.include "simnhy.asm"
00CBDC  2               ;________________________________________________________________________________________________________________________________
00CBDC  2               ;
00CBDC  2               ;	Nhyodyne dos/65 system interface module (sim)
00CBDC  2               ;
00CBDC  2               ;  DWERNER 12/20/2021 	ported to Nhyodyne
00CBDC  2               ;________________________________________________________________________________________________________________________________
00CBDC  2               
00CBDC  2               		.include "macro.asm"
00CBDC  3               ;__MACRO___________________________________________________________________________________________________________________
00CBDC  3               ;
00CBDC  3               ; 	Macros for the betterment of Mankind
00CBDC  3               ;________________________________________________________________________________________________________________________________
00CBDC  3               ;
00CBDC  3               
00CBDC  3               .macro          PRTDBG      message
00CBDC  3               .LOCAL p1
00CBDC  3               .LOCAL p2
00CBDC  3               .LOCAL p3
00CBDC  3               .LOCAL p4
00CBDC  3               .LOCAL p5
00CBDC  3                 .if     .paramcount <> 1
00CBDC  3                       .error  "Too few parameters for macro PRTDBG"
00CBDC  3                       .endif
00CBDC  3                       .if DEBUG=1
00CBDC  3                       PHA
00CBDC  3                       PHX
00CBDC  3                       PHY
00CBDC  3                       LDX #$00
00CBDC  3               p1:
00CBDC  3                       LDA p4,x
00CBDC  3                       INX
00CBDC  3                       CMP #'$'
00CBDC  3                       BEQ p2
00CBDC  3                       JSR conwrt
00CBDC  3                       JMP p1
00CBDC  3               p2:
00CBDC  3                       LDA #13
00CBDC  3                       jsr conwrt
00CBDC  3                       LDA #10
00CBDC  3                       jsr conwrt
00CBDC  3                       PLY
00CBDC  3                       plx
00CBDC  3                       pla
00CBDC  3                       JMP p5
00CBDC  3               p4:
00CBDC  3                       .BYTE message
00CBDC  3               p5:
00CBDC  3                       .endif
00CBDC  3               .endmacro
00CBDC  3               
00CBDC  3               .macro          PRTS      message
00CBDC  3               .LOCAL p1
00CBDC  3               .LOCAL p2
00CBDC  3               .LOCAL p3
00CBDC  3               .LOCAL p4
00CBDC  3               .LOCAL p5
00CBDC  3                 .if     .paramcount <> 1
00CBDC  3                       .error  "Too few parameters for macro PRTS"
00CBDC  3                       .endif
00CBDC  3                       PHA
00CBDC  3                       PHX
00CBDC  3                       PHY
00CBDC  3                       LDX #$00
00CBDC  3               p1:
00CBDC  3                       LDA p4,x
00CBDC  3                       INX
00CBDC  3                       CMP #'$'
00CBDC  3                       BEQ p2
00CBDC  3                       JSR conwrt
00CBDC  3                       JMP p1
00CBDC  3               p2:
00CBDC  3                       PLY
00CBDC  3                       plx
00CBDC  3                       pla
00CBDC  3                       JMP p5
00CBDC  3               p4:
00CBDC  3                       .BYTE message
00CBDC  3               p5:
00CBDC  3               .endmacro
00CBDC  3               
00CBDC  3               
00CBDC  3               
00CBDC  3               
00CBDC  3               ;__PRTHEXBYTE__________________________________________________
00CBDC  3               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
00CBDC  3               ;______________________________________________________________
00CBDC  3               PRTHEXBYTE:
00CBDC  3  48                   PHA
00CBDD  3  DA                   PHX
00CBDE  3  5A                   PHY
00CBDF  3  AA                   TAX				; SAVE A REGISTER
00CBE0  3  4A                   LSR 				; SHIFT HIGH NIBBLE TO LOW NIBBLE
00CBE1  3  4A                   LSR 				;
00CBE2  3  4A                   LSR 				;
00CBE3  3  4A                   LSR 				;
00CBE4  3  18                   CLC               		; CLEAR CARRY
00CBE5  3  20 F0 CB             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
00CBE8  3  8A                   TXA				; RESTORE ACCUMULATOR
00CBE9  3  20 F0 CB             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
00CBEC  3  7A                   PLY
00CBED  3  FA                   plx
00CBEE  3  68                   PLA
00CBEF  3  60                   RTS
00CBF0  3               
00CBF0  3               ;__PRINT_DIGIT_________________________________________________
00CBF0  3               ;
00CBF0  3               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
00CBF0  3               ;
00CBF0  3               ;______________________________________________________________
00CBF0  3               PRINT_DIGIT:
00CBF0  3  29 0F                       AND #$0F				; STRIP OFF HIGH NIBBLE
00CBF2  3  09 30                       ORA #$30				; ADD $30 TO PRODUCE ASCII
00CBF4  3  C9 3A                       CMP #$3A               		; IS GREATER THAN 9
00CBF6  3  30 03                       BMI PRINT_DIGIT_OUT		; NO, SKIP ADD
00CBF8  3  18                          CLC				; CLEAR CARRY
00CBF9  3  69 07                       ADC #$07				; ADD ON FOR LETTER VALUES
00CBFB  3               PRINT_DIGIT_OUT:					;
00CBFB  3  4C AB CE                    JMP conwrt              		; PRINT OUT CHAR
00CBFE  3               
00CBFE  3               NEWLINE:
00CBFE  3  48                           pha
00CBFF  3  DA                           PHX
00CC00  3  5A                           phy
00CC01  3  A9 0D                        LDA #$0D
00CC03  3  20 AB CE                     JSR conwrt
00CC06  3  A9 0A                        LDA #$0A
00CC08  3  20 AB CE                     Jsr conwrt
00CC0B  3  7A                           ply
00CC0C  3  FA                           plx
00CC0D  3  68                           pla
00CC0E  3  60                           rts
00CC0F  3               
00CC0F  3               PRTDEC:
00CC0F  3  5A                           phy
00CC10  3  DA                           PHX
00CC11  3  48                           PHA
00CC12  3  A0 00                        ldy #00
00CC14  3  A2 FF                        LDX #$FF
00CC16  3  38                           SEC
00CC17  3               PrDec100:
00CC17  3  E8                           INX
00CC18  3  E9 64                        SBC #100
00CC1A  3  B0 FB                        BCS PrDec100            ;Count how many 100s
00CC1C  3  69 64                        ADC #100
00CC1E  3  20 38 CC                     JSR PrDecDigit          ;Print the 100s
00CC21  3  A2 FF                        LDX #$FF
00CC23  3  38                           SEC                     ;Prepare for subtraction
00CC24  3               PrDec10:
00CC24  3  E8                           INX
00CC25  3  E9 0A                        SBC #10
00CC27  3  B0 FB                        BCS PrDec10             ;Count how many 10s
00CC29  3  69 0A                        ADC #10
00CC2B  3  20 38 CC                     JSR PrDecDigit          ;Print the 10s
00CC2E  3  AA                           TAX                     ;Pass 1s into X
00CC2F  3  A0 01                        ldy #1
00CC31  3  20 38 CC                     JSR PrDecDigit          ;Print the 1s
00CC34  3  68                           PLA
00CC35  3  FA                           PLX
00CC36  3  7A                           ply
00CC37  3  60                           RTS
00CC38  3               PrDecDigit:
00CC38  3  48                           PHA
00CC39  3  C0 00                        cpy #$00
00CC3B  3  D0 09                        bne PrDecDigit1
00CC3D  3  8A                           txa
00CC3E  3  A8                           tay
00CC3F  3  C0 00                        cpy #$00
00CC41  3  D0 03                        bne PrDecDigit1
00CC43  3  4C 4C CC                     jmp PrDecDigit2
00CC46  3               PrDecDigit1:
00CC46  3  8A                           TXA                     ;Save A, pass digit to A
00CC47  3  09 30                        ORA #'0'
00CC49  3  20 AB CE                     JSR  conwrt             ;Convert to character and print it
00CC4C  3               PrDecDigit2:
00CC4C  3  68                           PLA
00CC4D  3  60                           RTS                     ;Restore A and return
00CC4E  3               
00CC4E  2               
00CC4E  2               USESERIAL 	= 	1	; SET TO ONE SERIAL CONSOLE IO
00CC4E  2               USEFLOPPYA 	= 	0	; SET TO ONE FOR FLOPPY = "A"
00CC4E  2               USEFLOPPYB 	= 	0	; SET TO ONE FOR FLOPPY = "B"
00CC4E  2               USEIDEC 	= 	1	; SET TO ONE FOR IDE HDD="C"
00CC4E  2               USEDSKY 	= 	0	; SEND INFO TO DSKY
00CC4E  2               USEDSKYNG 	= 	1	; SEND INFO TO DSKYNG
00CC4E  2               DSKY_KBD	=	1	; USE DSKY KEYBOARD?
00CC4E  2               DEFDRV  	=	2	; SET TO DEFAULT DRIVE LETTER
00CC4E  2               USEDISKIOV1     = 	0	; Floppy and IDE card is  DISK IO V1
00CC4E  2               USEDISKIOV3     = 	0	; Floppy and IDE card is  DISK IO V3
00CC4E  2               
00CC4E  2               FLPA35		=	0	; set to 1 if floppy a is A 3.5" 80 track drive (0= 5.25" 40 track drive)
00CC4E  2               FLPB35		=	0	; set to 1 if floppy a is B 3.5" 80 track drive (0= 5.25" 40 track drive)
00CC4E  2               
00CC4E  2               DSKYOSC         =	100000
00CC4E  2               
00CC4E  2               ;dos/65 system interface module (sim)
00CC4E  2               ;version 3.00
00CC4E  2               ;this version is designed to work with the N8VEM Host Processor
00CC4E  2               
00CC4E  2               ;fixed parameters
00CC4E  2               simstart:
00CC4E  2               
00CC4E  2               ;my system i/o routines in rom
00CC4E  2               
00CC4E  2               ;pem constants on entry to write
00CC4E  2               wrall	=	0		;write to allocated
00CC4E  2               wrdir	=	1		;write to directory
00CC4E  2               wrual	=	2		;write to unallocated
00CC4E  2               ;page zero and system ram assignments
00CC4E  2               dmaadr	=	$f4		;pointer for r/w
00CC4E  2               mvepnt	=	$f2		;host buffer location
00CC4E  2               OUTMSG_W =	$F0		;pointer for OutMsg
00CC4E  2               SRC	 =	$EE		;pointer for OutMsg
00CC4E  2               DEST	 =	$EC		;pointer for OutMsg
00CC4E  2               
00CC4E  2               nsects	=	(simstart-ccm)/128	;number sectors
00CC4E  2               
00CC4E  2               ;main program
00CC4E  2               ;jump vector used by pem
00CC4E  2  4C A6 CD     sim:	jmp	boot		;from cold start
00CC51  2  4C 18 CE     wboote:	jmp	wboot		;from warm boot
00CC54  2  4C A5 CE     	jmp	consts		;check for input
00CC57  2  4C A8 CE     	jmp	conrde		;get input
00CC5A  2  4C AB CE     	jmp	conwrt		;send to terminal
00CC5D  2  4C AE CE     	jmp	prnwrt		;printer output
00CC60  2  4C AF CE     	jmp	punwrt		;punch output
00CC63  2  4C B0 CE     	jmp	rdrinp		;reader input
00CC66  2  4C 50 CE     	jmp	home		;home drive
00CC69  2  4C 1F CE     	jmp	seldsk		;select disk
00CC6C  2  4C 54 CE     	jmp	seltrk		;set track
00CC6F  2  4C 5C CE     	jmp	selsec		;set sector
00CC72  2  4C A0 CE     	jmp	setdma		;set buffer address
00CC75  2  4C 63 CE     	jmp	read		;read sector
00CC78  2  4C 81 CE     	jmp	write		;write sector
00CC7B  2  A9 01        	lda	#1		;printer always ready
00CC7D  2  60           	rts
00CC7E  2  4C B1 CE     	jmp	rdtime		;clock entry
00CC81  2  4C B2 CE     	jmp	xlate		;translate
00CC84  2               
00CC84  2               ;console definition block
00CC84  2               sysdef:
00CC84  2  08           	.byte	8		;backspace
00CC85  2  01           	.byte	1		;clear to end of line
00CC86  2  0C           	.byte	$c		;forward space
00CC87  2  00           	.byte	0		;normal video
00CC88  2  5E           	.byte	'^'		;invert video
00CC89  2  18           	.byte	24		;lines per screen
00CC8A  2  50           	.byte	80		;char per line
00CC8B  2  0C           	.byte	$c		;formfeed
00CC8C  2  1E           	.byte	$1e		;home
00CC8D  2  02           	.byte	2		;clear to end of screen
00CC8E  2               
00CC8E  2               ;opening id message
00CC8E  2  0D 0A        opnmsg:	.byte	cr,lf
00CC90  2               
00CC90  2  64 38 38 38      	.BYTE "d8888b.  .d88b.  .d8888.    dD     ooooo",cr,lf
00CC94  2  38 62 2E 20  
00CC98  2  20 2E 64 38  
00CCBA  2  38 38 20 20      	.BYTE "88  `8D .8P  Y8. 88   YP   d8     8P~~~~",cr,lf
00CCBE  2  60 38 44 20  
00CCC2  2  2E 38 50 20  
00CCE4  2  38 38 20 20      	.BYTE "88   88 88    88 `8bo.    d8     dP",cr,lf
00CCE8  2  20 38 38 20  
00CCEC  2  38 38 20 20  
00CD09  2  38 38 20 20      	.BYTE "88   88 88    88   `Y8b. d8888b. V8888b.",cr,lf,0
00CD0D  2  20 38 38 20  
00CD11  2  38 38 20 20  
00CD34  2               opnmsg1:
00CD34  2  38 38 20 20      	.BYTE "88  .8D `8b  d8' db   8D 88  `8D     `8D",cr,lf
00CD38  2  2E 38 44 20  
00CD3C  2  60 38 62 20  
00CD5E  2  59 38 38 38      	.BYTE "Y8888D   `Y88P   `8888Y  `8888P  88oobY",cr,lf
00CD62  2  38 44 20 20  
00CD66  2  20 60 59 38  
00CD87  2  11 44 4F 53  	.byte 17,"DOS/65 ON THE NHYODYNE 3.00",cr,lf,0
00CD8B  2  2F 36 35 20  
00CD8F  2  4F 4E 20 54  
00CDA6  2               
00CDA6  2               
00CDA6  2               ;cold entry from loader
00CDA6  2               boot:
00CDA6  2  A2 FF        	ldx	#$ff		;set stack
00CDA8  2  9A           	txs			;pointer
00CDA9  2  D8           	cld			;set binary mode
00CDAA  2               
00CDAA  2               	PRTDBG "OS Starting$"
00CDAA  2               
00CDAA  2  A9 8E         	lda	#<opnmsg	;point to message
00CDAC  2  A0 CC        	ldy	#>opnmsg
00CDAE  2  20 B3 CE     	jsr	outmsg		;send it
00CDB1  2  A9 34         	lda	#<opnmsg1
00CDB3  2  A0 CD        	ldy	#>opnmsg1
00CDB5  2  20 B3 CE     	jsr	outmsg		;send it
00CDB8  2               
00CDB8  2  20 FE CB     	JSR 	NEWLINE
00CDBB  2                 .IF USEFLOPPYA=1
00CDBB  2               ;  	PRTDBG "Init floppy A$"
00CDBB  2               ;  	lda	#0			;set zero
00CDBB  2               ;	jsr	seldsk		;and select drive zero
00CDBB  2               ;	JSR	SETUPDRIVE
00CDBB  2                 .ENDIF
00CDBB  2               
00CDBB  2  20 61 D8     	JSR	MD_INIT
00CDBE  2               
00CDBE  2                   .IF USEIDEC=1
00CDBE  2  20 A5 D0         	JSR	PPIDE_INIT
00CDC1  2                 .ENDIF
00CDC1  2               
00CDC1  2                 .IF USEDSKY=1
00CDC1  2                	PRTDBG "Init DSKY$"
00CDC1  2                 	JSR	DSKYINIT
00CDC1  2                 	JSR	SEGDISPLAY
00CDC1  2                 .ENDIF
00CDC1  2               
00CDC1  2                  .IF USEDSKYNG=1
00CDC1  2  20 0A D5       	JSR	DSKY_INIT
00CDC4  2  20 69 D7       	JSR	DSKY_PUTLED
00CDC7  2  54 6E 5C 5E  	.BYTE 	$54,$6E,$5C,$5E,$6E,$54,$79,$40
00CDCB  2  6E 54 79 40  
00CDCF  2  20 A5 D7     	JSR 	DSKY_BEEP
00CDD2  2                 .ENDIF
00CDD2  2               
00CDD2  2               
00CDD2  2  A9 42        	LDA 	#<cnstxt	; STORE POINTER TO COMMAND LINE
00CDD4  2  85 30        	STA 	cmdlnp
00CDD6  2  A9 BF        	LDA 	#>cnstxt
00CDD8  2  85 31        	STA 	cmdlnp+1
00CDDA  2               
00CDDA  2               
00CDDA  2               
00CDDA  2  A9 40        	LDA 	#<dskcfg	; STORE POINTER TO DISK CONFIG TABLE FOR APPS
00CDDC  2  85 2E        	STA 	dskcfpc
00CDDE  2  A9 CE        	LDA 	#>dskcfg
00CDE0  2  85 2F        	STA 	dskcfpc+1
00CDE2  2  20 2D CF     	JSR 	DSPL_DSK_CFG	; DISPLAY DISK CONFIG TO USERS
00CDE5  2               
00CDE5  2               
00CDE5  2               				;set up jumps into dos/65 in page one
00CDE5  2               setup:
00CDE5  2  20 A5 D8     	JSR	MD_REINIT
00CDE8  2  A2 00        	ldx	#0		;clear index
00CDEA  2               				;first clear key dba variables
00CDEA  2  8E 74 DA     	stx	hstact		;host buffer inactive
00CDED  2  8E 75 DA     	stx	unacnt		;clear unalloc count
00CDF0  2  BD 12 CE     setupl:	lda	inttbl,x	;get byte
00CDF3  2  9D 00 01     	sta	$100,x		;insert at start
00CDF6  2  E8           	inx
00CDF7  2  E0 06        	cpx	#6
00CDF9  2  D0 F5        	bne	setupl		;loop until done
00CDFB  2  A9 28        	lda	#<dflbuf	;get low buffer
00CDFD  2  A0 01        	ldy	#>dflbuf	;and high
00CDFF  2  20 A0 CE     	jsr	setdma		;and set
00CE02  2  AD 6E DA     	lda	sekdsk		;get disk
00CE05  2               
00CE05  2  A9 02        	lda	#DEFDRV		;set zero
00CE07  2  20 1F CE     	jsr	seldsk		;and select drive zero
00CE0A  2  20 50 CE     	jsr	home		;home that drive
00CE0D  2               
00CE0D  2               	PRTDBG "Start CCM$"
00CE0D  2  A9 02        	lda	#DEFDRV		;set zero
00CE0F  2  4C 03 B8     	jmp	ccm		;and go to ccm
00CE12  2               ;initialization table
00CE12  2  4C 51 CC 4C  inttbl:	.byte	$4c,<wboote,>wboote,$4c,<pem,>pem
00CE16  2  FC BF        
00CE18  2               ;warm boot-read dos/65 back except sim and then
00CE18  2               ; jump to ccm.
00CE18  2               
00CE18  2               
00CE18  2               wboot:
00CE18  2  A2 FF        	ldx	#$ff		;set stack
00CE1A  2  9A           	txs			;pointer
00CE1B  2  D8           	cld			;set binary mode
00CE1C  2               
00CE1C  2  4C E5 CD     	jmp	setup		;go setup
00CE1F  2               
00CE1F  2               
00CE1F  2               
00CE1F  2               ;__SELDSK_________________________________________________________________________________________________
00CE1F  2               ;
00CE1F  2               ; 	PERFORM DOS/65 DISK DRIVE SELECT
00CE1F  2               ;________________________________________________________________________________________________________
00CE1F  2               ;select disk
00CE1F  2               seldsk:
00CE1F  2  29 07        	and	#7		;three lsbs only
00CE21  2  8D 6E DA     	sta	sekdsk		;save for later
00CE24  2                .IF (USEFLOPPYA=1 | USEFLOPPYB=1)
00CE24  2               	jsr	MOTOROFF	; TURN OFF ALL FLOPPY MOTORS
00CE24  2                .ENDIF
00CE24  2  AD 6E DA     	LDA	sekdsk		;save for later
00CE27  2  0A           	asl	a		;multiply by two
00CE28  2  AA           	tax			;make an Index
00CE29  2  BD 30 CE     	lda	dcbtbl,x	;get address
00CE2C  2  BC 31 CE     	ldy	dcbtbl+1,x
00CE2F  2  60           	rts
00CE30  2               
00CE30  2               ;table of dcb addresses
00CE30  2  FE D9        dcbtbl:	.word	dcba		; A
00CE32  2  0C DA        	.word	dcbb		; B
00CE34  2  1A DA        	.word	dcbc		; C
00CE36  2  28 DA        	.word	dcbd		; D
00CE38  2  36 DA        	.word	dcbe		; E
00CE3A  2  44 DA        	.word	dcbf		; F
00CE3C  2  52 DA        	.word	dcbg		; G
00CE3E  2  60 DA        	.word	dcbh		; H
00CE40  2               
00CE40  2               ; disk configuration table
00CE40  2               dskcfg:
00CE40  2  00 00        	.byte $00,$00		;  disk A: unit,slice  (invalid for floppy and RAM disks)
00CE42  2  01 00        	.byte $01,$00		;  disk B: unit,slice  (invalid for floppy and RAM disks)
00CE44  2  30 00        	.byte $30,$00		;  disk C: unit,slice
00CE46  2  30 01        	.byte $30,$01		;  disk D: unit,slice
00CE48  2  30 02        	.byte $30,$02		;  disk E: unit,slice
00CE4A  2  30 03        	.byte $30,$03		;  disk F: unit,slice
00CE4C  2  30 04        	.byte $30,$04		;  disk G: unit,slice
00CE4E  2  30 05        	.byte $30,$05		;  disk H: unit,slice
00CE50  2               
00CE50  2               ;__HOME__________________________________________________________________________________________________
00CE50  2               ;
00CE50  2               ; 	PERFORM DOS/65 HEAD HOME
00CE50  2               ;________________________________________________________________________________________________________
00CE50  2               home:
00CE50  2  A9 00        	lda	#$00
00CE52  2  A0 00        	ldy	#$00
00CE54  2               
00CE54  2               ;__SELTRK________________________________________________________________________________________________
00CE54  2               ;
00CE54  2               ; 	PERFORM DOS/65 SELECT TRACK
00CE54  2               ;
00CE54  2               ;	A=TRACK LOW BYTE
00CE54  2               ;	Y=TRACK HIGH BYTE
00CE54  2               ;________________________________________________________________________________________________________
00CE54  2               seltrk:
00CE54  2  18           	CLC
00CE55  2  8D 76 DA     	sta	sektrk		;save number
00CE58  2  8C 77 DA     	sty	sektrk+1
00CE5B  2  60           	rts
00CE5C  2               
00CE5C  2               ;__SELSEC________________________________________________________________________________________________
00CE5C  2               ;
00CE5C  2               ; 	PERFORM DOS/65 SECTOR SELECT
00CE5C  2               ;
00CE5C  2               ;	A=SECTOR LOW BYTE
00CE5C  2               ;	Y=SECTOR HIGH BYTE
00CE5C  2               ;________________________________________________________________________________________________________
00CE5C  2               selsec:
00CE5C  2  8D 78 DA     	sta	seksec		;save low and high
00CE5F  2  8C 79 DA     	sty	seksec+1
00CE62  2  60           	rts
00CE63  2               
00CE63  2               ;__READ__________________________________________________________________________________________________
00CE63  2               ;
00CE63  2               ; 	PERFORM DOS/65 SECTOR READ
00CE63  2               ;________________________________________________________________________________________________________
00CE63  2               read:
00CE63  2  20 11 CF     	JSR 	GET_DRIVE_DEVICE	;
00CE66  2  29 F0        	and 	#$F0			; only want first nybble
00CE68  2  C9 00        	CMP 	#$00
00CE6A  2  D0 04        	BNE 	:+			; not MD drive
00CE6C  2               	;RAM
00CE6C  2  20 18 D9     	JSR 	MD_READ_SECTOR
00CE6F  2  60           	RTS				;
00CE70  2               :
00CE70  2  C9 20        	CMP 	#$20
00CE72  2  D0 03        	BNE 	:+			; not floppy drive
00CE74  2               	;FD
00CE74  2                 	.IF USEFLOPPYA=1 || USEFLOPPYB=1
00CE74  2                 	JMP	READFL			;
00CE74  2                 	.else
00CE74  2  A9 FF          	LDA	#$FF			;
00CE76  2  60           	RTS				;
00CE77  2                 	.ENDIF
00CE77  2               :
00CE77  2  C9 30        	CMP 	#$30
00CE79  2  D0 03        	BNE 	:+			; invalid drive
00CE7B  2               	;PPIDE
00CE7B  2                 	.IF USEIDEC=1
00CE7B  2  4C 66 D2     	JMP	IDE_READ_SECTOR		;
00CE7E  2                 	.ENDIF
00CE7E  2               :
00CE7E  2  A9 FF        	LDA	#$FF			; signal error
00CE80  2  60           	RTS				;
00CE81  2               
00CE81  2               
00CE81  2               ;__WRITE_________________________________________________________________________________________________
00CE81  2               ;
00CE81  2               ; 	PERFORM DOS/65 SECTOR WRITE
00CE81  2               ;________________________________________________________________________________________________________
00CE81  2               write:
00CE81  2  20 11 CF     	JSR 	GET_DRIVE_DEVICE	;
00CE84  2  29 F0        	and 	#$F0			; only want first nybble
00CE86  2               
00CE86  2  C9 00        	CMP 	#$00
00CE88  2  D0 04        	BNE 	:+			; not MD Drive
00CE8A  2               	;MD
00CE8A  2  20 4C D9     	JSR 	MD_WRITE_SECTOR
00CE8D  2               
00CE8D  2  60           	RTS				;
00CE8E  2               :
00CE8E  2  C9 20        	CMP 	#$20
00CE90  2  D0 03        	BNE 	:+			; not floppy drive
00CE92  2               	;FD
00CE92  2                 	.IF USEFLOPPYA=1 || USEFLOPPYB=1
00CE92  2                 	Jsr	WRITEFL			;
00CE92  2               	RTS				;
00CE92  2                 	.else
00CE92  2  A9 FF          	LDA	#$FF			;
00CE94  2  60           	RTS				;
00CE95  2                 	.ENDIF
00CE95  2               :
00CE95  2  C9 30        	CMP 	#$30
00CE97  2  D0 04        	BNE 	writex			; not ppide
00CE99  2               	;PPIDE
00CE99  2                 	.IF USEIDEC=1
00CE99  2  20 BA D2     	JSR	IDE_WRITE_SECTOR
00CE9C  2  60           	RTS				;
00CE9D  2                 	.else
00CE9D  2                 	LDA	#$FF			;
00CE9D  2               	RTS				;
00CE9D  2                 	.ENDIF
00CE9D  2               writex:
00CE9D  2  A9 FF        	LDA	#$FF			; signal error
00CE9F  2  60           	RTS				;
00CEA0  2               
00CEA0  2               
00CEA0  2               ;__SETDMA________________________________________________________________________________________________
00CEA0  2               ;
00CEA0  2               ; 	PERFORM DOS/65 BUFFER ADDRESS SELECTION
00CEA0  2               ;
00CEA0  2               ;	A=BUFFER LOW BYTE
00CEA0  2               ;	Y=BUFFER HIGH BYTE
00CEA0  2               ;________________________________________________________________________________________________________
00CEA0  2               setdma:
00CEA0  2  85 F4        	sta	dmaadr		;store low
00CEA2  2  84 F5        	sty	dmaadr+1	;and high
00CEA4  2  60           	rts
00CEA5  2               
00CEA5  2               
00CEA5  2               ;__CONSTS________________________________________________________________________________________________
00CEA5  2               ;
00CEA5  2               ; 	GET DOS/65 CONSOLE STATUS
00CEA5  2               ;________________________________________________________________________________________________________
00CEA5  2               consts:
00CEA5  2  4C 93 D0     	jmp	SERIALSTATUS
00CEA8  2               
00CEA8  2               ;__CONRDE________________________________________________________________________________________________
00CEA8  2               ;
00CEA8  2               ; 	PERFORM DOS/65 CONSOLE READ
00CEA8  2               ;________________________________________________________________________________________________________
00CEA8  2               conrde:
00CEA8  2  4C 84 D0     	jmp 	RDSER1W
00CEAB  2               
00CEAB  2               ;__CONWRT________________________________________________________________________________________________
00CEAB  2               ;
00CEAB  2               ; 	PERFORM DOS/65 CONSOLE WRITE
00CEAB  2               ;________________________________________________________________________________________________________
00CEAB  2               conwrt:
00CEAB  2  4C 65 D0     	jmp 	WRSER1
00CEAE  2               
00CEAE  2               prnwrt:
00CEAE  2  60           	rts			;printer
00CEAF  2               punwrt:
00CEAF  2  60           	rts			;punch output
00CEB0  2               rdrinp:
00CEB0  2  60           	rts			;reader input
00CEB1  2               rdtime:
00CEB1  2  60           	rts			;read clock
00CEB2  2               xlate:
00CEB2  2  60           	rts			;sector translate
00CEB3  2               
00CEB3  2               
00CEB3  2               ;__OUTMSG________________________________________________________________________________________________
00CEB3  2               ;
00CEB3  2               ; 	WRITE A NULL TERMINATED STRING TO THE CONSOLE
00CEB3  2               ;
00CEB3  2               ;	A=POINTER LOW BYTE
00CEB3  2               ;	Y=POINTER HIGH BYTE
00CEB3  2               ;________________________________________________________________________________________________________
00CEB3  2               outmsg:				;output message
00CEB3  2  85 F0        	STA OUTMSG_W
00CEB5  2  84 F1        	STY OUTMSG_W+1
00CEB7  2  A0 00        	LDY #$00
00CEB9  2               OUTSTRLP:
00CEB9  2  B1 F0               	LDA (OUTMSG_W),Y 	; LOAD NEXT CHAR FROM STRING INTO ACC
00CEBB  2  C9 00               	CMP #$00		; IS NULL?
00CEBD  2  F0 07               	BEQ ENDOUTSTR		; YES, END PRINT OUT
00CEBF  2  20 AB CE            	JSR conwrt  		; PRINT CHAR IN ACC
00CEC2  2  C8                  	INY      		; Y=Y+1 (BUMP INDEX)
00CEC3  2  4C B9 CE            	JMP OUTSTRLP		; DO NEXT CHAR
00CEC6  2               ENDOUTSTR:
00CEC6  2  60                  	RTS			; RETURN
00CEC7  2               
00CEC7  2               
00CEC7  2               ;___DEBSECR512________________________________________________________________________________________
00CEC7  2               ;
00CEC7  2               ;	DEBLOCK 512 BYTE SECTOR FOR DOS/65
00CEC7  2               ;
00CEC7  2               ;________________________________________________________________________________________________________
00CEC7  2               DEBSECR512:
00CEC7  2  48           	PHA
00CEC8  2  AD 78 DA     	LDA	seksec			;
00CECB  2  29 03        	AND	#$03			; GET SECTOR INDEX
00CECD  2  18           	CLC				;
00CECE  2  2A           	ROL	A			;
00CECF  2  AA           	TAX				;
00CED0  2  BD E8 CE     	LDA	DEBTAB,X		;
00CED3  2  85 EE        	STA     SRC
00CED5  2  E8           	INX
00CED6  2  BD E8 CE     	LDA	DEBTAB,X		;
00CED9  2  85 EF        	STA	SRC+1			;
00CEDB  2  A5 F4        	LDA	dmaadr			;
00CEDD  2  85 EC        	STA	DEST			;
00CEDF  2  A5 F5        	LDA	dmaadr+1		;
00CEE1  2  85 ED        	STA	DEST+1			;
00CEE3  2  20 1E CF     	JSR	COPY_DOS_SECTOR		;
00CEE6  2  68           	PLA
00CEE7  2  60           	RTS
00CEE8  2               
00CEE8  2               DEBTAB:
00CEE8  2  F5 E2        	.word	hstbuf			;
00CEEA  2  75 E3        	.word	hstbuf+128		;
00CEEC  2  F5 E3        	.word	hstbuf+256		;
00CEEE  2  75 E4        	.word	hstbuf+384		;
00CEF0  2               
00CEF0  2               
00CEF0  2               ;___BLKSECR512___________________________________________________________________________________________
00CEF0  2               ;
00CEF0  2               ;	BLOCK 512 SECTOR FOR DOS/65
00CEF0  2               ;
00CEF0  2               ;________________________________________________________________________________________________________
00CEF0  2               BLKSECR512:
00CEF0  2  48           	PHA
00CEF1  2  AD 78 DA     	LDA	seksec			;
00CEF4  2  29 03        	AND	#$03			; GET SECTOR INDEX
00CEF6  2  18           	CLC				;
00CEF7  2  2A           	ROL	A			;
00CEF8  2  AA           	TAX				;
00CEF9  2  BD E8 CE     	LDA	DEBTAB,X		;
00CEFC  2  85 EC        	STA     DEST
00CEFE  2  E8           	INX
00CEFF  2  BD E8 CE     	LDA	DEBTAB,X		;
00CF02  2  85 ED        	STA	DEST+1			;
00CF04  2  A5 F4        	LDA	dmaadr			;
00CF06  2  85 EE        	STA	SRC			;
00CF08  2  A5 F5        	LDA	dmaadr+1		;
00CF0A  2  85 EF        	STA	SRC+1			;
00CF0C  2  20 1E CF     	JSR	COPY_DOS_SECTOR		;
00CF0F  2  68           	PLA
00CF10  2  60           	RTS
00CF11  2               
00CF11  2               ;___GET_DRIVE_DEVICE_____________________________________________________________________________________
00CF11  2               ;
00CF11  2               ;	GET SELECTED DEVICE TYPE AND UNIT, RETURN IN "A"
00CF11  2               ;
00CF11  2               ;________________________________________________________________________________________________________
00CF11  2               GET_DRIVE_DEVICE:
00CF11  2  DA           	PHX
00CF12  2  AD 6E DA     	LDA	sekdsk			; GET DRIVE
00CF15  2  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
00CF17  2  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
00CF18  2  AA           	TAX 				; MOVE TO X REGISTER
00CF19  2  BD 40 CE     	LDA 	dskcfg,X 		; GET device
00CF1C  2  FA           	PLX
00CF1D  2  60           	RTS
00CF1E  2               
00CF1E  2               
00CF1E  2               ;___COPY_DOS_SECTOR______________________________________________________________________________________
00CF1E  2               ;
00CF1E  2               ;	COPY 128 BYTE SECTOR FOR DOS/65
00CF1E  2               ;
00CF1E  2               ;________________________________________________________________________________________________________
00CF1E  2               COPY_DOS_SECTOR:
00CF1E  2  5A           	PHY
00CF1F  2  A0 00        	LDY	#$00			;
00CF21  2               COPY_DOS_SECTOR1:
00CF21  2  B1 EE        	LDA	(SRC),Y			;
00CF23  2  91 EC        	STA	(DEST),Y		;
00CF25  2  C8           	INY				;
00CF26  2  98           	TYA				;
00CF27  2  C9 80        	CMP	#$80			;
00CF29  2  D0 F6        	BNE	COPY_DOS_SECTOR1	;
00CF2B  2  7A           	PLY
00CF2C  2  60           	RTS
00CF2D  2               
00CF2D  2               ;___DSPL_DSK_CFG_________________________________________________________________________________________
00CF2D  2               ;
00CF2D  2               ;	DISPLAY THE DISK CONFIGURATION FOR THE USER
00CF2D  2               ;
00CF2D  2               ;________________________________________________________________________________________________________
00CF2D  2               DSPL_DSK_CFG:
00CF2D  2  20 FE CB     	JSR 	NEWLINE
00CF30  2  48 DA 5A A2  	PRTS "Disk Configuration:$"
00CF34  2  00 BD 49 CF  
00CF38  2  E8 C9 24 F0  
00CF5D  2  20 FE CB     	JSR 	NEWLINE
00CF60  2  A2 00        	ldx 	#0
00CF62  2               DSPL_DSK_CFG_1:
00CF62  2  48 DA 5A A2  	PRTS "    $"		; MAKE IT PRETTY :)
00CF66  2  00 BD 7B CF  
00CF6A  2  E8 C9 24 F0  
00CF80  2  8A           	TXA
00CF81  2  4A           	LSR	A
00CF82  2  18           	CLC
00CF83  2  69 41        	ADC 	#'A'
00CF85  2  20 AB CE     	JSR 	conwrt
00CF88  2  A9 3A        	LDA 	#':'
00CF8A  2  20 AB CE     	JSR 	conwrt
00CF8D  2  A9 3D        	LDA 	#'='
00CF8F  2  20 AB CE     	JSR 	conwrt
00CF92  2  20 AA CF     	JSR 	prtdevice	; PRINT DEVICE NAME FROM TABLE (X)
00CF95  2  A9 3A        	LDA 	#':'
00CF97  2  20 AB CE     	JSR 	conwrt
00CF9A  2  E8           	INX				; WANT SECOND BYTE OF ENTRY
00CF9B  2  BD 40 CE     	LDA 	dskcfg,x 		; GET SLICE
00CF9E  2  20 0F CC     	JSR 	PRTDEC 			; PRINT SLICE IN DECIMAL (A)
00CFA1  2  E8           	INX
00CFA2  2  20 FE CB     	JSR 	NEWLINE
00CFA5  2  E0 10        	CPX 	#16
00CFA7  2  D0 B9        	BNE 	DSPL_DSK_CFG_1
00CFA9  2  60           	RTS
00CFAA  2               
00CFAA  2               ; 	DEVICE TABLE:
00CFAA  2               ;	$00	MD
00CFAA  2               ;	$2x	FLOPPY
00CFAA  2               ;	$3x	IDE
00CFAA  2               prtdevice:
00CFAA  2  BD 40 CE     	LDA 	dskcfg,X 		; GET DEVICE TYPE
00CFAD  2  48           	PHA
00CFAE  2  29 F0        	AND 	#$F0 			; FILTER OUT UNIT
00CFB0  2  C9 00        	CMP 	#$00
00CFB2  2  D0 1F        	BNE 	prtdevice1
00CFB4  2  48 DA 5A A2  	PRTS "MD$"
00CFB8  2  00 BD CD CF  
00CFBC  2  E8 C9 24 F0  
00CFD0  2  4C 5D D0     	jmp 	prtdevice_done
00CFD3  2               prtdevice1:
00CFD3  2  C9 10        	CMP 	#$10
00CFD5  2  D0 20        	BNE 	prtdevice2
00CFD7  2  48 DA 5A A2  	PRTS "UNK$"
00CFDB  2  00 BD F0 CF  
00CFDF  2  E8 C9 24 F0  
00CFF4  2  4C 5D D0     	jmp 	prtdevice_done
00CFF7  2               prtdevice2:
00CFF7  2  C9 20        	CMP 	#$20
00CFF9  2  D0 1F        	BNE 	prtdevice3
00CFFB  2  48 DA 5A A2  	PRTS "FD$"
00CFFF  2  00 BD 14 D0  
00D003  2  E8 C9 24 F0  
00D017  2  4C 5D D0     	jmp 	prtdevice_done
00D01A  2               prtdevice3:
00D01A  2  C9 30        	CMP 	#$30
00D01C  2  D0 22        	BNE 	prtdevicex
00D01E  2  48 DA 5A A2  	PRTS "PPIDE$"
00D022  2  00 BD 37 D0  
00D026  2  E8 C9 24 F0  
00D03D  2  4C 5D D0     	jmp 	prtdevice_done
00D040  2               prtdevicex:
00D040  2  48 DA 5A A2  	PRTS "UNK$"
00D044  2  00 BD 59 D0  
00D048  2  E8 C9 24 F0  
00D05D  2               prtdevice_done:
00D05D  2  68           	PLA
00D05E  2  29 0F        	AND 	#$0F 			; FILTER OUT DEVICE
00D060  2  20 0F CC     	JSR 	PRTDEC
00D063  2  60           	RTS
00D064  2               
00D064  2               
00D064  2               	.IF USESERIAL=1
00D064  2               		.INCLUDE "dosser.asm"
00D064  3               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
00D064  3               ;
00D064  3               ; 	Nhyodyne serial drivers for single serial port card
00D064  3               ;
00D064  3               ;	Entry points:
00D064  3               ;		SERIALINIT  - called during OS init
00D064  3               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
00D064  3               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
00D064  3               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00D064  3               ;		SERIALSTATUS- GET UART STATUS
00D064  3               ;________________________________________________________________________________________________________________________________
00D064  3               ;
00D064  3               
00D064  3               
00D064  3               ;*
00D064  3               ;* HARDWARE I/O ADDRESSES
00D064  3               ;*
00D064  3               
00D064  3               ; UART 16C550 SERIAL
00D064  3               UART0       	=    	$0368           ; DATA IN/OUT
00D064  3               UART1       	=    	$0369           ; CHECK RX
00D064  3               UART2       	=    	$036A           ; INTERRUPTS
00D064  3               UART3       	=    	$036B           ; LINE CONTROL
00D064  3               UART4       	=    	$036C           ; MODEM CONTROL
00D064  3               UART5          	=    	$036D           ; LINE STATUS
00D064  3               UART6          	=    	$036E           ; MODEM STATUS
00D064  3               UART7	       	=    	$036F           ; SCRATCH REG.
00D064  3               
00D064  3               
00D064  3               ;__SERIALINIT____________________________________________________________________________________________________________________
00D064  3               ;
00D064  3               ;	INITIALIZE SERIAL PORTS
00D064  3               ;________________________________________________________________________________________________________________________________
00D064  3               ;
00D064  3               SERIALINIT:
00D064  3               ;	LDA	#$80			;
00D064  3               ;	STA	UART3			; SET DLAB FLAG
00D064  3               ;	LDA	#12			; SET TO 12 = 9600 BAUD
00D064  3               ;	STA	UART0			; save baud rate
00D064  3               ;	LDA	#00			;
00D064  3               ;	STA	UART1			;
00D064  3               ;	LDA	#03			;
00D064  3               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
00D064  3               ;	STA	UART4			;
00D064  3               
00D064  3  60           	RTS
00D065  3               
00D065  3               
00D065  3               
00D065  3               ;__WRSER1________________________________________________________________________________________________________________________
00D065  3               ;
00D065  3               ;	WRITE CHARACTER(A) TO UART
00D065  3               ;________________________________________________________________________________________________________________________________
00D065  3               ;
00D065  3               WRSER1:
00D065  3  48           	PHA
00D066  3               WRSER1a:
00D066  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D069  3  29 20        	AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
00D06B  3  C9 00        	CMP     #$00
00D06D  3  F0 F7        	BEQ	WRSER1a			; NO, WAIT FOR IT
00D06F  3  68           	PLA
00D070  3  8D 68 03     	STA	UART0			; THEN WRITE THE CHAR TO UART
00D073  3  60           	RTS
00D074  3               
00D074  3               ;__RDSER1________________________________________________________________________________________________________________________
00D074  3               ;
00D074  3               ;	READ CHARACTER FROM UART TO (A)
00D074  3               ;________________________________________________________________________________________________________________________________
00D074  3               ;
00D074  3               RDSER1:
00D074  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D077  3  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D079  3  C9 00        	CMP 	#$00
00D07B  3  F0 04        	BEQ	RDSER1N			; LOOP UNTIL DATA IS READY
00D07D  3  AD 68 03     	LDA	UART0			; THEN READ THE CHAR FROM THE UART
00D080  3  60           	RTS
00D081  3               RDSER1N:
00D081  3  A9 00        	LDA	#$00			;
00D083  3  60           	RTS				;
00D084  3               
00D084  3               ;__RDSER1W_______________________________________________________________________________________________________________________
00D084  3               ;
00D084  3               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
00D084  3               ;________________________________________________________________________________________________________________________________
00D084  3               ;
00D084  3               
00D084  3               RDSER1W:
00D084  3  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
00D087  3  29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D089  3  C9 00        		CMP 	#$00
00D08B  3  F0 F7        		BEQ	RDSER1W			; LOOP UNTIL DATA IS READY
00D08D  3  AD 68 03     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
00D090  3  29 7F        		AND #$7F
00D092  3  60           		RTS
00D093  3               
00D093  3               ;__SERIALSTATUS__________________________________________________________________________________________________________________
00D093  3               ;
00D093  3               ;	READ UARD STATUS
00D093  3               ;________________________________________________________________________________________________________________________________
00D093  3               ;
00D093  3               SERIALSTATUS:
00D093  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D096  3  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D098  3  C9 00        	CMP 	#$00
00D09A  3  F0 03        	BEQ	RDSTAT1			; NO, INDICATE NO CHAR
00D09C  3  A9 FF        	LDA	#$FF			; GET DATA CHAR
00D09E  3  60           	RTS
00D09F  3               RDSTAT1:
00D09F  3  A9 00        	LDA	#$00			; GET DATA CHAR
00D0A1  3  60           	RTS
00D0A2  3               
00D0A2  3               ; end
00D0A2  3               
00D0A2  2               	.ENDIF
00D0A2  2               	.IF USEIDEC=1
00D0A2  2               		.INCLUDE "doside.asm"
00D0A2  3               ;__IDE DRIVERS___________________________________________________________________________________________________________________
00D0A2  3               ;
00D0A2  3               ; 	Nhyodyne IDE disk drivers for Z80PPIDE card
00D0A2  3               ;
00D0A2  3               ;	Entry points:
00D0A2  3               ;		PPIDE_INIT   	- called during OS init
00D0A2  3               ;		IDE_READ_SECTOR - read a sector from drive
00D0A2  3               ;		IDE_WRITE_SECTOR- write a sector to drive
00D0A2  3               ;________________________________________________________________________________________________________________________________
00D0A2  3               ;
00D0A2  3               PPIDE_PPI	=	$0360		; PORT A
00D0A2  3               ;
00D0A2  3               PPIDELO		=	PPIDE_PPI+0	; LSB
00D0A2  3               PPIDEHI		=	PPIDE_PPI+1	; MSB
00D0A2  3               PPIDECNTRL	=	PPIDE_PPI+2	; Control Signals
00D0A2  3               PPIDEPPIC	=	PPIDE_PPI+3	; CONTROL BYTE PPI 82C55
00D0A2  3               
00D0A2  3               PPIDE_A0_LINE	=	$01		;DIRECT FROM 8255 TO IDE INTERFACE
00D0A2  3               PPIDE_A1_LINE	=	$02		;DIRECT FROM 8255 TO IDE INTERFACE
00D0A2  3               PPIDE_A2_LINE	=	$04		;DIRECT FROM 8255 TO IDE INTERFACE
00D0A2  3               PPIDE_CS0_LINE	=	$08		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0A2  3               PPIDE_CS1_LINE	=	$10		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0A2  3               PPIDE_WR_LINE	=	$20		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0A2  3               PPIDE_RD_LINE	=	$40		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0A2  3               PPIDE_RST_LINE	=	$80		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0A2  3               
00D0A2  3               PPIDE_DATA	=	PPIDE_CS0_LINE
00D0A2  3               PPIDE_ERR	=	PPIDE_CS0_LINE + PPIDE_A0_LINE
00D0A2  3               PPIDE_SEC_CNT	=	PPIDE_CS0_LINE + PPIDE_A1_LINE
00D0A2  3               PPIDE_LBALOW	=	PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0A2  3               PPIDE_LBAMID	=	PPIDE_CS0_LINE + PPIDE_A2_LINE
00D0A2  3               PPIDE_LBAHI	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
00D0A2  3               PPIDE_DEVICE	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00D0A2  3               PPIDE_COMMAND	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0A2  3               PPIDE_STATUS	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0A2  3               PPIDE_CONTROL	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00D0A2  3               PPIDE_ASTATUS	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0A2  3               
00D0A2  3               
00D0A2  3               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
00D0A2  3               PPIDE_CMD_RECAL	=	$10
00D0A2  3               PPIDE_CMD_READ	=	$20
00D0A2  3               PPIDE_CMD_WRITE	=	$30
00D0A2  3               PPIDE_CMD_INIT	=	$91
00D0A2  3               PPIDE_CMD_ID	=	$EC
00D0A2  3               PPIDE_CMD_SPINDOWN=	$E0
00D0A2  3               PPIDE_CMD_SPINUP=	$E1
00D0A2  3               
00D0A2  3               
00D0A2  3               PPRD_IDE_8255	=	%10010010	;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
00D0A2  3               PPWR_IDE_8255	=	%10000000	;ALL THREE PORTS OUTPUT
00D0A2  3               
00D0A2  3               
00D0A2  3  00           PPIDEINDEX:	.byte	$00
00D0A3  3  00 00        PPIDETIMEOUT:	.byte	$00,$00
00D0A5  3               
00D0A5  3               ;__PPIDE_INIT_________________________________________________________________________________________
00D0A5  3               ;
00D0A5  3               ;  INIT AND DISPLAY IDE INFO
00D0A5  3               ;____________________________________________________________________________________________________
00D0A5  3               ;
00D0A5  3               PPIDE_INIT:
00D0A5  3                       PRTDBG "PPIDE INIT:$"
00D0A5  3  48 DA 5A A2  	PRTS "PPIDE :$"
00D0A9  3  00 BD BE D0  
00D0AD  3  E8 C9 24 F0  
00D0C6  3  20 FE CB            	JSR	NEWLINE
00D0C9  3  20 58 D2     	JSR	IDE_PPIDETECT		; TEST FOR PPI HARDWARE
00D0CC  3  D0 35                BNE     IDE_ABORT      		; BAIL OUT IF NOT THERE
00D0CE  3               ;
00D0CE  3  48 DA 5A A2  	PRTS    " IO=0x$"
00D0D2  3  00 BD E7 D0  
00D0D6  3  E8 C9 24 F0  
00D0EE  3  A9 03        	LDA	#>PPIDE_PPI		; GET BASE PORT
00D0F0  3  20 DC CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D0F3  3  A9 60               	LDA	#<PPIDE_PPI		; GET BASE PORT
00D0F5  3  20 DC CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D0F8  3               ;
00D0F8  3  20 ED D2     	JSR	PPIDE_RESET		; RESET THE BUS
00D0FB  3  20 91 D1     	JSR	PPIDE_PROBE		; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
00D0FE  3  B0 03        	BCS 	IDE_ABORT
00D100  3  4C 2C D1     	JMP 	IDE_PRINT_INFO
00D103  3               IDE_ABORT:
00D103  3  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
00D107  3  00 BD 1C D1  
00D10B  3  E8 C9 24 F0  
00D129  3  4C 8D D1     	JMP 	IDE_INITA
00D12C  3               IDE_PRINT_INFO:
00D12C  3  20 FE CB     	JSR	NEWLINE
00D12F  3  48 DA 5A A2  	PRTS    " PPIDE0: Blocks=$"
00D133  3  00 BD 48 D1  
00D137  3  E8 C9 24 F0  
00D159  3  A9 00        	LDA	#$00
00D15B  3  20 D1 D1     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
00D15E  3  48 DA 5A A2  	PRTS    " PPIDE1: Blocks=$"
00D162  3  00 BD 77 D1  
00D166  3  E8 C9 24 F0  
00D188  3  A9 01        	LDA	#$01
00D18A  3  20 D1 D1     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
00D18D  3               IDE_INITA:
00D18D  3  20 FE CB     	JSR	NEWLINE
00D190  3  60           	RTS				; DONE
00D191  3               ;
00D191  3               ;__PPIDE_PROBE_______________________________________________________________________________________
00D191  3               ;
00D191  3               ;  PROBE FOR IDE HARDWARE
00D191  3               ;____________________________________________________________________________________________________
00D191  3               ;
00D191  3               PPIDE_PROBE:
00D191  3               ;
00D191  3               	; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
00D191  3               	; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
00D191  3               	; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
00D191  3               	; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
00D191  3               	; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
00D191  3               	; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
00D191  3               	; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
00D191  3               	; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
00D191  3               
00D191  3  A9 00        	LDA 	#$00
00D193  3  8D 60 03     	STA 	PPIDELO 		; PPI PORT A, DATALO
00D196  3               
00D196  3  20 18 D3     	JSR	IDE_WAIT_NOT_BUSY	; WAIT FOR BUSY TO CLEAR
00D199  3  B0 34        	BCS 	PPIDE_PROBE_FAIL	; IF TIMEOUT, REPORT NO IDE PRESENT
00D19B  3  A9 0F        	LDA	#PPIDE_STATUS		; GET STATUS
00D19D  3  20 C0 D4     	JSR	IDE_READ
00D1A0  3  8A           	TXA
00D1A1  3  29 40        	AND 	#%01000000
00D1A3  3  C9 00        	CMP 	#$00
00D1A5  3  F0 28        	BEQ 	PPIDE_PROBE_FAIL	; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
00D1A7  3               
00D1A7  3               	; CHECK SIGNATURE
00D1A7  3  A9 0A        	LDA	#PPIDE_SEC_CNT
00D1A9  3  20 C0 D4     	JSR	IDE_READ
00D1AC  3  E0 01        	CPX 	#$01
00D1AE  3  D0 1F        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
00D1B0  3  A9 0B        	LDA	#PPIDE_LBALOW
00D1B2  3  20 C0 D4     	JSR	IDE_READ
00D1B5  3  E0 01        	CPX 	#$01
00D1B7  3  D0 16        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
00D1B9  3  A9 0C        	LDA	#PPIDE_LBAMID
00D1BB  3  20 C0 D4     	JSR	IDE_READ
00D1BE  3  E0 00        	CPX 	#$00
00D1C0  3  D0 0D        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
00D1C2  3  A9 0D        	LDA	#PPIDE_LBAHI
00D1C4  3  20 C0 D4     	JSR	IDE_READ
00D1C7  3  E0 00        	CPX 	#$00
00D1C9  3  D0 04        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
00D1CB  3  18           	CLC
00D1CC  3  4C D0 D1     	JMP 	PPIDE_PROBE_SUCCESS
00D1CF  3               PPIDE_PROBE_FAIL:
00D1CF  3  38           	SEC
00D1D0  3               PPIDE_PROBE_SUCCESS:
00D1D0  3  60           	RTS				; DONE, NOTE THAT A=0 AND Z IS SET
00D1D1  3               
00D1D1  3               ;*__IDE_READ_INFO___________________________________________________________________________________
00D1D1  3               ;*
00D1D1  3               ;*  READ IDE INFORMATION
00D1D1  3               ;*	CARRY SET ON ERROR
00D1D1  3               ;* 	A=MST/SLV
00D1D1  3               ;*____________________________________________________________________________________________________
00D1D1  3               IDE_READ_INFO:
00D1D1  3               		PRTDBG "IDE Read INFORMATION$"
00D1D1  3               
00D1D1  3               		; SET DRIVE BIT
00D1D1  3  29 01        		AND 	#$01			; ONLY WANT THE 1 BIT (MST/SLV)
00D1D3  3  0A           		asl	a			; SHIFT 4
00D1D4  3  0A           		asl	a			;
00D1D5  3  0A           		asl	a			;
00D1D6  3  0A           		asl	a			;
00D1D7  3  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
00D1D9  3  AA           		TAX
00D1DA  3  A0 00        		LDY	#$00
00D1DC  3  A9 0E        		LDA	#PPIDE_DEVICE
00D1DE  3  20 DE D4     		JSR	IDE_WRITE
00D1E1  3               
00D1E1  3               
00D1E1  3  20 18 D3     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D1E4  3  B0 48        		BCS	IDE_READ_INFO_ABORT
00D1E6  3  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
00D1E8  3  A2 EC        		LDX	#PPIDE_CMD_ID
00D1EA  3  20 DE D4     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
00D1ED  3  20 40 D3     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
00D1F0  3  B0 3C        		BCS	IDE_READ_INFO_ABORT
00D1F2  3  20 70 D3     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
00D1F5  3  48 DA 5A A2  		PRTS    "0x$"
00D1F9  3  00 BD 0E D2  
00D1FD  3  E8 C9 24 F0  
00D211  3  AD 70 E3     		LDA 	hstbuf+123
00D214  3  20 DC CB     		JSR 	PRTHEXBYTE
00D217  3  AD 6F E3     		LDA 	hstbuf+122
00D21A  3  20 DC CB     		JSR 	PRTHEXBYTE
00D21D  3  AD 6E E3     		LDA 	hstbuf+121
00D220  3  20 DC CB     		JSR 	PRTHEXBYTE
00D223  3  AD 6D E3     		LDA 	hstbuf+120
00D226  3  20 DC CB     		JSR 	PRTHEXBYTE
00D229  3  20 FE CB     		JSR	NEWLINE
00D22C  3  18           		CLC
00D22D  3  60           		RTS
00D22E  3               IDE_READ_INFO_ABORT:
00D22E  3  48 DA 5A A2  		PRTS    "NOT PRESENT$"		; NOT PRESENT
00D232  3  00 BD 47 D2  
00D236  3  E8 C9 24 F0  
00D253  3  20 FE CB     		JSR	NEWLINE
00D256  3  38           		SEC
00D257  3  60           		RTS				;
00D258  3               
00D258  3               
00D258  3               ;__IDE_PPIDETECT____________________________________________________________________________________
00D258  3               ;
00D258  3               ;  PROBE FOR PPI HARDWARE
00D258  3               ;____________________________________________________________________________________________________
00D258  3               ;
00D258  3               IDE_PPIDETECT:
00D258  3               ;
00D258  3               	; TEST FOR PPI EXISTENCE
00D258  3               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
00D258  3               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
00D258  3               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
00D258  3               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
00D258  3               	; INTERFERE WITH THE VALUE BEING READ.
00D258  3  20 02 D5     	JSR	SET_PPI_WR
00D25B  3               ;
00D25B  3  A9 00        	LDA     #$00			; VALUE ZERO
00D25D  3  8D 60 03     	STA	PPIDELO			; PUSH VALUE TO PORT
00D260  3  AD 60 03     	LDA	PPIDELO			; GET PORT VALUE
00D263  3  C9 00                CMP     #$00
00D265  3  60           	RTS				; AND RETURN
00D266  3               ;
00D266  3               
00D266  3               
00D266  3               ;*__IDE_READ_SECTOR___________________________________________________________________________________
00D266  3               ;*
00D266  3               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
00D266  3               ;*
00D266  3               ;*____________________________________________________________________________________________________
00D266  3               IDE_READ_SECTOR:
00D266  3               		PRTDBG "IDE Read Sector$"
00D266  3  20 6D D2     		JSR 	IDE_READ_RAW_SECTOR
00D269  3  20 C7 CE     		JSR 	DEBSECR512
00D26C  3  60           		RTS
00D26D  3               
00D26D  3               IDE_READ_RAW_SECTOR:
00D26D  3               		PRTDBG "IDE Read Raw Sector$"
00D26D  3  20 0F D4     	  	JSR	IDE_CONVERT_SECTOR	;
00D270  3               
00D270  3  AD 7C DA     		LDA	debsehd			; STORE CURRENT PARMS
00D273  3  CD 81 DA     		CMP	Cdebsehd		;
00D276  3  D0 13        		BNE	IDE_READ_SECTOR_DIRTY
00D278  3  AD 7B DA     		LDA	debcylm			;
00D27B  3  CD 80 DA     		CMP	Cdebcylm		;
00D27E  3  D0 0B        		BNE	IDE_READ_SECTOR_DIRTY
00D280  3  AD 7A DA     		LDA	debcyll			;
00D283  3  CD 7F DA     		CMP	Cdebcyll		;
00D286  3  D0 03        		BNE	IDE_READ_SECTOR_DIRTY
00D288  3  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
00D28A  3  60           		RTS
00D28B  3               
00D28B  3               IDE_READ_SECTOR_DIRTY:
00D28B  3               		PRTDBG "IDE Read Sector Buffer Dirty$"
00D28B  3  20 18 D3     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D28E  3  B0 27        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D290  3  20 DC D3     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
00D293  3  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
00D295  3  A2 20        		LDX	#PPIDE_CMD_READ
00D297  3  20 DE D4     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
00D29A  3  20 40 D3     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
00D29D  3  B0 18        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D29F  3  20 70 D3     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
00D2A2  3  AD 7C DA     		LDA	debsehd			; STORE CURRENT PARMS
00D2A5  3  8D 81 DA     		STA	Cdebsehd		;
00D2A8  3  AD 7A DA     		LDA	debcyll			;
00D2AB  3  8D 7F DA     		STA	Cdebcyll		;
00D2AE  3  AD 7B DA     		LDA	debcylm			;
00D2B1  3  8D 80 DA     		STA	Cdebcylm		;
00D2B4  3               
00D2B4  3  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
00D2B6  3  60           		RTS
00D2B7  3               IDE_READ_SECTOR_DIRTY_ERROR:
00D2B7  3  A9 FF        		LDA	#$FF			; ZERO = 1 ON RETURN = OPERATION OK
00D2B9  3  60           		RTS
00D2BA  3               
00D2BA  3               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
00D2BA  3               ;*
00D2BA  3               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
00D2BA  3               ;*
00D2BA  3               ;*____________________________________________________________________________________________________
00D2BA  3               IDE_WRITE_SECTOR:
00D2BA  3               		PRTDBG "IDE Write Sector$"
00D2BA  3  20 6D D2     	  	JSR	IDE_READ_RAW_SECTOR	; determine physical sector
00D2BD  3  20 F0 CE     	  	JSR	BLKSECR512		; block sector for writing
00D2C0  3  20 18 D3     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D2C3  3  B0 25        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D2C5  3               
00D2C5  3  20 DC D3     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
00D2C8  3  A9 0F        		LDA	#PPIDE_COMMAND
00D2CA  3  A2 30        		LDX	#PPIDE_CMD_WRITE
00D2CC  3  20 DE D4     		JSR	IDE_WRITE		;TELL DRIVE TO WRITE A SECTOR
00D2CF  3  20 40 D3     		JSR	IDE_WAIT_DRQ		;WAIT UNIT IT WANTS THE DATA
00D2D2  3  B0 16        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D2D4  3  20 A5 D3     		JSR	IDE_WRITE_BUFFER	;GIVE THE DATA TO THE DRIVE
00D2D7  3  20 18 D3     		JSR	IDE_WAIT_NOT_BUSY	;WAIT UNTIL THE WRITE IS COMPLETE
00D2DA  3  B0 0E        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D2DC  3  A9 FF        		LDA	#$FF			; STORE CURRENT PARMS
00D2DE  3  8D 81 DA     		STA	Cdebsehd		;
00D2E1  3  8D 7F DA     		STA	Cdebcyll		;
00D2E4  3  8D 80 DA     		STA	Cdebcylm		;
00D2E7  3               
00D2E7  3  A9 00        		LDA	#$00			; ZERO ON RETURN = OPERATION OK
00D2E9  3  60           		RTS
00D2EA  3               IDE_WRITE_SECTOR_ERROR:
00D2EA  3  A9 FF        		LDA	#$FF			; 1 ON RETURN = OPERATION FAIL
00D2EC  3  60           		RTS
00D2ED  3               
00D2ED  3               ;*__PPIDE_RESET____________________________________________________________________________________
00D2ED  3               ;*
00D2ED  3               ;*  SOFT RESET IDE CHANNEL
00D2ED  3               ;*
00D2ED  3               ;*____________________________________________________________________________________________________
00D2ED  3               PPIDE_RESET:
00D2ED  3                 	PRTDBG "IDE Reset$"
00D2ED  3  A9 00        		LDA	#$00
00D2EF  3  8D 7C DA     		STA	debsehd
00D2F2  3  8D 7A DA     		STA	debcyll
00D2F5  3  8D 7B DA     		STA	debcylm
00D2F8  3  A9 FF        		LDA	#$FF			;
00D2FA  3  8D 81 DA     		STA	Cdebsehd		;
00D2FD  3  8D 7F DA     		STA	Cdebcyll		;
00D300  3  8D 80 DA     		STA	Cdebcylm		;
00D303  3               
00D303  3  A9 80        		LDA	#PPIDE_RST_LINE
00D305  3  8D 62 03     		STA	PPIDECNTRL			; ASSERT RST LINE ON IDE INTERFACE
00D308  3  A2 00        		LDX	#$00
00D30A  3               	PRTDBG "IDE Reset Delay$"
00D30A  3               RST_DLY:
00D30A  3  CA           		DEX
00D30B  3  E0 00        		CPX	#$00
00D30D  3  D0 FB        		BNE	RST_DLY
00D30F  3  A9 00        		LDA	#$00
00D311  3  8D 62 03     		STA	PPIDECNTRL			; DEASSERT RST LINE ON IDE INTERFACE
00D314  3               
00D314  3               ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
00D314  3               ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
00D314  3               	.IF (USEDSKYNG=1)
00D314  3  20 F6 D5     	JSR 	DSKY_REINIT
00D317  3               	.ENDIF
00D317  3               
00D317  3  60           		RTS
00D318  3               
00D318  3               
00D318  3               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
00D318  3               ;*
00D318  3               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
00D318  3               ;*
00D318  3               ;*____________________________________________________________________________________________________
00D318  3               IDE_WAIT_NOT_BUSY:
00D318  3  DA           		PHX
00D319  3  5A           		PHY
00D31A  3  48           		PHA
00D31B  3  A9 00        		LDA #$00
00D31D  3  8D A3 D0     		STA PPIDETIMEOUT
00D320  3  8D A4 D0     		STA PPIDETIMEOUT+1
00D323  3               IDE_WAIT_NOT_BUSY1:
00D323  3  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR RDY BIT TO BE SET
00D325  3  20 C0 D4     		JSR	IDE_READ
00D328  3  8A           		TXA
00D329  3  29 80        		AND	#$80
00D32B  3  F0 0E        		BEQ	IDE_WAIT_NOT_BUSY2
00D32D  3  EE A3 D0     		INC 	PPIDETIMEOUT
00D330  3  D0 F1        		BNE 	IDE_WAIT_NOT_BUSY1
00D332  3  EE A4 D0     		INC 	PPIDETIMEOUT+1
00D335  3  D0 EC        		BNE 	IDE_WAIT_NOT_BUSY1
00D337  3  38           		SEC
00D338  3  4C 3C D3     		JMP	IDE_WAIT_NOT_BUSY3
00D33B  3               IDE_WAIT_NOT_BUSY2:
00D33B  3  18           		CLC
00D33C  3               IDE_WAIT_NOT_BUSY3:
00D33C  3  68           		PLA
00D33D  3  7A           		PLY
00D33E  3  FA           		PLX
00D33F  3  60           		RTS
00D340  3               
00D340  3               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
00D340  3               ;*
00D340  3               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
00D340  3               ;*
00D340  3               ;*____________________________________________________________________________________________________
00D340  3               IDE_WAIT_DRQ:
00D340  3  DA           		PHX
00D341  3  5A           		PHY
00D342  3  48           		PHA
00D343  3  A9 00        		LDA #$00
00D345  3  8D A3 D0     		STA PPIDETIMEOUT
00D348  3  8D A4 D0     		STA PPIDETIMEOUT+1
00D34B  3               IDE_WAIT_DRQ1:
00D34B  3  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR DRQ BIT TO BE SET
00D34D  3  20 C0 D4     		JSR	IDE_READ
00D350  3  8A           		TXA
00D351  3  29 88        		AND	#%10001000		; MASK OFF BUSY(7) AND DRQ(3)
00D353  3  C9 08        		CMP	#%00001000		; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
00D355  3  F0 14        		BEQ	IDE_WAIT_DRQ2
00D357  3  29 01        		AND	#%00000001		; IS ERROR?
00D359  3  C9 01        		CMP	#%00000001		;
00D35B  3  F0 0A        		BEQ	IDE_WAIT_DRQE
00D35D  3  EE A3 D0     		INC 	PPIDETIMEOUT
00D360  3  D0 E9        		BNE 	IDE_WAIT_DRQ1
00D362  3  EE A4 D0     		INC 	PPIDETIMEOUT+1
00D365  3  D0 E4        		BNE 	IDE_WAIT_DRQ1
00D367  3               IDE_WAIT_DRQE:
00D367  3  38           		SEC
00D368  3  4C 6C D3     		JMP	IDE_WAIT_DRQ3
00D36B  3               IDE_WAIT_DRQ2:
00D36B  3  18           		CLC
00D36C  3               IDE_WAIT_DRQ3:
00D36C  3  68           		PLA
00D36D  3  7A           		PLY
00D36E  3  FA           		PLX
00D36F  3  60           		RTS
00D370  3               
00D370  3               
00D370  3               
00D370  3               ;*__IDE_READ_BUFFER___________________________________________________________________________________
00D370  3               ;*
00D370  3               ;*  READ IDE BUFFER LITTLE ENDIAN
00D370  3               ;*
00D370  3               ;*____________________________________________________________________________________________________
00D370  3               IDE_READ_BUFFER:
00D370  3  A2 00        		LDX    	#$00			; INDEX
00D372  3               IDEBUFRD:
00D372  3  8E A2 D0     		STX	PPIDEINDEX
00D375  3  A9 08        		LDA	#PPIDE_DATA
00D377  3  20 C0 D4     		JSR	IDE_READ
00D37A  3  8A           		TXA
00D37B  3  AE A2 D0     		LDX	PPIDEINDEX
00D37E  3  9D F5 E2     		STA	hstbuf,X		;
00D381  3  E8           		INX				;
00D382  3  98           		TYA				; THEN HIGH BYTE OF WORD
00D383  3  9D F5 E2     		STA	hstbuf,X		;
00D386  3  E8           		INX
00D387  3  E0 00        		CPX    	#$00			;
00D389  3  D0 E7        		BNE	IDEBUFRD		;
00D38B  3               IDEBUFRD1:
00D38B  3  8E A2 D0     		STX	PPIDEINDEX
00D38E  3  A9 08        		LDA	#PPIDE_DATA
00D390  3  20 C0 D4     		JSR	IDE_READ
00D393  3  8A           		TXA
00D394  3  AE A2 D0     		LDX	PPIDEINDEX
00D397  3  9D F5 E3     		STA	hstbuf+256,X		;
00D39A  3  E8           		INX				;
00D39B  3  98           		TYA				; THEN HIGH BYTE OF WORD
00D39C  3  9D F5 E3     		STA	hstbuf+256,X		;
00D39F  3  E8           		INX				;
00D3A0  3  E0 00        		CPX    	#$00			;
00D3A2  3  D0 E7        		BNE	IDEBUFRD1		;
00D3A4  3  60           		RTS				;
00D3A5  3               
00D3A5  3               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
00D3A5  3               ;*
00D3A5  3               ;*  WRITE IDE BUFFER LITTLE ENDIAN
00D3A5  3               ;*
00D3A5  3               ;*____________________________________________________________________________________________________
00D3A5  3               IDE_WRITE_BUFFER:
00D3A5  3  A2 00        		LDX    	#$00			; INDEX
00D3A7  3               IDEBUFWT:
00D3A7  3  8E A2 D0     		STX	PPIDEINDEX
00D3AA  3  BD F6 E2     		LDA     hstbuf+1,X		; SECTORS ARE BIG ENDIAN
00D3AD  3  A8           		TAY				;
00D3AE  3  BD F5 E2     		LDA     hstbuf,X		; SECTORS ARE BIG ENDIAN
00D3B1  3  AA           		TAX
00D3B2  3  A9 08        		LDA	#PPIDE_DATA
00D3B4  3  20 DE D4     		JSR	IDE_WRITE
00D3B7  3  AE A2 D0     		LDX	PPIDEINDEX
00D3BA  3  E8           		INX				;
00D3BB  3  E8           		INX				;
00D3BC  3  E0 00        		CPX    	#$00			;
00D3BE  3  D0 E7        		BNE	IDEBUFWT		;
00D3C0  3  A2 00        		LDX    	#$00			; INDEX
00D3C2  3               IDEBUFWT1:
00D3C2  3  8E A2 D0     		STX	PPIDEINDEX
00D3C5  3  BD F6 E3     		LDA     hstbuf+257,X		; SECTORS ARE BIG ENDIAN
00D3C8  3  A8           		TAY
00D3C9  3  BD F5 E3     		LDA     hstbuf+256,X		; SECTORS ARE BIG ENDIAN
00D3CC  3  AA           		TAX
00D3CD  3  A9 08        		LDA	#PPIDE_DATA
00D3CF  3  20 DE D4     		JSR	IDE_WRITE
00D3D2  3  AE A2 D0     		LDX	PPIDEINDEX
00D3D5  3  E8           		INX				;
00D3D6  3  E8           		INX				;
00D3D7  3  E0 00        		CPX    	#$00			;
00D3D9  3  D0 E7        		BNE	IDEBUFWT1		;
00D3DB  3  60           		RTS				;
00D3DC  3               
00D3DC  3               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
00D3DC  3               ;*
00D3DC  3               ;*  SETUP LBA DATA
00D3DC  3               ;*
00D3DC  3               ;*____________________________________________________________________________________________________
00D3DC  3               IDE_SETUP_LBA:
00D3DC  3               		PRTDBG "PPIDE SETUP LBA$"
00D3DC  3  20 11 CF     		JSR 	GET_DRIVE_DEVICE
00D3DF  3  29 01        		and 	#$01			; only want drive cfg
00D3E1  3  0A           		asl	a			; SHIFT 4
00D3E2  3  0A           		asl	a			;
00D3E3  3  0A           		asl	a			;
00D3E4  3  0A           		asl	a			;
00D3E5  3  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
00D3E7  3  AA           		TAX
00D3E8  3  A0 00        		LDY	#$00
00D3EA  3  A9 0E        		LDA	#PPIDE_DEVICE
00D3EC  3  20 DE D4     		JSR	IDE_WRITE
00D3EF  3               
00D3EF  3  AE 7B DA     		LDX    	debcylm
00D3F2  3  A9 0D        		LDA	#PPIDE_LBAHI
00D3F4  3  20 DE D4     		JSR	IDE_WRITE
00D3F7  3               
00D3F7  3  AE 7A DA     		LDX    	debcyll			;
00D3FA  3  A9 0C        		LDA	#PPIDE_LBAMID
00D3FC  3  20 DE D4     		JSR	IDE_WRITE
00D3FF  3               
00D3FF  3  AE 7C DA     		LDX    	debsehd			;
00D402  3  A9 0B        		LDA	#PPIDE_LBALOW
00D404  3  20 DE D4     		JSR	IDE_WRITE
00D407  3               
00D407  3  A2 01        		LDX	#$01
00D409  3  A9 0A        		LDA	#PPIDE_SEC_CNT
00D40B  3  20 DE D4     		JSR	IDE_WRITE
00D40E  3               
00D40E  3  60           		RTS
00D40F  3               
00D40F  3               ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
00D40F  3               ;
00D40F  3               ; 	TRANSLATE SECTORS INTO IDE FORMAT
00D40F  3               ;________________________________________________________________________________________________________
00D40F  3               IDE_CONVERT_SECTOR:
00D40F  3  AD 76 DA     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
00D412  3  29 0F        	AND 	#$0F			; ISOLATE HEAD IN LOW 4 BITS
00D414  3  0A           	asl	a			; MOVE TO HIGH BYTE
00D415  3  0A           	asl	a
00D416  3  0A           	asl	a
00D417  3  0A           	asl	a
00D418  3  AA           	TAX 				; PARK IN X
00D419  3  AD 78 DA     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
00D41C  3  4A           	LSR	A			;
00D41D  3  4A           	LSR	A			; DIVIDE BY 4 (FOR BLOCKING)
00D41E  3  29 0F        	AND 	#$0F 			; CLEAR UPPER 4 BITS (JUST 'CAUSE)
00D420  3  8D 7C DA     	STA	debsehd			; STORE IN SECTOR/HEAD
00D423  3  8A           	TXA 				; GET HEAD BACK
00D424  3  0D 7C DA     	ORA 	debsehd
00D427  3  8D 7C DA     	STA	debsehd			; STORE IN SECTOR/HEAD
00D42A  3               
00D42A  3  AD 76 DA     	LDA 	sektrk
00D42D  3  8D 7A DA     	STA	debcyll			; STORE IN TRACK (lsb)
00D430  3  AD 77 DA     	LDA 	sektrk+1
00D433  3  8D 7B DA     	STA	debcylm			; STORE IN TRACK (msb)
00D436  3               					; REMOVE HEAD FROM TRACK VALUE (DIV/4)
00D436  3  AD 7B DA     	LDA	debcylm
00D439  3  4A           	LSR 	A
00D43A  3  8D 7B DA     	STA	debcylm
00D43D  3  AD 7A DA     	LDA	debcyll
00D440  3  6A           	ROR 	A
00D441  3  8D 7A DA     	STA	debcyll
00D444  3               
00D444  3  AD 7B DA     	LDA	debcylm
00D447  3  4A           	LSR 	A
00D448  3  8D 7B DA     	STA	debcylm
00D44B  3  AD 7A DA     	LDA	debcyll
00D44E  3  6A           	ROR 	A
00D44F  3  8D 7A DA     	STA	debcyll
00D452  3               
00D452  3  AD 7B DA     	LDA	debcylm
00D455  3  4A           	LSR 	A
00D456  3  8D 7B DA     	STA	debcylm
00D459  3  AD 7A DA     	LDA	debcyll
00D45C  3  6A           	ROR 	A
00D45D  3  8D 7A DA     	STA	debcyll
00D460  3               
00D460  3  AD 7B DA     	LDA	debcylm
00D463  3  4A           	LSR 	A
00D464  3  8D 7B DA     	STA	debcylm
00D467  3  AD 7A DA     	LDA	debcyll
00D46A  3  6A           	ROR 	A
00D46B  3  8D 7A DA     	STA	debcyll
00D46E  3               
00D46E  3               ;	ADD SLICE OFFSET
00D46E  3  AD 6E DA     	LDA	sekdsk			; GET DRIVE#
00D471  3  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
00D473  3  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
00D474  3  AA           	TAX 				; MOVE TO X REGISTER
00D475  3  E8           	INX				; WANT SECOND BYTE OF ENTRY
00D476  3  BD 40 CE     	LDA 	dskcfg,X 		; GET SLICE#
00D479  3  8D 84 DA     	STA 	slicetmp+1 		; SLICE OFFSET MSB
00D47C  3  A9 00        	LDA 	#0	 		; GET SLICE#
00D47E  3  8D 83 DA     	STA 	slicetmp		; SLICE OFFSET LSB
00D481  3  18           	CLC				; VOODOO MATH TO TAKE SLICE*$4000
00D482  3  6E 84 DA     	ROR 	slicetmp+1
00D485  3  6E 83 DA     	ROR	slicetmp
00D488  3  6E 84 DA     	ROR 	slicetmp+1
00D48B  3  6E 83 DA     	ROR	slicetmp
00D48E  3               					; ADD SLICE OFFSET TO TRACK #
00D48E  3  18           	clc				; clear carry
00D48F  3  AD 83 DA     	lda slicetmp
00D492  3  6D 7A DA     	adc debcyll
00D495  3  8D 7A DA     	sta debcyll			; store sum of LSBs
00D498  3  AD 84 DA     	lda slicetmp+1
00D49B  3  6D 7B DA     	adc debcylm			; add the MSBs using carry from
00D49E  3  8D 7B DA     	sta debcylm			; the previous calculation
00D4A1  3               
00D4A1  3               
00D4A1  3                 .IF USEDSKY=1 || USEDSKYNG=1
00D4A1  3                 	PRTDBG "DSKY OUTPUT 1$"
00D4A1  3  AD 6E DA       	lda	sekdsk
00D4A4  3  8D 5D D8       	sta	DSKY_HEXBUF
00D4A7  3  AD 7B DA      	lda	debcylm
00D4AA  3  8D 5E D8       	sta	DSKY_HEXBUF+1
00D4AD  3  AD 7A DA      	lda	debcyll
00D4B0  3  8D 5F D8       	sta	DSKY_HEXBUF+2
00D4B3  3  AD 7C DA         	lda	debsehd
00D4B6  3  8D 60 D8       	sta	DSKY_HEXBUF+3
00D4B9  3  20 7C D6       	JSR	DSKY_BIN2SEG
00D4BC  3  20 B1 D6     	JSR	DSKY_SHOW
00D4BF  3                 .ENDIF
00D4BF  3  60           	RTS
00D4C0  3               
00D4C0  3               
00D4C0  3               ;-------------------------------------------------------------------------------
00D4C0  3               
00D4C0  3               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
00D4C0  3               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
00D4C0  3               ; PROGRAM WOULD NOT CALL TO THESE.
00D4C0  3               
00D4C0  3               	;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
00D4C0  3               	;INPUT A = IDE REGSITER ADDRESS
00D4C0  3               	;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
00D4C0  3               	;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
00D4C0  3               
00D4C0  3               IDE_READ:
00D4C0  3  20 FA D4     	JSR	SET_PPI_RD		; SETUP FOR A READ CYCLE
00D4C3  3               
00D4C3  3  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
00D4C6  3  09 40        	ORA	#PPIDE_RD_LINE		; ASSERT RD PIN
00D4C8  3  8D 62 03     	STA	PPIDECNTRL
00D4CB  3  48           	PHA
00D4CC  3               
00D4CC  3  AE 60 03     	LDX	PPIDELO			; READ LOWER BYTE
00D4CF  3  AC 61 03     	LDY	PPIDEHI			; READ UPPER BYTE
00D4D2  3               
00D4D2  3  68           	PLA				; RESTORE REGISTER VALUE
00D4D3  3  49 40        	EOR	#PPIDE_RD_LINE		; DE-ASSERT RD SIGNAL
00D4D5  3  8D 62 03     	STA	PPIDECNTRL
00D4D8  3  A9 00        	LDA	#$00
00D4DA  3  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
00D4DD  3  60           	RTS
00D4DE  3               
00D4DE  3               
00D4DE  3               
00D4DE  3               
00D4DE  3               	;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
00D4DE  3               	;INPUT A = IDE REGISTER ADDRESS
00D4DE  3               	;INPUT REGISTER X = LSB TO WRITE
00D4DE  3               	;INPUT REGISTER Y = MSB TO WRITE
00D4DE  3               	;
00D4DE  3               
00D4DE  3               
00D4DE  3               IDE_WRITE:
00D4DE  3  20 02 D5     	JSR	SET_PPI_WR		; SETUP FOR A WRITE CYCLE
00D4E1  3               
00D4E1  3  8E 60 03     	STX	PPIDELO			; WRITE LOWER BYTE
00D4E4  3  8C 61 03     	STY	PPIDEHI			; WRITE UPPER BYTE
00D4E7  3               
00D4E7  3  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
00D4EA  3               
00D4EA  3  09 20        	ORA	#PPIDE_WR_LINE		; ASSERT WRITE PIN
00D4EC  3  8D 62 03     	STA	PPIDECNTRL
00D4EF  3               
00D4EF  3  49 20        	EOR	#PPIDE_WR_LINE		; DE ASSERT WR PIN
00D4F1  3  8D 62 03     	STA	PPIDECNTRL
00D4F4  3               
00D4F4  3  A9 00        	LDA	#$00
00D4F6  3  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
00D4F9  3  60           	RTS
00D4FA  3               
00D4FA  3               
00D4FA  3               ;-----------------------------------------------------------------------------------
00D4FA  3               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
00D4FA  3               ;
00D4FA  3               ;------------------------------------------------------------------------------------
00D4FA  3               
00D4FA  3               SET_PPI_RD:
00D4FA  3  48           	PHA
00D4FB  3  A9 92        	LDA	#PPRD_IDE_8255
00D4FD  3  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, READ MODE
00D500  3  68           	PLA
00D501  3  60           	RTS
00D502  3               
00D502  3               SET_PPI_WR:
00D502  3  48           	PHA
00D503  3  A9 80        	LDA	#PPWR_IDE_8255
00D505  3  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, WRITE MODE
00D508  3  68           	PLA
00D509  3  60           	RTS
00D50A  3               
00D50A  2               	.ENDIF
00D50A  2               
00D50A  2               	.IF USEFLOPPYA=1 | USEFLOPPYB=1
00D50A  2               		.INCLUDE "DOS65\\DOSFLPV3.ASM"
00D50A  2               	.ENDIF
00D50A  2               
00D50A  2               	.IF USEDSKY=1
00D50A  2               		.INCLUDE "DOSDSKY.ASM"
00D50A  2               	.ENDIF
00D50A  2               
00D50A  2               	.IF USEDSKYNG=1
00D50A  2               		.INCLUDE "dosdskyn.asm"
00D50A  3               ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
00D50A  3               ;
00D50A  3               ; 	Nhyodyne DSKY/NG drivers
00D50A  3               ;
00D50A  3               ;	Entry points:
00D50A  3               ;               DSKY_INIT
00D50A  3               ;               DSKY_SHOW
00D50A  3               ;               DSKY_BIN2SEG
00D50A  3               ;               DSKY_RESET
00D50A  3               ;               DSKY_STAT
00D50A  3               ;               DSKY_GETKEY
00D50A  3               ;               DSKY_BEEP
00D50A  3               ;               DSKY_L1ON
00D50A  3               ;               DSKY_L2ON
00D50A  3               ;               DSKY_L1OFF
00D50A  3               ;               DSKY_L2OFF
00D50A  3               ;               DSKY_PUTLED
00D50A  3               ;               DSKY_BLANK
00D50A  3               ;________________________________________________________________________________________________________________________________
00D50A  3               ;
00D50A  3               ;
00D50A  3               ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
00D50A  3               ;
00D50A  3               ; LED SEGMENTS (BIT VALUES)
00D50A  3               ;
00D50A  3               ;	+--01--+
00D50A  3               ;	20    02
00D50A  3               ;	+--40--+
00D50A  3               ;	10    04
00D50A  3               ;	+--08--+  80
00D50A  3               ;
00D50A  3               ; KEY CODE MAP (KEY CODES) CSCCCRRR
00D50A  3               ;                          ||||||||
00D50A  3               ;                          |||||+++-- ROW
00D50A  3               ;                          ||+++----- COL
00D50A  3               ;                          |+-------- SHIFT
00D50A  3               ;                          +--------- CONTROL
00D50A  3               ;
00D50A  3               ;	00	08	10	18	23
00D50A  3               ;	01	09	11	19	22
00D50A  3               ;	02	0A	12	1A	21
00D50A  3               ;	03	0B	13	1B	20
00D50A  3               ;	04	0C	14	1C	SHIFT
00D50A  3               ;	05	0D	15	1D	CTRL
00D50A  3               ;
00D50A  3               ; LED BIT MAP (BIT VALUES)
00D50A  3               ;
00D50A  3               ;	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
00D50A  3               ;	---	---	---	---	---	---	---	---
00D50A  3               ;	01	01	01	01	01
00D50A  3               ;	02	02	02	02	02
00D50A  3               ;	04      04      04      04	04
00D50A  3               ;	08      08      08      08	08
00D50A  3               ;	10      10      10      10	10
00D50A  3               ;	20      20      20      20	20	L1	L2 	BUZZ
00D50A  3               ;
00D50A  3               DSKY_PPI	=	$0360		; PORT
00D50A  3               DSKY_PPIA	= 	DSKY_PPI + 0 	; PORT A
00D50A  3               DSKY_PPIB	= 	DSKY_PPI + 1 	; PORT B
00D50A  3               DSKY_PPIC	= 	DSKY_PPI + 2    ; PORT C
00D50A  3               DSKY_PPIX 	= 	DSKY_PPI + 3    ; PPI CONTROL PORT
00D50A  3               ;
00D50A  3               DSKY_PPIX_RD	=	%10010010	; PPIX VALUE FOR READS
00D50A  3               DSKY_PPIX_WR	=	%10000010	; PPIX VALUE FOR WRITES
00D50A  3               ;
00D50A  3               ; PIO CHANNEL C:
00D50A  3               ;
00D50A  3               ;	7	6	5	4	3	2	1	0
00D50A  3               ;	RES	0	0	CS	CS	/RD	/WR	A0
00D50A  3               ;
00D50A  3               ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
00D50A  3               ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
00D50A  3               ;
00D50A  3               DSKY_PPI_IDLE	=	%00000110
00D50A  3               ;
00D50A  3               DSKY_CMD_CLR	=	%11011111	; CLEAR (ALL OFF)
00D50A  3               DSKY_CMD_CLRX	=	%11010011	; CLEAR (ALL ON)
00D50A  3               DSKY_CMD_WDSP	=	%10010000	; WRITE DISPLAY RAM
00D50A  3               DSKY_CMD_RDSP	=	%01110000	; READ DISPLAY RAM
00D50A  3               DSKY_CMD_CLK	=	%00100000	; SET CLK PRESCALE
00D50A  3               DSKY_CMD_FIFO	=	%01000000	; READ FIFO
00D50A  3               ;
00D50A  3               DSKY_PRESCL	=	DSKYOSC/100000	; PRESCALER
00D50A  3               ;
00D50A  3               ;__DSKY_INIT_________________________________________________________________________________________
00D50A  3               ;
00D50A  3               ;  DISPLAY DSKY INFO
00D50A  3               ;____________________________________________________________________________________________________
00D50A  3               ;
00D50A  3               DSKY_INIT:
00D50A  3                       PRTDBG "DSKY INIT:$"
00D50A  3  20 C6 D5             JSR     DSKY_PREINIT
00D50D  3  48 DA 5A A2  	PRTS "DSKY:$"
00D511  3  00 BD 26 D5  
00D515  3  E8 C9 24 F0  
00D52C  3  20 FE CB            	JSR	NEWLINE
00D52F  3               
00D52F  3               ;
00D52F  3  48 DA 5A A2  	PRTS    " IO=0x$"
00D533  3  00 BD 48 D5  
00D537  3  E8 C9 24 F0  
00D54F  3  A9 03        	LDA	#>DSKY_PPI		; GET BASE PORT
00D551  3  20 DC CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D554  3  A9 60               	LDA	#<DSKY_PPI		; GET BASE PORT
00D556  3  20 DC CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D559  3  48 DA 5A A2  	PRTS    " MODE=$"
00D55D  3  00 BD 72 D5  
00D561  3  E8 C9 24 F0  
00D579  3  48 DA 5A A2  	PRTS    "NG$"			; PRINT DSKY TYPE
00D57D  3  00 BD 92 D5  
00D581  3  E8 C9 24 F0  
00D595  3               ;
00D595  3  AD 54 D8     	LDA	DSKY_PRESENT	        ; PRESENT?
00D598  3  C9 FF        	CMP     #$FF		        ; SET FLAGS
00D59A  3  F0 26                BEQ     DSKY_INITA
00D59C  3  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
00D5A0  3  00 BD B5 D5  
00D5A4  3  E8 C9 24 F0  
00D5C2  3               DSKY_INITA:
00D5C2  3  20 FE CB     	JSR	NEWLINE
00D5C5  3  60           	RTS				; DONE
00D5C6  3               ;
00D5C6  3               ;__DSKY_PREINIT______________________________________________________________________________________
00D5C6  3               ;
00D5C6  3               ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
00D5C6  3               ;____________________________________________________________________________________________________
00D5C6  3               ; HARDWARE RESET 8279 BY PULSING RESET LINE
00D5C6  3               DSKY_PREINIT:
00D5C6  3               	; CHECK FOR PPI
00D5C6  3  20 0B D6     	JSR	DSKY_PPIDETECT		; TEST FOR PPI HARDWARE
00D5C9  3  D0 2A                BNE     DSKY_ABORT      	; BAIL OUT IF NOT THERE
00D5CB  3               
00D5CB  3               	; SETUP PPI TO DEFAULT MODE
00D5CB  3  20 2D D8     	JSR	DSKY_PPIRD
00D5CE  3               	; INIT 8279 VALUES TO IDLE STATE
00D5CE  3  A9 06        	LDA	#DSKY_PPI_IDLE
00D5D0  3  8D 62 03     	STA	DSKY_PPIC
00D5D3  3               	; PULSE RESET SIGNAL ON 8279
00D5D3  3  09 80        	ORA 	#%10000000
00D5D5  3  8D 62 03     	STA	DSKY_PPIC
00D5D8  3  29 7F        	AND 	#%01111111
00D5DA  3  8D 62 03     	STA	DSKY_PPIC
00D5DD  3               	; INITIALIZE 8279
00D5DD  3  20 F6 D5     	JSR	DSKY_REINIT
00D5E0  3               	; NOW SEE IF A DSKYNG IS REALLY THERE...
00D5E0  3  A9 A5        	LDA     #$A5
00D5E2  3  A0 00                LDY     #$00
00D5E4  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D5E7  3  A0 00                LDY     #$00
00D5E9  3  20 5B D7     	JSR	DSKY_GETBYTE
00D5EC  3  C9 A5        	CMP	#$A5
00D5EE  3  D0 05        	BNE     DSKY_ABORT			; BAIL OUT IF MISCOMPARE
00D5F0  3  A9 FF        	LDA	#$FF
00D5F2  3  8D 54 D8     	STA	DSKY_PRESENT
00D5F5  3               DSKY_ABORT:
00D5F5  3  60           	RTS
00D5F6  3               ;
00D5F6  3               DSKY_REINIT:
00D5F6  3  20 3F D8     	JSR	DSKY_PPIIDLE
00D5F9  3               	; SET CLOCK SCALER TO 20
00D5F9  3  A9 21        	LDA	#DSKY_CMD_CLK | DSKY_PRESCL
00D5FB  3  20 C7 D6     	JSR	DSKY_CMD
00D5FE  3               	; FALL THRU
00D5FE  3               ;
00D5FE  3               DSKY_RESET:
00D5FE  3               	; RESET DSKY -- CLEAR RAM AND FIFO
00D5FE  3  A9 DF        	LDA	#DSKY_CMD_CLR
00D600  3  20 C7 D6     	JSR	DSKY_CMD
00D603  3               ;
00D603  3               	; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
00D603  3               	; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
00D603  3               	; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
00D603  3               	; IS USED TO IMPLEMENT A TIMEOUT.
00D603  3  A2 00        	LDX	#0			; TIMEOUT LOOP COUNTER
00D605  3               DSKY_RESET1:
00D605  3  DA           	PHX     			; SAVE COUNTER
00D606  3               	;JSR	DSKY_ST			; GET STATUS BYTE
00D606  3  FA           	PLX				; RECOVER COUNTER
00D607  3                     ;  AND     #%10000000
00D607  3                     ;  BEQ     DSKY_RESET2		; MOVE ON IF DONE
00D607  3  CA                   DEX
00D608  3  D0 FB                BNE     DSKY_RESET1		; LOOP TILL TIMEOUT
00D60A  3               ;
00D60A  3               DSKY_RESET2:
00D60A  3  60           	RTS
00D60B  3               ;
00D60B  3               ;
00D60B  3               ;
00D60B  3               ;__DSKY_PPIDETECT____________________________________________________________________________________
00D60B  3               ;
00D60B  3               ;  PROBE FOR PPI HARDWARE
00D60B  3               ;____________________________________________________________________________________________________
00D60B  3               ;
00D60B  3               DSKY_PPIDETECT:
00D60B  3               ;
00D60B  3               	; TEST FOR PPI EXISTENCE
00D60B  3               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
00D60B  3               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
00D60B  3               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
00D60B  3               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
00D60B  3               	; INTERFERE WITH THE VALUE BEING READ.
00D60B  3  20 16 D8     	JSR	DSKY_PPIWR
00D60E  3               ;
00D60E  3  A9 00        	LDA     #$00			; VALUE ZERO
00D610  3  8D 60 03     	STA	DSKY_PPIA		; PUSH VALUE TO PORT
00D613  3  AD 60 03     	LDA	DSKY_PPIA		; GET PORT VALUE
00D616  3  C9 00                CMP     #$00
00D618  3  60           	RTS				; AND RETURN
00D619  3               ;
00D619  3                .IF DSKY_KBD=1
00D619  3               ;
00D619  3               KY_0	=	$00
00D619  3               KY_1	=	$01
00D619  3               KY_2	=	$02
00D619  3               KY_3	=	$03
00D619  3               KY_4	=	$04
00D619  3               KY_5	=	$05
00D619  3               KY_6	=	$06
00D619  3               KY_7	=	$07
00D619  3               KY_8	=	$08
00D619  3               KY_9	=	$09
00D619  3               KY_A	=	$0A
00D619  3               KY_B	=	$0B
00D619  3               KY_C	=	$0C
00D619  3               KY_D	=	$0D
00D619  3               KY_E	=	$0E
00D619  3               KY_F	=	$0F
00D619  3               KY_FW	=	$10	; FORWARD
00D619  3               KY_BK	=	$11	; BACKWARD
00D619  3               KY_CL	=	$12	; CLEAR
00D619  3               KY_EN	=	$13	; ENTER
00D619  3               KY_DE	=	$14	; DEPOSIT
00D619  3               KY_EX	=	$15	; EXAMINE
00D619  3               KY_GO	=	$16	; GO
00D619  3               KY_BO	=	$17	; BOOT
00D619  3               KY_F4	=	$18	; F4
00D619  3               KY_F3	=	$19	; F3
00D619  3               KY_F2	=	$20	; F2
00D619  3               KY_F1	=	$21	; F1
00D619  3               ;
00D619  3               ;__DSKY_STAT_________________________________________________________________________________________
00D619  3               ;
00D619  3               ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
00D619  3               ;____________________________________________________________________________________________________
00D619  3               ;
00D619  3               DSKY_STAT:
00D619  3  AD 54 D8     	LDA	DSKY_PRESENT            ; DOES IT EXIST?
00D61C  3  C9 FF        	CMP     #$FF			; SET FLAGS
00D61E  3  D0 05                BNE     DSKY_STATA		; ABORT WITH A=0 IF NOT THERE
00D620  3  20 00 D7     	JSR	DSKY_ST
00D623  3  29 0F        	AND	#$0F			; ISOLATE THE CUR FIFO LEN
00D625  3               DSKY_STATA:
00D625  3  60           	RTS
00D626  3               ;
00D626  3               ;__DSKY_GETKEY_____________________________________________________________________________________
00D626  3               ;
00D626  3               ;  WAIT FOR A DSKY KEYPRESS AND RETURN
00D626  3               ;____________________________________________________________________________________________________
00D626  3               ;
00D626  3               DSKY_GETKEY:
00D626  3  AD 54 D8     	LDA	DSKY_PRESENT    	; DOES IT EXIST?
00D629  3  C9 FF               	CMP     #$FF			; SET FLAGS
00D62B  3  D0 24                BNE     DSKY_GETKEY1A		; ABORT WITH A=0 IF NOT THERE
00D62D  3  20 19 D6     	JSR	DSKY_STAT
00D630  3  F0 F4                BEQ     DSKY_GETKEY		; LOOP IF NOTHING THERE
00D632  3  A9 40        	LDA	#DSKY_CMD_FIFO
00D634  3  20 C7 D6     	JSR	DSKY_CMD
00D637  3  20 05 D7     	JSR	DSKY_DIN
00D63A  3  49 C0        	EOR	#%11000000		; FLIP POLARITY OF SHIFT/CTL BITS
00D63C  3  48                   PHA
00D63D  3  29 3F        	AND	#$3F			; STRIP SHIFT/CTL BITS FOR LOOKUP
00D63F  3  8D 52 D8     	STA     DSKY_TEMP_VAL
00D642  3  A2 00        	LDX	#0			; INDEX
00D644  3               DSKY_GETKEY1:
00D644  3  BD 60 D6             LDA     DSKY_KEYMAP,X
00D647  3  CD 52 D8     	CMP	DSKY_TEMP_VAL		; MATCH?
00D64A  3  F0 09                BEQ     DSKY_GETKEY2		; FOUND, DONE
00D64C  3  E8           	INX
00D64D  3  E0 1C                CPX     #28
00D64F  3  D0 F3                BNE	DSKY_GETKEY1		; LOOP UNTIL EOT
00D651  3               DSKY_GETKEY1A:
00D651  3  68                   PLA
00D652  3  A9 FF        	LDA	#$FF			; NOT FOUND ERR, RETURN $FF
00D654  3  60           	RTS
00D655  3               DSKY_GETKEY2:
00D655  3               	; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
00D655  3               	; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
00D655  3  68           	PLA				; RESTORE RAW VALUE
00D656  3  25 C0        	AND	%11000000		; ISOLATE SHIFT/CTRL BITS
00D658  3  8D 52 D8             STA     DSKY_TEMP_VAL
00D65B  3  8A                   TXA
00D65C  3  0D 52 D8     	ORA	DSKY_TEMP_VAL		; COMBINE WITH INDEX VALUE
00D65F  3  60           	RTS
00D660  3               ;
00D660  3               ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
00D660  3               ;
00D660  3               DSKY_KEYMAP:
00D660  3               	; POS	$00  $01  $02  $03  $04  $05  $06  $07
00D660  3               	; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
00D660  3  0D 04 0C 14  	.BYTE	$0D, $04, $0C, $14, $03, $0B, $13, $02
00D664  3  03 0B 13 02  
00D668  3               ;
00D668  3               	; POS	$08  $09  $0A  $0B  $0C  $0D  $0E  $0F
00D668  3               	; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
00D668  3  0A 12 01 09  	.BYTE	$0A, $12, $01, $09, $11, $00, $08, $10
00D66C  3  11 00 08 10  
00D670  3               ;
00D670  3               	; POS	$10  $11  $12  $13  $14  $15  $16  $17
00D670  3               	; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
00D670  3  05 15 1D 1C  	.BYTE	$05, $15, $1D, $1C, $1B, $1A, $19, $18
00D674  3  1B 1A 19 18  
00D678  3               
00D678  3               	; POS	$18  $19  $20  $21
00D678  3               	; KEY   [F4] [F3] [F2] [F1]
00D678  3  23 22 21 20  	.BYTE	$23, $22, $21, $20
00D67C  3               
00D67C  3               ;
00D67C  3                       .ENDIF	; DSKY_KBD
00D67C  3               ;
00D67C  3               ;__DSKY_BIN2SEG________________________________________________________________________________________
00D67C  3               ;
00D67C  3               ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
00D67C  3               ;
00D67C  3               ; DSKY_BUF: 32 BIT BINARY
00D67C  3               ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
00D67C  3               ;____________________________________________________________________________________________________
00D67C  3               ;
00D67C  3               DSKY_BIN2SEG:
00D67C  3  A2 00        	LDX	#$00
00D67E  3               DSKY_BIN2SEG1:
00D67E  3  BD 5D D8     	LDA	DSKY_HEXBUF,X			; FIRST NIBBLE
00D681  3  4A           	LSR	A
00D682  3  4A                   LSR	A
00D683  3  4A                   LSR	A
00D684  3  4A                   LSR	A
00D685  3  DA           	PHX                                     ; STORE READ INDEX
00D686  3  AA                   TAX					; MOVE DIGIT TO LOOKUP INDEX
00D687  3  BD 42 D8     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
00D68A  3  FA           	PLX                                     ; GET READ INDEX
00D68B  3  DA           	PHX
00D68C  3  48           	PHA
00D68D  3  8A           	TXA
00D68E  3  0A           	asl	a
00D68F  3  AA           	TAX
00D690  3  68           	PLA
00D691  3  9D 55 D8             STA     DSKY_BUF,X    		        ;STORE HIGH BYTE IN OUT BUFFER
00D694  3  FA           	PLX
00D695  3  BD 5D D8     	LDA	DSKY_HEXBUF,X			; SECOND NIBBLE
00D698  3               
00D698  3  29 0F        	AND	#$0F
00D69A  3  DA                   PHX
00D69B  3  AA                   TAX
00D69C  3  BD 42 D8     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
00D69F  3  FA           	PLX
00D6A0  3  DA           	PHX
00D6A1  3  48           	PHA
00D6A2  3  8A           	TXA		                        ; GET READ INDEX
00D6A3  3  0A           	asl	a
00D6A4  3  AA           	TAX
00D6A5  3  E8           	INX
00D6A6  3  68           	PLA
00D6A7  3  9D 55 D8             STA     DSKY_BUF,X	                ;STORE HIGH BYTE IN OUT BUFFER
00D6AA  3  FA           	PLX
00D6AB  3  E8                   INX
00D6AC  3  E0 04                CPX     #4
00D6AE  3  D0 CE                BNE     DSKY_BIN2SEG1
00D6B0  3  60           	RTS
00D6B1  3               ;
00D6B1  3               ;__DSKY_SHOW___________________________________________________________________________________________
00D6B1  3               ; DSKY SHOW BUFFER
00D6B1  3               ;______________________________________________________________________________________________________
00D6B1  3               ;
00D6B1  3               DSKY_SHOW:
00D6B1  3  48                   PHA
00D6B2  3  DA                   PHX
00D6B3  3  5A                   PHY
00D6B4  3  A2 00                LDX     #0
00D6B6  3               DSKY_SHOW1:
00D6B6  3  BD 55 D8     	LDA     DSKY_BUF,X
00D6B9  3  DA                   PHX
00D6BA  3  7A                   PLY
00D6BB  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D6BE  3  E8           	INX
00D6BF  3  E0 08                CPX     #8
00D6C1  3  D0 F3                BNE     DSKY_SHOW1
00D6C3  3  7A                   PLY
00D6C4  3  FA                   PLX
00D6C5  3  68                   PLA
00D6C6  3  60           	RTS
00D6C7  3               
00D6C7  3               ;______________________________________________________________________________________________________
00D6C7  3               ; DSKYNG OUTPUT ROUTINES
00D6C7  3               ;______________________________________________________________________________________________________
00D6C7  3               
00D6C7  3               ; SEND DSKY COMMAND BYTE IN REGISTER A
00D6C7  3               DSKY_CMD:
00D6C7  3  48                   PHA
00D6C8  3  A9 01        	LDA	#$01
00D6CA  3  4C D0 D6     	JMP	DSKY_DOUT2
00D6CD  3               ;
00D6CD  3               ; SEND DSKY DATA BYTE IN REGISTER A
00D6CD  3               ; TRASHES BC
00D6CD  3               ;
00D6CD  3               DSKY_DOUT:
00D6CD  3  48                   PHA
00D6CE  3  A9 00        	LDA	#$00
00D6D0  3               ;
00D6D0  3               DSKY_DOUT2:
00D6D0  3               	; SET PPI LINE CONFIG TO WRITE MODE
00D6D0  3  20 16 D8     	JSR	DSKY_PPIWR
00D6D3  3               ;
00D6D3  3               	; SET ADDRESS FIRST
00D6D3  3  09 06                ORA     #DSKY_PPI_IDLE
00D6D5  3  8D 62 03     	STA	DSKY_PPIC
00D6D8  3               ;
00D6D8  3               	; ASSERT 8279 /CS
00D6D8  3  09 18        	ORA     #%00011000
00D6DA  3  8D 62 03     	STA	DSKY_PPIC
00D6DD  3               ;
00D6DD  3               	; PPIC WORKING VALUE TO DSKY_TEMP_VAL
00D6DD  3  8D 52 D8     	STA     DSKY_TEMP_VAL
00D6E0  3               ;
00D6E0  3               	; ASSERT DATA BYTE VALUE
00D6E0  3  68                   PLA
00D6E1  3  8D 60 03     	STA	DSKY_PPIA
00D6E4  3               ;
00D6E4  3               	; PULSE /WR
00D6E4  3  AD 52 D8             LDA     DSKY_TEMP_VAL
00D6E7  3  29 FD                AND     #%11111101
00D6E9  3  8D 62 03     	STA	DSKY_PPIC
00D6EC  3  EA           	NOP			; MAY NOT BE NEEDED
00D6ED  3  09 02                ORA     #%00000010
00D6EF  3  8D 62 03     	STA	DSKY_PPIC
00D6F2  3               ;
00D6F2  3               	; DEASSERT /CS
00D6F2  3  29 E7                AND     #%11100111
00D6F4  3  8D 62 03     	STA	DSKY_PPIC
00D6F7  3               ;
00D6F7  3               	; CLEAR ADDRESS BIT
00D6F7  3  29 E6                AND     #%11100110
00D6F9  3  8D 62 03     	STA	DSKY_PPIC
00D6FC  3               ;
00D6FC  3               	; DONE
00D6FC  3  20 3F D8     	JSR	DSKY_PPIIDLE
00D6FF  3  60           	RTS
00D700  3               ;
00D700  3               ;==================================================================================================
00D700  3               ; DSKYNG OUTPUT ROUTINES
00D700  3               ;==================================================================================================
00D700  3               ;
00D700  3               ; RETURN DSKY STATUS VALUE IN A
00D700  3               ;
00D700  3               DSKY_ST:
00D700  3  A9 01        	LDA	#$01
00D702  3  4C 07 D7     	JMP	DSKY_DIN2
00D705  3               ;
00D705  3               ; RETURN NEXT DATA VALUE IN A
00D705  3               ;
00D705  3               DSKY_DIN:
00D705  3  A9 00        	LDA	#$00
00D707  3               ;
00D707  3               DSKY_DIN2:
00D707  3               	; SET PPI LINE CONFIG TO READ MODE
00D707  3  20 2D D8     	JSR	DSKY_PPIRD
00D70A  3               ;
00D70A  3               	; SET ADDRESS FIRST
00D70A  3  09 06        	ORA	#DSKY_PPI_IDLE
00D70C  3  8D 62 03     	STA	DSKY_PPIC
00D70F  3               ;
00D70F  3               	; ASSERT 8279 /CS
00D70F  3  09 18        	ORA     #%00011000
00D711  3  8D 62 03     	STA	DSKY_PPIC
00D714  3               ;
00D714  3               	; ASSERT /RD
00D714  3  29 7B        	AND     #%01111011
00D716  3  8D 62 03     	STA	DSKY_PPIC
00D719  3               ;
00D719  3  8D 52 D8     	STA 	DSKY_TEMP_VAL
00D71C  3               	; GET VALUE
00D71C  3  AD 60 03     	LDA	DSKY_PPIA
00D71F  3  48                   PHA
00D720  3               
00D720  3  AD 52 D8     	LDA 	DSKY_TEMP_VAL
00D723  3               	; DEASSERT /RD
00D723  3  09 04        	ORA     #%00000100
00D725  3  8D 62 03     	STA	DSKY_PPIC
00D728  3               ;
00D728  3               	; DEASSERT /CS
00D728  3  29 E7                AND     #%11100111
00D72A  3  8D 62 03     	STA	DSKY_PPIC
00D72D  3               ;
00D72D  3               	; CLEAR ADDRESS BIT
00D72D  3  29 E6                AND     #%11100110
00D72F  3  8D 62 03     	STA	DSKY_PPIC
00D732  3               ;
00D732  3               	; DONE
00D732  3  20 3F D8     	JSR	DSKY_PPIIDLE
00D735  3  68                   PLA
00D736  3  60           	RTS
00D737  3               
00D737  3               ;__DSKY_BLANK_____________________________________________________________________________________
00D737  3               ;
00D737  3               ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
00D737  3               ;
00D737  3               ;_________________________________________________________________________________________________
00D737  3               ;
00D737  3               DSKY_BLANK:
00D737  3  A9 90        	LDA	#DSKY_CMD_WDSP
00D739  3  20 C7 D6     	JSR	DSKY_CMD
00D73C  3  A2 10        	LDX	#16
00D73E  3               DSKY_BLANK1:
00D73E  3  A9 FF        	LDA	#$FF
00D740  3  20 CD D6     	JSR	DSKY_DOUT
00D743  3  CA                   DEX
00D744  3  D0 F8        	BNE	DSKY_BLANK1
00D746  3  60           	RTS
00D747  3               ;
00D747  3               ;__DSKY_PUTBYTE____________________________________________________________________________________
00D747  3               ;
00D747  3               ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
00D747  3               ; AT LOCATION IN REGISTER Y, VALUE IN A.
00D747  3               ;
00D747  3               ;__________________________________________________________________________________________________
00D747  3               ;
00D747  3               DSKY_PUTBYTE:
00D747  3  5A                   PHY
00D748  3  48                   PHA
00D749  3  48                   PHA
00D74A  3  18           	CLC
00D74B  3  98                   TYA
00D74C  3  69 90        	ADC	#DSKY_CMD_WDSP
00D74E  3  A8                   TAY
00D74F  3  20 C7 D6     	JSR	DSKY_CMD
00D752  3  68                   PLA
00D753  3  49 FF        	EOR	#$FF
00D755  3  20 CD D6     	JSR	DSKY_DOUT
00D758  3  68                   PLA
00D759  3  7A                   PLY
00D75A  3  60           	RTS
00D75B  3               ;
00D75B  3               ;__DSKY_GETBYTE___________________________________________________________________________________
00D75B  3               ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
00D75B  3               ; AT LOCATION IN REGISTER Y, VALUE RETURNED IN A
00D75B  3               ;
00D75B  3               ;_________________________________________________________________________________________________
00D75B  3               ;
00D75B  3               DSKY_GETBYTE:
00D75B  3  18           	CLC
00D75C  3  98                   TYA
00D75D  3  69 70        	ADC	#DSKY_CMD_RDSP
00D75F  3  A8                   TAY
00D760  3  20 C7 D6     	JSR	DSKY_CMD
00D763  3  20 05 D7     	JSR	DSKY_DIN
00D766  3  49 FF        	EOR	#$FF
00D768  3  60           	RTS
00D769  3               
00D769  3               ;
00D769  3               ;__DSKY_PUTLED____________________________________________________________________________________
00D769  3               ;
00D769  3               ;	This function is intended to update the LEDs.  It expects 8 bytes
00D769  3               ;	following the call, and	updates the entire matrix.
00D769  3               ;
00D769  3               ;  EXAMPLE:
00D769  3               ;	JSR 	DSKY_PUTLED
00D769  3               ;	.BYTE 	$00,$00,$00,$00,$00,$00,$00,$00
00D769  3               ;_________________________________________________________________________________________________
00D769  3               ;
00D769  3               DSKY_PUTLED:
00D769  3  8E 52 D8             STX     DSKY_TEMP_VAL           ; STORE X
00D76C  3  BA                   TSX                             ; STORE STACK POINTER
00D76D  3  68                   PLA                             ; GET ADDRESS OF BYTES
00D76E  3  85 14                STA     pointr                  ; STORE ADDRESS IN POINTR
00D770  3  68                   PLA
00D771  3  85 15                STA     pointr+1
00D773  3  9A                   TXS                             ; RESTORE STACK
00D774  3  AE 52 D8             LDX     DSKY_TEMP_VAL           ; RESTORE X
00D777  3  DA                   PHX                             ; STASH REGISTERS
00D778  3  5A                   PHY
00D779  3  48                   PHA
00D77A  3  18                   CLC                             ; REMEMBER ADDRESS IN STACK IS BEFORE STRING
00D77B  3  E6 14                INC     pointr                  ; SO, INC 16BIT POINTER BY 1
00D77D  3  90 02                BCC     @1
00D77F  3  E6 15                INC     pointr+1
00D781  3  A0 00        @1:	LDY 	#$00
00D783  3               DSKY_PUTLED_1:
00D783  3  B1 14                LDA     (pointr),Y              ; GET BYTE
00D785  3  20 47 D7     	JSR	DSKY_PUTBYTE            ; SEND IT TO DSKY
00D788  3  C8                   INY                             ; LOOP TIL DONE
00D789  3  C0 08                CPY     #8
00D78B  3  D0 F6                BNE     DSKY_PUTLED_1
00D78D  3  68                   PLA                             ; RESTORE REGISTERS
00D78E  3  7A                   PLY
00D78F  3  FA                   PLX
00D790  3  8D 52 D8             STA     DSKY_TEMP_VAL           ; STASH A
00D793  3  18                   CLC                             ; INC RETURN ADDRESS BY 8
00D794  3  68                   PLA
00D795  3  69 08                ADC     #8
00D797  3  85 14                STA     pointr
00D799  3  90 03                BCC     DSKY_PUTLED_2
00D79B  3  68                   PLA
00D79C  3  1A                   INC     A
00D79D  3  48                   PHA
00D79E  3               DSKY_PUTLED_2:
00D79E  3  A5 14                LDA     pointr
00D7A0  3  48                   PHA
00D7A1  3  AD 52 D8             LDA     DSKY_TEMP_VAL           ; RESTORE A
00D7A4  3  60           	RTS
00D7A5  3               ;
00D7A5  3               ;__DSKY_BEEP______________________________________________________________________________________
00D7A5  3               ;	This function is intended to beep the speaker on the DSKY
00D7A5  3               ;_________________________________________________________________________________________________
00D7A5  3               ;
00D7A5  3               DSKY_BEEP:
00D7A5  3  5A           	PHY
00D7A6  3  DA                   PHX
00D7A7  3  48           	PHA
00D7A8  3  A0 0F        	LDY 	#$0F
00D7AA  3  20 5B D7     	JSR	DSKY_GETBYTE
00D7AD  3  09 20        	ORA 	#$20
00D7AF  3  A9 20        			LDA 	#$20
00D7B1  3  A0 0F        	LDY	#$0F
00D7B3  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D7B6  3               
00D7B6  3               ;;; 	timer . . .
00D7B6  3  A2 8F        	LDX 	#$8F
00D7B8  3  A0 FF                LDY     #$FF
00D7BA  3               DSKY_BEEP1:
00D7BA  3  88                   DEY
00D7BB  3  D0 FD                BNE     DSKY_BEEP1
00D7BD  3  CA                   DEX
00D7BE  3  D0 FA                BNE     DSKY_BEEP1
00D7C0  3               
00D7C0  3  A0 0F        	LDY 	#$0F
00D7C2  3  20 5B D7     	JSR	DSKY_GETBYTE
00D7C5  3  29 DF        	AND 	#$DF
00D7C7  3  A9 DF        			LDA 	#$DF
00D7C9  3  A0 0F        	LDY	#$0F
00D7CB  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D7CE  3               
00D7CE  3  68                   PLA
00D7CF  3  FA                   PLX
00D7D0  3  7A                   PLY
00D7D1  3  60           	RTS
00D7D2  3               ;
00D7D2  3               ;__DSKY_L1ON______________________________________________________________________________________
00D7D2  3               ;	This function is intended to turn on DSKY L1
00D7D2  3               ;_________________________________________________________________________________________________
00D7D2  3               ;
00D7D2  3               DSKY_L1ON:
00D7D2  3  5A           	PHY
00D7D3  3  48           	PHA
00D7D4  3  A0 0D        	LDY 	#$0D
00D7D6  3  20 5B D7     	JSR	DSKY_GETBYTE
00D7D9  3  09 20        	ORA 	#$20
00D7DB  3  A0 0D        	LDY	#$0D
00D7DD  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D7E0  3  68           	PLA
00D7E1  3  7A                   PLY
00D7E2  3  60           	RTS
00D7E3  3               ;
00D7E3  3               ;__DSKY_L2ON______________________________________________________________________________________
00D7E3  3               ;	This function is intended to turn on DSKY L2
00D7E3  3               ;_________________________________________________________________________________________________
00D7E3  3               ;
00D7E3  3               DSKY_L2ON:
00D7E3  3  5A           	PHY
00D7E4  3  48           	PHA
00D7E5  3  A0 0E        	LDY 	#$0E
00D7E7  3  20 5B D7     	JSR	DSKY_GETBYTE
00D7EA  3  09 20        	ORA 	#$20
00D7EC  3  A0 0E        	LDY	#$0E
00D7EE  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D7F1  3  68           	PLA
00D7F2  3  7A                   PLY
00D7F3  3  60           	RTS
00D7F4  3               ;
00D7F4  3               ;__DSKY_L1OFF_____________________________________________________________________________________
00D7F4  3               ;	This function is intended to turn off DSKY L1
00D7F4  3               ;_________________________________________________________________________________________________
00D7F4  3               ;
00D7F4  3               DSKY_L1OFF:
00D7F4  3  5A           	PHY
00D7F5  3  48           	PHA
00D7F6  3  A0 0D        	LDY 	#$0D
00D7F8  3  20 5B D7     	JSR	DSKY_GETBYTE
00D7FB  3  29 DF        	AND 	#$DF
00D7FD  3  A0 0D        	LDY	#$0D
00D7FF  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D802  3  68           	PLA
00D803  3  7A                   PLY
00D804  3  60           	RTS
00D805  3               ;
00D805  3               ;__DSKY_L2OFF_____________________________________________________________________________________
00D805  3               ;	This function is intended to turn off DSKY L2
00D805  3               ;_________________________________________________________________________________________________
00D805  3               ;
00D805  3               DSKY_L2OFF:
00D805  3  5A           	PHY
00D806  3  48           	PHA
00D807  3  A0 0E        	LDY 	#$0E
00D809  3  20 5B D7     	JSR	DSKY_GETBYTE
00D80C  3  29 DF        	AND 	#$DF
00D80E  3  A0 0E        	LDY	#$0E
00D810  3  20 47 D7     	JSR	DSKY_PUTBYTE
00D813  3  68           	PLA
00D814  3  7A                   PLY
00D815  3  60           	RTS
00D816  3               ;
00D816  3               ;_________________________________________________________________________________________________
00D816  3               ; DSKYNG LINE CONTROL ROUTINES
00D816  3               ;
00D816  3               ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
00D816  3               ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
00D816  3               ;
00D816  3               ;_________________________________________________________________________________________________
00D816  3               ;
00D816  3               DSKY_PPIWR:
00D816  3  48           	PHA
00D817  3               ;
00D817  3               	; CHECK FOR WRITE MODE
00D817  3  AD 53 D8     	LDA     DSKY_PPIX_VAL
00D81A  3  C9 82        	CMP	#DSKY_PPIX_WR
00D81C  3  F0 0D        	BEQ	DSKY_PPIWR1
00D81E  3               ;
00D81E  3               	; SET PPI TO WRITE MODE
00D81E  3  A9 82        	LDA	#DSKY_PPIX_WR
00D820  3  8D 63 03     	STA	DSKY_PPIX
00D823  3  8D 53 D8     	STA	DSKY_PPIX_VAL
00D826  3               ;
00D826  3               	; RESTORE PORT C (MAY NOT BE NEEDED)
00D826  3  A9 06        	LDA     #DSKY_PPI_IDLE
00D828  3  8D 62 03     	STA	DSKY_PPIC
00D82B  3               ;
00D82B  3               DSKY_PPIWR1:
00D82B  3               ;
00D82B  3  68           	PLA
00D82C  3  60           	RTS
00D82D  3               ;
00D82D  3               ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
00D82D  3               ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
00D82D  3               ;
00D82D  3               DSKY_PPIRD:
00D82D  3  48           	PHA
00D82E  3               ;
00D82E  3               	; CHECK FOR READ MODE
00D82E  3  AD 53 D8     	LDA	DSKY_PPIX_VAL
00D831  3  C9 92        	CMP	#DSKY_PPIX_RD
00D833  3  F0 08        	BEQ	DSKY_PPIRD1
00D835  3               ;
00D835  3               	; SET PPI TO READ MODE
00D835  3  A9 92        	LDA	#DSKY_PPIX_RD
00D837  3  8D 63 03     	STA	DSKY_PPIX
00D83A  3  8D 53 D8     	STA	DSKY_PPIX_VAL
00D83D  3               ;
00D83D  3               DSKY_PPIRD1:
00D83D  3  68           	PLA
00D83E  3  60           	RTS
00D83F  3               ;
00D83F  3               ; RELEASE USE OF PPI
00D83F  3               ;
00D83F  3               DSKY_PPIIDLE:
00D83F  3  4C 2D D8     	JMP	DSKY_PPIRD		; SAME AS READ MODE
00D842  3               ;
00D842  3               ;__STORAGE_________________________________________________________________________________________
00D842  3               ; CODES FOR NUMERICS
00D842  3               ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
00D842  3               ; SET HIGH BIT TO SHOW DECIMAL POINT
00D842  3               ;_________________________________________________________________________________________________
00D842  3               ;
00D842  3               DSKY_HEXMAP:
00D842  3  3F           	.BYTE	$3F	; 0
00D843  3  06           	.BYTE	$06	; 1
00D844  3  5B           	.BYTE	$5B	; 2
00D845  3  4F           	.BYTE	$4F	; 3
00D846  3  66           	.BYTE	$66	; 4
00D847  3  6D           	.BYTE	$6D	; 5
00D848  3  7D           	.BYTE	$7D	; 6
00D849  3  07           	.BYTE	$07	; 7
00D84A  3  7F           	.BYTE	$7F	; 8
00D84B  3  67           	.BYTE	$67	; 9
00D84C  3  77           	.BYTE	$77	; A
00D84D  3  7C           	.BYTE	$7C	; B
00D84E  3  39           	.BYTE	$39	; C
00D84F  3  5E           	.BYTE	$5E	; D
00D850  3  79           	.BYTE	$79	; E
00D851  3  71           	.BYTE	$71	; F
00D852  3               ;
00D852  3  00           DSKY_TEMP_VAL:	.BYTE	0
00D853  3  00           DSKY_PPIX_VAL:	.BYTE	0
00D854  3  00           DSKY_PRESENT:	.BYTE	0
00D855  3               ;
00D855  3               ; SEG DISPLAY WORKING STORAGE
00D855  3               ;
00D855  3  00 00 00 00  DSKY_BUF:	.BYTE	0,0,0,0,0,0,0,0
00D859  3  00 00 00 00  
00D85D  3               DSKY_BUFLEN	=	* - DSKY_BUF
00D85D  3  00 00 00 00  DSKY_HEXBUF:	.BYTE	0,0,0,0
00D861  3               DSKY_HEXBUFLEN	=	* - DSKY_HEXBUF
00D861  3               
00D861  2               	.ENDIF
00D861  2               	.INCLUDE "dosmd.asm"
00D861  3               ;__MD DRIVERS____________________________________________________________________________________________________________________
00D861  3               ;
00D861  3               ; 	Nhyodyne Memory disk drivers
00D861  3               ;
00D861  3               ;	Entry points:
00D861  3               ;		MD_INIT          - called during OS init
00D861  3               ;		MD_READ_SECTOR  - read a sector from drive
00D861  3               ;		MD_WRITE_SECTOR - write a sector to drive
00D861  3               ;________________________________________________________________________________________________________________________________
00D861  3               ;
00D861  3               MPCL_ROM	=	$037C		; ROM MAPPER
00D861  3               MPCL_RAM	=	$0378		; RAM MAPPER
00D861  3               MD_PAGERA       =       $0200           ; PAGE DRIVER ADDRESS
00D861  3               MD_PAGEBU       =       $0400           ; PAGE BUFFER ADDRESS
00D861  3               MD_PAGESE       =       pointr          ; PAGE SECTOR STORAGE
00D861  3               
00D861  3               ;
00D861  3               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
00D861  3               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
00D861  3               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00D861  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D861  3               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
00D861  3               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
00D861  3               ;
00D861  3               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
00D861  3               ;
00D861  3               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00D861  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D861  3               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D861  3               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
00D861  3               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
00D861  3               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
00D861  3               
00D861  3               
00D861  3               ;__MD_INIT___________________________________________________________________________________________
00D861  3               ;
00D861  3               ;  INIT -- Copy code into $0200-$02FF for controling banking and copying
00D861  3               ;____________________________________________________________________________________________________
00D861  3               ;
00D861  3               MD_INIT:
00D861  3                       PRTDBG "MD INIT:$"
00D861  3  48 DA 5A A2          PRTS "MD: UNITS=2 RAMDISK=256KB ROMDISK=384KB$"
00D865  3  00 BD 7A D8  
00D869  3  E8 C9 24 F0  
00D8A2  3  20 FE CB            	JSR	NEWLINE
00D8A5  3               MD_REINIT:
00D8A5  3  A2 00                LDX     #$00
00D8A7  3               :
00D8A7  3  BD B3 D8             LDA     md_pagecode,X
00D8AA  3  9D 00 02             STA     MD_PAGERA,X
00D8AD  3  E8                   INX
00D8AE  3  E0 00                CPX     #$00
00D8B0  3  D0 F5                BNE     :-
00D8B2  3  60                   RTS
00D8B3  3               
00D8B3  3               ;       X=Control Word
00D8B3  3               ;	7 6 5 4  3 2 1 0
00D8B3  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D8B3  3               ;       : : X X  X X X X    = UNUSED
00D8B3  3               ;	: :---------------0 = RAM=0, ROM=1
00D8B3  3               ;	:-----------------0 = Read=0, Write=1
00D8B3  3               ;       A= bank
00D8B3  3               ;       Y= page
00D8B3  3               ;
00D8B3  3               md_pagecode:
00D8B3  3  48                   PHA
00D8B4  3  84 15                STY     MD_PAGESE+1     ; setup copy from pointer
00D8B6  3  A0 00                LDY     #$00
00D8B8  3  84 14                STY     MD_PAGESE
00D8BA  3  8A                   TXA
00D8BB  3  29 80                AND     #%10000000
00D8BD  3  C9 00                CMP     #$00
00D8BF  3  D0 38                BNE     MD_PAGE_WRITE
00D8C1  3               ; PERFORM READ HERE
00D8C1  3  8A                   TXA
00D8C2  3  29 40                AND     #%01000000
00D8C4  3  C9 00                CMP     #$00
00D8C6  3  D0 0D                BNE     MD_PAGE_ROREAD
00D8C8  3               ; DO RAM READ
00D8C8  3  A9 80                LDA     #$80
00D8CA  3  8D 7C 03             STA     MPCL_ROM
00D8CD  3  68                   PLA
00D8CE  3  09 80                ORA     #$80
00D8D0  3  8D 78 03             STA     MPCL_RAM
00D8D3  3  D0 0B                BNE     MD_PAGE_COPYFRM
00D8D5  3               MD_PAGE_ROREAD:
00D8D5  3  A9 00                LDA     #$00
00D8D7  3  8D 78 03             STA     MPCL_RAM
00D8DA  3  68                   PLA
00D8DB  3  29 7F                AND     #$7F
00D8DD  3  8D 7C 03             STA     MPCL_ROM
00D8E0  3               MD_PAGE_COPYFRM:
00D8E0  3               ; DO THE COPY
00D8E0  3  A2 00                LDX     #$00
00D8E2  3               :
00D8E2  3  DA                   PHX
00D8E3  3  7A                   PLY
00D8E4  3  B1 14                LDA     (MD_PAGESE),Y
00D8E6  3  9D 00 04             STA     MD_PAGEBU,X
00D8E9  3  E8                   INX
00D8EA  3  E0 00                CPX     #$00
00D8EC  3  D0 F4                BNE     :-
00D8EE  3  A9 80                LDA     #$80
00D8F0  3  8D 7C 03             STA     MPCL_ROM
00D8F3  3  A9 8E                LDA     #$8E
00D8F5  3  8D 78 03             STA     MPCL_RAM
00D8F8  3  60                   RTS
00D8F9  3               MD_PAGE_WRITE:
00D8F9  3  68                   PLA
00D8FA  3  09 80                ORA     #%10000000
00D8FC  3  8D 78 03             STA     MPCL_RAM
00D8FF  3               ; DO THE COPY
00D8FF  3  A2 00                LDX     #$00
00D901  3               :
00D901  3  DA                   PHX
00D902  3  7A                   PLY
00D903  3  BD 00 04             LDA     MD_PAGEBU,X
00D906  3  91 14                STA     (MD_PAGESE),Y
00D908  3  E8                   INX
00D909  3  E0 00                CPX     #$00
00D90B  3  D0 F4                BNE     :-
00D90D  3  A9 80                LDA     #$80
00D90F  3  8D 7C 03             STA     MPCL_ROM
00D912  3  A9 8E                LDA     #$8E
00D914  3  8D 78 03             STA     MPCL_RAM
00D917  3  60                   RTS
00D918  3               md_pagecodeend:
00D918  3               
00D918  3               
00D918  3               ;*__MD_READ_SECTOR____________________________________________________________________________________
00D918  3               ;*
00D918  3               ;*  READ MD SECTOR INTO BUFFER
00D918  3               ;*
00D918  3               ;*____________________________________________________________________________________________________
00D918  3               MD_READ_SECTOR:
00D918  3  20 21 D9                     JSR MD_READ_RAW_SECTOR
00D91B  3  20 B2 D9                     JSR DEBSECR256
00D91E  3  A9 00                        LDA #$00                        ; SHOULD ALWAYS SUCCEED
00D920  3  60                           RTS
00D921  3               
00D921  3               MD_READ_RAW_SECTOR:
00D921  3               		PRTDBG "MD Read Sector$"
00D921  3  20 11 CF                     JSR     GET_DRIVE_DEVICE
00D924  3  29 01        		and 	#$01			; only want drive cfg
00D926  3  0A           		asl	a			; SHIFT 6
00D927  3  0A           		asl	a			;
00D928  3  0A           		asl	a			;
00D929  3  0A              		asl	a			;
00D92A  3  0A           		asl	a			;
00D92B  3  0A           		asl	a			;
00D92C  3  29 7F        		AND 	#%01111111              ; TOGGLE READ
00D92E  3  AA                           TAX                             ; STASH CONTROL WORD
00D92F  3  20 6F D9                     JSR     MD_CONVERT_SECTOR
00D932  3  E0 00                        cpx     #$00                    ; read if ram
00D934  3  F0 0C                        BEQ     :+
00D936  3  EE 7A DA                     inc     debcyll                 ; if rom, inc bank by 4 ()
00D939  3  EE 7A DA                     inc     debcyll
00D93C  3  EE 7A DA                     inc     debcyll
00D93F  3  EE 7A DA                     inc     debcyll
00D942  3               :
00D942  3  AD 7A DA       	        LDA    	debcyll			; GET BANK
00D945  3  AC 7C DA     		LDY    	debsehd			; GET PAGE
00D948  3                               PRTDBG "DO PAGER$"
00D948  3  20 00 02                     JSR     MD_PAGERA
00D94B  3                               PRTDBG "PAGER RETURN$"
00D94B  3  60           		RTS
00D94C  3               
00D94C  3               
00D94C  3               ;*__MD_WRITE_SECTOR___________________________________________________________________________________
00D94C  3               ;*
00D94C  3               ;*  WRITE MD SECTOR FROM BUFFER
00D94C  3               ;*
00D94C  3               ;*____________________________________________________________________________________________________
00D94C  3               MD_WRITE_SECTOR:
00D94C  3               		PRTDBG "MD Write Sector$"
00D94C  3  20 11 CF                     JSR     GET_DRIVE_DEVICE
00D94F  3  29 01        		and 	#$01			; only want drive cfg
00D951  3  C9 00                        CMP     #$00                    ; NO WRITE FOR ROM
00D953  3  F0 03                        BEQ     MD_WRITE_SECTOR_RAM
00D955  3  A9 FF                        LDA     #$FF
00D957  3  60                           RTS
00D958  3               MD_WRITE_SECTOR_RAM:
00D958  3  20 21 D9                     JSR     MD_READ_RAW_SECTOR
00D95B  3  20 6F D9                     JSR     MD_CONVERT_SECTOR
00D95E  3  20 D8 D9                     JSR     BLKSECR256
00D961  3  AD 7A DA      	        LDA    	debcyll			; GET BANK
00D964  3  AC 7C DA     		LDY    	debsehd			; GET PAGE
00D967  3  A2 80        		LDX 	#$80                    ; TOGGLE WRITE RAM
00D969  3                               PRTDBG "DO PAGER$"
00D969  3  20 00 02                     JSR     MD_PAGERA
00D96C  3                               PRTDBG "PAGER RETURN$"
00D96C  3  A9 00                        LDA     #$00
00D96E  3  60           		RTS
00D96F  3               
00D96F  3               ;___MD_CONVERT_SECTOR___________________________________________________________________________________
00D96F  3               ;
00D96F  3               ; 	TRANSLATE SECTORS INTO MD FORMAT
00D96F  3               ;________________________________________________________________________________________________________
00D96F  3               MD_CONVERT_SECTOR:
00D96F  3                       PRTDBG "CONVERT SECTOR$"
00D96F  3  DA                   phx
00D970  3  AD 78 DA     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
00D973  3  4A           	LSR	A			; DIVIDE BY 2 (FOR BLOCKING)
00D974  3  29 1F        	AND 	#$1F 			; CLEAR UPPER 3 BITS (JUST 'CAUSE)
00D976  3  8D 7C DA     	STA	debsehd			; STORE IN SECTOR/HEAD
00D979  3  AD 76 DA     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
00D97C  3  29 03        	AND 	#$03			; BOTTOM 2 BITS ARE PART OF PAGE (PAGES ARE 32k)
00D97E  3  0A           	asl	a			; MOVE TO HIGH BITS
00D97F  3  0A           	asl	a
00D980  3  0A           	asl	a
00D981  3  0A           	asl	a
00D982  3  0A                  	asl	a
00D983  3  09 80                ORA     #$80                    ; PAGES ARE ALWAYS IN UPPER BANK
00D985  3  0D 7C DA     	ORA	debsehd			; STORE IN SECTOR/HEAD
00D988  3  8D 7C DA             STA     debsehd                 ; STORE IN SECTOR/HEAD
00D98B  3                                                       ; AT THIS POINT PAGE REGISTER SHOULD BE
00D98B  3                                                       ; SET
00D98B  3  AD 76 DA     	LDA	sektrk			; LOAD TRACK #
00D98E  3  4A                  	LSR	a			; LOSE BOTTOM TWO BITS
00D98F  3  4A           	LSR	a
00D990  3  8D 7A DA     	STA	debcyll			; THIS SHOULD BE BANK#
00D993  3               
00D993  3               
00D993  3                 .IF USEDSKY=1 || USEDSKYNG=1
00D993  3                 	PRTDBG "DSKY OUTPUT 1$"
00D993  3  AD 6E DA       	lda	sekdsk
00D996  3  8D 5D D8       	sta	DSKY_HEXBUF
00D999  3  A9 00         	lda	#$00
00D99B  3  8D 5E D8       	sta	DSKY_HEXBUF+1
00D99E  3  AD 7A DA      	lda	debcyll
00D9A1  3  8D 5F D8       	sta	DSKY_HEXBUF+2
00D9A4  3  AD 7C DA         	lda	debsehd
00D9A7  3  8D 60 D8       	sta	DSKY_HEXBUF+3
00D9AA  3  20 7C D6       	JSR	DSKY_BIN2SEG
00D9AD  3  20 B1 D6     	JSR	DSKY_SHOW
00D9B0  3                 .ENDIF
00D9B0  3  FA                   plx
00D9B1  3  60           	RTS
00D9B2  3               
00D9B2  3               ;___DEBSECR256________________________________________________________________________________________
00D9B2  3               ;
00D9B2  3               ;	DEBLOCK 256 BYTE SECTOR FOR DOS/65
00D9B2  3               ;
00D9B2  3               ;________________________________________________________________________________________________________
00D9B2  3               DEBSECR256:
00D9B2  3  48           	PHA
00D9B3  3  AD 78 DA     	LDA	seksec			;
00D9B6  3  29 01        	AND	#$01			; GET SECTOR INDEX
00D9B8  3  C9 00                CMP     #$00
00D9BA  3  D0 07                BNE     DEBSECR256_H
00D9BC  3  A9 00        	LDA	#$00                     ;
00D9BE  3  85 EE        	STA     SRC
00D9C0  3  4C C7 D9             JMP     DEBSECR256_GO
00D9C3  3               DEBSECR256_H:
00D9C3  3  A9 80        	LDA	#$80                     ;
00D9C5  3  85 EE        	STA     SRC
00D9C7  3               DEBSECR256_GO:
00D9C7  3  A9 04        	LDA	#>MD_PAGEBU             ;
00D9C9  3  85 EF        	STA	SRC+1			;
00D9CB  3  A5 F4        	LDA	dmaadr			;
00D9CD  3  85 EC        	STA	DEST			;
00D9CF  3  A5 F5        	LDA	dmaadr+1		;
00D9D1  3  85 ED        	STA	DEST+1			;
00D9D3  3  20 1E CF     	JSR	COPY_DOS_SECTOR		;
00D9D6  3  68           	PLA
00D9D7  3  60                   RTS
00D9D8  3               
00D9D8  3               ;___BLKSECR256________________________________________________________________________________________
00D9D8  3               ;
00D9D8  3               ;	BLOCK 256 BYTE SECTOR FOR DOS/65
00D9D8  3               ;
00D9D8  3               ;________________________________________________________________________________________________________
00D9D8  3               BLKSECR256:
00D9D8  3  48           	PHA
00D9D9  3  AD 78 DA     	LDA	seksec			;
00D9DC  3  29 01        	AND	#$01			; GET SECTOR INDEX
00D9DE  3  C9 00                CMP     #$00
00D9E0  3  D0 07                BNE     BLKSECR256_H
00D9E2  3  A9 00        	LDA	#$00                     ;
00D9E4  3  85 EC        	STA     DEST
00D9E6  3  4C ED D9             JMP     BLKSECR256_GO
00D9E9  3               BLKSECR256_H:
00D9E9  3  A9 80        	LDA	#$80                     ;
00D9EB  3  85 EC        	STA     DEST
00D9ED  3               BLKSECR256_GO:
00D9ED  3  A9 04        	LDA	#>MD_PAGEBU             ;
00D9EF  3  85 ED        	STA	DEST+1			;
00D9F1  3  A5 F4        	LDA	dmaadr			;
00D9F3  3  85 EE        	STA	SRC			;
00D9F5  3  A5 F5        	LDA	dmaadr+1		;
00D9F7  3  85 EF        	STA	SRC+1			;
00D9F9  3  20 1E CF     	JSR	COPY_DOS_SECTOR		;
00D9FC  3  68           	PLA
00D9FD  3  60                   RTS
00D9FE  3               
00D9FE  2               
00D9FE  2               ;------------------------------------------------------------------------------------
00D9FE  2               
00D9FE  2               
00D9FE  2               ;disk control blocks
00D9FE  2  7F 00        dcba:	.word	127		;max block number
00DA00  2  40 00        	.word	64		;sectors per track
00DA02  2  00 00        	.word	0		;number system tracks
00DA04  2  01           	.byte	1		;block size = 2048
00DA05  2  FF 00        	.word	255		;max directory number
00DA07  2  85 DA        	.word	almpa		;address of map for a
00DA09  2  00           	.byte	00		;do checksums
00DA0A  2  75 E2        	.word	ckmp		;checksum map
00DA0C  2  BF 00        dcbb:	.word	191		;max block number
00DA0E  2  40 00        	.word	64		;sectors per track
00DA10  2  00 00        	.word	0		;number system tracks
00DA12  2  01           	.byte	1		;block size = 2048
00DA13  2  9B 00        	.word	155		;max directory number
00DA15  2  83 DB        	.word	almpb		;address of map for b
00DA17  2  00           	.byte	00		;do checksums
00DA18  2  75 E2        	.word	ckmp		;checksum map
00DA1A  2  FF 07        dcbc:	.word	2047		;max block number
00DA1C  2  40 00        	.word	64		;sectors per track
00DA1E  2  10 00        	.word	16		;number system tracks
00DA20  2  02           	.byte	2		;block size = 4096
00DA21  2  FF 01        	.word	511		;max directory number
00DA23  2  81 DC        	.word	almpc		;address of map for C
00DA25  2  00           	.byte	0		;do checksums
00DA26  2  75 E2        	.word	ckmp		;checksum map
00DA28  2  FF 07        dcbd:	.word	2047		;max block number
00DA2A  2  40 00        	.word	64		;sectors per track
00DA2C  2  10 00        	.word	16		;number system tracks
00DA2E  2  02           	.byte	2		;block size = 4096
00DA2F  2  FF 01        	.word	511		;max directory number
00DA31  2  7F DD        	.word	almpd		;address of map for d
00DA33  2  00           	.byte	0		;do checksums
00DA34  2  75 E2        	.word	ckmp		;checksum map
00DA36  2  FF 07        dcbe:	.word	2047		;max block number
00DA38  2  40 00        	.word	64		;sectors per track
00DA3A  2  10 00        	.word	16		;number system tracks
00DA3C  2  02           	.byte	2		;block size = 4096
00DA3D  2  FF 01        	.word	511		;max directory number
00DA3F  2  7D DE        	.word	almpe		;address of map for e
00DA41  2  00           	.byte	0		;do checksums
00DA42  2  75 E2        	.word	ckmp		;checksum map
00DA44  2  FF 07        dcbf:	.word	2047		;max block number
00DA46  2  40 00        	.word	64		;sectors per track
00DA48  2  10 00        	.word	16		;number system tracks
00DA4A  2  02           	.byte	2		;block size = 4096
00DA4B  2  FF 01        	.word	511		;max directory number
00DA4D  2  7B DF        	.word	almpf		;address of map for f
00DA4F  2  00           	.byte	0		;do checksums
00DA50  2  75 E2        	.word	ckmp		;checksum map
00DA52  2  FF 07        dcbg:	.word	2047		;max block number
00DA54  2  40 00        	.word	64		;sectors per track
00DA56  2  10 00        	.word	16		;number system tracks
00DA58  2  02           	.byte	2		;block size = 4096
00DA59  2  FF 01        	.word	511		;max directory number
00DA5B  2  79 E0        	.word	almpg		;address of map for g
00DA5D  2  00           	.byte	0		;do checksums
00DA5E  2  75 E2        	.word	ckmp		;checksum map
00DA60  2  FF 07        dcbh:	.word	2047		;max block number
00DA62  2  40 00        	.word	64		;sectors per track
00DA64  2  10 00        	.word	16		;number system tracks
00DA66  2  02           	.byte	2		;block size = 4096
00DA67  2  FF 01        	.word	511		;max directory number
00DA69  2  77 E1        	.word	almph		;address of map for h
00DA6B  2  00           	.byte	0		;do checksums
00DA6C  2  75 E2        	.word	ckmp		;checksum map
00DA6E  2               
00DA6E  2               ;data area
00DA6E  2               
00DA6E  2               
00DA6E  2  02           sekdsk:	.byte	2		;seek disk number
00DA6F  2  00           hstwrt:	.byte	0		;0=written,1=pending host write
00DA70  2               
00DA70  2               ;allocate the following data areas to unused ram space
00DA70  2  00           LASTCHAR: 	.byte 0		;save sector for warm boot
00DA71  2  00           savsec:		.byte 0		;save sector for warm boot
00DA72  2  00           count:		.byte 0		;counter in warm boot
00DA73  2  00           temp:		.byte 0		;save hstdsk for warm boot
00DA74  2  00           hstact:		.byte 0		;host active flag
00DA75  2  00           unacnt:		.byte 0		;unalloc rec cnt
00DA76  2  00 00        sektrk:		.word 0		;seek track number
00DA78  2  00 00        seksec:		.word 0		;seek sector number
00DA7A  2  00           debcyll:	.byte 0		; DEBLOCKED CYLINDER LSB
00DA7B  2  00           debcylm:	.byte 0		; DEBLOCKED CYLINDER MSB
00DA7C  2  00           debsehd:	.byte 0		; DEBLOCKED SECTOR AND HEAD (HS)
00DA7D  2  00 00        debtmp:		.word 0		; DEBLOCK TEMP VAR
00DA7F  2  00           Cdebcyll:	.byte 0		; DEBLOCKED CYLINDER LSB
00DA80  2  00           Cdebcylm:	.byte 0		; DEBLOCKED CYLINDER MSB
00DA81  2  00           Cdebsehd:	.byte 0		; DEBLOCKED SECTOR AND HEAD (HS)
00DA82  2  00           DEBDIRTY:	.byte 0		; DIRTY FLAG
00DA83  2  00 00        slicetmp:	.word 0		; USED TO CALCULATE SLICE OFFSET
00DA85  2               
00DA85  2               ;allocation maps
00DA85  2  xx xx xx xx  almpa:		.res	254
00DA89  2  xx xx xx xx  
00DA8D  2  xx xx xx xx  
00DB83  2  xx xx xx xx  almpb:		.res	254
00DB87  2  xx xx xx xx  
00DB8B  2  xx xx xx xx  
00DC81  2  xx xx xx xx  almpc:		.res	254
00DC85  2  xx xx xx xx  
00DC89  2  xx xx xx xx  
00DD7F  2  xx xx xx xx  almpd:		.res	254
00DD83  2  xx xx xx xx  
00DD87  2  xx xx xx xx  
00DE7D  2  xx xx xx xx  almpe:		.res	254
00DE81  2  xx xx xx xx  
00DE85  2  xx xx xx xx  
00DF7B  2  xx xx xx xx  almpf:		.res	254
00DF7F  2  xx xx xx xx  
00DF83  2  xx xx xx xx  
00E079  2  xx xx xx xx  almpg:		.res	254
00E07D  2  xx xx xx xx  
00E081  2  xx xx xx xx  
00E177  2  xx xx xx xx  almph:		.res	254
00E17B  2  xx xx xx xx  
00E17F  2  xx xx xx xx  
00E275  2               ;checksum maps
00E275  2               
00E275  2               ;not used
00E275  2  xx xx xx xx  ckmp:		.res	128
00E279  2  xx xx xx xx  
00E27D  2  xx xx xx xx  
00E2F5  2               
00E2F5  2               ;deblocking buffer for dba
00E2F5  2  xx xx xx xx  hstbuf:		.res	512		;256 or 512 byte sectors
00E2F9  2  xx xx xx xx  
00E2FD  2  xx xx xx xx  
00E4F5  2               
00E4F5  1               
00E4F5  1               	.end
