ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65.asm
Current file: dos65.asm

000000r 1               ;sysgen
000000r 1               ;version 2.15-a
000000r 1               ;released:	30 november 1985 (2.10)
000000r 1               ;last revised:	2 may 1996 (2.11)
000000r 1               ;			eliminated word mode for 1024 blocks
000000r 1               ;			made extent a single byte
000000r 1               ;		3 may 1996 (2.12)
000000r 1               ;			added initial exm related code
000000r 1               ;		11 may 1996 (2.13)
000000r 1               ;			added use of exm in getblk
000000r 1               ;			added code to set exm & cexm1f
000000r 1               ;			corrected errors
000000r 1               ;		19 may 1996 (2.14)
000000r 1               ;			changed ccm ren to "to from" syntax
000000r 1               ;			allowed _ in file names
000000r 1               ;		13 march 2008 (2.15)
000000r 1               ;			reformatted for TASM & ASM210+
000000r 1               ;			eliminated dependence on "IBM" format
000000r 1               ;			  by reading first sector # using SIM+51
000000r 1               ;			  TRANSLATE code. If translate
000000r 1               ;			  does not have first physical sector in first
000000r 1               ;			  position this approach may not work.
000000r 1               ;			  SIM can also perform no translation at all.
000000r 1               ;			  Also assumes BOOT & SIM both know correct
000000r 1               ;			  starting sector for cold & warm boot. It
000000r 1               ;			  should work regardless of physical sector
000000r 1               ;			  size as long as existing SIM is configured
000000r 1               ;			  correctly for destination drive. BOOT
000000r 1               ;			  must correctly handle sectors > 128 bytes
000000r 1               ;			  as must WARM BOOT in SIM.
000000r 1               ;			  In any case BOOT and WARM BOOT must
000000r 1               ;			  read sectors in sequential order, i.e.,
000000r 1               ;			  no interleave.
000000r 1               ;this program contains the complete dos/65 operating
000000r 1               ;system except for the boot and sim.
000000r 1               ;when used by the system operator this program
000000r 1               ;provides the capability to construct a new
000000r 1               ;operating system including the users boot and sim.
000000r 1               ;the system is relocated to fit the memory size
000000r 1               ;specified by the user and is written onto
000000r 1               ;the system tracks of the specified drive.
000000r 1               ;improvements over version 2.0 include:
000000r 1               ;	use of "from to" syntax for ren
000000r 1               ;	addition of go command
000000r 1               ;	addition of load command
000000r 1               ;	ability to enter numbers as decimal or hex
000000r 1               ;	address parameter added to save
000000r 1               ;	error checking in sysgen (write)
000000r 1               ;	write type for deblocking added
000000r 1               ;	page zero 0 & 1 not used
000000r 1               ;	allow _ in file names
000000r 1               ;base addresses and definitions
000000r 1               btejmp	=	$100		;warm boot jump
000000r 1               pemjmp	=	$103		;jump to pem
000000r 1               iostat	=	$106		;i/o status
000000r 1               dflfcb	=	$107		;default fcb
000000r 1               dflbuf	=	$128		;default buffer
000000r 1               memmovr =	$200		;subr to move data from ram/rom disks
000000r 1               tea	=	$800		;tea start
000000r 1               ;zero page for setup
000000r 1               trknum	=	$02			;current track
000000r 1               dcbadd	=	$04			;dcb address
000000r 1               nmsstr	=	$06			;number system tracks
000000r 1               nsectr	=	$08			;number sectors per track
000000r 1               ttlsec	=	$0A			;total sectors to write
000000r 1               trkcnt	=	ttlsec
000000r 1               size	=	$0B			;ascii size
000000r 1               lokim	=	$0D			;low kim limit
000000r 1               hikim	=	$0F			;high kim limit
000000r 1               offset	=	$11			;relocation offset
000000r 1               kimcnt	=	$13			;kim counter
000000r 1               pointr	=	$14			;pointer
000000r 1               lengt	=	$16			;inst length
000000r 1               point	=	$17			;relocate pointer
000000r 1               adjust	=	$19			;relocate distance
000000r 1               kimpnt	=	$1B			;kim file index
000000r 1               savex	=	$1C			;save for x
000000r 1               savey	=	$1D			;save for y
000000r 1               number	=	$1E			;input pack buffer
000000r 1               dstdrv	=	$20			;destination drive
000000r 1               defalt	=	$21			;default drive
000000r 1               seccnt	=	$22			;sector count
000000r 1               secnum	=	$24			;sector number
000000r 1               curccm	=	$26			;start of current ccm
000000r 1               simlng	=	$28			;length of sim
000000r 1               room	=	$2A			;memory needed for sysgen
000000r 1               stksav	=	$2C			;save stack register
000000r 1               frstsc	=	$2D			;first sector number of disk
000000r 1               dskcfpc	=	$2E			;pointer to disk configuration table
000000r 1               cmdlnp	=	$30			;pointer to command line buffer
000000r 1               lastzp	=	$32
000000r 1               ;fixed parameters
000000r 1               lf	=	$a		;linefeeed
000000r 1               cr	=	$d		;return
000000r 1               eof	=	$1a		;end of file
000000r 1               null	=	0		;null
000000r 1               ctlc	=	3		;abort
000000r 1               ctle	=	5		;physical cr lf
000000r 1               ctli	=	9		;tab character
000000r 1               ctlp	=	$10		;toggle printer
000000r 1               ctlr	=	$12		;repeat line
000000r 1               ctls	=	$13		;freeze
000000r 1               ctlx	=	$18		;cancel
000000r 1               semico	=	$3b		;semicolon
000000r 1               delete	=	$08		;delete character
000000r 1               numcmd	=	36		;number commands
000000r 1               
000000r 1               DEBUG	=	0		; assemble with debug information on
000000r 1               
000000r 1               
000000r 1                		.segment "LOADER"
000000r 1               		.ORG $b7E0
00B7E0  1  F3           		.BYTE 		$F3 			;DI - DISABLE INTERRUPTS
00B7E1  1  01 00 48     		.BYTE 		$01,$00,$48    		;LD	BC,$3E00 -BYTES TO MOVE
00B7E4  1  11 00 38     		.BYTE 		$11,$00,$38    		;LD	DE,$3800 -DESTINATION ADDRESS (6502 IS !A15)
00B7E7  1  21 20 01     		.BYTE 		$21,$20,$01	    	;LD	HL,$0120 -SOURCE ADDRESS
00B7EA  1  ED B0        		.BYTE 		$ED,$B0       		;LDIR  	-COPY RAM
00B7EC  1  21 FC 7F     		.BYTE 		$21,$FC,$7F	    	;LD	HL,$7FFC -VECTOR
00B7EF  1  3E AE        		.BYTE		$3E,<boot		;LD 	A,<BOOT
00B7F1  1  77           		.BYTE 		$77			;LD 	(HL),A
00B7F2  1  21 FD 7F     		.BYTE 		$21,$FD,$7F	    	;LD	HL,$7FFD -VECTOR
00B7F5  1  3E CD        		.BYTE		$3E,>boot		;LD 	A,<BOOT
00B7F7  1  77           		.BYTE 		$77			;LD 	(HL),A
00B7F8  1  DB FF        		.BYTE		$DB,$FF       		;IN 	A,$FF    -ENABLE 6502
00B7FA  1               ;
00B7FA  1               ;
00B7FA  1               		.PC02
00B7FA  1                               .segment "OS"
00B7FA  1               		.ORG $B800
00B800  1               		.include "ccmnhy.asm"
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               ;
00B800  2               ;	Nhyodyne dos/65 dos/65 console command module (ccm)
00B800  2               ;
00B800  2               ;  DWERNER 12/20/2021 	ported to Nhyodyne
00B800  2               ;  DWERNER 12/30/2021   changed .COM files to .CO6 files to reduce confusion when
00B800  2               ;                       sharing CP/M file system images
00B800  2               ;  DWERNER 02/19/2022   Strip off Most significant bit of file name in dir to
00B800  2               ;			make filesystem compatible with ROMWBW
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               
00B800  2               ;ccm unique definitions
00B800  2               nbuilt	=	7		;number built in commands
00B800  2               ;main program
00B800  2               				; warm boot vector
00B800  2  4C 21 CE     		JMP wboot
00B803  2  D8           ccm:	cld			;set binary mode
00B804  2  48           	pha			;save drive number
00B805  2  20 FC BB     	jsr	rstdsk		;initialize system
00B808  2  68           	pla			;restore drive num
00B809  2  20 00 BC     	jsr	slctds		;select drive
00B80C  2  AD 92 CC     	lda	sysdef+6	;get line length
00B80F  2  4A           	lsr	a		;divide
00B810  2  4A           	lsr	a		;by
00B811  2  4A           	lsr	a		;16
00B812  2  4A           	lsr	a		;for dir
00B813  2  8D F6 BF     	sta	sixten		;and save
00B816  2  AD 43 BF     	lda	cnslng		;get buffer length
00B819  2  D0 3C        	bne	mrecmd		;if more handle it
00B81B  2  A2 FF        ccmlpe:	ldx	#$ff		;set
00B81D  2  9A           	txs			;stack
00B81E  2  D8           	cld			;set binary mode
00B81F  2  A9 11        	lda	#17		; SEND A XON
00B821  2  20 F0 BB     	jsr	chrout		; ----------
00B824  2  20 69 BC     	jsr	hdrout		;send header
00B827  2  A9 3E        	lda	#'>'		;then print
00B829  2  20 F0 BB     	jsr	chrout		;prompt
00B82C  2  AD 8B BE     	lda	cnsbvc		;point to start
00B82F  2  AC 8C BE     	ldy	cnsbvc+1	;of buffer
00B832  2  20 F4 BB     	jsr	rdebuf		;do buffer read
00B835  2  A0 00        	ldy	#0		;clear index
00B837  2  AE 43 BF     	ldx	cnslng		;get length
00B83A  2  F0 DF        	beq	ccmlpe		;loop if empty
00B83C  2  B9 44 BF     lwrupr:	lda	cnstxt,y	;else get char
00B83F  2  C9 61        	cmp	#'a'		;if less than a
00B841  2  90 09        	bcc	nxtchg		;skip convert
00B843  2  C9 7B        	cmp	#'z'+1		;if over z
00B845  2  B0 05        	bcs	nxtchg		;skip convert
00B847  2  29 5F        	and	#%01011111	;else convert
00B849  2  99 44 BF     	sta	cnstxt,y	;put back in buffer
00B84C  2  C8           nxtchg:	iny			;bump index
00B84D  2  CA           	dex			;count down
00B84E  2  D0 EC        	bne	lwrupr		;loop if more
00B850  2  8A           	txa			;set a to zero
00B851  2  99 44 BF     	sta	cnstxt,y	;insert stopper
00B854  2  8D E7 BF     	sta	cnbfpt		;initialize pointer
00B857  2  20 A4 BD     mrecmd:	jsr	stdflb		;set default buffer
00B85A  2  20 2B BC     	jsr	intdsk		;get drive number
00B85D  2  8D E8 BF     	sta	dfldsk		;store as default
00B860  2  20 A5 BC     	jsr	prslin		;parse command
00B863  2  D0 64        	bne	cmderr		;error if afn
00B865  2  AD E9 BF     	lda	tmpdsk		;get temporary
00B868  2  F0 04        	beq	nodrch		;if zero ok
00B86A  2  A9 15        	lda	#nbuilt*3	;else set and
00B86C  2  D0 2E        	bne	dotrns		;do transient
00B86E  2  A9 00        nodrch:	lda	#0		;clear
00B870  2  AA           	tax			;table index
00B871  2  8D EC BF     	sta	ccmcount		;and count
00B874  2  A0 01        tsnxfn:	ldy	#1		;set fcb index
00B876  2  BD 1D BF     tsnxch:	lda	fnctbl,x	;get table entry
00B879  2  F0 1A        	beq	gotcmd		;if zero got it
00B87B  2  D9 C3 BF     	cmp	fcbone,y	;else test
00B87E  2  D0 04        	bne	nocmpr		;no good if not =
00B880  2  E8           	inx			;bump
00B881  2  C8           	iny			;pointers
00B882  2  D0 F2        	bne	tsnxch		;and loop
00B884  2  E8           nocmpr:	inx			;go to end
00B885  2  BD 1D BF     	lda	fnctbl,x	;of table
00B888  2  D0 FA        	bne	nocmpr		;entry
00B88A  2  E8           	inx			;point to next
00B88B  2  EE EC BF     	inc	ccmcount		;bump count
00B88E  2  AD EC BF     	lda	ccmcount		;and if not
00B891  2  C9 07        	cmp	#nbuilt		;limit then
00B893  2  D0 DF        	bne	tsnxfn		;try next
00B895  2  AD EC BF     gotcmd:	lda	ccmcount		;get count
00B898  2  0A           	asl	a		;multiply by two
00B899  2  6D EC BF     	adc	ccmcount		;then add for x3
00B89C  2  AA           dotrns:	tax			;use as index
00B89D  2  E8           	inx			;bump to pass jmp
00B89E  2  BD 96 BE     	lda	xqfntb,x	;to get
00B8A1  2  BC 97 BE     	ldy	xqfntb+1,x	;entry address
00B8A4  2  8D EA BF     	sta	vector		;then set
00B8A7  2  8C EB BF     	sty	vector+1	;vector
00B8AA  2  AD 8F BE     	lda	extcvc+1	;save
00B8AD  2  48           	pha			;return
00B8AE  2  AD 8E BE     	lda	extcvc		;address
00B8B1  2  48           	pha			;on stack
00B8B2  2  6C EA BF     	jmp	(vector)	;execute
00B8B5  2  20 34 BC     extcmd:	jsr	rstddr		;restore default
00B8B8  2  20 A5 BC     extwod:	jsr	prslin		;parse more
00B8BB  2  AD C4 BF     	lda	fcbone+1	;if first
00B8BE  2  38           	sec			;character
00B8BF  2  E9 20        	sbc	#' '		;not a space
00B8C1  2  0D E9 BF     	ora	tmpdsk		;or if temporary
00B8C4  2  D0 03        	bne	cmderr		;then an error
00B8C6  2  4C 1B B8     	jmp	ccmlpe		;else loop
00B8C9  2               ;command error syntax handler
00B8C9  2  20 E1 BB     cmderr:	jsr	ccrlf		;do a cr lf
00B8CC  2  AC ED BF     	ldy	curpnt		;get command pointer
00B8CF  2  B9 44 BF     cmerlp:	lda	cnstxt,y	;get char
00B8D2  2  F0 0A        	beq	cmerex		;if null then done
00B8D4  2  C9 20        	cmp	#' '		;if space
00B8D6  2  F0 06        	beq	cmerex		;then done
00B8D8  2  20 72 BC     	jsr	cotsxy		;output with save
00B8DB  2  C8           	iny			;point to next
00B8DC  2  D0 F1        	bne	cmerlp		;and loop
00B8DE  2  A9 3F        cmerex:	lda	#'?'		;send a
00B8E0  2  20 F0 BB     	jsr	chrout		;question mark
00B8E3  2  4C 1B B8     	jmp	ccmlpe		;and start over
00B8E6  2               ;execute dir command
00B8E6  2               ; dir <afn>
00B8E6  2  20 A5 BC     dir:	jsr	prslin		;find object file
00B8E9  2  20 AB BD     	jsr	clrslt		;clear auto and select
00B8EC  2  A9 20        	lda	#' '		;if name
00B8EE  2  CD C4 BF     	cmp	fcbone+1	;and
00B8F1  2  D0 0F        	bne	findfr		;type are
00B8F3  2  CD CC BF     	cmp	fcbone+9	;not empty
00B8F6  2  D0 0A        	bne	findfr		;then use it
00B8F8  2  A9 3F        	lda	#'?'		;else
00B8FA  2  A0 0B        	ldy	#11		;fill
00B8FC  2  99 C3 BF     fillqu:	sta	fcbone,y	;fcb
00B8FF  2  88           	dey			;with
00B900  2  D0 FA        	bne	fillqu		;question marks
00B902  2  20 5F BC     findfr:	jsr	srchf1		;search for first match
00B905  2  30 58        	bmi	notfnd		;error if none
00B907  2  AD F6 BF     fnddir:	lda	sixten		;set across
00B90A  2  8D F5 BF     	sta	across		;to four
00B90D  2  20 E1 BB     	jsr	ccrlf		;do a crlf
00B910  2  20 6C BC     dirl:	jsr	hdr		;do header
00B913  2  A9 3A        	lda	#':'		;then a
00B915  2  20 F0 BB     	jsr	chrout		;colon
00B918  2  AD EE BF     	lda	diradd		;get number
00B91B  2  0A           	asl	a		;and
00B91C  2  0A           	asl	a		;multiply
00B91D  2  0A           	asl	a		;by
00B91E  2  0A           	asl	a		;thirty two
00B91F  2  0A           	asl	a		;then
00B920  2  29 60        	and	#%01100000	;mask out insignificant
00B922  2  A8           	tay			;make a pointer
00B923  2  C8           	iny			;and bump
00B924  2  A2 01        	ldx	#1		;set counter
00B926  2  B9 28 01     nmelpe:	lda	dflbuf,y	;get name
00B929  2  29 7F        	AND 	#$7F		;mask out read only bit
00B92B  2  20 72 BC     	jsr	cotsxy		;else send to console
00B92E  2  C8           noname:	iny			;bump index
00B92F  2  E8           	inx			;and count
00B930  2  E0 0C        	cpx	#12		;if count is 12
00B932  2  F0 0C        	beq	endnme		;then done
00B934  2  E0 09        	cpx	#9		;or if not 9
00B936  2  D0 EE        	bne	nmelpe		;then loop
00B938  2  A9 2E        	lda	#'.'		;else send
00B93A  2  20 72 BC     	jsr	cotsxy		;a period
00B93D  2  4C 26 B9     	jmp	nmelpe		;and loop
00B940  2  20 F8 BB     endnme:	jsr	chkcst		;check console status
00B943  2  D0 19        	bne	extdir		;if key down quit
00B945  2  20 97 BC     	jsr	setone		;else point to fcb
00B948  2  20 10 BC     	jsr	srchnx		;else search for next
00B94B  2  8D EE BF     	sta	diradd		;save number
00B94E  2  30 0E        	bmi	extdir		;quit if not found
00B950  2  CE F5 BF     	dec	across		;drop count
00B953  2  F0 B2        	beq	fnddir		;new line if 0
00B955  2  20 EE BB     	jsr	spcout		;send
00B958  2  20 EE BB     	jsr	spcout		;two spaces
00B95B  2  4C 10 B9     	jmp	dirl		;and stay
00B95E  2  60           extdir:	rts			;else done
00B95F  2               ;not found error handler
00B95F  2  A0 34        notfnd:	ldy	#ntfnms		;point to message
00B961  2  4C C0 BD     	jmp	sndmsg		;send and exit
00B964  2               ;execute ren command
00B964  2               ; ren <ufn> <ufn>
00B964  2               ;where first ufn is from name and second is to name
00B964  2  20 A5 BC     ren:	jsr	prslin		;get old name
00B967  2  D0 57        	bne	renerr		;error if afn
00B969  2  20 9E BC     	jsr	tmpold		;save drive
00B96C  2  20 AB BD     	jsr	clrslt		;clear auto and select
00B96F  2  20 5F BC     	jsr	srchf1		;if file does not exist
00B972  2  30 4F        	bmi	fntfnd		;then an error
00B974  2  20 E0 BD     	jsr	frssec		;move name to second half
00B977  2  AC E7 BF     	ldy	cnbfpt		;get pointer
00B97A  2  B9 44 BF     	lda	cnstxt,y	;and then char
00B97D  2  C9 20        	cmp	#' '		;if not a space
00B97F  2  D0 3C        	bne	rensyn		;then error
00B981  2  20 A5 BC     	jsr	prslin		;get new name
00B984  2  D0 37        	bne	rensyn		;error if afn
00B986  2  AD E9 BF     	lda	tmpdsk		;get new drive
00B989  2  F0 12        	beq	nonwdr		;if zero ok
00B98B  2  CD F2 BF     	cmp	oldtmp		;compare to old
00B98E  2  F0 0D        	beq	nonwdr		;ok if same
00B990  2  38           	sec			;drop for default check
00B991  2  E9 01        	sbc	#1
00B993  2  CD E8 BF     	cmp	dfldsk		;if not default
00B996  2  D0 25        	bne	rensyn		;is error
00B998  2  AD F2 BF     	lda	oldtmp		;and then if from not
00B99B  2  D0 20        	bne	rensyn		;default is error
00B99D  2  AD F2 BF     nonwdr:	lda	oldtmp		;else get old
00B9A0  2  8D E9 BF     	sta	tmpdsk		;and save
00B9A3  2  A9 00        	lda	#0		;clear
00B9A5  2  8D D3 BF     	sta	fcbone+16
00B9A8  2  20 AB BD     	jsr	clrslt		;reselect
00B9AB  2  20 5F BC     	jsr	srchf1		;search for old
00B9AE  2  10 09        	bpl	filexs		;error if found
00B9B0  2  20 E0 BD     	jsr	frssec		;swap names
00B9B3  2  20 97 BC     	jsr	setone		;point to fcb
00B9B6  2  4C 27 BC     	jmp	renmfl		;and do it
00B9B9  2               ;ren file exists error handler
00B9B9  2  A0 3E        filexs:	ldy	#flexms		;point to
00B9BB  2  D0 08        	bne	remsg		;and send
00B9BD  2               ;ren syntax error handler
00B9BD  2  20 34 BC     rensyn:	jsr	rstddr		;restore default
00B9C0  2  4C C9 B8     renerr:	jmp	cmderr		;do error
00B9C3  2               ;ren source file not found error handler
00B9C3  2  A0 34        fntfnd:	ldy	#ntfnms		;point to
00B9C5  2  4C C0 BD     remsg:	jmp	sndmsg		;and send
00B9C8  2               ;execute save command
00B9C8  2               ; save <length> <drive:>ufn (<address>)
00B9C8  2  A9 00        save:	lda	#<tea		;set start address to tea start
00B9CA  2  A0 08        	ldy	#>tea
00B9CC  2  8D FC BF     	sta	sadr
00B9CF  2  8C FD BF     	sty	sadr+1
00B9D2  2  20 05 BE     	jsr	bldnum		;calculate length
00B9D5  2  D0 7A        	bne	saverr		;error if > 255 pages
00B9D7  2  8D F1 BF     	sta	length		;else save low
00B9DA  2  0D F1 BF     	ora	length		;test for zero length
00B9DD  2  F0 72        	beq	saverr		;error if is
00B9DF  2  20 A5 BC     	jsr	prslin		;get file name
00B9E2  2  D0 6D        	bne	saverr		;error if afn
00B9E4  2  20 E0 BD     	jsr	frssec		;move name to second half
00B9E7  2  20 9E BC     	jsr	tmpold		;save drive
00B9EA  2  20 05 BE     	jsr	bldnum		;it is so find value
00B9ED  2  AE C4 BF     	ldx	fcbone+1	;see if there
00B9F0  2  E0 20        	cpx	#' '
00B9F2  2  F0 0A        	beq	nosadr		;it is not
00B9F4  2  8D FC BF     	sta	sadr		;and set address
00B9F7  2  8C FD BF     	sty	sadr+1
00B9FA  2  C0 02        	cpy	#2		;make sure is high enough
00B9FC  2  90 53        	bcc	saverr		;error if not
00B9FE  2  20 F3 BD     nosadr:	jsr	secfrs		;move name back
00BA01  2  20 AB BD     	jsr	clrslt		;clear auto and select
00BA04  2  20 14 BC     	jsr	dlt1		;delete
00BA07  2  20 97 BC     	jsr	setone		;then create
00BA0A  2  20 23 BC     	jsr	cratfl		;new file
00BA0D  2  30 45        	bmi	noroom		;say no room if error
00BA0F  2  20 4A BC     	jsr	open1		;open file
00BA12  2  30 44        	bmi	noopen		;if error
00BA14  2  18           	clc			;now find end page
00BA15  2  AD FD BF     	lda	sadr+1
00BA18  2  6D F1 BF     	adc	length
00BA1B  2  8D F1 BF     	sta	length
00BA1E  2  AD FC BF     	lda	sadr		;get start address
00BA21  2  AC FD BF     	ldy	sadr+1
00BA24  2  8D F3 BF     wrtmre:	sta	dskbuf		;set
00BA27  2  8C F4 BF     	sty	dskbuf+1	;buffer
00BA2A  2  20 CA CA     	jsr	mv128		;move data to buffer
00BA2D  2  20 97 BC     	jsr	setone		;point to fcb
00BA30  2  20 1F BC     	jsr	wrrcrd		;write record
00BA33  2  D0 27        	bne	wrterr		;exit if error
00BA35  2  18           	clc			;else
00BA36  2  AD F3 BF     	lda	dskbuf		;get old
00BA39  2  AC F4 BF     	ldy	dskbuf+1	;buffer
00BA3C  2  69 80        	adc	#128		;add 128
00BA3E  2  90 03        	bcc	donotc		;if carry
00BA40  2  C8           	iny			;bump upper
00BA41  2  F0 05        	beq	clssav		;done if page zero
00BA43  2  CC F1 BF     donotc:	cpy	length		;loop if upper
00BA46  2  D0 DC        	bne	wrtmre		;not at limit
00BA48  2  20 97 BC     clssav:	jsr	setone		;else point to
00BA4B  2  20 08 BC     	jsr	clsefl		;and close file
00BA4E  2  30 10        	bmi	cantcl		;say so if error
00BA50  2  60           extera:	rts
00BA51  2               ;save error handler
00BA51  2  4C C9 B8     saverr:	jmp	cmderr		;do error
00BA54  2               ;save no room error handler
00BA54  2  A0 01        noroom:	ldy	#nospms		;point to
00BA56  2  D0 0A        	bne	semsg		;and send
00BA58  2               ;save can not open error handler
00BA58  2  A0 55        noopen:	ldy	#cnnoms		;point to
00BA5A  2  D0 06        	bne	semsg		;and send
00BA5C  2               ;save write error handler
00BA5C  2  A0 62        wrterr:	ldy	#wrerms		;point
00BA5E  2  D0 02        	bne	semsg		;to and send
00BA60  2               ;save can not close error
00BA60  2  A0 0A        cantcl:	ldy	#ntclms		;point to
00BA62  2  4C C0 BD     semsg:	jmp	sndmsg		;and send
00BA65  2               ;execute era command
00BA65  2               ; era <afn>
00BA65  2  20 A5 BC     era:	jsr	prslin		;get file name
00BA68  2  C9 0B        	cmp	#11		;if not all ?
00BA6A  2  D0 13        	bne	nteral		;then skip verify
00BA6C  2  A0 18        	ldy	#alflms		;else point to
00BA6E  2  20 C0 BD     	jsr	sndmsg		;and send all files
00BA71  2  20 EA BB     	jsr	cnsrde		;get an input
00BA74  2  48           	pha			;and save
00BA75  2  20 E1 BB     	jsr	ccrlf		;do a cr lf
00BA78  2  68           	pla			;restore char
00BA79  2  29 5F        	and	#$5f		;convert to upper case
00BA7B  2  C9 59        	cmp	#'Y'		;if not y
00BA7D  2  D0 D1        	bne	extera		;then quit
00BA7F  2  20 AB BD     nteral:	jsr	clrslt		;clear auto and select
00BA82  2  4C 14 BC     	jmp	dlt1		;delete first
00BA85  2               ;execute type command
00BA85  2               ; type d:ufn
00BA85  2  20 A5 BC     type:	jsr	prslin		;get file
00BA88  2  D0 30        	bne	typafn		;error if afn
00BA8A  2  20 47 BC     	jsr	casdo1		;clear - select - open file 1
00BA8D  2  30 32        	bmi	notype		;error if not found
00BA8F  2  20 E1 BB     	jsr	ccrlf		;else do cr lf
00BA92  2  20 59 BC     typmre:	jsr	read1		;read record
00BA95  2  F0 04        	beq	okread		;if ok continue
00BA97  2  10 20        	bpl	exttyp		;exit if just end
00BA99  2  30 22        	bmi	typerr		;else error
00BA9B  2  A2 00        okread:	ldx	#0		;clear index
00BA9D  2  BD 28 01     typlpe:	lda	dflbuf,x	;get char
00BAA0  2  C9 1A        	cmp	#eof		;if eof
00BAA2  2  F0 15        	beq	exttyp		;then exit
00BAA4  2  20 72 BC     	jsr	cotsxy		;else send
00BAA7  2  20 F8 BB     	jsr	chkcst		;if key down
00BAAA  2  D0 08        	bne	exttok		;then exit
00BAAC  2  AE EF BF     	ldx	savx		;else get index
00BAAF  2  E8           	inx			;bump it
00BAB0  2  10 EB        	bpl	typlpe		;and loop if < 128
00BAB2  2  30 DE        	bmi	typmre		;else read more
00BAB4  2  A2 06        exttok:	ldx	#6		;clear console
00BAB6  2  20 03 01     	jsr	pemjmp		;with no echo
00BAB9  2  60           exttyp:	rts
00BABA  2               ;type syntax error handler
00BABA  2  4C C9 B8     typafn:	jmp	cmderr		;error return
00BABD  2               ;type read error handler
00BABD  2  A0 29        typerr:	ldy	#rderms		;point to
00BABF  2  D0 02        	bne	temsg		;and send
00BAC1  2               ;type not found error handler
00BAC1  2  A0 34        notype:	ldy	#ntfnms		;point to
00BAC3  2  4C C0 BD     temsg:	jmp	sndmsg		;and send
00BAC6  2               ;execute load command
00BAC6  2               ; load <ufn> (<address>)
00BAC6  2  20 D5 BD     load:	jsr	setddb		;set load start to tea start
00BAC9  2  20 A5 BC     	jsr	prslin		;build fcb
00BACC  2  D0 EC        	bne	typafn		;error if afn
00BACE  2  20 E0 BD     	jsr	frssec		;save in second half
00BAD1  2  20 9E BC     	jsr	tmpold		;save file
00BAD4  2  20 05 BE     	jsr	bldnum		;find start address
00BAD7  2  AE C4 BF     	ldx	fcbone+1	;see if number
00BADA  2  E0 20        	cpx	#' '
00BADC  2  F0 03        	beq	usedfl		;if none use default
00BADE  2  20 D9 BD     	jsr	setdb		;and set
00BAE1  2  20 F3 BD     usedfl:	jsr	secfrs		;move name back
00BAE4  2  20 47 BC     	jsr	casdo1		;clear - select - open file 1
00BAE7  2  30 D8        	bmi	notype		;exit if not found
00BAE9  2  AD F3 BF     	lda	dskbuf		;get load start
00BAEC  2  AC F4 BF     	ldy	dskbuf+1
00BAEF  2  20 2F BC     lcmdlp:	jsr	setbuf		;set as disk buffer
00BAF2  2  20 59 BC     	jsr	read1		;read record
00BAF5  2  D0 06        	bne	loadnd		;done if not zero
00BAF7  2  20 B7 CA     	jsr	adjdb		;bump address
00BAFA  2  4C EF BA     	jmp	lcmdlp		;and loop
00BAFD  2  30 BE        loadnd:	bmi	typerr		;if error say so
00BAFF  2  4C A4 BD     	jmp	stdflb		;back to default buffer
00BB02  2               ;execute go command
00BB02  2               ; go (<address>)
00BB02  2  20 05 BE     go:	jsr	bldnum		;get address
00BB05  2  AE C4 BF     	ldx	fcbone+1	;get first char
00BB08  2  E0 20        	cpx	#' '		;see if nothing
00BB0A  2  F0 03        	beq	nolnum		;nothing so use tea
00BB0C  2  4C 76 BB     	jmp	godoit		;then execute
00BB0F  2  4C 72 BB     nolnum:	jmp	gotea
00BB12  2               ;execute trns (transient) command
00BB12  2               ; <ufn> (<fn>) (<fn>)
00BB12  2  AD C4 BF     trns:	lda	fcbone+1	;get first char
00BB15  2  C9 20        	cmp	#' '		;if not space
00BB17  2  D0 11        	bne	chktyp		;check type
00BB19  2  AD E9 BF     	lda	tmpdsk		;else test temp
00BB1C  2  F0 09        	beq	skpdrv		;if none skip
00BB1E  2  38           	sec			;else convert
00BB1F  2  E9 01        	sbc	#1		;to number
00BB21  2  8D E8 BF     	sta	dfldsk		;set default
00BB24  2  20 00 BC     	jsr	slctds		;and select
00BB27  2  4C B8 B8     skpdrv:	jmp	extwod		;return
00BB2A  2  AD CC BF     chktyp:	lda	fcbone+9	;get type
00BB2D  2  C9 20        	cmp	#' '		;if space
00BB2F  2  F0 03        	beq	typemp		;then ok
00BB31  2  4C D9 BB     	jmp	trnerr		;else error
00BB34  2  A2 02        typemp:	ldx	#2		;make
00BB36  2  BD E4 BF     setcom:	lda	typcom,x	;type
00BB39  2  9D CC BF     	sta	fcbone+9,x	;com
00BB3C  2  CA           	dex			;then
00BB3D  2  10 F7        	bpl	setcom		;continue
00BB3F  2  20 47 BC     	jsr	casdo1		;clear - select - open file one
00BB42  2  10 03        	bpl	gottrn		;jump if ok
00BB44  2  4C D6 BB     	jmp	topner		;else do error
00BB47  2  20 D5 BD     gottrn:	jsr	setddb		;set start to tea
00BB4A  2  20 2F BC     nxtrcr:	jsr	setbuf		;set address
00BB4D  2  20 59 BC     	jsr	read1		;read fcb 1
00BB50  2  D0 1E        	bne	endlde		;branch if error or eof
00BB52  2  20 B7 CA     	jsr	adjdb		;adjust address up by 128
00BB55  2  CD 91 BE     	cmp	ccmvc		;if new low
00BB58  2  90 07        	bcc	tryhig		;ok try high
00BB5A  2  CC 92 BE     	cpy	ccmvc+1		;else if high
00BB5D  2  90 EB        	bcc	nxtrcr		;ok do more
00BB5F  2  B0 07        	bcs	chklnd		;else check for end
00BB61  2  CC 92 BE     tryhig:	cpy	ccmvc+1		;if high less
00BB64  2  90 E4        	bcc	nxtrcr		;then ok
00BB66  2  F0 E2        	beq	nxtrcr		;or ok if same
00BB68  2  20 A4 BD     chklnd:	jsr	stdflb		;set buffer to default
00BB6B  2  20 59 BC     	jsr	read1		;read (should be eof)
00BB6E  2  F0 6C        	beq	tlderr		;error if more
00BB70  2  30 6A        endlde:	bmi	tlderr		;do error
00BB72  2  A9 00        gotea:	lda	#<tea		;set go address to tea start
00BB74  2  A0 08        	ldy	#>tea
00BB76  2  8D CB BB     godoit:	sta	do+1		;set to ay
00BB79  2  8C CC BB     	sty	do+2
00BB7C  2  20 34 BC     	jsr	rstddr		;else restore default
00BB7F  2  20 A5 BC     	jsr	prslin		;parse file
00BB82  2  AD E9 BF     	lda	tmpdsk		;set auto
00BB85  2  8D C3 BF     	sta	fcbone		;select position
00BB88  2  A2 10        	ldx	#16		;do a second
00BB8A  2  20 A7 BC     	jsr	prsmre		;fcb if there
00BB8D  2  AD E9 BF     	lda	tmpdsk		;set auto select
00BB90  2  8D D3 BF     	sta	fcbone+16	;again
00BB93  2  A0 00        	ldy	#0		;clear record
00BB95  2  8C E3 BF     	sty	fcbone+32	;counter
00BB98  2  A2 20        	ldx	#32		;move
00BB9A  2  BD C3 BF     movfcb:	lda	fcbone,x	;all
00BB9D  2  9D 07 01     	sta	dflfcb,x	;to
00BBA0  2  CA           	dex			;default
00BBA1  2  10 F7        	bpl	movfcb		;fcb
00BBA3  2  E8           	inx			;set x to zero
00BBA4  2  B9 44 BF     tstbuf:	lda	cnstxt,y	;get char
00BBA7  2  F0 07        	beq	isnull		;if null jump
00BBA9  2  C9 20        	cmp	#' '		;or if space
00BBAB  2  F0 03        	beq	isnull		;jump
00BBAD  2  C8           	iny			;else bump pointer
00BBAE  2  D0 F4        	bne	tstbuf		;and loop
00BBB0  2  A9 00        isnull:	lda	#0		;clear
00BBB2  2  8D 28 01     	sta	dflbuf		;count
00BBB5  2  B9 44 BF     movbuf:	lda	cnstxt,y	;get char
00BBB8  2  9D 29 01     	sta	dflbuf+1,x	;and move
00BBBB  2  F0 07        	beq	fillov		;exit if null
00BBBD  2  E8           	inx			;increment
00BBBE  2  C8           	iny			;counters
00BBBF  2  EE 28 01     	inc	dflbuf		;and length
00BBC2  2  D0 F1        	bne	movbuf		;and loop
00BBC4  2  20 E1 BB     fillov:	jsr	ccrlf		;do a cr lf
00BBC7  2  20 A4 BD     	jsr	stdflb		;set default
00BBCA  2  20 00 08     do:	jsr	tea		;execute
00BBCD  2  AD E8 BF     	lda	dfldsk		;get default
00BBD0  2  20 00 BC     	jsr	slctds		;and set
00BBD3  2  4C 1B B8     	jmp	ccmlpe		;then loop
00BBD6  2               ;trns syntax error handler
00BBD6  2  20 34 BC     topner:	jsr	rstddr		;restore default
00BBD9  2  4C C9 B8     trnerr:	jmp	cmderr		;do error
00BBDC  2               ;trns load error
00BBDC  2  A0 4A        tlderr:	ldy	#lderms		;point to
00BBDE  2  4C C0 BD     	jmp	sndmsg		;and send
00BBE1  2               ;carriage return and linefeed
00BBE1  2  A9 0D        ccrlf:	lda	#cr		;get a cr
00BBE3  2  20 F0 BB     	jsr	chrout		;send
00BBE6  2  A9 0A        	lda	#lf		;get a lf
00BBE8  2  D0 06        	bne	chrout		;and send
00BBEA  2               ;pem entry routines
00BBEA  2  A2 01        cnsrde:	ldx	#1		;console read
00BBEC  2  D0 43        	bne	pemgo
00BBEE  2  A9 20        spcout:	lda	#' '		;output space
00BBF0  2  A2 02        chrout:	ldx	#2		;console output
00BBF2  2  D0 3D        	bne	pemgo
00BBF4  2  A2 0A        rdebuf:	ldx	#10		;buffered input
00BBF6  2  D0 39        	bne	pemgo
00BBF8  2  A2 0B        chkcst:	ldx	#11		;check console
00BBFA  2  D0 35        	bne	pemgo
00BBFC  2  A2 0D        rstdsk:	ldx	#13		;initialize system
00BBFE  2  D0 31        	bne	pemgo
00BC00  2  A2 0E        slctds:	ldx	#14		;select drive
00BC02  2  D0 2D        	bne	pemgo
00BC04  2  A2 0F        openfl:	ldx	#15		;open file
00BC06  2  D0 29        	bne	pemgo
00BC08  2  A2 10        clsefl:	ldx	#16		;close file
00BC0A  2  D0 25        	bne	pemgo
00BC0C  2  A2 11        srchfr:	ldx	#17		;first match
00BC0E  2  D0 21        	bne	pemgo
00BC10  2  A2 12        srchnx:	ldx	#18		;next match
00BC12  2  D0 1D        	bne	pemgo
00BC14  2               ;delete file one
00BC14  2  20 97 BC     dlt1:	jsr	setone		;point to fcb
00BC17  2  A2 13        dltfil:	ldx	#19		;delete file
00BC19  2  D0 16        	bne	pemgo
00BC1B  2  A2 14        rdrcrd:	ldx	#20		;read record
00BC1D  2  D0 12        	bne	pemgo
00BC1F  2  A2 15        wrrcrd:	ldx	#21		;write record
00BC21  2  D0 0E        	bne	pemgo
00BC23  2  A2 16        cratfl:	ldx	#22		;create file
00BC25  2  D0 0A        	bne	pemgo
00BC27  2  A2 17        renmfl:	ldx	#23		;rename file
00BC29  2  D0 06        	bne	pemgo
00BC2B  2  A2 19        intdsk:	ldx	#25		;read drive num
00BC2D  2  D0 02        	bne	pemgo
00BC2F  2  A2 1A        setbuf:	ldx	#26		;set buffer add
00BC31  2  4C 03 01     pemgo:	jmp	pemjmp		;go to pem
00BC34  2               ;restore default drive
00BC34  2  AD E9 BF     rstddr:	lda	tmpdsk		;if temp drive
00BC37  2  F0 1F        	beq	extddr		;zero then exit
00BC39  2  38           	sec			;else
00BC3A  2  E9 01        	sbc	#1		;subtract one
00BC3C  2  CD E8 BF     	cmp	dfldsk		;compare to default
00BC3F  2  F0 17        	beq	extddr		;exit if same
00BC41  2  AD E8 BF     seldfl:	lda	dfldsk		;else get default
00BC44  2  4C 00 BC     	jmp	slctds		;select
00BC47  2               ;clear auto - select disk - open file at fcbone
00BC47  2  20 AB BD     casdo1:	jsr	clrslt		;clear auto and select
00BC4A  2               ;open file one
00BC4A  2               ; returns:n=1 if not found
00BC4A  2  A9 00        open1:	lda	#0		;clear
00BC4C  2  8D E3 BF     	sta	fcbone+32	;record number
00BC4F  2  20 97 BC     	jsr	setone		;point to fcb
00BC52  2  20 04 BC     	jsr	openfl		;open it
00BC55  2  8D EE BF     	sta	diradd		;save number
00BC58  2  60           extddr:	rts
00BC59  2               ;read file one
00BC59  2  20 97 BC     read1:	jsr	setone		;point to fcb
00BC5C  2  4C 1B BC     	jmp	rdrcrd		;do read
00BC5F  2               ;search for first file one
00BC5F  2               ; returns:n=1 if not found
00BC5F  2  20 97 BC     srchf1:	jsr	setone		;point to fcb
00BC62  2  20 0C BC     	jsr	srchfr		;search for first
00BC65  2  8D EE BF     	sta	diradd		;save number
00BC68  2  60           	rts
00BC69  2               ;header output
00BC69  2  20 E1 BB     hdrout:	jsr	ccrlf		;do cr lf
00BC6C  2  20 2B BC     hdr:	jsr	intdsk		;get drive number
00BC6F  2  18           	clc			;make
00BC70  2  69 41        	adc	#'A'		;a letter
00BC72  2               ;output with save of x and y
00BC72  2               ;this routine calls the pem resident routine
00BC72  2               ;tstchr to see if a char is a printing char.
00BC72  2               ;if it is then c=1 upon return from tstchr.
00BC72  2  8E EF BF     cotsxy:	stx	savx		;save x
00BC75  2  8C F0 BF     	sty	savy		;and y
00BC78  2  20 C1 C8     	jsr	tstchr		;see if printing
00BC7B  2  B0 10        	bcs	isprnt		;jump if is
00BC7D  2  48           	pha			;else save
00BC7E  2  AD 90 CC     	lda	sysdef+4	;get invert
00BC81  2  20 F0 BB     	jsr	chrout		;send it
00BC84  2  68           	pla			;get char
00BC85  2  09 40        	ora	#'@'		;make printing
00BC87  2  20 F0 BB     	jsr	chrout		;send it
00BC8A  2  AD 8F CC     	lda	sysdef+3	;get normal
00BC8D  2  20 F0 BB     isprnt:	jsr	chrout		;do output
00BC90  2  AC F0 BF     	ldy	savy		;get y
00BC93  2  AE EF BF     	ldx	savx		;and x
00BC96  2  60           	rts
00BC97  2               ;set up fcb one pointer
00BC97  2  AD 94 BE     setone:	lda	fcb1vc		;low
00BC9A  2  AC 95 BE     	ldy	fcb1vc+1	;and high
00BC9D  2  60           	rts
00BC9E  2               ;save tmpdsk in oldtmp
00BC9E  2  AD E9 BF     tmpold:	lda	tmpdsk
00BCA1  2  8D F2 BF     	sta	oldtmp
00BCA4  2  60           	rts
00BCA5  2               ;parse command line
00BCA5  2  A2 00        prslin:	ldx	#0		;clear index
00BCA7  2  8A           prsmre:	txa			;save
00BCA8  2  48           	pha			;index
00BCA9  2  A9 00        	lda	#0		;clear temp
00BCAB  2  8D E9 BF     	sta	tmpdsk		;drive flag
00BCAE  2  AC E7 BF     	ldy	cnbfpt		;get buffer pointer
00BCB1  2  20 72 BD     	jsr	skpspc		;find first non-space
00BCB4  2  8C ED BF     	sty	curpnt		;save index
00BCB7  2  F0 0D        	beq	nulchr		;jump if null
00BCB9  2  29 0F        	and	#%00001111	;else look at 4 lsbs
00BCBB  2  48           	pha			;and save
00BCBC  2  C8           	iny			;point to next char
00BCBD  2  B9 44 BF     	lda	cnstxt,y	;and get it
00BCC0  2  C9 3A        	cmp	#':'		;if a colon
00BCC2  2  F0 0A        	beq	drvinp		;jump and set drive
00BCC4  2  68           	pla			;else clear stack
00BCC5  2  88           	dey			;backup index
00BCC6  2  AD E8 BF     nulchr:	lda	dfldsk		;set automatic
00BCC9  2  9D C3 BF     	sta	fcbone,x	;to default
00BCCC  2  10 08        	bpl	trynme		;then parse name
00BCCE  2  68           drvinp:	pla			;get number
00BCCF  2  8D E9 BF     	sta	tmpdsk		;set temp flag
00BCD2  2  9D C3 BF     	sta	fcbone,x	;and fcb
00BCD5  2  C8           	iny			;point past colon
00BCD6  2  A9 08        trynme:	lda	#8		;set name count
00BCD8  2  8D EC BF     	sta	ccmcount		;to eight
00BCDB  2  20 7F BD     tstnme:	jsr	tstlgl		;test for illegal
00BCDE  2  F0 1D        	beq	flnmsp		;if illegal jump
00BCE0  2  E8           	inx			;bump pointer
00BCE1  2  C9 2A        	cmp	#'*'		;if not *
00BCE3  2  D0 07        	bne	notafn		;skip ? fill
00BCE5  2  A9 3F        	lda	#'?'		;get a ?
00BCE7  2  9D C3 BF     	sta	fcbone,x	;store
00BCEA  2  D0 04        	bne	nxtout		;and jump
00BCEC  2  9D C3 BF     notafn:	sta	fcbone,x	;store char
00BCEF  2  C8           	iny			;bump source
00BCF0  2  CE EC BF     nxtout:	dec	ccmcount		;drop counter down
00BCF3  2  D0 E6        	bne	tstnme		;and loop
00BCF5  2  20 7F BD     skpmre:	jsr	tstlgl		;if illegal
00BCF8  2  F0 11        	beq	trytyp		;try type
00BCFA  2  C8           	iny			;else bump index
00BCFB  2  D0 F8        	bne	skpmre		;and loop
00BCFD  2  E8           flnmsp:	inx			;next position
00BCFE  2  A9 20        	lda	#' '		;get a space
00BD00  2  9D C3 BF     	sta	fcbone,x	;store
00BD03  2  CE EC BF     	dec	ccmcount		;count down
00BD06  2  D0 F5        	bne	flnmsp		;and loop
00BD08  2  B9 44 BF     	lda	cnstxt,y	;get char again
00BD0B  2  48           trytyp:	pha			;save char
00BD0C  2  A9 03        	lda	#3		;set count
00BD0E  2  8D EC BF     	sta	ccmcount		;to three
00BD11  2  68           	pla			;get char
00BD12  2  C9 2E        	cmp	#'.'		;if not .
00BD14  2  D0 23        	bne	fltysp		;then fill spaces
00BD16  2  C8           	iny			;else bump source
00BD17  2  20 7F BD     tsttyp:	jsr	tstlgl		;if not legal
00BD1A  2  F0 1D        	beq	fltysp		;then fill spaces
00BD1C  2  E8           	inx			;else bump index
00BD1D  2  C9 2A        	cmp	#'*'		;if not *
00BD1F  2  D0 07        	bne	notaft		;then skip fill
00BD21  2  A9 3F        	lda	#'?'		;else get ?
00BD23  2  9D C3 BF     	sta	fcbone,x	;move to fcb
00BD26  2  D0 04        	bne	mrtyfl		;and loop
00BD28  2  9D C3 BF     notaft:	sta	fcbone,x	;move char to fcb
00BD2B  2  C8           	iny			;bump source
00BD2C  2  CE EC BF     mrtyfl:	dec	ccmcount		;count down
00BD2F  2  D0 E6        	bne	tsttyp		;and loop
00BD31  2  20 7F BD     nttype:	jsr	tstlgl		;if illegal
00BD34  2  F0 0E        	beq	filnul		;fill out nulls
00BD36  2  C8           	iny			;else bump source
00BD37  2  D0 F8        	bne	nttype		;and loop
00BD39  2  E8           fltysp:	inx			;bump fcb pointer
00BD3A  2  A9 20        	lda	#' '		;get space
00BD3C  2  9D C3 BF     	sta	fcbone,x	;put in fcb
00BD3F  2  CE EC BF     	dec	ccmcount		;count down
00BD42  2  D0 F5        	bne	fltysp		;and continue
00BD44  2  A9 03        filnul:	lda	#3		;clear
00BD46  2  8D EC BF     	sta	ccmcount		;three
00BD49  2  E8           mrnlty:	inx			;bump fcb pointer
00BD4A  2  A9 00        	lda	#0		;get a zero
00BD4C  2  9D C3 BF     	sta	fcbone,x	;move to fcb
00BD4F  2  CE EC BF     	dec	ccmcount		;count down
00BD52  2  D0 F5        	bne	mrnlty		;loop until done
00BD54  2  8C E7 BF     	sty	cnbfpt		;update start pointer
00BD57  2  A9 00        	lda	#0		;clear
00BD59  2  8D EC BF     	sta	ccmcount		;count
00BD5C  2  68           	pla			;restore stack
00BD5D  2  A8           	tay			;move to index
00BD5E  2  A2 0B        	ldx	#11		;counter to 11
00BD60  2  C8           tstqus:	iny			;point to
00BD61  2  B9 C3 BF     	lda	fcbone,y	;and get char
00BD64  2  C9 3F        	cmp	#'?'		;if not a ?
00BD66  2  D0 03        	bne	nxtqus		;then jump
00BD68  2  EE EC BF     	inc	ccmcount		;else bump count
00BD6B  2  CA           nxtqus:	dex			;loop until
00BD6C  2  D0 F2        	bne	tstqus		;11 tested
00BD6E  2  AD EC BF     	lda	ccmcount		;get count
00BD71  2  60           	rts			;and return
00BD72  2               ;skip space
00BD72  2  B9 44 BF     skpspc:	lda	cnstxt,y	;get char
00BD75  2  F0 07        	beq	extskp		;jump if null
00BD77  2  C9 20        	cmp	#' '		;if not space
00BD79  2  D0 03        	bne	extskp		;then exit
00BD7B  2  C8           	iny			;else go to next
00BD7C  2  D0 F4        	bne	skpspc		;and test
00BD7E  2  60           extskp:	rts
00BD7F  2               ;test legal
00BD7F  2  B9 44 BF     tstlgl:	lda	cnstxt,y	;get char
00BD82  2  F0 1C        	beq	extlgl
00BD84  2  C9 20        	cmp	#' '		;if space
00BD86  2  90 19        	bcc	badinp		;ok - less is error
00BD88  2  F0 16        	beq	extlgl
00BD8A  2  C9 3D        	cmp	#'='
00BD8C  2  F0 12        	beq	extlgl
00BD8E  2  C9 2E        	cmp	#'.'
00BD90  2  F0 0E        	beq	extlgl
00BD92  2  C9 3A        	cmp	#':'
00BD94  2  F0 0A        	beq	extlgl
00BD96  2  C9 3B        	cmp	#semico
00BD98  2  F0 06        	beq	extlgl
00BD9A  2  C9 3C        	cmp	#'<'
00BD9C  2  F0 02        	beq	extlgl
00BD9E  2  C9 3E        	cmp	#'>'
00BDA0  2  60           extlgl:	rts
00BDA1  2  4C C9 B8     badinp:	jmp	cmderr
00BDA4  2               ;set default buffer address
00BDA4  2  A9 28        stdflb:	lda	#<dflbuf 	;point to
00BDA6  2  A0 01        	ldy	#>dflbuf	;location
00BDA8  2  4C 2F BC     	jmp	setbuf		;and set
00BDAB  2               ;clear automatic and select
00BDAB  2  A9 00        clrslt:	lda	#0		;clear auto
00BDAD  2  8D C3 BF     	sta	fcbone		;select
00BDB0  2  AD E9 BF     slttmp:	lda	tmpdsk		;get temp
00BDB3  2  F0 1F        	beq	extsnd		;if zero exit
00BDB5  2  38           	sec			;else subtract
00BDB6  2  E9 01        	sbc	#1		;one
00BDB8  2  CD E8 BF     	cmp	dfldsk		;if same as default
00BDBB  2  F0 17        	beq	extsnd		;then quit
00BDBD  2  4C 00 BC     	jmp	slctds		;else set
00BDC0  2               ;send message
00BDC0  2  8C F0 BF     sndmsg:	sty	savy		;save index
00BDC3  2  20 E1 BB     	jsr	ccrlf		;do cr and lf
00BDC6  2  AC F0 BF     	ldy	savy		;get index
00BDC9  2  B9 AF BE     lpesnd:	lda	msgtbl,y	;get char
00BDCC  2  F0 06        	beq	extsnd		;if null quit
00BDCE  2  20 72 BC     	jsr	cotsxy		;else send
00BDD1  2  C8           	iny			;point to next
00BDD2  2  D0 F5        	bne	lpesnd		;and loop
00BDD4  2  60           extsnd:	rts
00BDD5  2               ;set load start address
00BDD5  2  A9 00        setddb:	lda	#<tea		;to tea start
00BDD7  2  A0 08        	ldy	#>tea
00BDD9  2  8D F3 BF     setdb:	sta	dskbuf		;to ay
00BDDC  2  8C F4 BF     	sty	dskbuf+1
00BDDF  2  60           	rts
00BDE0  2               ;move first part of fcb to second half
00BDE0  2               ;and move second part to first part.
00BDE0  2               ;only ren depends upon this routine to actually
00BDE0  2               ;swap fcb halves.
00BDE0  2               ;alters:a,x,p
00BDE0  2               ;returns:x=$ff
00BDE0  2  A2 0F        frssec:	ldx	#15		;set index to last
00BDE2  2  BD C3 BF     frsclp:	lda	fcbone,x	;get byte
00BDE5  2  BC D3 BF     	ldy	fcbone+16,x
00BDE8  2  9D D3 BF     	sta	fcbone+16,x	;move it
00BDEB  2  98           	tya
00BDEC  2  9D C3 BF     	sta	fcbone,x
00BDEF  2  CA           	dex
00BDF0  2  10 F0        	bpl	frsclp		;until 16 moved
00BDF2  2  60           	rts
00BDF3  2               ;move second part of fcb to first half
00BDF3  2               ;restore tmpdsk from save location
00BDF3  2               ;alters:a,x,p
00BDF3  2               ;returns:x=$ff
00BDF3  2  A2 0F        secfrs:	ldx	#15		;set index to last
00BDF5  2  BD D3 BF     scfrlp:	lda	fcbone+16,x	;get byte
00BDF8  2  9D C3 BF     	sta	fcbone,x	;move it
00BDFB  2  CA           	dex
00BDFC  2  10 F7        	bpl	scfrlp		;loop until done
00BDFE  2  AD F2 BF     	lda	oldtmp		;get old flag
00BE01  2  8D E9 BF     	sta	tmpdsk		;and set
00BE04  2  60           	rts
00BE05  2               ;build a number from command line and leave in num
00BE05  2               ;will handle either decimal (e.g., 578) or hexadecimal (e.g., $3f2)
00BE05  2               ;move parse index past number
00BE05  2               ;modifies:all
00BE05  2               ;returns:a,y set to low and high of number
00BE05  2               ;	 flags set according to y which is high part of number
00BE05  2  A9 09        bldnum:	lda	#9		;preset to decimal
00BE07  2  8D F7 BF     	sta	moduls
00BE0A  2  20 A5 BC     	jsr	prslin		;put in fcb
00BE0D  2  AD E9 BF     	lda	tmpdsk		;if temp
00BE10  2  D0 67        	bne	numerr		;is error
00BE12  2  8D F8 BF     	sta	num		;else clear num
00BE15  2  8D F9 BF     	sta	num+1
00BE18  2  A8           	tay			;and index
00BE19  2  B9 C4 BF     	lda	fcbone+1,y	;get first char
00BE1C  2  C9 24        	cmp	#'$'		;see if hex signal
00BE1E  2  D0 06        	bne	bnumlp		;skip if not
00BE20  2  A9 0F        	lda	#15		;set for modulus
00BE22  2  8D F7 BF     	sta	moduls
00BE25  2  C8           	iny			;bump past $
00BE26  2  C8           bnumlp:	iny			;next char
00BE27  2  B9 C3 BF     	lda	fcbone,y	;get digit
00BE2A  2  C9 20        	cmp	#' '		;see if space
00BE2C  2  F0 4E        	beq	endnlp		;done if is
00BE2E  2  20 A1 CA     	jsr	tstdec		;see if decimal
00BE31  2  90 0E        	bcc	usedig		;use if is
00BE33  2  20 AB CA     	jsr	tsthex		;see if hex
00BE36  2  B0 41        	bcs	numerr		;error if not
00BE38  2  E9 06        	sbc	#6		;remove offset
00BE3A  2  A2 0F        	ldx	#15		;test for hex modulus
00BE3C  2  EC F7 BF     	cpx	moduls
00BE3F  2  D0 38        	bne	numerr		;error if not
00BE41  2  29 0F        usedig:	and	#%00001111	;eliminate ascii bias
00BE43  2  48           	pha			;save result
00BE44  2  AD F8 BF     	lda	num		;move number to temp
00BE47  2  8D FA BF     	sta	tnum
00BE4A  2  AD F9 BF     	lda	num+1
00BE4D  2  8D FB BF     	sta	tnum+1
00BE50  2  AE F7 BF     	ldx	moduls		;get modulus
00BE53  2  18           	clc
00BE54  2  AD F8 BF     addlpe:	lda	num		;add number to itself
00BE57  2  6D FA BF     	adc	tnum
00BE5A  2  8D F8 BF     	sta	num
00BE5D  2  AD F9 BF     	lda	num+1		;modulus times
00BE60  2  6D FB BF     	adc	tnum+1
00BE63  2  8D F9 BF     	sta	num+1
00BE66  2  B0 11        	bcs	numerr		;error if carry out
00BE68  2  CA           	dex
00BE69  2  D0 E9        	bne	addlpe		;loop if more
00BE6B  2  68           	pla			;get input back
00BE6C  2  6D F8 BF     	adc	num		;add in
00BE6F  2  8D F8 BF     	sta	num
00BE72  2  90 B2        	bcc	bnumlp		;loop if no carry
00BE74  2  EE F9 BF     	inc	num+1		;else bump high
00BE77  2  D0 AD        	bne	bnumlp		;and loop for more
00BE79  2               ;error in bldnum - handle and quit
00BE79  2  4C C9 B8     numerr:	jmp	cmderr		;do general error
00BE7C  2               ;end of use of name part - check type
00BE7C  2  AD CC BF     endnlp:	lda	fcbone+9	;get first
00BE7F  2  C9 20        	cmp	#' '		;see if space
00BE81  2  D0 F6        	bne	numerr		;error if not
00BE83  2  AD F8 BF     	lda	num		;return with result
00BE86  2  AC F9 BF     	ldy	num+1
00BE89  2  60           	rts
00BE8A  2               ;relocatable vectors
00BE8A  2  4C           	.byte	$4c
00BE8B  2  42 BF        cnsbvc:	.word	cnsbuf
00BE8D  2  4C           	.byte	$4c
00BE8E  2  B4 B8        extcvc:	.word	extcmd-1
00BE90  2  4C           	.byte	$4c
00BE91  2  03 B8        ccmvc:	.word	ccm
00BE93  2  4C           	.byte	$4c
00BE94  2  C3 BF        fcb1vc:	.word	fcbone
00BE96  2               ;function entry vector
00BE96  2  4C E6 B8     xqfntb:	jmp	dir
00BE99  2  4C C8 B9     	jmp	save
00BE9C  2  4C 65 BA     	jmp	era
00BE9F  2  4C 85 BA     	jmp	type
00BEA2  2  4C 64 B9     	jmp	ren
00BEA5  2  4C 02 BB     	jmp	go
00BEA8  2  4C C6 BA     	jmp	load
00BEAB  2  4C 12 BB     	jmp	trns
00BEAE  2               ;terminator for relocation
00BEAE  2  FF           	.byte	$ff
00BEAF  2               ;messages
00BEAF  2               msgtbl:
00BEAF  2  00           	.byte 0
00BEB0  2               nospms	=	*-msgtbl
00BEB0  2  4E 4F 20 53  	.byte	"NO SPACE",0
00BEB4  2  50 41 43 45  
00BEB8  2  00           
00BEB9  2               ntclms	=	*-msgtbl
00BEB9  2  43 41 4E 20  	.byte "CAN NOT CLOSE",0
00BEBD  2  4E 4F 54 20  
00BEC1  2  43 4C 4F 53  
00BEC7  2               alflms	=	*-msgtbl
00BEC7  2  41 4C 4C 20  	.byte "ALL FILES (Y/N)?",0
00BECB  2  46 49 4C 45  
00BECF  2  53 20 28 59  
00BED8  2               rderms	=	*-msgtbl
00BED8  2  52 45 41 44  	.byte	"READ ERROR",0
00BEDC  2  20 45 52 52  
00BEE0  2  4F 52 00     
00BEE3  2               ntfnms	=	*-msgtbl
00BEE3  2  4E 4F 54 20  	.byte	"NOT FOUND",0
00BEE7  2  46 4F 55 4E  
00BEEB  2  44 00        
00BEED  2               flexms	=	*-msgtbl
00BEED  2  46 49 4C 45  	.byte "FILE EXISTS",0
00BEF1  2  20 45 58 49  
00BEF5  2  53 54 53 00  
00BEF9  2               lderms	=	*-msgtbl
00BEF9  2  4C 4F 41 44  	.byte "LOAD ERROR",0
00BEFD  2  20 45 52 52  
00BF01  2  4F 52 00     
00BF04  2               cnnoms	=	*-msgtbl
00BF04  2  43 41 4E 20  	.byte "CAN NOT OPEN",0
00BF08  2  4E 4F 54 20  
00BF0C  2  4F 50 45 4E  
00BF11  2               wrerms	=	*-msgtbl
00BF11  2  57 52 49 54  	.byte "WRITE ERROR",0
00BF15  2  45 20 45 52  
00BF19  2  52 4F 52 00  
00BF1D  2               ;function name table
00BF1D  2  44 49 52 20  fnctbl:	.byte	"DIR ",0
00BF21  2  00           
00BF22  2  53 41 56 45  	.byte	"SAVE ",0
00BF26  2  20 00        
00BF28  2  45 52 41 20  	.byte	"ERA ",0
00BF2C  2  00           
00BF2D  2  54 59 50 45  	.byte	"TYPE ",0
00BF31  2  20 00        
00BF33  2  52 45 4E 20  	.byte	"REN ",0
00BF37  2  00           
00BF38  2  47 4F 20 00  	.byte	"GO ",0
00BF3C  2  4C 4F 41 44  	.byte	"LOAD ",0
00BF40  2  20 00        
00BF42  2               ;input buffer
00BF42  2               cnsbuf:
00BF42  2  7F           cnsmax: .byte 127
00BF43  2  00           cnslng: .byte 0
00BF44  2               cnstxt:
00BF44  2  xx xx xx xx  	.res 127
00BF48  2  xx xx xx xx  
00BF4C  2  xx xx xx xx  
00BFC3  2               ;fcb one
00BFC3  2               fcbone:
00BFC3  2  xx xx xx xx  	.res 33
00BFC7  2  xx xx xx xx  
00BFCB  2  xx xx xx xx  
00BFE4  2               ;com type field
00BFE4  2  43 4F 36     typcom:	.byte	"CO6"
00BFE7  2               ;variable storage
00BFE7  2  00           cnbfpt:	.byte	0		;buffer index
00BFE8  2  00           dfldsk:	.byte	0		;default drive
00BFE9  2  00           tmpdsk:	.byte	0		;temporary dvive
00BFEA  2               ;align vector on word boundary
00BFEA  2               	.align 2
00BFEA  2  00 00        vector:	.word	0		;execution vector
00BFEC  2  00           ccmcount:	.byte	0		;counter
00BFED  2  00           curpnt:	.byte	0		;input parse start
00BFEE  2  00           diradd:	.byte	0		;directory number
00BFEF  2  00           savx:	.byte	0		;save x location
00BFF0  2  00           savy:	.byte	0		;save y location
00BFF1  2  00           length:	.byte	0		;number tages to save
00BFF2  2  00           oldtmp:	.byte	0		;temp drive in ren
00BFF3  2  00 08        dskbuf:	.word	tea		;disk buffer start
00BFF5  2  00           across:	.byte	0		;dir count on line
00BFF6  2  00           sixten:	.byte	0		;line length div 16
00BFF7  2  09           moduls:	.byte	9		;modulus-1 for number input
00BFF8  2  00 00        num:	.word	0		;input number
00BFFA  2  00 00        tnum:	.word	0		;temp in bldnum
00BFFC  2  00 08        sadr:	.word	tea		;save start address
00BFFE  2               
00BFFE  1               		.include "pemnhy.asm"
00BFFE  2               ;________________________________________________________________________________________________________________________________
00BFFE  2               ;
00BFFE  2               ;	Nhyodyne dos/65 primitive execution module (pem)
00BFFE  2               ;
00BFFE  2               ;  DWERNER 02/19/2022   Strip off Most significant bit of file name in dir to
00BFFE  2               ;			make filesystem compatible with ROMWBW
00BFFE  2               ;________________________________________________________________________________________________________________________________
00BFFE  2               
00BFFE  2               ;zero page data storage
00BFFE  2               addinp	=	$02		;initialized to a,y
00BFFE  2               bufadd	=	$04		;buffer address
00BFFE  2               alcpnt	=	$06		;allocation map pointer
00BFFE  2               chkpnt	=	$08		;checksum map pointer
00BFFE  2               numvar	=	8		;eight bytes
00BFFE  2               ;main program
00BFFE  2               ; input:x=command,a=value,a&y=address
00BFFE  2               ; returns:a=value,a&y=address
00BFFE  2               ; alters:all
00BFFE  2               pem:
00BFFE  2  D8           	cld			;set binary mode
00BFFF  2  8D 98 CB     	sta	bytinp		;save input
00C002  2  8D DC CB     	sta	lowin		;value and
00C005  2  8C 99 CB     	sty	bytinp+1	;save high
00C008  2  8C DD CB     	sty	lowin+1		;address
00C00B  2  8E 9A CB     	stx	cmdinp		;and command
00C00E  2  E0 24        	cpx	#numcmd		;if invalid
00C010  2  B0 50        	bcs	extpem		;then exit
00C012  2  BD 54 CB     	lda	swctbl,x	;if flag zero
00C015  2  F0 08        	beq	noswin		;skip switch
00C017  2  A9 FF        	lda	#255		;else set
00C019  2  8D 97 CB     	sta	swcflg		;memory switch flag
00C01C  2  20 E9 C2     	jsr	switch		;move data to page zero
00C01F  2  A9 00        noswin:	lda	#0		;clear drive
00C021  2  8D 9F CB     	sta	tmpdrv		;switch flag
00C024  2  AD 9A CB     	lda	cmdinp		;get command
00C027  2  0A           	asl	a		;multiply by two
00C028  2  6D 9A CB     	adc	cmdinp		;then add to get x3
00C02B  2  AA           	tax			;and make a pointer
00C02C  2  E8           	inx			;bump to pass jmp
00C02D  2  BD 76 C0     	lda	cmdtbl,x	;get command
00C030  2  BC 77 C0     	ldy	cmdtbl+1,x	;address
00C033  2  8D A0 CB     	sta	xqtvec		;and put
00C036  2  8C A1 CB     	sty	xqtvec+1	;in vector
00C039  2  AD E4 CA     	lda	extevc+1	;get return
00C03C  2  48           	pha			;address
00C03D  2  AD E3 CA     	lda	extevc		;and push
00C040  2  48           	pha			;as return
00C041  2  AD 98 CB     	lda	bytinp		;get input value
00C044  2  AC 99 CB     	ldy	bytinp+1
00C047  2  6C A0 CB     	jmp	(xqtvec)	;then execute
00C04A  2  8D 9B CB     extexq:	sta	bytout		;save value
00C04D  2  8C 9C CB     	sty	addout+1	;and address
00C050  2  AD 9F CB     	lda	tmpdrv		;get temp drive
00C053  2  F0 0D        	beq	extpem		;if zero skip switch
00C055  2  A0 00        	ldy	#0		;else
00C057  2  91 02        	sta	(addinp),y	;put back in fcb
00C059  2  AD A9 CB     	lda	olddrv		;get old drive number
00C05C  2  8D 98 CB     	sta	bytinp		;set input value
00C05F  2  20 04 C3     	jsr	chgdrv		;then switch back
00C062  2  2C 97 CB     extpem:	bit	swcflg		;test memory switch
00C065  2  10 08        	bpl	noswot		;if not set skip
00C067  2  20 E9 C2     	jsr	switch		;else do memory switch
00C06A  2  A9 00        	lda	#0		;clear
00C06C  2  8D 97 CB     	sta	swcflg		;flag
00C06F  2  AC 9C CB     noswot:	ldy	addout+1	;get address
00C072  2  AD 9B CB     	lda	bytout		;and value (address low)
00C075  2  60           	rts
00C076  2               ;command vector table
00C076  2  4C EA C0     cmdtbl:	jmp	xwboot		;warm boot
00C079  2  4C DB C2     	jmp	xcnsin		;console input with echo
00C07C  2  4C 19 C9     	jmp	sndchr		;console output
00C07F  2  4C 6B CC     	jmp	sim+21		;tape reader
00C082  2  4C 68 CC     	jmp	sim+18		;tape punch
00C085  2  4C 65 CC     	jmp	sim+15		;printer output
00C088  2  4C 8B C8     	jmp	getcon		;console input w/o echo
00C08B  2  4C 1F C1     	jmp	xgtios		;read i/o status
00C08E  2  4C 2A C1     	jmp	xstios		;set i/o status
00C091  2  4C D0 C8     	jmp	sndstr		;print buffer
00C094  2  4C 85 C9     	jmp	bufinp		;read buffer
00C097  2  4C 9B C8     	jmp	kbdsts		;test console ready
00C09A  2  4C 83 CC     	jmp	sim+45		;read list status
00C09D  2  4C 32 C3     	jmp	xintds		;initialize system
00C0A0  2  4C 04 C3     	jmp	chgdrv		;log in drive
00C0A3  2  4C AF C5     	jmp	xopen		;open file
00C0A6  2  4C EA C5     	jmp	xclose		;close file
00C0A9  2  4C 0E C6     	jmp	xfndfr		;find first match
00C0AC  2  4C 3A C1     	jmp	xfndnx		;find next match
00C0AF  2  4C A2 C1     	jmp	xdltfl		;delete file
00C0B2  2  4C 42 C1     	jmp	xread		;read record
00C0B5  2  4C C7 C1     	jmp	xwrite		;write record
00C0B8  2  4C B7 C6     	jmp	xmake		;create file
00C0BB  2  4C 80 C1     	jmp	xrenme		;rename file
00C0BE  2  4C 32 C1     	jmp	xintlg		;interrogate log in status
00C0C1  2  4C 2E C1     	jmp	xintdr		;interrogate current drive
00C0C4  2  4C F9 C2     	jmp	chgdma		;set buffer address
00C0C7  2  4C 23 C1     	jmp	xrdalv		;read allocation map start
00C0CA  2  4C 6D C5     	jmp	setron		;set r/w status
00C0CD  2  4C 36 C1     	jmp	xrdros		;read r/w status
00C0D0  2  4C E2 C0     	jmp	setlst		;set list echo status
00C0D3  2  4C E6 C0     	jmp	lststs		;read list echo status
00C0D6  2  4C FA C0     	jmp	xrtclo		;read low clock
00C0D9  2  4C 0E C1     	jmp	xrtchi		;read high clock
00C0DC  2  4C 18 C1     	jmp	xrddcb		;read dcb address
00C0DF  2  4C 89 CC     	jmp	sim+51		;translate sector
00C0E2  2               ;set list echo status
00C0E2  2  8D 95 CB     setlst:	sta	lstflg		;set flag
00C0E5  2  60           	rts
00C0E6  2               ;read list echo status
00C0E6  2  AD 95 CB     lststs:	lda	lstflg		;read flag
00C0E9  2  60           	rts
00C0EA  2               ;execute warm boot
00C0EA  2               ; ***this command does not return to pem***
00C0EA  2               ; ***instead it jumps to sim, resets	***
00C0EA  2               ; ***system and stack and jumps to ccm. ***
00C0EA  2  2C 97 CB     xwboot:	bit	swcflg		;test memory switch flag
00C0ED  2  10 08        	bpl	dowmbt		;if clear do not
00C0EF  2  20 E9 C2     	jsr	switch		;switch memory
00C0F2  2  A9 00        	lda	#0		;clear
00C0F4  2  8D 97 CB     	sta	swcflg		;flag
00C0F7  2  4C 59 CC     dowmbt:	jmp	sim+3		;go to sim
00C0FA  2               
00C0FA  2               ;execute read real time clock
00C0FA  2  20 86 CC     xrtclo:	jsr	sim+48		;read clock
00C0FD  2               
00C0FD  2  8D C5 CB     	sta	rtclk		;save low
00C100  2  8C C6 CB     	sty	rtclk+1		;middle
00C103  2  8E C7 CB     	stx	rtclk+2		;high
00C106  2  8A           	txa
00C107  2  29 80        	and	#%10000000	;test for valid
00C109  2  A8           	tay
00C10A  2  AD C5 CB     	lda	rtclk		;get low
00C10D  2  60           	rts
00C10E  2               ;execute read real time clock high
00C10E  2  AD C7 CB     xrtchi:	lda	rtclk+2		;get high
00C111  2  29 7F        	and	#%01111111	;clear status
00C113  2  A8           	tay
00C114  2  AD C6 CB     	lda	rtclk+1		;get middle
00C117  2  60           	rts
00C118  2               ;execute read dcb address
00C118  2  AD 6C C3     xrddcb:	lda	cptdcb+1	;get address
00C11B  2  AC 6D C3     	ldy	cptdcb+2
00C11E  2  60           	rts
00C11F  2               ;execute read i/o status
00C11F  2  AD 06 01     xgtios:	lda	iostat		;get status byte
00C122  2  60           	rts
00C123  2               ;execute read allocation map starting address
00C123  2  AD D4 CB     xrdalv:	lda	alcmap		;get
00C126  2  AC D5 CB     	ldy	alcmap+1	;starting address
00C129  2  60           	rts			;then return
00C12A  2               ;execute set i/o status
00C12A  2  8D 06 01     xstios:	sta	iostat		;set status
00C12D  2  60           	rts
00C12E  2               ;execute interrogate current drive
00C12E  2  AD AA CB     xintdr:	lda	curdrv		;get number
00C131  2  60           	rts
00C132  2               ;execute read log in status
00C132  2  AD AB CB     xintlg:	lda	lginvc		;get status
00C135  2  60           	rts
00C136  2               ;execute read read/write status
00C136  2  AD AC CB     xrdros:	lda	ronlst		;get status
00C139  2  60           	rts
00C13A  2               ;execute find next match
00C13A  2  20 12 C3     xfndnx:	jsr	autodr		;auto drive select
00C13D  2  A9 0D        	lda	#13		;match including
00C13F  2  4C 1B C6     	jmp	search		;extent
00C142  2               ;execute read next record
00C142  2  20 12 C3     xread:	jsr	autodr		;auto drive select
00C145  2  20 8F C5     	jsr	inrcct		;initialize record counters
00C148  2  AD B5 CB     	lda	nxtrec		;if next record less
00C14B  2  CD B6 CB     	cmp	numrec		;then number records
00C14E  2  90 13        	bcc	tryrde		;then try to read
00C150  2  C9 80        	cmp	#128		;but if not and
00C152  2  F0 03        	beq	tryext		;is max try to extend
00C154  2  A9 01        rdeeof:	lda	#1		;else set eof
00C156  2  60           	rts			;code and return
00C157  2  A2 01        tryext:	ldx	#1		;try for a read
00C159  2  20 F3 C6     	jsr	extend		;file extension
00C15C  2  C9 00        	cmp	#0		;if not ok exit eof
00C15E  2  D0 F4        	bne	rdeeof		;with jump back
00C160  2  8D B5 CB     	sta	nxtrec		;clear next record
00C163  2  20 84 C7     tryrde:	jsr	getblk		;and get block
00C166  2  AD B0 CB     	lda	blknum		;if block not zero
00C169  2  0D B1 CB     	ora	blknum+1
00C16C  2  D0 03        	bne	dorde		;do the read
00C16E  2  A9 02        	lda	#2		;else set unwritten
00C170  2  60           	rts			;code and exit
00C171  2  20 66 C6     dorde:	jsr	calrcn		;calculate record number
00C174  2  20 AC C4     	jsr	sttrsc		;set track and sector
00C177  2  20 3D C8     	jsr	rdesec		;do sector read
00C17A  2  20 9E C5     	jsr	updtrc		;update counters
00C17D  2  A9 00        	lda	#0		;return w/o error
00C17F  2  60           extrde:	rts
00C180  2               ;execute file rename
00C180  2  20 12 C3     xrenme:	jsr	autodr		;automatic drive select
00C183  2  20 1A C8     	jsr	tstron		;test for r/o
00C186  2  A9 0C        	lda	#12		;match name
00C188  2  20 13 C6     	jsr	frstsr		;and type
00C18B  2  30 14        	bmi	extren		;exit if not found
00C18D  2  A9 00        doren:	lda	#0		;clear drive select
00C18F  2  A0 10        	ldy	#16		;in new name
00C191  2  91 02        	sta	(addinp),y	;part of fcb
00C193  2  A9 0C        	lda	#12		;then move
00C195  2  A2 10        	ldx	#16		;new name
00C197  2  20 86 C6     	jsr	dirchg		;to directory
00C19A  2  A9 0C        	lda	#12		;see if
00C19C  2  20 1B C6     	jsr	search		;another match
00C19F  2  10 EC        	bpl	doren		;loop if found
00C1A1  2  60           extren:	rts			;number
00C1A2  2               ;execute delete file
00C1A2  2  20 12 C3     xdltfl:	jsr	autodr		;automatic drive select
00C1A5  2  20 1A C8     	jsr	tstron		;test for r/o
00C1A8  2  A9 0C        	lda	#12		;match name
00C1AA  2  20 13 C6     	jsr	frstsr		;and type
00C1AD  2  30 17        	bmi	extdlt		;done if not found
00C1AF  2  A2 00        dodlt:	ldx	#0		;else do a
00C1B1  2  20 EA C7     	jsr	mapdir		;delete
00C1B4  2  AC AF CB     	ldy	subrec		;then change
00C1B7  2  AD 53 CB     	lda	empty		;byte zero to
00C1BA  2  91 04        	sta	(bufadd),y	;empty code
00C1BC  2  20 43 C8     	jsr	updtck		;then update directory
00C1BF  2  A9 0C        	lda	#12		;search
00C1C1  2  20 1B C6     	jsr	search		;for next
00C1C4  2  10 E9        	bpl	dodlt		;loop if found
00C1C6  2  60           extdlt:	rts			;exit
00C1C7  2               ;execute write next record
00C1C7  2  20 12 C3     xwrite:	jsr	autodr		;automatic drive select
00C1CA  2  20 1A C8     	jsr	tstron		;test for r/o
00C1CD  2  20 8F C5     	jsr	inrcct		;initialize counters
00C1D0  2  AD B5 CB     	lda	nxtrec		;get next record
00C1D3  2  C9 80        	cmp	#128		;compare to max
00C1D5  2  90 03        	bcc	ntexte		;continue if less
00C1D7  2  A9 01        	lda	#1		;else flag as extend
00C1D9  2  60           	rts			;error and exit
00C1DA  2  20 84 C7     ntexte:	jsr	getblk		;calculate block num
00C1DD  2  A9 00        	lda	#0		;say normal write
00C1DF  2  8D D9 CB     	sta	pemwrtype		;for now
00C1E2  2  AD B0 CB     	lda	blknum		;get it and if
00C1E5  2  0D B1 CB     	ora	blknum+1
00C1E8  2  F0 03        	beq	*+5		;zero then get number
00C1EA  2  4C AA C2     	jmp	blkopn		;else go write
00C1ED  2  A9 02        	lda	#2		;say unalloc write
00C1EF  2  8D D9 CB     	sta	pemwrtype
00C1F2  2  AD 91 CB     	lda	fcbind		;get index from prior
00C1F5  2  48           	pha			;and save
00C1F6  2  C9 10        	cmp	#16		;if first block
00C1F8  2  F0 1A        	beq	isfrst		;then don't change
00C1FA  2  A8           	tay			;else make an index
00C1FB  2  88           	dey			;point to last
00C1FC  2  2C C0 CB     	bit	blmode		;test mode
00C1FF  2  10 01        	bpl	*+3		;done if byte
00C201  2  88           	dey			;else drop for word
00C202  2  B1 02        	lda	(addinp),y	;and get that number
00C204  2  8D B0 CB     	sta	blknum		;store as starting
00C207  2  C8           	iny			;bump for word
00C208  2  A9 00        	lda	#0		;preset for byte
00C20A  2  2C C0 CB     	bit	blmode		;test mode
00C20D  2  10 02        	bpl	*+4		;done if byte
00C20F  2  B1 02        	lda	(addinp),y	;else get high
00C211  2  8D B1 CB     	sta	blknum+1	;then set high
00C214  2  AD B0 CB     isfrst:	lda	blknum		;get block
00C217  2  8D A5 CB     	sta	lkdown		;set lower and
00C21A  2  8D A7 CB     	sta	lookup		;upper pointers
00C21D  2  AD B1 CB     	lda	blknum+1	;now set high part
00C220  2  8D A6 CB     	sta	lkdown+1
00C223  2  8D A8 CB     	sta	lookup+1
00C226  2  AD A7 CB     srblag:	lda	lookup		;if upper pointer
00C229  2  CD CB CB     	cmp	maxblk		;not at max
00C22C  2  D0 08        	bne	upnemx		;then keep going
00C22E  2  AC A8 CB     	ldy	lookup+1	;now check high
00C231  2  CC CC CB     	cpy	maxblk+1
00C234  2  F0 12        	beq	tstdwn		;go test down
00C236  2  EE A7 CB     upnemx:	inc	lookup		;else bump upper
00C239  2  D0 03        	bne	*+5
00C23B  2  EE A8 CB     	inc	lookup+1
00C23E  2  AD A5 CB     	lda	lkdown		;then if lower
00C241  2  0D A6 CB     	ora	lkdown+1
00C244  2  F0 18        	beq	dotest		;is zero start test
00C246  2  D0 0B        	bne	dcdown		;else drop lower
00C248  2  AD A5 CB     tstdwn:	lda	lkdown		;if upper & lower at
00C24B  2  0D A6 CB     	ora	lkdown+1
00C24E  2  D0 03        	bne	dcdown		;drop if not zero
00C250  2  A8           	tay			;also set y
00C251  2  F0 30        	beq	extsbl		;then exit
00C253  2  AD A5 CB     dcdown:	lda	lkdown		;drop lower
00C256  2  D0 03        	bne	*+5
00C258  2  CE A6 CB     	dec	lkdown+1
00C25B  2  CE A5 CB     	dec	lkdown
00C25E  2  AD A5 CB     dotest:	lda	lkdown		;get lower
00C261  2  AC A6 CB     	ldy	lkdown+1
00C264  2  20 51 C5     	jsr	tstblk		;and test
00C267  2  D0 09        	bne	trylup		;if full try upper
00C269  2  AD A5 CB     	lda	lkdown		;else use lower
00C26C  2  AC A6 CB     	ldy	lkdown+1
00C26F  2  4C 83 C2     	jmp	extsbl		;as result
00C272  2  AD A7 CB     trylup:	lda	lookup		;get upper
00C275  2  AC A8 CB     	ldy	lookup+1
00C278  2  20 51 C5     	jsr	tstblk		;if full
00C27B  2  D0 A9        	bne	srblag		;then loop
00C27D  2  AD A7 CB     	lda	lookup		;else use upper
00C280  2  AC A8 CB     	ldy	lookup+1
00C283  2  8D B0 CB     extsbl:	sta	blknum		;then save number
00C286  2  8C B1 CB     	sty	blknum+1
00C289  2  0D B1 CB     	ora	blknum+1	;see if zero
00C28C  2  D0 04        	bne	gtgood		;then proceed
00C28E  2  68           	pla			;clear stack
00C28F  2  A9 02        	lda	#2		;set end
00C291  2  60           	rts			;of data return
00C292  2  AD B0 CB     gtgood:	lda	blknum		;get low again
00C295  2  20 65 C5     	jsr	setblk		;set allocation map
00C298  2  68           	pla			;get block
00C299  2  A8           	tay			;pointer back
00C29A  2  AD B0 CB     	lda	blknum		;get number
00C29D  2  91 02        	sta	(addinp),y	;and put in fcb
00C29F  2  AD B1 CB     	lda	blknum+1	;get high
00C2A2  2  C8           	iny
00C2A3  2  2C C0 CB     	bit	blmode		;test mode
00C2A6  2  10 02        	bpl	*+4		;done if byte
00C2A8  2  91 02        	sta	(addinp),y	;else set high
00C2AA  2  20 66 C6     blkopn:	jsr	calrcn		;calculate record num
00C2AD  2  20 AC C4     	jsr	sttrsc		;set track and sector
00C2B0  2  20 49 C8     	jsr	wrtsec		;do write
00C2B3  2  AE B5 CB     	ldx	nxtrec		;get next record
00C2B6  2  EC B6 CB     	cpx	numrec		;if less than max
00C2B9  2  90 05        	bcc	notful		;then ok
00C2BB  2  E8           	inx			;else bump count
00C2BC  2  8E B6 CB     	stx	numrec		;and save
00C2BF  2  CA           	dex			;back down
00C2C0  2  E0 7F        notful:	cpx	#127		;if not at max
00C2C2  2  D0 11        	bne	noawex		;skip extending
00C2C4  2  20 9E C5     	jsr	updtrc		;update record counters
00C2C7  2  A2 00        	ldx	#0		;do write
00C2C9  2  20 F3 C6     	jsr	extend		;file extension
00C2CC  2  C9 00        	cmp	#0		;if not ok
00C2CE  2  D0 0A        	bne	extwrt		;exit
00C2D0  2  A9 FF        	lda	#255		;else start counter
00C2D2  2  8D B5 CB     	sta	nxtrec		;at one short
00C2D5  2  20 9E C5     noawex:	jsr	updtrc		;then update counters
00C2D8  2  A9 00        	lda	#0		;good return
00C2DA  2  60           extwrt:	rts			;exit
00C2DB  2               ;execute console input
00C2DB  2  20 8B C8     xcnsin:	jsr	getcon		;get input
00C2DE  2  20 C1 C8     	jsr	tstchr		;test it and
00C2E1  2  90 05        	bcc	extxci		;if control exit
00C2E3  2  48           	pha			;else save
00C2E4  2  20 19 C9     	jsr	sndchr		;echo
00C2E7  2  68           	pla			;restore
00C2E8  2  60           extxci:	rts			;return
00C2E9  2               ;switch memory
00C2E9  2               ;page zero block begins at $02 and is numvar bytes long.
00C2E9  2  A2 07        switch:	ldx	#numvar-1	;get number to switch
00C2EB  2  B5 02        nxtswh:	lda	2,x		;get zero page
00C2ED  2  BC DC CB     	ldy	varblk,x	;and save area
00C2F0  2  9D DC CB     	sta	varblk,x	;save zero
00C2F3  2  94 02        	sty	2,x		;and high
00C2F5  2  CA           	dex			;count down
00C2F6  2  10 F3        	bpl	nxtswh		;and loop until done
00C2F8  2  60           drvsme:	rts			;then return
00C2F9  2               ;change dma address
00C2F9  2               ; input:addinp=address
00C2F9  2               ; returns:none
00C2F9  2               ; alters:all
00C2F9  2  A5 02        chgdma:	lda	addinp		;get low
00C2FB  2  A4 03        	ldy	addinp+1	;and high address
00C2FD  2  85 04        	sta	bufadd		;then store
00C2FF  2  84 05        	sty	bufadd+1	;in address
00C301  2  4C 7A CC     	jmp	sim+36		;then go to sim
00C304  2               
00C304  2               ;change drive
00C304  2               ; input:bytinp
00C304  2               ; returns:none
00C304  2               ; alters:all
00C304  2  AD 98 CB     chgdrv:	lda	bytinp		;get input
00C307  2  CD AA CB     	cmp	curdrv		;if same as current
00C30A  2  F0 EC        	beq	drvsme		;do nothing
00C30C  2  8D AA CB     	sta	curdrv		;else change current
00C30F  2  4C 45 C3     	jmp	mapdrv		;then log it in
00C312  2               ;automatic drive select
00C312  2               ; input:(addinp) 0=no change
00C312  2               ; 1-8 or 'A'-'H' = change
00C312  2               ; returns:none
00C312  2               ; alters:all
00C312  2  A0 00        autodr:	ldy	#0		;get
00C314  2  B1 02        	lda	(addinp),y	;first byte of fcb
00C316  2  F0 19        	beq	qtatdr		;if zero quit
00C318  2  38           	sec			;set carry for
00C319  2  E9 01        	sbc	#1		;subtract one
00C31B  2  29 07        	and	#%00000111	;look at three lsbs
00C31D  2  8D 98 CB     	sta	bytinp		;make parameter
00C320  2  AD AA CB     	lda	curdrv		;get current
00C323  2  8D A9 CB     	sta	olddrv		;and save
00C326  2  B1 02        	lda	(addinp),y	;get fcb entry
00C328  2  8D 9F CB     	sta	tmpdrv		;and save as flag
00C32B  2  98           	tya			;set a to 0
00C32C  2  91 02        	sta	(addinp),y	;clear byte zero in fcb
00C32E  2  20 04 C3     	jsr	chgdrv		;then select new drive
00C331  2  60           qtatdr:	rts			;and return
00C332  2               ;execute initialize system
00C332  2               ; input:none
00C332  2               ; returns:none
00C332  2               ; alters:all,curdrv,lginvc,bufadd
00C332  2  A9 02        xintds:	lda	#DEFDRV		;set current
00C334  2  8D AA CB     	sta	curdrv		;drive to a
00C337  2  8D AB CB     	sta	lginvc		;clear log in status
00C33A  2  A9 28        	lda	#<dflbuf	;get default buffer
00C33C  2  A0 01        	ldy	#>dflbuf	;address
00C33E  2  85 02        	sta	addinp		;and set up
00C340  2  84 03        	sty	addinp+1	;parameters
00C342  2  20 F9 C2     	jsr	chgdma		;change address
00C345  2               
00C345  2               ;log in drive and set pointers and maps
00C345  2               ; input:curdrv
00C345  2               ; returns:none
00C345  2               ; alters:all
00C345  2  AD AA CB     mapdrv:	lda	curdrv		;if current drive
00C348  2  C9 08        	cmp	#8		;is 0 to 7
00C34A  2  90 0F        	bcc	vlddrv		;then log it in
00C34C  2  20 6C C8     drserr:	jsr	errout		;send error message
00C34F  2  AD E6 CA     	lda	sltmvc		;point to
00C352  2  AC E7 CA     	ldy	sltmvc+1	;select message
00C355  2  20 D0 C8     	jsr	sndstr		;and send it
00C358  2               
00C358  2  4C EA C0     	jmp	xwboot		;and abort
00C35B  2               
00C35B  2  20 71 CC     vlddrv:	jsr	sim+27		;go to sim to set
00C35E  2  8D 6C C3     	sta	cptdcb+1	;save
00C361  2  8C 6D C3     	sty	cptdcb+2
00C364  2  0D 6D C3     	ora	cptdcb+2	;see if invalid
00C367  2  F0 E3        	beq	drserr		;error if is
00C369  2               ;capture dcb
00C369  2  A0 0D        	ldy	#14-1		;do 14 bytes
00C36B  2  B9 FF FF     cptdcb:	lda	$ffff,y		;get value from sim
00C36E  2  99 CB CB     	sta	dcb,y		;store it
00C371  2  88           	dey
00C372  2  10 F7        	bpl	cptdcb		;loop for more
00C374  2  AD D1 CB     	lda	blkscd		;get block size code
00C377  2  A8           	tay			;save in y
00C378  2  18           	clc
00C379  2  69 03        	adc	#3		;convert to sxb
00C37B  2  8D C4 CB     	sta	sxb		;and save
00C37E  2  B9 8B CB     	lda	sabtbl,y	;get sab
00C381  2  8D C3 CB     	sta	sab		;and set
00C384  2  AD D2 CB     	lda	maxdir		;get max dir
00C387  2  8D C1 CB     	sta	maxdrc		;set max dir record
00C38A  2  AD D3 CB     	lda	maxdir+1
00C38D  2  4A           	lsr	a		;divide by 4
00C38E  2  6E C1 CB     	ror	maxdrc
00C391  2  4A           	lsr	a
00C392  2  6E C1 CB     	ror	maxdrc
00C395  2  8D C2 CB     	sta	maxdrc+1	;then save high
00C398  2  A9 00        	lda	#0		;set mode to byte
00C39A  2  8D C0 CB     	sta	blmode
00C39D  2  AD CC CB     	lda	maxblk+1	;branch if max block
00C3A0  2  F0 05        	beq	ntm255		;not over 255
00C3A2  2               ;if y=0 when the following line is executed it means
00C3A2  2               ;that the user has put an illegal combination into
00C3A2  2               ;the disk definition table. may want to consider
00C3A2  2               ;putting some error checking here in the future if
00C3A2  2               ;there is space in pem.
00C3A2  2  88           	dey			;back up index
00C3A3  2  38           	sec			;else set mode to word
00C3A4  2  6E C0 CB     	ror	blmode
00C3A7  2  B9 88 CB     ntm255:	lda	exmtbl,y	;get extent mask
00C3AA  2  8D DA CB     	sta	exm
00C3AD  2               
00C3AD  2  38           	sec			;now calculate cexm1f
00C3AE  2  A9 1F        	lda	#31
00C3B0  2  F9 88 CB     	sbc	exmtbl,y
00C3B3  2  8D DB CB     	sta	cexm1f
00C3B6  2  AE AA CB     	ldx	curdrv		;get drive as pointer
00C3B9  2  BD 80 CB     	lda	bitmap,x	;get bit
00C3BC  2  2D AB CB     	and	lginvc		;if logged in
00C3BF  2  D0 0C        	bne	extstm		;then exit
00C3C1  2  BD 80 CB     	lda	bitmap,x	;get bit back
00C3C4  2  0D AB CB     	ora	lginvc		;set in log-in
00C3C7  2  8D AB CB     	sta	lginvc		;and update
00C3CA  2  4C CE C3     	jmp	flinal		;then fill in maps
00C3CD  2               
00C3CD  2  60           extstm:	rts			;and return
00C3CE  2               ;fill in allocation map
00C3CE  2  20 2E C8     flinal:	jsr	setrw		;set to read/write
00C3D1  2  AD CB CB     	lda	maxblk		;divide max block by
00C3D4  2  8D C8 CB     	sta	gpcnt		;eight to get max
00C3D7  2  AD CC CB     	lda	maxblk+1
00C3DA  2  A2 03        	ldx	#3
00C3DC  2  4A           clcnab:	lsr	a		;use a for speed
00C3DD  2  6E C8 CB     	ror	gpcnt
00C3E0  2  CA           	dex
00C3E1  2  D0 F9        	bne	clcnab		;loop if more
00C3E3  2  8D C9 CB     	sta	gpcnt+1		;save high
00C3E6  2  EE C8 CB     	inc	gpcnt		;bump by one
00C3E9  2  D0 03        	bne	*+5
00C3EB  2  EE C9 CB     	inc	gpcnt+1		;with carry
00C3EE  2  AD D4 CB     	lda	alcmap		;get map start
00C3F1  2  AC D5 CB     	ldy	alcmap+1
00C3F4  2  85 06        	sta	alcpnt		;set pointer to start
00C3F6  2  84 07        	sty	alcpnt+1
00C3F8  2  A0 00        	ldy	#0		;clear index
00C3FA  2  A9 00        clraml:	lda	#0		;clear byte
00C3FC  2  91 06        	sta	(alcpnt),y	;put in map
00C3FE  2  E6 06        	inc	alcpnt		;bump pointer
00C400  2  D0 02        	bne	*+4
00C402  2  E6 07        	inc	alcpnt+1	;with carry
00C404  2  AD C8 CB     	lda	gpcnt		;get low of count
00C407  2  D0 03        	bne	*+5		;skip if not zero
00C409  2  CE C9 CB     	dec	gpcnt+1		;else drop high
00C40C  2  CE C8 CB     	dec	gpcnt		;always drop low
00C40F  2  AD C8 CB     	lda	gpcnt		;test for zero
00C412  2  0D C9 CB     	ora	gpcnt+1
00C415  2  D0 E3        	bne	clraml		;loop if more
00C417  2               ;at this point complete map is cleared
00C417  2  AD C1 CB     	lda	maxdrc		;get low of max dir record
00C41A  2  8D C8 CB     	sta	gpcnt
00C41D  2  AD C2 CB     	lda	maxdrc+1	;high in a
00C420  2  AE C4 CB     	ldx	sxb		;set x according to block size
00C423  2  4A           clcmdb:	lsr	a		;do division
00C424  2  6E C8 CB     	ror	gpcnt
00C427  2  CA           	dex
00C428  2  D0 F9        	bne	clcmdb		;until x is zero
00C42A  2  8D C9 CB     	sta	gpcnt+1		;set high
00C42D  2  EE C8 CB     	inc	gpcnt		;then bump by one
00C430  2  D0 03        	bne	*+5
00C432  2  EE C9 CB     	inc	gpcnt+1
00C435  2  8E B0 CB     	stx	blknum		;clear block number
00C438  2  8E B1 CB     	stx	blknum+1
00C43B  2  AD B0 CB     fildal:	lda	blknum		;get block number
00C43E  2  AC B1 CB     	ldy	blknum+1
00C441  2  20 65 C5     	jsr	setblk		;set bit
00C444  2  EE B0 CB     	inc	blknum		;bump block number
00C447  2  D0 03        	bne	*+5
00C449  2  EE B1 CB     	inc	blknum+1
00C44C  2  AD C8 CB     	lda	gpcnt		;get low of count
00C44F  2  D0 03        	bne	*+5		;skip if not zero
00C451  2  CE C9 CB     	dec	gpcnt+1		;else drop high
00C454  2  CE C8 CB     	dec	gpcnt		;always do low
00C457  2  AD C8 CB     	lda	gpcnt		;test for zero
00C45A  2  0D C9 CB     	ora	gpcnt+1
00C45D  2  D0 DC        	bne	fildal		;loop if more
00C45F  2               ;at this point directory space is mapped
00C45F  2  20 7E C4     	jsr	intdrv		;initialize drive
00C462  2  20 DE C7     	jsr	cldrnm		;clear directory number
00C465  2  A2 01        fillpe:	ldx	#1		;parameter for fill
00C467  2  20 26 C7     	jsr	nxtdir		;execute for next directory
00C46A  2  30 11        	bmi	extfil		;done if invalid
00C46C  2  AC AF CB     	ldy	subrec		;get offset
00C46F  2  B1 04        	lda	(bufadd),y	;get empty/valid flag
00C471  2  C9 E5        	cmp	#$e5		;if empty
00C473  2  F0 F0        	beq	fillpe		;try next
00C475  2  A2 01        	ldx	#1		;parameter for fill in
00C477  2  20 EA C7     	jsr	mapdir		;do directory map
00C47A  2  4C 65 C4     	jmp	fillpe		;then loop
00C47D  2  60           extfil:	rts			;return
00C47E  2               ;initialize drive
00C47E  2               ; input:nsystr
00C47E  2               ; returns:none
00C47E  2               ; alters:all
00C47E  2  20 6E CC     intdrv:	jsr	sim+24		;home then
00C481  2               
00C481  2  AD CF CB     	lda	nsystr		;get number of system tracks
00C484  2  AC D0 CB     	ldy	nsystr+1
00C487  2  4C 74 CC     	jmp	sim+30		;and set in sim
00C48A  2               
00C48A  2               ;directory record set up
00C48A  2               ; input:dirnum
00C48A  2               ; returns:none
00C48A  2               ; alters:all,recnum,dirrec
00C48A  2  AD AE CB     drrcsu:	lda	dirnum+1	;move high dir number
00C48D  2  8D B1 CB     	sta	recnum+1	;to record number
00C490  2  AD AD CB     	lda	dirnum		;divide
00C493  2  4E B1 CB     	lsr	recnum+1	;directory by four
00C496  2  6A           	ror	a
00C497  2  4E B1 CB     	lsr	recnum+1
00C49A  2  6A           	ror	a
00C49B  2  8D B7 CB     	sta	dirrec		;and save
00C49E  2  8D B0 CB     	sta	recnum		;set low record number
00C4A1  2  AD B1 CB     	lda	recnum+1	;get high
00C4A4  2  8D B8 CB     	sta	dirrec+1	;and set
00C4A7  2  A9 00        	lda	#0		;clear top byte
00C4A9  2  8D B2 CB     	sta	recnum+2
00C4AC  2               ;set track and sector
00C4AC  2               ; input:recnum
00C4AC  2               ; returns:none
00C4AC  2               ; alters:all,countr,trkctr
00C4AC  2  A2 00        sttrsc:	ldx	#0		;clear track counter
00C4AE  2  8E CA CB     	stx	trkctr
00C4B1  2  8E A2 CB     	stx	countr		;and record
00C4B4  2  8E A3 CB     	stx	countr+1	;counter
00C4B7  2  8E A4 CB     	stx	countr+2
00C4BA  2  AD B0 CB     trnxtr:	lda	recnum		;from
00C4BD  2  CD A2 CB     	cmp	countr		;record number
00C4C0  2  AD B1 CB     	lda	recnum+1	;and if a
00C4C3  2  ED A3 CB     	sbc	countr+1	;borrow then
00C4C6  2  AD B2 CB     	lda	recnum+2
00C4C9  2  ED A4 CB     	sbc	countr+2
00C4CC  2  90 21        	bcc	higher		;gone too far
00C4CE  2  18           	clc			;else
00C4CF  2  AD A2 CB     	lda	countr		;get counter
00C4D2  2  6D CD CB     	adc	sectrk		;add sectors per track
00C4D5  2  8D A2 CB     	sta	countr		;sectors per track
00C4D8  2  AD A3 CB     	lda	countr+1
00C4DB  2  6D CE CB     	adc	sectrk+1
00C4DE  2  8D A3 CB     	sta	countr+1
00C4E1  2  90 03        	bcc	bumptr		;done if no carry
00C4E3  2  EE A4 CB     	inc	countr+2	;else bump high
00C4E6  2  E8           bumptr:	inx			;increase track count
00C4E7  2  D0 D1        	bne	trnxtr		;with carry
00C4E9  2  EE CA CB     	inc	trkctr
00C4EC  2  4C BA C4     	jmp	trnxtr		;then loop
00C4EF  2  CA           higher:	dex			;back up track
00C4F0  2  E0 FF        	cpx	#$ff		;see if wrap around
00C4F2  2  D0 03        	bne	*+5		;wasn't
00C4F4  2  CE CA CB     	dec	trkctr		;else drop high
00C4F7  2  8A           	txa			;move to a
00C4F8  2  18           	clc			;add starting track
00C4F9  2  6D CF CB     	adc	nsystr
00C4FC  2  AA           	tax			;save in x
00C4FD  2  AD CA CB     	lda	trkctr
00C500  2  6D D0 CB     	adc	nsystr+1
00C503  2  A8           	tay			;move to correct registers
00C504  2  8A           	txa
00C505  2  20 74 CC     	jsr	sim+30		;then set in sim
00C508  2               
00C508  2  38           	sec			;back
00C509  2  AD A2 CB     	lda	countr		;counter down
00C50C  2  ED CD CB     	sbc	sectrk		;by sectors per track
00C50F  2  8D A2 CB     	sta	countr		;and save
00C512  2  AD A3 CB     	lda	countr+1
00C515  2  ED CE CB     	sbc	sectrk+1
00C518  2  8D A3 CB     	sta	countr+1
00C51B  2  38           	sec			;now
00C51C  2  AD B0 CB     	lda	recnum		;find difference
00C51F  2  ED A2 CB     	sbc	countr		;as sector
00C522  2  AA           	tax			;save in x
00C523  2  AD B1 CB     	lda	recnum+1
00C526  2  ED A3 CB     	sbc	countr+1
00C529  2  A8           	tay			;move to correct registers
00C52A  2  8A           	txa
00C52B  2  20 89 CC     	jsr	sim+51		;translate
00C52E  2               
00C52E  2  4C 77 CC     	jmp	sim+33		;and set through sim
00C531  2               
00C531  2               ;get block bit mask and index
00C531  2               ; input:a&y=block number
00C531  2               ; returns:a=bit mask and y=0
00C531  2               ; alters:all and alcpnt
00C531  2  48           blkmsk:	pha			;save block number
00C532  2  84 07        	sty	alcpnt+1	;including high
00C534  2  A0 03        	ldy	#3		;divide by eight
00C536  2  46 07        blkmlp:	lsr	alcpnt+1	;shift high
00C538  2  6A           	ror	a
00C539  2  88           	dey			;loop until done
00C53A  2  D0 FA        	bne	blkmlp
00C53C  2  18           	clc			;now add map start
00C53D  2  6D D4 CB     	adc	alcmap
00C540  2  85 06        	sta	alcpnt
00C542  2  A5 07        	lda	alcpnt+1
00C544  2  6D D5 CB     	adc	alcmap+1
00C547  2  85 07        	sta	alcpnt+1
00C549  2  68           	pla			;get number back
00C54A  2  29 07        	and	#%00000111	;look at 3 lsbs
00C54C  2  AA           	tax			;get
00C54D  2  BD 78 CB     	lda	bitmsk,x	;mask
00C550  2  60           	rts			;and return
00C551  2               ;test block
00C551  2               ; input:a&y=block number
00C551  2               ; returns:z=1 if unassigned
00C551  2               ; 	   =0 if assigned and bit in a is set
00C551  2               ; alters:all
00C551  2  20 31 C5     tstblk:	jsr	blkmsk		;get mask and index
00C554  2  31 06        	and	(alcpnt),y	;mask with map entry
00C556  2  60           	rts			;then return
00C557  2               ;alter block status
00C557  2               ; input:a&y=block number,x=1 if set
00C557  2               ;		   	  =0 if reset
00C557  2               ; returns:none
00C557  2               ; alters:all and allocation map
00C557  2  E0 01        altalc:	cpx	#1		;if set
00C559  2  F0 0A        	beq	setblk		;go do it
00C55B  2  20 31 C5     clrblk:	jsr	blkmsk		;else get mask
00C55E  2  49 FF        	eor	#$ff		;and complement
00C560  2  31 06        	and	(alcpnt),y	;preserve others
00C562  2  91 06        	sta	(alcpnt),y	;and save
00C564  2  60           	rts			;then return
00C565  2  20 31 C5     setblk:	jsr	blkmsk		;get mask
00C568  2  11 06        	ora	(alcpnt),y	;set bit
00C56A  2  91 06        	sta	(alcpnt),y	;and put back
00C56C  2  60           	rts			;then return
00C56D  2               ;set current drive to read only
00C56D  2               ; input:curdrv,ronlst,bitmap
00C56D  2               ; returns:none
00C56D  2               ; alters:a,x,p and ronlst
00C56D  2  AE AA CB     setron:	ldx	curdrv		;get number
00C570  2  BD 80 CB     	lda	bitmap,x	;and get mask
00C573  2  0D AC CB     	ora	ronlst		;or with status
00C576  2  8D AC CB     	sta	ronlst		;and put back
00C579  2  60           	rts			;then return
00C57A  2               ;calculate checksum of buffer @ bufadd
00C57A  2               ; input: buffer@(bufadd)
00C57A  2               ; returns:a=checksum
00C57A  2               ; alters:a,y,p
00C57A  2  A9 00        clcchk:	lda	#0		;clear accumulator
00C57C  2  A0 7F        	ldy	#127		;start at end
00C57E  2  18           chkmre:	clc			;no carry
00C57F  2  71 04        	adc	(bufadd),y	;add byte
00C581  2  88           	dey			;count down
00C582  2  10 FA        	bpl	chkmre		;and loop until done
00C584  2  60           	rts			;then return
00C585  2               ;check read/write status
00C585  2               ; input:curdrv,ronlst
00C585  2               ; returns:z=0 if r/o or z=1 if r/w
00C585  2               ; alters:a,x,p
00C585  2  AE AA CB     chkron:	ldx	curdrv		;get current drive
00C588  2  BD 80 CB     	lda	bitmap,x	;get mask
00C58B  2  2D AC CB     	and	ronlst		;and test status
00C58E  2  60           	rts
00C58F  2               ;initialize record counters from fcb
00C58F  2               ; input:fcb@(addinp)
00C58F  2               ; returns:none
00C58F  2               ; alters:a,y,p,nxtrec,numrec
00C58F  2  A0 20        inrcct:	ldy	#32		;next record offset
00C591  2  B1 02        	lda	(addinp),y	;get next record
00C593  2  8D B5 CB     	sta	nxtrec		;and save
00C596  2  A0 0F        	ldy	#15		;number records offset
00C598  2  B1 02        	lda	(addinp),y	;get number
00C59A  2  8D B6 CB     	sta	numrec		;and save
00C59D  2  60           	rts			;and return
00C59E  2               ;update record counters in fcb
00C59E  2               ; input:nxtrec,numrec
00C59E  2               ; returns:none
00C59E  2               ; alters:all,fcb@(addinp)
00C59E  2  AE B5 CB     updtrc:	ldx	nxtrec		;get next record
00C5A1  2  E8           	inx			;bump it
00C5A2  2  8A           	txa			;transfer
00C5A3  2  A0 20        	ldy	#32		;set offset
00C5A5  2  91 02        	sta	(addinp),y	;and store in fcb
00C5A7  2  AD B6 CB     	lda	numrec		;get number
00C5AA  2  A0 0F        	ldy	#15		;and its offset
00C5AC  2  91 02        	sta	(addinp),y	;and store
00C5AE  2  60           	rts			;then return
00C5AF  2               ;execute open file
00C5AF  2  20 12 C3     xopen:	jsr	autodr		;auto drive select
00C5B2  2               ;open file
00C5B2  2               ; input:fcb @ (addinp)
00C5B2  2               ; returns:n=1 if not found,a=dirmod (255 if not found)
00C5B2  2               ; alters:all
00C5B2  2  20 11 C6     opnfle:	jsr	fndf13		;match all including extent
00C5B5  2  30 32        	bmi	extopn		;done if not found
00C5B7  2  A9 0C        	lda	#12		;point to first char
00C5B9  2  0D AF CB     	ora	subrec		;add offset
00C5BC  2  A8           	tay			;make it a pointer
00C5BD  2  B1 04        nxopmv:	lda	(bufadd),y	;get buffer contents
00C5BF  2  AA           	tax			;and save
00C5C0  2  98           	tya			;save index
00C5C1  2  29 1F        	and	#%00011111	;remove offset
00C5C3  2  A8           	tay			;back to index
00C5C4  2  8A           	txa			;get byte back
00C5C5  2  91 02        	sta	(addinp),y	;and store in fcb
00C5C7  2  98           	tya			;get index
00C5C8  2  0D AF CB     	ora	subrec		;add offset back
00C5CB  2  A8           	tay			;and make index again
00C5CC  2  C8           	iny			;next position
00C5CD  2  98           	tya			;if index
00C5CE  2  29 1F        	and	#%00011111	;not gone past
00C5D0  2  D0 EB        	bne	nxopmv		;end then loop
00C5D2  2               ;now correct extent and max records
00C5D2  2  A0 0C        	ldy	#12		;point at extent in fcb
00C5D4  2  AD 92 CB     	lda	savext		;get save from search
00C5D7  2  D1 02        	cmp	(addinp),y	;compare
00C5D9  2  F0 0B        	beq	extsme		;jump ahead if same
00C5DB  2  91 02        	sta	(addinp),y	;else change extent
00C5DD  2  A9 80        	lda	#128		;assume fcb ext < dir ext
00C5DF  2  90 01        	bcc	fcbxls		;jump ahead if true
00C5E1  2  0A           	asl	a		;clear a
00C5E2  2  A0 0F        fcbxls:	ldy	#15		;point to max
00C5E4  2  91 02        	sta	(addinp),y	;and set
00C5E6  2  AD B9 CB     extsme:	lda	dirmod		;else get number
00C5E9  2  60           extopn:	rts			;and return
00C5EA  2               ;execute close file
00C5EA  2  20 12 C3     xclose:	jsr	autodr		;auto drive select
00C5ED  2               ;close file
00C5ED  2               ;if file is r/o then no actual close
00C5ED  2               ;operation is performed.
00C5ED  2               ; input:fcb @ (addinp)
00C5ED  2               ; returns:n=1 if not valid,a=dirmod (255 if invalid)
00C5ED  2               ; alters:all
00C5ED  2  20 11 C6     clsfle:	jsr	fndf13		;match including extent
00C5F0  2  30 1B        	bmi	extcls		;exit if not found
00C5F2  2  20 85 C5     	jsr	chkron		;see if r/o
00C5F5  2  D0 13        	bne	noclse		;branch if is
00C5F7  2               ;now set flag to ensure directory extent and number of
00C5F7  2               ;records fields are only changed if necessary.
00C5F7  2               ;The decision to change is determined by whether or
00C5F7  2               ;not the system is closing an extent less than the
00C5F7  2               ;maximum extent in the directory entry. If that is
00C5F7  2               ;the case, the directory extent and number of record
00C5F7  2               ;fields are not changed.
00C5F7  2  A0 0C        	ldy	#12		;get extent
00C5F9  2  B1 02        	lda	(addinp),y
00C5FB  2  48           	pha			;save it
00C5FC  2  98           	tya			;now look in directory
00C5FD  2  0D AF CB     	ora	subrec
00C600  2  A8           	tay
00C601  2  68           	pla			;get extent back
00C602  2  D1 04        	cmp	(bufadd),y
00C604  2  6E 90 CB     	ror	skpdir		;save result
00C607  2               ;now go do it
00C607  2  20 82 C6     	jsr	updtdr		;update directory
00C60A  2  AD B9 CB     noclse:	lda	dirmod		;get directory number
00C60D  2  60           extcls:	rts			;and return
00C60E  2               ;execute find first match
00C60E  2  20 12 C3     xfndfr:	jsr	autodr		;auto drive select
00C611  2  A9 0D        fndf13:	lda	#13		;match including extent
00C613  2               ;search for first match
00C613  2               ; input:a=number char to match
00C613  2               ; returns:n=1 if invalid,a=dirmod (255 if invalid)
00C613  2               ; alters:all
00C613  2  48           frstsr:	pha			;save number to match
00C614  2  20 DE C7     	jsr	cldrnm		;clear directory number to -1
00C617  2  20 7E C4     	jsr	intdrv		;and drive
00C61A  2  68           	pla			;get number to match
00C61B  2               ;search for directory match
00C61B  2               ; input:a=number char to match
00C61B  2               ; returns:n=1 if not found,a=dirmod (255 if invalid)
00C61B  2               ; alters:all
00C61B  2  8D B3 CB     search:	sta	chrcnt		;save number
00C61E  2  A2 00        newtry:	ldx	#0		;set for search
00C620  2  8E B4 CB     	stx	cmppnt		;clear pointer
00C623  2  20 26 C7     	jsr	nxtdir		;get next entry
00C626  2  30 3D        	bmi	exitsr		;exit if not found
00C628  2  AE B3 CB     	ldx	chrcnt		;get count
00C62B  2  AC B4 CB     mremch:	ldy	cmppnt		;get pointer
00C62E  2  EE B4 CB     	inc	cmppnt		;and bump
00C631  2  B1 02        	lda	(addinp),y	;get fcb entry
00C633  2  C0 0C        	cpy	#12		;see if at extent
00C635  2  D0 13        	bne	notaex		;jump if not
00C637  2  8D 92 CB     	sta	savext		;save for later use
00C63A  2  48           	pha			;save extent
00C63B  2  98           	tya			;change to directory
00C63C  2  0D AF CB     	ora	subrec		;coordinates
00C63F  2  A8           	tay
00C640  2  68           	pla			;get extent back
00C641  2  51 04        	eor	(bufadd),y	;exclusive or with dir
00C643  2  2D DB CB     	and	cexm1f		;and with exm complement + 1f
00C646  2  F0 17        	beq	trynxt		;ok if zero
00C648  2  D0 D4        	bne	newtry		;else get next directory
00C64A  2  C9 3F        notaex:	cmp	#'?'		;if a ? then
00C64C  2  F0 11        	beq	trynxt		;is a match
00C64E  2  48           	pha			;save char
00C64F  2  98           	tya			;then add
00C650  2  0D AF CB     	ora	subrec		;offset to
00C653  2  A8           	tay			;make pointer
00C654  2  68           	pla			;get char back
00C655  2  85 1C                sta     savex
00C657  2  B1 04                lda	(bufadd),y	;if not same
00C659  2  29 7F                and     #$7F            ; strip off high bit for ROMWBW Read only filesystem
00C65B  2  C5 1C        	cmp	savex	        ;if not same
00C65D  2  D0 BF        	bne	newtry		;try next directory
00C65F  2  CA           trynxt:	dex			;else count number down
00C660  2  D0 C9        	bne	mremch		;and loop if more
00C662  2  AD B9 CB     	lda	dirmod		;return with directory
00C665  2  60           exitsr:	rts			;number mod 4
00C666  2               ;calculate logical record number
00C666  2               ; input:blknum
00C666  2               ; returns:none
00C666  2               ; alters:a,x,p,recnum
00C666  2  AE C4 CB     calrcn:	ldx	sxb		;set x according to blkscd
00C669  2  0E B0 CB     mulmre:	asl	blknum		;multiply block
00C66C  2  2E B1 CB     	rol	blknum+1	;number
00C66F  2  2E B2 CB     	rol	blknum+2
00C672  2  CA           	dex			;by code
00C673  2  D0 F4        	bne	mulmre
00C675  2  AD C3 CB     	lda	sab		;set mask in a
00C678  2  2D B5 CB     	and	nxtrec		;and with next record
00C67B  2  0D B0 CB     	ora	recnum		;or with number
00C67E  2  8D B0 CB     	sta	recnum		;and save
00C681  2  60           	rts
00C682  2               ;update directory
00C682  2  A9 20        updtdr:	lda	#32		;change all
00C684  2  A2 00        	ldx	#0		;from start
00C686  2               ;change directory entry
00C686  2               ; input:a=number char to change,x=starting position,fcb@(addinp)
00C686  2               ; returns:none
00C686  2               ; alters:all,directory,checksums
00C686  2  8D B3 CB     dirchg:	sta	chrcnt		;save count
00C689  2  CE B3 CB     	dec	chrcnt		;back up
00C68C  2  18           mrechg:	clc			;clear carry
00C68D  2  8A           	txa			;get offset
00C68E  2  6D B3 CB     	adc	chrcnt		;compute index
00C691  2  A8           	tay			;and set
00C692  2  C0 0C        	cpy	#12		;see if at extent
00C694  2  F0 04        	beq	docare		;if so do special
00C696  2  C0 0F        	cpy	#15		;see if at number rec
00C698  2  D0 05        	bne	dntcar		;if not skip
00C69A  2  2C 90 CB     docare:	bit	skpdir		;check flag
00C69D  2  10 0D        	bpl	nochng		;skip if ok
00C69F  2  B1 02        dntcar:	lda	(addinp),y	;get char
00C6A1  2  48           	pha			;save it
00C6A2  2  AD B3 CB     	lda	chrcnt		;get count
00C6A5  2  0D AF CB     	ora	subrec		;add offset
00C6A8  2  A8           	tay			;make an index
00C6A9  2  68           	pla			;get char back
00C6AA  2  91 04        	sta	(bufadd),y	;and put in buffer
00C6AC  2  CE B3 CB     nochng:	dec	chrcnt		;count down
00C6AF  2  10 DB        	bpl	mrechg		;and loop
00C6B1  2  20 8A C4     	jsr	drrcsu		;set it up
00C6B4  2  4C 43 C8     	jmp	updtck		;and do change
00C6B7  2               ;execute create file
00C6B7  2  20 12 C3     xmake:	jsr	autodr		;auto drive select
00C6BA  2               ;create file
00C6BA  2               ; input:fcb@(addinp)
00C6BA  2               ; returns:n=1 if not valid,a=dirmod (255 if not valid)
00C6BA  2               ; alters:dirnum,dirmod,fcb@(addinp)
00C6BA  2  20 1A C8     mkefle:	jsr	tstron		;test for r/o
00C6BD  2  A5 02        	lda	addinp		;save fcb
00C6BF  2  48           	pha			;address
00C6C0  2  A5 03        	lda	addinp+1	;on
00C6C2  2  48           	pha			;stack
00C6C3  2  AD E9 CA     	lda	empdvc		;then point
00C6C6  2  AC EA CA     	ldy	empdvc+1	;to empty
00C6C9  2  85 02        	sta	addinp		;dummy
00C6CB  2  84 03        	sty	addinp+1	;fcb
00C6CD  2  A9 01        	lda	#1		;match only
00C6CF  2  20 13 C6     	jsr	frstsr		;first char
00C6D2  2  68           	pla			;restore
00C6D3  2  85 03        	sta	addinp+1	;fcb
00C6D5  2  68           	pla			;address
00C6D6  2  85 02        	sta	addinp		;from stack
00C6D8  2  AD B9 CB     	lda	dirmod		;get number mod 4
00C6DB  2  30 15        	bmi	extmke		;quit if not found
00C6DD  2  A0 0D        	ldy	#13		;else set up
00C6DF  2  A9 00        	lda	#0		;to clear
00C6E1  2  91 02        mkeagn:	sta	(addinp),y	;rest of
00C6E3  2  C8           	iny			;fcb
00C6E4  2  C0 21        	cpy	#33		;including next
00C6E6  2  D0 F9        	bne	mkeagn		;record
00C6E8  2               ;the next two lines ensure that the extent and
00C6E8  2               ;number of records fields are updated
00C6E8  2  38           	sec
00C6E9  2  6E 90 CB     	ror	skpdir
00C6EC  2  20 82 C6     	jsr	updtdr		;update directory
00C6EF  2  AD B9 CB     	lda	dirmod		;get number
00C6F2  2  60           extmke:	rts			;and quit
00C6F3  2               ;extend file
00C6F3  2               ; input:fcb@(addinp), x=1 read
00C6F3  2               ;		        0 write
00C6F3  2  8E 9E CB     extend:	stx	exrwfl		;save parameter
00C6F6  2  20 ED C5     	jsr	clsfle		;close current extent
00C6F9  2  30 2A        	bmi	extext		;exit if not found
00C6FB  2  A0 0C        	ldy	#12		;else
00C6FD  2  B1 02        	lda	(addinp),y	;get extent
00C6FF  2  18           	clc			;and
00C700  2  69 01        	adc	#1		;add one
00C702  2  29 1F        	and	#%00011111	;see if overflow
00C704  2  F0 17        	beq	exteof		;eof if so
00C706  2  91 02        	sta	(addinp),y	;and save
00C708  2  20 11 C6     	jsr	fndf13		;see if next extent exists
00C70B  2  10 0B        	bpl	opnext		;if so open
00C70D  2  AD 9E CB     	lda	exrwfl		;if not and is write then create
00C710  2  D0 13        	bne	extext		;else return as eof
00C712  2  20 BA C6     dwrtex:	jsr	mkefle		;create file
00C715  2  4C 1B C7     	jmp	tstext		;and test
00C718  2  20 B2 C5     opnext:	jsr	opnfle		;open
00C71B  2  10 03        tstext:	bpl	extnok		;continue if ok
00C71D  2  A9 01        exteof:	lda	#1		;else set eof
00C71F  2  60           	rts			;and return
00C720  2  20 8F C5     extnok:	jsr	inrcct		;initialize counters
00C723  2  A9 00        	lda	#0		;good
00C725  2  60           extext:	rts			;return
00C726  2               ;set up next directory block
00C726  2               ; input:dirnum,x=1 for update checksum
00C726  2               ; returns:a=dirmod (255 if invalid),n=1 if invalid
00C726  2               ; alters:alll,dirnum,dirmod
00C726  2  8A           nxtdir:	txa			;save operation
00C727  2  48           	pha			;on stack
00C728  2  EE AD CB     	inc	dirnum		;bump directory
00C72B  2  D0 03        	bne	*+5
00C72D  2  EE AE CB     	inc	dirnum+1
00C730  2  AD D2 CB     	lda	maxdir		;if not at limit continue
00C733  2  CD AD CB     	cmp	dirnum
00C736  2  AD D3 CB     	lda	maxdir+1
00C739  2  ED AE CB     	sbc	dirnum+1
00C73C  2  B0 05        	bcs	gtnxdr		;then continue
00C73E  2  68           	pla			;else clear stack
00C73F  2  AA           	tax			;and set x
00C740  2  4C DE C7     	jmp	cldrnm		;set to invalid
00C743  2  AD AD CB     gtnxdr:	lda	dirnum		;get low again
00C746  2  29 03        	and	#%00000011	;look at 2 lsbs
00C748  2  8D B9 CB     	sta	dirmod		;save mod 4
00C74B  2  0A           	asl	a		;multiply
00C74C  2  0A           	asl	a		;by
00C74D  2  0A           	asl	a		;32 to
00C74E  2  0A           	asl	a		;get pointer
00C74F  2  0A           	asl	a		;offset
00C750  2  8D AF CB     	sta	subrec		;and save
00C753  2  F0 05        	beq	getdir		;if zero read new
00C755  2  68           	pla			;else clear stack
00C756  2  AA           	tax			;set x
00C757  2  4C 62 C7     	jmp	gotdir		;and exit
00C75A  2  20 8A C4     getdir:	jsr	drrcsu		;set up to read
00C75D  2  20 3D C8     	jsr	rdesec		;do read
00C760  2  68           	pla			;get operation
00C761  2  AA           	tax			;code
00C762  2               ;;;;;;	jsr	chksop		;do it
00C762  2  AD B9 CB     gotdir:	lda	dirmod		;and return
00C765  2  60           exnxdr:	rts			;with number
00C766  2               ;checksum operation
00C766  2               ;this routine assumes calling routine has checked for
00C766  2               ;valid dirnum and hence valid dirrec
00C766  2               ; input:chkflg,dirrec,x (1=update else check)
00C766  2               ; returns:none
00C766  2               ; alters:map@(chkmap)
00C766  2  2C D6 CB     chksop:	bit	chkflg		;check flag
00C769  2  30 FA        	bmi	exnxdr		;done if set
00C76B  2  CA           	dex			;dec code
00C76C  2  D0 09        	bne	tstchk		;if not zero test
00C76E  2  20 7A C5     	jsr	clcchk		;else calculate
00C771  2  20 C8 C7     	jsr	clcckp		;calculate pointer
00C774  2  91 08        	sta	(chkpnt),y	;and save
00C776  2  60           	rts			;then return
00C777  2  20 7A C5     tstchk:	jsr	clcchk		;do calculation
00C77A  2  20 C8 C7     	jsr	clcckp		;calculate pointer
00C77D  2  D1 08        	cmp	(chkpnt),y	;compare to old
00C77F  2  F0 E4        	beq	exnxdr		;if equal ok
00C781  2  4C 6D C5     	jmp	setron		;else set to r/o
00C784  2               ;get block number
00C784  2               ; input:nxtrec,blmode,fcb@(addinp),sxb,exm
00C784  2               ; returns:none
00C784  2               ; alters:all,blknum
00C784  2  AE C4 CB     getblk:	ldx	sxb		;set x according to blkscd
00C787  2  AD B5 CB     	lda	nxtrec		;get next record
00C78A  2  4A           gblp:	lsr	a		;divide by 2 x times
00C78B  2  CA           	dex
00C78C  2  D0 FC        	bne	gblp
00C78E  2  8D B0 CB     	sta	blknum		;save previous as temp
00C791  2               ;use extent as offset but first use sxb to create param
00C791  2  38           	sec
00C792  2  A9 08        	lda	#8
00C794  2  ED C4 CB     	sbc	sxb
00C797  2  AA           	tax
00C798  2               ;now get extent from fcb
00C798  2  A0 0C        	ldy	#12
00C79A  2  B1 02        	lda	(addinp),y
00C79C  2  2D DA CB     	and	exm		;and with mask
00C79F  2  4A           	lsr	a		;shift with lsb to c
00C7A0  2  2A           gbxlp:	rol	a		;now go other way
00C7A1  2  CA           	dex
00C7A2  2  D0 FC        	bne	gbxlp
00C7A4  2  18           	clc			;now add saved value
00C7A5  2  6D B0 CB     	adc	blknum		;back
00C7A8  2  2C C0 CB     	bit	blmode		;test mode
00C7AB  2  10 01        	bpl	*+3		;skip if byte
00C7AD  2  0A           	asl	a		;else times two
00C7AE  2  18           	clc			;then add
00C7AF  2  69 10        	adc	#16		;offset into fcb
00C7B1  2  8D 91 CB     	sta	fcbind		;save for later
00C7B4  2  A8           	tay			;set index
00C7B5  2  B1 02        	lda	(addinp),y	;get number
00C7B7  2  8D B0 CB     	sta	blknum		;store
00C7BA  2  C8           	iny
00C7BB  2  A9 00        	lda	#0		;clear
00C7BD  2  2C C0 CB     	bit	blmode		;test mode
00C7C0  2  10 02        	bpl	*+4		;skip if byte
00C7C2  2  B1 02        	lda	(addinp),y	;else get high
00C7C4  2  8D B1 CB     	sta	blknum+1	;high byte
00C7C7  2  60           	rts			;and return
00C7C8  2               ;calculate chkpnt as function of dirrec and chkmap
00C7C8  2               ; input:dirrec,chkmap
00C7C8  2               ; returns:y=0
00C7C8  2               ; alters:y,p,chkpnt
00C7C8  2  48           clcckp:	pha			;save a
00C7C9  2  18           	clc
00C7CA  2  AD B7 CB     	lda	dirrec		;add record number
00C7CD  2  6D D7 CB     	adc	chkmap		;to start
00C7D0  2  85 08        	sta	chkpnt
00C7D2  2  AD B8 CB     	lda	dirrec+1
00C7D5  2  6D D8 CB     	adc	chkmap+1
00C7D8  2  85 09        	sta	chkpnt+1
00C7DA  2  A0 00        	ldy	#0
00C7DC  2  68           	pla			;get a back
00C7DD  2  60           	rts
00C7DE  2               ;clear directory number to $ffff
00C7DE  2               ; input:none
00C7DE  2               ; returns:a=$ff,n=1,z=0
00C7DE  2               ; alters:a,p,dirnum,dirmod
00C7DE  2  A9 FF        cldrnm:	lda	#$ff		;set to $ff
00C7E0  2  8D AD CB     	sta	dirnum
00C7E3  2  8D AE CB     	sta	dirnum+1
00C7E6  2  8D B9 CB     	sta	dirmod
00C7E9  2  60           	rts
00C7EA  2               ;change allocation map
00C7EA  2               ; input:subrec,directory record @ (bufadd)
00C7EA  2               ; returns:none
00C7EA  2               ; alters:all,allocation map
00C7EA  2  18           mapdir:	clc			;add 16 to
00C7EB  2  AD AF CB     	lda	subrec		;to subrec to point
00C7EE  2  69 10        	adc	#16		;to block number field
00C7F0  2  A8           	tay			;make index
00C7F1  2  8C BE CB     lpmpdr:	sty	mpdrsy		;save index
00C7F4  2  8A           	txa			;save x
00C7F5  2  48           	pha			;operation
00C7F6  2  B1 04        	lda	(bufadd),y	;get block number
00C7F8  2  8D BF CB     	sta	mpdrtm		;save in temp
00C7FB  2  C8           	iny			;bump index for word
00C7FC  2  20 7E C8     	jsr	gthibn		;get high part of number
00C7FF  2  0D BF CB     mpdrnw:	ora	mpdrtm		;see if zero
00C802  2  F0 0A        	beq	skpedr		;skip if zero
00C804  2  20 7E C8     	jsr	gthibn		;get high again
00C807  2  A8           	tay			;move to y
00C808  2  AD BF CB     	lda	mpdrtm		;get low again
00C80B  2  20 57 C5     	jsr	altalc		;else alter map
00C80E  2  68           skpedr:	pla			;get operation
00C80F  2  AA           	tax			;back
00C810  2  AC BE CB     	ldy	mpdrsy		;get index back
00C813  2  C8           	iny			;bump it
00C814  2  98           	tya			;if still
00C815  2  29 0F        	and	#%00001111	;in field
00C817  2  D0 D8        	bne	lpmpdr		;then loop
00C819  2  60           	rts			;else quit
00C81A  2               ;test r/w status
00C81A  2               ;does warm boot if r/o
00C81A  2               ; input:curdrv,ronlst
00C81A  2               ; returns:none
00C81A  2               ; alters:a,x,p
00C81A  2  20 85 C5     tstron:	jsr	chkron		;test bit
00C81D  2  F0 1D        	beq	exttro		;exit if r/w
00C81F  2  20 6C C8     	jsr	errout		;else send error
00C822  2  AD EC CA     	lda	rommvc		;point to r/o
00C825  2  AC ED CA     	ldy	rommvc+1	;message
00C828  2  20 D0 C8     	jsr	sndstr		;send it
00C82B  2  4C EA C0     	jmp	xwboot		;then abort
00C82E  2               ;set current drive to r/w
00C82E  2               ; input:curdrv,ronlst
00C82E  2               ; returns:ronlst
00C82E  2               ; alters:a,x,p,ronlst
00C82E  2  AE AA CB     setrw:	ldx	curdrv		;get drive
00C831  2  BD 80 CB     	lda	bitmap,x	;and mask
00C834  2  49 FF        	eor	#$ff		;complement
00C836  2  2D AC CB     	and	ronlst		;and with status
00C839  2  8D AC CB     	sta	ronlst		;save
00C83C  2  60           exttro:	rts			;return
00C83D  2               ;read sector
00C83D  2  20 7D CC     rdesec:	jsr	sim+39		;do read
00C840  2               
00C840  2  4C 4F C8     	jmp	chkrwe		;check for error
00C843  2               ;update checksum and directory
00C843  2  A2 01        updtck:	ldx	#1		;set for update
00C845  2               ;;;;;	jsr	chksop		;do it
00C845  2  A9 01        	lda	#1		;say is directory op
00C847  2  D0 03        	bne	secwrt		;do it
00C849  2               ;write sector
00C849  2  AD D9 CB     wrtsec:	lda	pemwrtype		;get write type
00C84C  2  20 80 CC     secwrt:	jsr	sim+42		;do write
00C84F  2               
00C84F  2  C9 00        chkrwe:	cmp	#0		;if not ok
00C851  2  F0 E9        	beq	exttro		;done if zero
00C853  2               ;read/write error
00C853  2  20 6C C8     rwerrt:	jsr	errout		;send error message
00C856  2  AD EF CA     	lda	bdsmvc		;point to
00C859  2  AC F0 CA     	ldy	bdsmvc+1	;bad sector message
00C85C  2  20 D0 C8     	jsr	sndstr		;and send
00C85F  2  20 8B C8     	jsr	getcon		;get input
00C862  2  C9 0D        	cmp	#cr		;if a cr
00C864  2  F0 03        	beq	ignerr		;then continue
00C866  2  4C EA C0     	jmp	xwboot		;else abort
00C869  2  4C 67 CA     ignerr:	jmp	pcrlf		;crlf and return
00C86C  2               ;error output routine
00C86C  2               ; input:curdrv,pemmvc
00C86C  2               ; returns:none
00C86C  2               ; alters:all
00C86C  2  AD F2 CA     errout:	lda	pemmvc		;point to
00C86F  2  AC F3 CA     	ldy	pemmvc+1	;error message
00C872  2  20 D0 C8     	jsr	sndstr		;send it
00C875  2  AD AA CB     	lda	curdrv		;get drive number
00C878  2  18           	clc			;add
00C879  2  69 41        	adc	#'A'		;ascii a
00C87B  2  4C 19 C9     	jmp	sndchr		;and send it
00C87E  2               ;get high part of block number if word (zero if byte)
00C87E  2               ; input:y=index to high,blmode,directory@(bufadd)+subrec
00C87E  2               ; returns:a=high part of block number
00C87E  2               ; alters:a,p,mpdrsy iff word
00C87E  2  A9 00        gthibn:	lda	#0		;preset for byte
00C880  2  2C C0 CB     	bit	blmode		;test mode
00C883  2  10 05        	bpl	gthiex		;done if byte
00C885  2  B1 04        	lda	(bufadd),y	;get high
00C887  2  8C BE CB     	sty	mpdrsy		;alter y
00C88A  2  60           gthiex:	rts
00C88B  2               ;get console input
00C88B  2               ; input:pndkey
00C88B  2               ; returns:a=character
00C88B  2               ; alters:all,pndkey
00C88B  2               getcon:
00C88B  2  AD 94 CB     	lda	pndkey		;get pending
00C88E  2  48           	pha			;save it
00C88F  2  A9 00        	lda	#0		;clear
00C891  2  8D 94 CB     	sta	pndkey		;pending
00C894  2  68           	pla			;restore
00C895  2  D0 03        	bne	extget		;exit if not null
00C897  2  20 5F CC     	jsr	sim+9		;else get new
00C89A  2               
00C89A  2  60           extget:	rts			;and return
00C89B  2               ;check keyboard status
00C89B  2               ;handles <ctl-s> for freeze and <ctl-c> for boot
00C89B  2               ; input:pndkey
00C89B  2               ; returns:a=0 if no input or <>0 if input
00C89B  2               ; alters:all,pndkey
00C89B  2               kbdsts:
00C89B  2  AD 94 CB     	lda	pndkey		;get pending
00C89E  2  D0 20        	bne	extkbd		;if there quit
00C8A0  2  20 5C CC     	jsr	sim+6		;else test
00C8A3  2  C9 00        	CMP	#$00		;if zero
00C8A5  2  F0 19        	beq	extkbd		;exit
00C8A7  2  20 5F CC     	jsr	sim+9		;else get input
00C8AA  2  C9 13        	cmp	#ctls		;if not freeze
00C8AC  2  D0 0D        	bne	newpnd		;save input
00C8AE  2  20 5F CC     	jsr	sim+9		;else wait for more
00C8B1  2  C9 03        	cmp	#ctlc		;if not abort
00C8B3  2  D0 03        	bne	nowarm		;then jump
00C8B5  2  4C EA C0     	jmp	xwboot		;else do warm boot
00C8B8  2  A9 00        nowarm:	lda	#0		;clear
00C8BA  2  60           	rts			;and return
00C8BB  2  8D 94 CB     newpnd:	sta	pndkey		;save
00C8BE  2  A9 FF        	lda	#$ff		;set ready
00C8C0  2               extkbd:
00C8C0  2  60           	rts			;and return
00C8C1  2               ;test character
00C8C1  2               ; input:a=character
00C8C1  2               ; returns:c=0 if control or c=1 if printing
00C8C1  2               ; alters:p
00C8C1  2  C9 0D        tstchr:	cmp	#cr		;if cr
00C8C3  2  F0 0A        	beq	chtext		;quit
00C8C5  2  C9 0A        	cmp	#lf		;if linefeed
00C8C7  2  F0 06        	beq	chtext		;quit
00C8C9  2  C9 09        	cmp	#ctli		;if tab
00C8CB  2  F0 02        	beq	chtext		;quit
00C8CD  2  C9 20        	cmp	#' '		;see if control
00C8CF  2  60           chtext:	rts			;and return
00C8D0  2               ;send string ending in $
00C8D0  2               ; input:ay=string address
00C8D0  2               ; returns:none
00C8D0  2               ; alters:all,index,sndlpe+1 and +2
00C8D0  2  8D D9 C8     sndstr:	sta	sndlpe+1	;set pointer
00C8D3  2  8C DA C8     	sty	sndlpe+2
00C8D6  2  A0 00        	ldy	#0
00C8D8  2  B9 FF FF     sndlpe:	lda	$ffff,y		;get char
00C8DB  2  C9 24        	cmp	#'$'		;if terminator
00C8DD  2  F0 0C        	beq	sndext		;then exit
00C8DF  2  C8           	iny			;else bump
00C8E0  2  8C BA CB     	sty	index		;and save
00C8E3  2  20 19 C9     	jsr	sndchr		;send char
00C8E6  2  AC BA CB     	ldy	index		;get index
00C8E9  2  D0 ED        	bne	sndlpe		;and loop
00C8EB  2  60           sndext:	rts			;return
00C8EC  2               ;send char to printer if enabled
00C8EC  2               ; input:a=character,lstflg
00C8EC  2               ; returns:a=character
00C8EC  2               ; alters:x,y,p
00C8EC  2               lstout:
00C8EC  2  2C 95 CB     	bit	lstflg		;test flag
00C8EF  2  10 0A        	bpl	extlst		;exit if off
00C8F1  2  2C BC CB     	bit	outflg		;test output flag
00C8F4  2  30 05        	bmi	extlst		;done if set
00C8F6  2  48           	pha			;save char
00C8F7  2  20 65 CC     	jsr	sim+15		;send
00C8FA  2  68           	pla			;get char
00C8FB  2  60           extlst:	rts			;and done
00C8FC  2               ;output a character
00C8FC  2               ; input:a=character,console definition block in sim
00C8FC  2               ; returns:none
00C8FC  2               ; alters:all,positn
00C8FC  2  20 C1 C8     output:	jsr	tstchr		;test it
00C8FF  2  B0 18        	bcs	sndchr		;if not control jump
00C901  2  48           	pha			;else save
00C902  2  AD 90 CC     	lda	sysdef+4	;get invert
00C905  2  20 32 C9     	jsr	nolist		;send to console
00C908  2  A9 5E        	lda	#'^'		;get arrow
00C90A  2  20 EC C8     	jsr	lstout		;send to printer
00C90D  2  68           	pla			;get character
00C90E  2  09 40        	ora	#'A'-1		;convert to ascii
00C910  2  20 2A C9     	jsr	pchrot		;send to all
00C913  2  AD 8F CC     	lda	sysdef+3	;get normal
00C916  2  4C 32 C9     	jmp	nolist		;to console
00C919  2  C9 09        sndchr:	cmp	#ctli		;if not tab
00C91B  2  D0 0D        	bne	pchrot		;send
00C91D  2  A9 20        tabspc:	lda	#' '		;else get space
00C91F  2  20 2A C9     	jsr	pchrot		;send
00C922  2  AD 96 CB     	lda	positn		;get count
00C925  2  29 07        	and	#7		;if not mod 8
00C927  2  D0 F4        	bne	tabspc		;loop
00C929  2  60           	rts			;else exit
00C92A  2  48           pchrot:	pha			;save char
00C92B  2  20 9B C8     	jsr	kbdsts		;test input
00C92E  2  68           	pla			;restore
00C92F  2  20 EC C8     	jsr	lstout		;to printer if on
00C932  2  48           nolist:	pha			;save again
00C933  2  2C BC CB     	bit	outflg		;test flag
00C936  2  30 03        	bmi	*+5		;done if set
00C938  2  20 62 CC     	jsr	sim+12		;to console
00C93B  2  68           	pla			;restore
00C93C  2  EE 96 CB     	inc	positn		;bump col
00C93F  2  C9 20        	cmp	#' '		;if space or more
00C941  2  B0 26        	bcs	extchr		;is ok
00C943  2  CD 8E CC     	cmp	sysdef+2	;also ok
00C946  2  F0 21        	beq	extchr		;if forward
00C948  2  CE 96 CB     	dec	positn		;else drop back
00C94B  2  CD 8C CC     	cmp	sysdef+0	;see if bs
00C94E  2  D0 06        	bne	tryotr		;branch if not
00C950  2  CE 96 CB     	dec	positn		;else drop again
00C953  2  30 0F        	bmi	zrocol		;zero if <0
00C955  2  60           	rts			;else ok
00C956  2  C9 0D        tryotr:	cmp	#cr		;if a cr
00C958  2  F0 0A        	beq	zrocol		;clear col
00C95A  2  CD 93 CC     	cmp	sysdef+7	;if a formfeed
00C95D  2  F0 05        	beq	zrocol		;also clear
00C95F  2  CD 94 CC     	cmp	sysdef+8	;if not home
00C962  2  D0 05        	bne	extchr		;then done
00C964  2  A9 00        zrocol:	lda	#0		;clear
00C966  2  8D 96 CB     	sta	positn		;column
00C969  2  60           extchr:	rts			;and exit
00C96A  2               ;go to left and space past prompt
00C96A  2               ; input:frscol,positn
00C96A  2               ; returns:none
00C96A  2               ; alters:positn
00C96A  2  A9 0D        spcovr:	lda	#cr		;get cr
00C96C  2  20 2A C9     	jsr	pchrot		;send to all
00C96F  2  A9 0A        	lda	#lf		;send lf
00C971  2  20 EC C8     	jsr	lstout		;only to printer
00C974  2  AD 93 CB     mreovr:	lda	frscol		;get first
00C977  2  CD 96 CB     	cmp	positn		;see if there
00C97A  2  F0 ED        	beq	extchr		;done if is
00C97C  2  AD 8E CC     	lda	sysdef+2	;get forward
00C97F  2  20 32 C9     	jsr	nolist		;send it
00C982  2  4C 74 C9     	jmp	mreovr		;and loop
00C985  2               ;buffered read
00C985  2               ; input:buffer@(addinp)
00C985  2               ; returns:none
00C985  2               ; alters:all,buffer@(addinp)
00C985  2  A9 00        bufinp:	lda	#0		;clear
00C987  2  A0 01        	ldy	#1		;length
00C989  2  91 02        	sta	(addinp),y	;position in buffer
00C98B  2  8C 9D CB     	sty	bufpsn		;set point to 1
00C98E  2  AD 96 CB     	lda	positn		;get current
00C991  2  8D 93 CB     	sta	frscol		;and save
00C994  2  20 8B C8     nxtinp:	jsr	getcon		;get input
00C997  2  AC 9D CB     	ldy	bufpsn		;get index
00C99A  2  C9 0D        	cmp	#cr		;if not a cr
00C99C  2  D0 03        	bne	notcr		;then jump
00C99E  2  4C 64 CA     	jmp	endlin		;else done
00C9A1  2  C9 08        notcr:	cmp	#delete		;if not delete
00C9A3  2  D0 5E        	bne	ntdelt		;then jump
00C9A5  2  C0 01        	cpy	#1		;else if start
00C9A7  2  F0 EB        	beq	nxtinp		;then loop
00C9A9  2  B1 02        	lda	(addinp),y	;get last
00C9AB  2  48           	pha			;save char
00C9AC  2  A0 01        	ldy	#1		;point to count
00C9AE  2  38           	sec			;set carry
00C9AF  2  B1 02        	lda	(addinp),y	;get count
00C9B1  2  E9 01        	sbc	#1		;decrement
00C9B3  2  91 02        	sta	(addinp),y	;then save
00C9B5  2  68           	pla			;restore char
00C9B6  2  CE 9D CB     	dec	bufpsn		;backup pointer
00C9B9  2  C9 20        	cmp	#' '		;if space or more
00C9BB  2  B0 40        	bcs	nrmbs		;just backspace
00C9BD  2  C9 09        	cmp	#ctli		;see if tab
00C9BF  2  D0 30        	bne	ctlbs		;if not is control
00C9C1  2  38           	sec			;set flag
00C9C2  2  6E BC CB     	ror	outflg
00C9C5  2  AD 96 CB     	lda	positn		;get position and save
00C9C8  2  8D BD CB     	sta	lstcol
00C9CB  2  20 6A C9     	jsr	spcovr		;else go back
00C9CE  2  20 71 CA     	jsr	rptlne		;and retype
00C9D1  2  AD 96 CB     	lda	positn		;get new last position
00C9D4  2  48           	pha			;save on stack
00C9D5  2  38           	sec			;subtract to get delta
00C9D6  2  AD BD CB     	lda	lstcol
00C9D9  2  ED 96 CB     	sbc	positn
00C9DC  2  8D BD CB     	sta	lstcol		;and save
00C9DF  2  0E BC CB     	asl	outflg		;clear flag
00C9E2  2  20 91 CA     bstab:	jsr	dobs		;do one
00C9E5  2  CE BD CB     	dec	lstcol		;drop count
00C9E8  2  D0 F8        	bne	bstab		;loop if more
00C9EA  2  68           	pla			;get position
00C9EB  2  8D 96 CB     	sta	positn		;and set
00C9EE  2  4C 94 C9     	jmp	nxtinp		;then loop
00C9F1  2  AD 8F CC     ctlbs:	lda	sysdef+3	;get normal
00C9F4  2  20 8D CA     	jsr	chkbs		;bs if printing
00C9F7  2  AD 90 CC     	lda	sysdef+4	;same for invert
00C9FA  2  20 8D CA     	jsr	chkbs		;then delete char itself
00C9FD  2  20 91 CA     nrmbs:	jsr	dobs		;do a backspace
00CA00  2  4C 94 C9     	jmp	nxtinp		;and loop
00CA03  2  C9 10        ntdelt:	cmp	#ctlp		;if not ctl-p
00CA05  2  D0 0B        	bne	ntctlp		;then jump
00CA07  2  AD 95 CB     	lda	lstflg		;else get printer flag
00CA0A  2  49 FF        	eor	#$ff		;complement
00CA0C  2  8D 95 CB     	sta	lstflg		;save
00CA0F  2  4C 94 C9     	jmp	nxtinp		;and loop
00CA12  2  C9 18        ntctlp:	cmp	#ctlx		;if not ctl-x
00CA14  2  D0 0C        	bne	ntctlx		;then jump
00CA16  2  20 6A C9     	jsr	spcovr		;restart
00CA19  2  AD 8D CC     	lda	sysdef+1	;get clear to eol
00CA1C  2  20 32 C9     	jsr	nolist		;send it
00CA1F  2  4C 85 C9     	jmp	bufinp		;and start over
00CA22  2  C9 12        ntctlx:	cmp	#ctlr		;if not ctl-r
00CA24  2  D0 09        	bne	ntctlr		;then jump
00CA26  2  20 6A C9     	jsr	spcovr		;restart
00CA29  2  20 71 CA     	jsr	rptlne		;retype line
00CA2C  2  4C 94 C9     	jmp	nxtinp		;and start over
00CA2F  2  C8           ntctlr:	iny			;next position
00CA30  2  91 02        	sta	(addinp),y	;store char
00CA32  2  48           	pha			;and save
00CA33  2  8C 9D CB     	sty	bufpsn		;index
00CA36  2  A0 01        	ldy	#1		;point to count
00CA38  2  98           	tya			;set a to 1
00CA39  2  18           	clc			;then
00CA3A  2  71 02        	adc	(addinp),y	;add count
00CA3C  2  91 02        	sta	(addinp),y	;and save
00CA3E  2  68           	pla			;restore char
00CA3F  2  20 FC C8     dontsv:	jsr	output		;send char
00CA42  2  AC 9D CB     	ldy	bufpsn		;get index
00CA45  2  B1 02        	lda	(addinp),y	;get char
00CA47  2  C9 03        	cmp	#ctlc		;if not ctl-c
00CA49  2  D0 0B        	bne	ignrcc		;ignore
00CA4B  2  A0 01        	ldy	#1		;get count
00CA4D  2  B1 02        	lda	(addinp),y	;from buffer
00CA4F  2  C9 01        	cmp	#1		;if not at start
00CA51  2  D0 03        	bne	ignrcc		;ignore
00CA53  2  4C EA C0     	jmp	xwboot		;else do warm boot
00CA56  2  A0 01        ignrcc:	ldy	#1		;get
00CA58  2  B1 02        	lda	(addinp),y	;count
00CA5A  2  88           	dey			;point to max
00CA5B  2  D1 02        	cmp	(addinp),y	;if length
00CA5D  2  B0 03        	bcs	lineen		;at max jump
00CA5F  2  4C 94 C9     	jmp	nxtinp		;else loop
00CA62  2  A9 0D        lineen:	lda	#cr		;get a cr
00CA64  2  4C 2A C9     endlin:	jmp	pchrot		;and send
00CA67  2               ;cr and lf
00CA67  2  A9 0D        pcrlf:	lda	#cr		;then a
00CA69  2  20 2A C9     	jsr	pchrot		;cr
00CA6C  2  A9 0A        	lda	#lf		;and a
00CA6E  2  4C 2A C9     	jmp	pchrot		;lf
00CA71  2               ;retype line
00CA71  2  AD 9D CB     rptlne:	lda	bufpsn		;save point
00CA74  2  8D BB CB     	sta	numcnt		;as count
00CA77  2  A9 01        	lda	#1		;start position
00CA79  2  48           	pha			;save
00CA7A  2  68           mrerpt:	pla			;get position
00CA7B  2  CE BB CB     	dec	numcnt		;count down
00CA7E  2  D0 01        	bne	*+3		;continue if more
00CA80  2  60           	rts			;else done
00CA81  2  A8           	tay			;else make index
00CA82  2  C8           	iny			;and bump
00CA83  2  98           	tya			;save
00CA84  2  48           	pha			;on stack
00CA85  2  B1 02        	lda	(addinp),y	;get char
00CA87  2  20 FC C8     	jsr	output		;send
00CA8A  2  4C 7A CA     	jmp	mrerpt		;and loop
00CA8D  2               ;check for printing and backspace if needed
00CA8D  2  C9 20        chkbs:	cmp	#' '		;compare to space
00CA8F  2  90 19        	bcc	extdec		;not printing so done
00CA91  2               ;do a backspace
00CA91  2  AD 8C CC     dobs:	lda	sysdef+0	;get backspace
00CA94  2  48           	pha			;save it
00CA95  2  20 32 C9     	jsr	nolist		;send
00CA98  2  A9 20        	lda	#' '		;get space
00CA9A  2  20 32 C9     	jsr	nolist		;send
00CA9D  2  68           	pla			;get backspace
00CA9E  2  4C 32 C9     	jmp	nolist		;send it
00CAA1  2               ;test for decimal digit
00CAA1  2               ;if decimal then c=0 else c=1
00CAA1  2  C9 30        tstdec:	cmp	#'0'		;if under 0
00CAA3  2  90 04        	bcc	notdec		;then not decimal
00CAA5  2  C9 3A        	cmp	#'9'+1		;if 9 or under is ok
00CAA7  2  90 01        	bcc	extdec
00CAA9  2  38           notdec:	sec			;else not a match
00CAAA  2  60           extdec:	rts
00CAAB  2               ;test for hexadecimal digit
00CAAB  2               ;if hex then c=0 else c=1
00CAAB  2  20 A1 CA     tsthex:	jsr	tstdec		;first try decimal
00CAAE  2  90 FA        	bcc	extdec		;ok if dec
00CAB0  2  C9 41        	cmp	#'A'		;if under A
00CAB2  2  90 F5        	bcc	notdec		;then not hex
00CAB4  2  C9 47        	cmp	#'F'+1		;set c in F compare
00CAB6  2  60           	rts
00CAB7  2               ;bump load address by 128 and return in ay
00CAB7  2  AD F3 BF     adjdb:	lda	dskbuf		;get old
00CABA  2  AC F4 BF     	ldy	dskbuf+1	;address
00CABD  2  18           	clc			;and bump
00CABE  2  69 80        	adc	#128		;by 128
00CAC0  2  8D F3 BF     	sta	dskbuf		;save low
00CAC3  2  90 04        	bcc	*+6		;then bump
00CAC5  2  C8           	iny			;and save
00CAC6  2  8C F4 BF     	sty	dskbuf+1	;high as needed
00CAC9  2  60           	rts
00CACA  2               ;move record from disk buffer to default buffer
00CACA  2  AD F3 BF     mv128:	lda	dskbuf		;get address
00CACD  2  AC F4 BF     	ldy	dskbuf+1
00CAD0  2  8D D9 CA     	sta	mvfrom+1	;and set pointer
00CAD3  2  8C DA CA     	sty	mvfrom+2
00CAD6  2  A2 00        	ldx	#0		;clear index
00CAD8  2  BD FF FF     mvfrom:	lda	$ffff,x		;get byte
00CADB  2  9D 28 01     	sta	dflbuf,x	;move it
00CADE  2  E8           	inx
00CADF  2  10 F7        	bpl	mvfrom		;loop until done
00CAE1  2  60           	rts
00CAE2  2               
00CAE2  2               ;relocatable vectors
00CAE2  2  4C           	.byte	$4c
00CAE3  2  49 C0        extevc:	.word	extexq-1
00CAE5  2  4C           	.byte	$4c
00CAE6  2  42 CB        sltmvc:	.word	sltmsg
00CAE8  2  4C           	.byte	$4c
00CAE9  2  53 CB        empdvc:	.word	empty
00CAEB  2  4C           	.byte	$4c
00CAEC  2  F8 CA        rommvc:	.word	romsg
00CAEE  2  4C           	.byte	$4c
00CAEF  2  FF CA        bdsmvc:	.word	bdsmsg
00CAF1  2  4C           	.byte	$4c
00CAF2  2  32 CB        pemmvc:	.word	pemmsg
00CAF4  2  4C           	.byte	$4c
00CAF5  2  CB CB        dcbevc:	.word	dcb
00CAF7  2               ;relocation stopper
00CAF7  2  FF           	.byte	$ff
00CAF8  2               ;messages
00CAF8  2  20 2D 20 52  romsg:	.byte	" - R/O$"
00CAFC  2  2F 4F 24     
00CAFF  2  20 2D 20 42  bdsmsg:	.byte	" - BAD SECTOR"
00CB03  2  41 44 20 53  
00CB07  2  45 43 54 4F  
00CB0C  2  0D 0A 3C 52  	.byte	cr,lf,"<RET> TO IGNORE -- <OTHER> "
00CB10  2  45 54 3E 20  
00CB14  2  54 4F 20 49  
00CB29  2  54 4F 20 41  	.byte	"TO ABORT$"
00CB2D  2  42 4F 52 54  
00CB31  2  24           
00CB32  2  0D 0A 50 45  pemmsg:	.byte	cr,lf,"PEM ERROR ON $"
00CB36  2  4D 20 45 52  
00CB3A  2  52 4F 52 20  
00CB42  2  20 2D 20 49  sltmsg:	.byte	" - INVALID DRIVE$"
00CB46  2  4E 56 41 4C  
00CB4A  2  49 44 20 44  
00CB53  2               
00CB53  2               ;dummy fcb
00CB53  2  E5           empty:	.byte	$e5
00CB54  2               ;zero page switch enable table
00CB54  2  00 00 00 00  swctbl:	.byte	0,0,0,0,0,0,0,0
00CB58  2  00 00 00 00  
00CB5C  2  00 00 01 00  	.byte	0,0,1,0,0,1,1,1
00CB60  2  00 01 01 01  
00CB64  2  01 01 01 01  	.byte	1,1,1,1,1,1,1,1
00CB68  2  01 01 01 01  
00CB6C  2  00 00 01 00  	.byte	0,0,1,0,0,0,0,0
00CB70  2  00 00 00 00  
00CB74  2  00 00 00 00  	.byte	0,0,0,0
00CB78  2               ;bit mask table
00CB78  2  80 40 20 10  bitmsk:	.byte	128,64,32,16,8,4,2,1
00CB7C  2  08 04 02 01  
00CB80  2               ;bit map table
00CB80  2  01 02 04 08  bitmap:	.byte	1,2,4,8,16,32,64,128
00CB84  2  10 20 40 80  
00CB88  2               ;extent mask table (also uses 3 bytes in sabtbl
00CB88  2  00 01 03     exmtbl:	.byte	0,1,3
00CB8B  2               ;sab table
00CB8B  2  07 0F 1F 3F  sabtbl:	.byte	7,15,31,63,127
00CB8F  2  7F           
00CB90  2               ;variable storage
00CB90  2  00           skpdir:	.byte	0		;positive if no change
00CB91  2  00           fcbind:	.byte	0		;index to block number
00CB92  2  00           savext:	.byte	0		;save extent
00CB93  2  00           frscol:	.byte	0		;first col
00CB94  2  00           pndkey:	.byte	0		;pending input
00CB95  2  00           lstflg:	.byte	0		;printer flag
00CB96  2  00           positn:	.byte	0		;print position
00CB97  2  00           swcflg:	.byte	0		;zero page switch flag
00CB98  2  00 00        bytinp:	.word	0		;input value
00CB9A  2  00           cmdinp:	.byte	0		;input command
00CB9B  2  00 00        addout:	.word	0		;output address
00CB9D  2               bytout	=	addout		;output value
00CB9D  2  00           bufpsn:	.byte	0		;input buffer position
00CB9E  2  00           exrwfl:	.byte	0		;extend flag
00CB9F  2  00           tmpdrv:	.byte	0		;temporary drive number
00CBA0  2               ;align xqtvec on word boundary
00CBA0  2               	.align 2
00CBA0  2  00 00        xqtvec:	.word	0		;command vector
00CBA2  2  00 00        countr:	.word	0		;record counter
00CBA4  2  00           	.byte	0		;overflow
00CBA5  2  00 00        lkdown:	.word	0		;down pnt. for block search
00CBA7  2  00 00        lookup:	.word	0		;up pnt. for block search
00CBA9  2  00           olddrv:	.byte	0		;old drive number
00CBAA  2  00           curdrv:	.byte	0		;current drive
00CBAB  2  00           lginvc:	.byte	0		;log in status
00CBAC  2  00           ronlst:	.byte	0		;read write status
00CBAD  2  00 00        dirnum:	.word	0		;directory number
00CBAF  2  00           subrec:	.byte	0		;directory offset
00CBB0  2  00 00        recnum:	.word	0		;record number
00CBB2  2               blknum	=	recnum		;block number
00CBB2  2  00           	.byte	0		;overflow
00CBB3  2  00           chrcnt:	.byte	0		;character count
00CBB4  2  00           cmppnt:	.byte	0		;comparison pointer
00CBB5  2  00           nxtrec:	.byte	0		;next record
00CBB6  2  00           numrec:	.byte	0		;number records
00CBB7  2  00 00        dirrec:	.word	0		;directory record
00CBB9  2  00           dirmod:	.byte	0		;directory mod 4
00CBBA  2  00           index:	.byte	0		;buffer index
00CBBB  2  00           numcnt:	.byte	0		;counter
00CBBC  2  00           outflg:	.byte	0		;output enable flag
00CBBD  2  00           lstcol:	.byte	0		;last column
00CBBE  2  00           mpdrsy:	.byte	0		;save for y in mapdir
00CBBF  2  00           mpdrtm:	.byte	0		;temp in mapdir
00CBC0  2  00           blmode:	.byte	0		;<128 if byte else word
00CBC1  2  00 00        maxdrc:	.word	0		;max directory record
00CBC3  2  00           sab:	.byte	0		;mask for block
00CBC4  2  00           sxb:	.byte	0		;shift for block
00CBC5  2  00 00 00     rtclk:	.byte	0,0,0		;real time clock
00CBC8  2  00 00        gpcnt:	.word	0		;gp counter
00CBCA  2  00           trkctr:	.byte	0		;track counter
00CBCB  2               ;following region is used to capture dcb
00CBCB  2               dcb:
00CBCB  2  00 00        maxblk:	.word	0		;maximum block number
00CBCD  2  00 00        sectrk:	.word	0		;sectors per track
00CBCF  2  00 00        nsystr:	.word	0		;number system tracks
00CBD1  2  00           blkscd:	.byte	0		;block size code
00CBD2  2  00 00        maxdir:	.word	0		;maximum directory number
00CBD4  2  00 00        alcmap:	.word	0		;address of allocation map
00CBD6  2  00           chkflg:	.byte	0		;check flag
00CBD7  2  00 00        chkmap:	.word	0		;address of checksum map
00CBD9  2  00           pemwrtype:	.byte	0		;write type 0=norm,1=dir,2=unalloc
00CBDA  2  00           exm:	.byte	0		;extent mask
00CBDB  2  00           cexm1f:	.byte	0		;exm complemented and 1f
00CBDC  2               ;zero page save block
00CBDC  2               varblk:
00CBDC  2  00 00        lowin:	.word	0
00CBDE  2  00 00        	.word	0		;save bufadd
00CBE0  2  00 00        	.word	0		;save alcpnt
00CBE2  2  00 00        	.word	0		;save chkpnt
00CBE4  2               
00CBE4  1               		.include "simnhy.asm"
00CBE4  2               ;________________________________________________________________________________________________________________________________
00CBE4  2               ;
00CBE4  2               ;	Nhyodyne dos/65 system interface module (sim)
00CBE4  2               ;
00CBE4  2               ;  DWERNER 12/20/2021 	ported to Nhyodyne
00CBE4  2               ;________________________________________________________________________________________________________________________________
00CBE4  2               
00CBE4  2               		.include "macro.asm"
00CBE4  3               ;__MACRO___________________________________________________________________________________________________________________
00CBE4  3               ;
00CBE4  3               ; 	Macros for the betterment of Mankind
00CBE4  3               ;________________________________________________________________________________________________________________________________
00CBE4  3               ;
00CBE4  3               
00CBE4  3               .macro          PRTDBG      message
00CBE4  3               .LOCAL p1
00CBE4  3               .LOCAL p2
00CBE4  3               .LOCAL p3
00CBE4  3               .LOCAL p4
00CBE4  3               .LOCAL p5
00CBE4  3                 .if     .paramcount <> 1
00CBE4  3                       .error  "Too few parameters for macro PRTDBG"
00CBE4  3                       .endif
00CBE4  3                       .if DEBUG=1
00CBE4  3                       PHA
00CBE4  3                       PHX
00CBE4  3                       PHY
00CBE4  3                       LDX #$00
00CBE4  3               p1:
00CBE4  3                       LDA p4,x
00CBE4  3                       INX
00CBE4  3                       CMP #'$'
00CBE4  3                       BEQ p2
00CBE4  3                       JSR conwrt
00CBE4  3                       JMP p1
00CBE4  3               p2:
00CBE4  3                       LDA #13
00CBE4  3                       jsr conwrt
00CBE4  3                       LDA #10
00CBE4  3                       jsr conwrt
00CBE4  3                       PLY
00CBE4  3                       plx
00CBE4  3                       pla
00CBE4  3                       JMP p5
00CBE4  3               p4:
00CBE4  3                       .BYTE message
00CBE4  3               p5:
00CBE4  3                       .endif
00CBE4  3               .endmacro
00CBE4  3               
00CBE4  3               .macro          PRTS      message
00CBE4  3               .LOCAL p1
00CBE4  3               .LOCAL p2
00CBE4  3               .LOCAL p3
00CBE4  3               .LOCAL p4
00CBE4  3               .LOCAL p5
00CBE4  3                 .if     .paramcount <> 1
00CBE4  3                       .error  "Too few parameters for macro PRTS"
00CBE4  3                       .endif
00CBE4  3                       PHA
00CBE4  3                       PHX
00CBE4  3                       PHY
00CBE4  3                       LDX #$00
00CBE4  3               p1:
00CBE4  3                       LDA p4,x
00CBE4  3                       INX
00CBE4  3                       CMP #'$'
00CBE4  3                       BEQ p2
00CBE4  3                       JSR conwrt
00CBE4  3                       JMP p1
00CBE4  3               p2:
00CBE4  3                       PLY
00CBE4  3                       plx
00CBE4  3                       pla
00CBE4  3                       JMP p5
00CBE4  3               p4:
00CBE4  3                       .BYTE message
00CBE4  3               p5:
00CBE4  3               .endmacro
00CBE4  3               
00CBE4  3               
00CBE4  3               
00CBE4  3               
00CBE4  3               ;__PRTHEXBYTE__________________________________________________
00CBE4  3               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
00CBE4  3               ;______________________________________________________________
00CBE4  3               PRTHEXBYTE:
00CBE4  3  48                   PHA
00CBE5  3  DA                   PHX
00CBE6  3  5A                   PHY
00CBE7  3  AA                   TAX				; SAVE A REGISTER
00CBE8  3  4A                   LSR 				; SHIFT HIGH NIBBLE TO LOW NIBBLE
00CBE9  3  4A                   LSR 				;
00CBEA  3  4A                   LSR 				;
00CBEB  3  4A                   LSR 				;
00CBEC  3  18                   CLC               		; CLEAR CARRY
00CBED  3  20 F8 CB             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
00CBF0  3  8A                   TXA				; RESTORE ACCUMULATOR
00CBF1  3  20 F8 CB             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
00CBF4  3  7A                   PLY
00CBF5  3  FA                   plx
00CBF6  3  68                   PLA
00CBF7  3  60                   RTS
00CBF8  3               
00CBF8  3               ;__PRINT_DIGIT_________________________________________________
00CBF8  3               ;
00CBF8  3               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
00CBF8  3               ;
00CBF8  3               ;______________________________________________________________
00CBF8  3               PRINT_DIGIT:
00CBF8  3  29 0F                       AND #$0F				; STRIP OFF HIGH NIBBLE
00CBFA  3  09 30                       ORA #$30				; ADD $30 TO PRODUCE ASCII
00CBFC  3  C9 3A                       CMP #$3A               		; IS GREATER THAN 9
00CBFE  3  30 03                       BMI PRINT_DIGIT_OUT		; NO, SKIP ADD
00CC00  3  18                          CLC				; CLEAR CARRY
00CC01  3  69 07                       ADC #$07				; ADD ON FOR LETTER VALUES
00CC03  3               PRINT_DIGIT_OUT:					;
00CC03  3  4C B5 CE                    JMP conwrt              		; PRINT OUT CHAR
00CC06  3               
00CC06  3               NEWLINE:
00CC06  3  48                           pha
00CC07  3  DA                           PHX
00CC08  3  5A                           phy
00CC09  3  A9 0D                        LDA #$0D
00CC0B  3  20 B5 CE                     JSR conwrt
00CC0E  3  A9 0A                        LDA #$0A
00CC10  3  20 B5 CE                     Jsr conwrt
00CC13  3  7A                           ply
00CC14  3  FA                           plx
00CC15  3  68                           pla
00CC16  3  60                           rts
00CC17  3               
00CC17  3               PRTDEC:
00CC17  3  5A                           phy
00CC18  3  DA                           PHX
00CC19  3  48                           PHA
00CC1A  3  A0 00                        ldy #00
00CC1C  3  A2 FF                        LDX #$FF
00CC1E  3  38                           SEC
00CC1F  3               PrDec100:
00CC1F  3  E8                           INX
00CC20  3  E9 64                        SBC #100
00CC22  3  B0 FB                        BCS PrDec100            ;Count how many 100s
00CC24  3  69 64                        ADC #100
00CC26  3  20 40 CC                     JSR PrDecDigit          ;Print the 100s
00CC29  3  A2 FF                        LDX #$FF
00CC2B  3  38                           SEC                     ;Prepare for subtraction
00CC2C  3               PrDec10:
00CC2C  3  E8                           INX
00CC2D  3  E9 0A                        SBC #10
00CC2F  3  B0 FB                        BCS PrDec10             ;Count how many 10s
00CC31  3  69 0A                        ADC #10
00CC33  3  20 40 CC                     JSR PrDecDigit          ;Print the 10s
00CC36  3  AA                           TAX                     ;Pass 1s into X
00CC37  3  A0 01                        ldy #1
00CC39  3  20 40 CC                     JSR PrDecDigit          ;Print the 1s
00CC3C  3  68                           PLA
00CC3D  3  FA                           PLX
00CC3E  3  7A                           ply
00CC3F  3  60                           RTS
00CC40  3               PrDecDigit:
00CC40  3  48                           PHA
00CC41  3  C0 00                        cpy #$00
00CC43  3  D0 09                        bne PrDecDigit1
00CC45  3  8A                           txa
00CC46  3  A8                           tay
00CC47  3  C0 00                        cpy #$00
00CC49  3  D0 03                        bne PrDecDigit1
00CC4B  3  4C 54 CC                     jmp PrDecDigit2
00CC4E  3               PrDecDigit1:
00CC4E  3  8A                           TXA                     ;Save A, pass digit to A
00CC4F  3  09 30                        ORA #'0'
00CC51  3  20 B5 CE                     JSR  conwrt             ;Convert to character and print it
00CC54  3               PrDecDigit2:
00CC54  3  68                           PLA
00CC55  3  60                           RTS                     ;Restore A and return
00CC56  3               
00CC56  2               
00CC56  2               USESERIAL 	= 	1	; SET TO ONE SERIAL CONSOLE IO
00CC56  2               USEFLOPPYA 	= 	0	; SET TO ONE FOR FLOPPY = "A"
00CC56  2               USEFLOPPYB 	= 	0	; SET TO ONE FOR FLOPPY = "B"
00CC56  2               USEIDEC 	= 	1	; SET TO ONE FOR IDE HDD="C"
00CC56  2               USEDSKY 	= 	0	; SEND INFO TO DSKY
00CC56  2               USEDSKYNG 	= 	1	; SEND INFO TO DSKYNG
00CC56  2               DSKY_KBD	=	1	; USE DSKY KEYBOARD?
00CC56  2               DEFDRV  	=	2	; SET TO DEFAULT DRIVE LETTER
00CC56  2               USEDISKIOV1     = 	0	; Floppy and IDE card is  DISK IO V1
00CC56  2               USEDISKIOV3     = 	0	; Floppy and IDE card is  DISK IO V3
00CC56  2               
00CC56  2               FLPA35		=	0	; set to 1 if floppy a is A 3.5" 80 track drive (0= 5.25" 40 track drive)
00CC56  2               FLPB35		=	0	; set to 1 if floppy a is B 3.5" 80 track drive (0= 5.25" 40 track drive)
00CC56  2               
00CC56  2               DSKYOSC         =	100000
00CC56  2               
00CC56  2               ;dos/65 system interface module (sim)
00CC56  2               ;version 3.00
00CC56  2               ;this version is designed to work with the N8VEM Host Processor
00CC56  2               
00CC56  2               ;fixed parameters
00CC56  2               simstart:
00CC56  2               
00CC56  2               ;my system i/o routines in rom
00CC56  2               
00CC56  2               ;pem constants on entry to write
00CC56  2               wrall	=	0		;write to allocated
00CC56  2               wrdir	=	1		;write to directory
00CC56  2               wrual	=	2		;write to unallocated
00CC56  2               ;page zero and system ram assignments
00CC56  2               dmaadr	=	$f4		;pointer for r/w
00CC56  2               mvepnt	=	$f2		;host buffer location
00CC56  2               OUTMSG_W =	$F0		;pointer for OutMsg
00CC56  2               SRC	 =	$EE		;pointer for OutMsg
00CC56  2               DEST	 =	$EC		;pointer for OutMsg
00CC56  2               
00CC56  2               nsects	=	(simstart-ccm)/128	;number sectors
00CC56  2               
00CC56  2               ;main program
00CC56  2               ;jump vector used by pem
00CC56  2  4C AE CD     sim:	jmp	boot		;from cold start
00CC59  2  4C 21 CE     wboote:	jmp	wboot		;from warm boot
00CC5C  2  4C AF CE     	jmp	consts		;check for input
00CC5F  2  4C B2 CE     	jmp	conrde		;get input
00CC62  2  4C B5 CE     	jmp	conwrt		;send to terminal
00CC65  2  4C B8 CE     	jmp	prnwrt		;printer output
00CC68  2  4C B9 CE     	jmp	punwrt		;punch output
00CC6B  2  4C BA CE     	jmp	rdrinp		;reader input
00CC6E  2  4C 5A CE     	jmp	home		;home drive
00CC71  2  4C 29 CE     	jmp	seldsk		;select disk
00CC74  2  4C 5E CE     	jmp	seltrk		;set track
00CC77  2  4C 66 CE     	jmp	selsec		;set sector
00CC7A  2  4C AA CE     	jmp	setdma		;set buffer address
00CC7D  2  4C 6D CE     	jmp	read		;read sector
00CC80  2  4C 8B CE     	jmp	write		;write sector
00CC83  2  A9 01        	lda	#1		;printer always ready
00CC85  2  60           	rts
00CC86  2  4C BB CE     	jmp	rdtime		;clock entry
00CC89  2  4C BC CE     	jmp	xlate		;translate
00CC8C  2               
00CC8C  2               ;console definition block
00CC8C  2               sysdef:
00CC8C  2  08           	.byte	8		;backspace
00CC8D  2  01           	.byte	1		;clear to end of line
00CC8E  2  0C           	.byte	$c		;forward space
00CC8F  2  00           	.byte	0		;normal video
00CC90  2  5E           	.byte	'^'		;invert video
00CC91  2  18           	.byte	24		;lines per screen
00CC92  2  50           	.byte	80		;char per line
00CC93  2  0C           	.byte	$c		;formfeed
00CC94  2  1E           	.byte	$1e		;home
00CC95  2  02           	.byte	2		;clear to end of screen
00CC96  2               
00CC96  2               ;opening id message
00CC96  2  0D 0A        opnmsg:	.byte	cr,lf
00CC98  2               
00CC98  2  64 38 38 38      	.BYTE "d8888b.  .d88b.  .d8888.    dD     ooooo",cr,lf
00CC9C  2  38 62 2E 20  
00CCA0  2  20 2E 64 38  
00CCC2  2  38 38 20 20      	.BYTE "88  `8D .8P  Y8. 88   YP   d8     8P~~~~",cr,lf
00CCC6  2  60 38 44 20  
00CCCA  2  2E 38 50 20  
00CCEC  2  38 38 20 20      	.BYTE "88   88 88    88 `8bo.    d8     dP",cr,lf
00CCF0  2  20 38 38 20  
00CCF4  2  38 38 20 20  
00CD11  2  38 38 20 20      	.BYTE "88   88 88    88   `Y8b. d8888b. V8888b.",cr,lf,0
00CD15  2  20 38 38 20  
00CD19  2  38 38 20 20  
00CD3C  2               opnmsg1:
00CD3C  2  38 38 20 20      	.BYTE "88  .8D `8b  d8' db   8D 88  `8D     `8D",cr,lf
00CD40  2  2E 38 44 20  
00CD44  2  60 38 62 20  
00CD66  2  59 38 38 38      	.BYTE "Y8888D   `Y88P   `8888Y  `8888P  88oobY",cr,lf
00CD6A  2  38 44 20 20  
00CD6E  2  20 60 59 38  
00CD8F  2  11 44 4F 53  	.byte 17,"DOS/65 ON THE NHYODYNE 3.00",cr,lf,0
00CD93  2  2F 36 35 20  
00CD97  2  4F 4E 20 54  
00CDAE  2               
00CDAE  2               
00CDAE  2               ;cold entry from loader
00CDAE  2               boot:
00CDAE  2  78           	SEI 			; DISABLE INTERRUPTS
00CDAF  2  A2 FF        	ldx	#$ff		;set stack
00CDB1  2  9A           	txs			;pointer
00CDB2  2  D8           	cld			;set binary mode
00CDB3  2               
00CDB3  2               	PRTDBG "OS Starting$"
00CDB3  2               
00CDB3  2  A9 96         	lda	#<opnmsg	;point to message
00CDB5  2  A0 CC        	ldy	#>opnmsg
00CDB7  2  20 BD CE     	jsr	outmsg		;send it
00CDBA  2  A9 3C         	lda	#<opnmsg1
00CDBC  2  A0 CD        	ldy	#>opnmsg1
00CDBE  2  20 BD CE     	jsr	outmsg		;send it
00CDC1  2               
00CDC1  2  20 06 CC     	JSR 	NEWLINE
00CDC4  2                 .IF USEFLOPPYA=1
00CDC4  2               ;  	PRTDBG "Init floppy A$"
00CDC4  2               ;  	lda	#0			;set zero
00CDC4  2               ;	jsr	seldsk		;and select drive zero
00CDC4  2               ;	JSR	SETUPDRIVE
00CDC4  2                 .ENDIF
00CDC4  2               
00CDC4  2  20 5B D9     	JSR	MD_INIT
00CDC7  2               
00CDC7  2                   .IF USEIDEC=1
00CDC7  2  20 AF D0         	JSR	PPIDE_INIT
00CDCA  2                 .ENDIF
00CDCA  2               
00CDCA  2                 .IF USEDSKY=1
00CDCA  2                	PRTDBG "Init DSKY$"
00CDCA  2                 	JSR	DSKYINIT
00CDCA  2                 	JSR	SEGDISPLAY
00CDCA  2                 .ENDIF
00CDCA  2               
00CDCA  2                  .IF USEDSKYNG=1
00CDCA  2  20 04 D6       	JSR	DSKY_INIT
00CDCD  2  20 63 D8       	JSR	DSKY_PUTLED
00CDD0  2  54 6E 5C 5E  	.BYTE 	$54,$6E,$5C,$5E,$6E,$54,$79,$40
00CDD4  2  6E 54 79 40  
00CDD8  2  20 9F D8     	JSR 	DSKY_BEEP
00CDDB  2                 .ENDIF
00CDDB  2               
00CDDB  2               
00CDDB  2  A9 44        	LDA 	#<cnstxt	; STORE POINTER TO COMMAND LINE
00CDDD  2  85 30        	STA 	cmdlnp
00CDDF  2  A9 BF        	LDA 	#>cnstxt
00CDE1  2  85 31        	STA 	cmdlnp+1
00CDE3  2               
00CDE3  2               
00CDE3  2               
00CDE3  2  A9 4A        	LDA 	#<dskcfg	; STORE POINTER TO DISK CONFIG TABLE FOR APPS
00CDE5  2  85 2E        	STA 	dskcfpc
00CDE7  2  A9 CE        	LDA 	#>dskcfg
00CDE9  2  85 2F        	STA 	dskcfpc+1
00CDEB  2  20 37 CF     	JSR 	DSPL_DSK_CFG	; DISPLAY DISK CONFIG TO USERS
00CDEE  2               
00CDEE  2               
00CDEE  2               				;set up jumps into dos/65 in page one
00CDEE  2               setup:
00CDEE  2  20 9F D9     	JSR	MD_REINIT
00CDF1  2  A2 00        	ldx	#0		;clear index
00CDF3  2               				;first clear key dba variables
00CDF3  2  8E 6E DB     	stx	hstact		;host buffer inactive
00CDF6  2  8E 6F DB     	stx	unacnt		;clear unalloc count
00CDF9  2  BD 1B CE     setupl:	lda	inttbl,x	;get byte
00CDFC  2  9D 00 01     	sta	$100,x		;insert at start
00CDFF  2  E8           	inx
00CE00  2  E0 06        	cpx	#6
00CE02  2  D0 F5        	bne	setupl		;loop until done
00CE04  2  A9 28        	lda	#<dflbuf	;get low buffer
00CE06  2  A0 01        	ldy	#>dflbuf	;and high
00CE08  2  20 AA CE     	jsr	setdma		;and set
00CE0B  2  AD 68 DB     	lda	sekdsk		;get disk
00CE0E  2               
00CE0E  2  A9 02        	lda	#DEFDRV		;set zero
00CE10  2  20 29 CE     	jsr	seldsk		;and select drive zero
00CE13  2  20 5A CE     	jsr	home		;home that drive
00CE16  2               
00CE16  2               	PRTDBG "Start CCM$"
00CE16  2  A9 02        	lda	#DEFDRV		;set zero
00CE18  2  4C 03 B8     	jmp	ccm		;and go to ccm
00CE1B  2               ;initialization table
00CE1B  2  4C 59 CC 4C  inttbl:	.byte	$4c,<wboote,>wboote,$4c,<pem,>pem
00CE1F  2  FE BF        
00CE21  2               ;warm boot-read dos/65 back except sim and then
00CE21  2               ; jump to ccm.
00CE21  2               
00CE21  2               
00CE21  2               wboot:
00CE21  2  78           	SEI 			; DISABLE INTERRUPTS
00CE22  2  A2 FF        	ldx	#$ff		;set stack
00CE24  2  9A           	txs			;pointer
00CE25  2  D8           	cld			;set binary mode
00CE26  2               
00CE26  2  4C EE CD     	jmp	setup		;go setup
00CE29  2               
00CE29  2               
00CE29  2               
00CE29  2               ;__SELDSK_________________________________________________________________________________________________
00CE29  2               ;
00CE29  2               ; 	PERFORM DOS/65 DISK DRIVE SELECT
00CE29  2               ;________________________________________________________________________________________________________
00CE29  2               ;select disk
00CE29  2               seldsk:
00CE29  2  29 07        	and	#7		;three lsbs only
00CE2B  2  8D 68 DB     	sta	sekdsk		;save for later
00CE2E  2                .IF (USEFLOPPYA=1 | USEFLOPPYB=1)
00CE2E  2               	jsr	MOTOROFF	; TURN OFF ALL FLOPPY MOTORS
00CE2E  2                .ENDIF
00CE2E  2  AD 68 DB     	LDA	sekdsk		;save for later
00CE31  2  0A           	asl	a		;multiply by two
00CE32  2  AA           	tax			;make an Index
00CE33  2  BD 3A CE     	lda	dcbtbl,x	;get address
00CE36  2  BC 3B CE     	ldy	dcbtbl+1,x
00CE39  2  60           	rts
00CE3A  2               
00CE3A  2               ;table of dcb addresses
00CE3A  2  F8 DA        dcbtbl:	.word	dcba		; A
00CE3C  2  06 DB        	.word	dcbb		; B
00CE3E  2  14 DB        	.word	dcbc		; C
00CE40  2  22 DB        	.word	dcbd		; D
00CE42  2  30 DB        	.word	dcbe		; E
00CE44  2  3E DB        	.word	dcbf		; F
00CE46  2  4C DB        	.word	dcbg		; G
00CE48  2  5A DB        	.word	dcbh		; H
00CE4A  2               
00CE4A  2               ; disk configuration table
00CE4A  2               dskcfg:
00CE4A  2  00 00        	.byte $00,$00		;  disk A: unit,slice  (invalid for floppy and RAM disks)
00CE4C  2  01 00        	.byte $01,$00		;  disk B: unit,slice  (invalid for floppy and RAM disks)
00CE4E  2  30 00        	.byte $30,$00		;  disk C: unit,slice
00CE50  2  30 01        	.byte $30,$01		;  disk D: unit,slice
00CE52  2  30 02        	.byte $30,$02		;  disk E: unit,slice
00CE54  2  30 03        	.byte $30,$03		;  disk F: unit,slice
00CE56  2  30 04        	.byte $30,$04		;  disk G: unit,slice
00CE58  2  30 06        	.byte $30,$06		;  disk H: unit,slice
00CE5A  2               
00CE5A  2               ;__HOME__________________________________________________________________________________________________
00CE5A  2               ;
00CE5A  2               ; 	PERFORM DOS/65 HEAD HOME
00CE5A  2               ;________________________________________________________________________________________________________
00CE5A  2               home:
00CE5A  2  A9 00        	lda	#$00
00CE5C  2  A0 00        	ldy	#$00
00CE5E  2               
00CE5E  2               ;__SELTRK________________________________________________________________________________________________
00CE5E  2               ;
00CE5E  2               ; 	PERFORM DOS/65 SELECT TRACK
00CE5E  2               ;
00CE5E  2               ;	A=TRACK LOW BYTE
00CE5E  2               ;	Y=TRACK HIGH BYTE
00CE5E  2               ;________________________________________________________________________________________________________
00CE5E  2               seltrk:
00CE5E  2  18           	CLC
00CE5F  2  8D 70 DB     	sta	sektrk		;save number
00CE62  2  8C 71 DB     	sty	sektrk+1
00CE65  2  60           	rts
00CE66  2               
00CE66  2               ;__SELSEC________________________________________________________________________________________________
00CE66  2               ;
00CE66  2               ; 	PERFORM DOS/65 SECTOR SELECT
00CE66  2               ;
00CE66  2               ;	A=SECTOR LOW BYTE
00CE66  2               ;	Y=SECTOR HIGH BYTE
00CE66  2               ;________________________________________________________________________________________________________
00CE66  2               selsec:
00CE66  2  8D 72 DB     	sta	seksec		;save low and high
00CE69  2  8C 73 DB     	sty	seksec+1
00CE6C  2  60           	rts
00CE6D  2               
00CE6D  2               ;__READ__________________________________________________________________________________________________
00CE6D  2               ;
00CE6D  2               ; 	PERFORM DOS/65 SECTOR READ
00CE6D  2               ;________________________________________________________________________________________________________
00CE6D  2               read:
00CE6D  2  20 1B CF     	JSR 	GET_DRIVE_DEVICE	;
00CE70  2  29 F0        	and 	#$F0			; only want first nybble
00CE72  2  C9 00        	CMP 	#$00
00CE74  2  D0 04        	BNE 	:+			; not MD drive
00CE76  2               	;RAM
00CE76  2  20 12 DA     	JSR 	MD_READ_SECTOR
00CE79  2  60           	RTS				;
00CE7A  2               :
00CE7A  2  C9 20        	CMP 	#$20
00CE7C  2  D0 03        	BNE 	:+			; not floppy drive
00CE7E  2               	;FD
00CE7E  2                 	.IF USEFLOPPYA=1 || USEFLOPPYB=1
00CE7E  2                 	JMP	READFL			;
00CE7E  2                 	.else
00CE7E  2  A9 FF          	LDA	#$FF			;
00CE80  2  60           	RTS				;
00CE81  2                 	.ENDIF
00CE81  2               :
00CE81  2  C9 30        	CMP 	#$30
00CE83  2  D0 03        	BNE 	:+			; invalid drive
00CE85  2               	;PPIDE
00CE85  2                 	.IF USEIDEC=1
00CE85  2  4C 53 D3     	JMP	IDE_READ_SECTOR		;
00CE88  2                 	.ENDIF
00CE88  2               :
00CE88  2  A9 FF        	LDA	#$FF			; signal error
00CE8A  2  60           	RTS				;
00CE8B  2               
00CE8B  2               
00CE8B  2               ;__WRITE_________________________________________________________________________________________________
00CE8B  2               ;
00CE8B  2               ; 	PERFORM DOS/65 SECTOR WRITE
00CE8B  2               ;________________________________________________________________________________________________________
00CE8B  2               write:
00CE8B  2  20 1B CF     	JSR 	GET_DRIVE_DEVICE	;
00CE8E  2  29 F0        	and 	#$F0			; only want first nybble
00CE90  2               
00CE90  2  C9 00        	CMP 	#$00
00CE92  2  D0 04        	BNE 	:+			; not MD Drive
00CE94  2               	;MD
00CE94  2  20 46 DA     	JSR 	MD_WRITE_SECTOR
00CE97  2               
00CE97  2  60           	RTS				;
00CE98  2               :
00CE98  2  C9 20        	CMP 	#$20
00CE9A  2  D0 03        	BNE 	:+			; not floppy drive
00CE9C  2               	;FD
00CE9C  2                 	.IF USEFLOPPYA=1 || USEFLOPPYB=1
00CE9C  2                 	Jsr	WRITEFL			;
00CE9C  2               	RTS				;
00CE9C  2                 	.else
00CE9C  2  A9 FF          	LDA	#$FF			;
00CE9E  2  60           	RTS				;
00CE9F  2                 	.ENDIF
00CE9F  2               :
00CE9F  2  C9 30        	CMP 	#$30
00CEA1  2  D0 04        	BNE 	writex			; not ppide
00CEA3  2               	;PPIDE
00CEA3  2                 	.IF USEIDEC=1
00CEA3  2  20 AA D3     	JSR	IDE_WRITE_SECTOR
00CEA6  2  60           	RTS				;
00CEA7  2                 	.else
00CEA7  2                 	LDA	#$FF			;
00CEA7  2               	RTS				;
00CEA7  2                 	.ENDIF
00CEA7  2               writex:
00CEA7  2  A9 FF        	LDA	#$FF			; signal error
00CEA9  2  60           	RTS				;
00CEAA  2               
00CEAA  2               
00CEAA  2               ;__SETDMA________________________________________________________________________________________________
00CEAA  2               ;
00CEAA  2               ; 	PERFORM DOS/65 BUFFER ADDRESS SELECTION
00CEAA  2               ;
00CEAA  2               ;	A=BUFFER LOW BYTE
00CEAA  2               ;	Y=BUFFER HIGH BYTE
00CEAA  2               ;________________________________________________________________________________________________________
00CEAA  2               setdma:
00CEAA  2  85 F4        	sta	dmaadr		;store low
00CEAC  2  84 F5        	sty	dmaadr+1	;and high
00CEAE  2  60           	rts
00CEAF  2               
00CEAF  2               
00CEAF  2               ;__CONSTS________________________________________________________________________________________________
00CEAF  2               ;
00CEAF  2               ; 	GET DOS/65 CONSOLE STATUS
00CEAF  2               ;________________________________________________________________________________________________________
00CEAF  2               consts:
00CEAF  2  4C 9D D0     	jmp	SERIALSTATUS
00CEB2  2               
00CEB2  2               ;__CONRDE________________________________________________________________________________________________
00CEB2  2               ;
00CEB2  2               ; 	PERFORM DOS/65 CONSOLE READ
00CEB2  2               ;________________________________________________________________________________________________________
00CEB2  2               conrde:
00CEB2  2  4C 8E D0     	jmp 	RDSER1W
00CEB5  2               
00CEB5  2               ;__CONWRT________________________________________________________________________________________________
00CEB5  2               ;
00CEB5  2               ; 	PERFORM DOS/65 CONSOLE WRITE
00CEB5  2               ;________________________________________________________________________________________________________
00CEB5  2               conwrt:
00CEB5  2  4C 6F D0     	jmp 	WRSER1
00CEB8  2               
00CEB8  2               prnwrt:
00CEB8  2  60           	rts			;printer
00CEB9  2               punwrt:
00CEB9  2  60           	rts			;punch output
00CEBA  2               rdrinp:
00CEBA  2  60           	rts			;reader input
00CEBB  2               rdtime:
00CEBB  2  60           	rts			;read clock
00CEBC  2               xlate:
00CEBC  2  60           	rts			;sector translate
00CEBD  2               
00CEBD  2               
00CEBD  2               ;__OUTMSG________________________________________________________________________________________________
00CEBD  2               ;
00CEBD  2               ; 	WRITE A NULL TERMINATED STRING TO THE CONSOLE
00CEBD  2               ;
00CEBD  2               ;	A=POINTER LOW BYTE
00CEBD  2               ;	Y=POINTER HIGH BYTE
00CEBD  2               ;________________________________________________________________________________________________________
00CEBD  2               outmsg:				;output message
00CEBD  2  85 F0        	STA OUTMSG_W
00CEBF  2  84 F1        	STY OUTMSG_W+1
00CEC1  2  A0 00        	LDY #$00
00CEC3  2               OUTSTRLP:
00CEC3  2  B1 F0               	LDA (OUTMSG_W),Y 	; LOAD NEXT CHAR FROM STRING INTO ACC
00CEC5  2  C9 00               	CMP #$00		; IS NULL?
00CEC7  2  F0 07               	BEQ ENDOUTSTR		; YES, END PRINT OUT
00CEC9  2  20 B5 CE            	JSR conwrt  		; PRINT CHAR IN ACC
00CECC  2  C8                  	INY      		; Y=Y+1 (BUMP INDEX)
00CECD  2  4C C3 CE            	JMP OUTSTRLP		; DO NEXT CHAR
00CED0  2               ENDOUTSTR:
00CED0  2  60                  	RTS			; RETURN
00CED1  2               
00CED1  2               
00CED1  2               ;___DEBSECR512________________________________________________________________________________________
00CED1  2               ;
00CED1  2               ;	DEBLOCK 512 BYTE SECTOR FOR DOS/65
00CED1  2               ;
00CED1  2               ;________________________________________________________________________________________________________
00CED1  2               DEBSECR512:
00CED1  2  48           	PHA
00CED2  2  AD 72 DB     	LDA	seksec			;
00CED5  2  29 03        	AND	#$03			; GET SECTOR INDEX
00CED7  2  18           	CLC				;
00CED8  2  2A           	ROL	A			;
00CED9  2  AA           	TAX				;
00CEDA  2  BD F2 CE     	LDA	DEBTAB,X		;
00CEDD  2  85 EE        	STA     SRC
00CEDF  2  E8           	INX
00CEE0  2  BD F2 CE     	LDA	DEBTAB,X		;
00CEE3  2  85 EF        	STA	SRC+1			;
00CEE5  2  A5 F4        	LDA	dmaadr			;
00CEE7  2  85 EC        	STA	DEST			;
00CEE9  2  A5 F5        	LDA	dmaadr+1		;
00CEEB  2  85 ED        	STA	DEST+1			;
00CEED  2  20 28 CF     	JSR	COPY_DOS_SECTOR		;
00CEF0  2  68           	PLA
00CEF1  2  60           	RTS
00CEF2  2               
00CEF2  2               DEBTAB:
00CEF2  2  EF E3        	.word	hstbuf			;
00CEF4  2  6F E4        	.word	hstbuf+128		;
00CEF6  2  EF E4        	.word	hstbuf+256		;
00CEF8  2  6F E5        	.word	hstbuf+384		;
00CEFA  2               
00CEFA  2               
00CEFA  2               ;___BLKSECR512___________________________________________________________________________________________
00CEFA  2               ;
00CEFA  2               ;	BLOCK 512 SECTOR FOR DOS/65
00CEFA  2               ;
00CEFA  2               ;________________________________________________________________________________________________________
00CEFA  2               BLKSECR512:
00CEFA  2  48           	PHA
00CEFB  2  AD 72 DB     	LDA	seksec			;
00CEFE  2  29 03        	AND	#$03			; GET SECTOR INDEX
00CF00  2  18           	CLC				;
00CF01  2  2A           	ROL	A			;
00CF02  2  AA           	TAX				;
00CF03  2  BD F2 CE     	LDA	DEBTAB,X		;
00CF06  2  85 EC        	STA     DEST
00CF08  2  E8           	INX
00CF09  2  BD F2 CE     	LDA	DEBTAB,X		;
00CF0C  2  85 ED        	STA	DEST+1			;
00CF0E  2  A5 F4        	LDA	dmaadr			;
00CF10  2  85 EE        	STA	SRC			;
00CF12  2  A5 F5        	LDA	dmaadr+1		;
00CF14  2  85 EF        	STA	SRC+1			;
00CF16  2  20 28 CF     	JSR	COPY_DOS_SECTOR		;
00CF19  2  68           	PLA
00CF1A  2  60           	RTS
00CF1B  2               
00CF1B  2               ;___GET_DRIVE_DEVICE_____________________________________________________________________________________
00CF1B  2               ;
00CF1B  2               ;	GET SELECTED DEVICE TYPE AND UNIT, RETURN IN "A"
00CF1B  2               ;
00CF1B  2               ;________________________________________________________________________________________________________
00CF1B  2               GET_DRIVE_DEVICE:
00CF1B  2  DA           	PHX
00CF1C  2  AD 68 DB     	LDA	sekdsk			; GET DRIVE
00CF1F  2  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
00CF21  2  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
00CF22  2  AA           	TAX 				; MOVE TO X REGISTER
00CF23  2  BD 4A CE     	LDA 	dskcfg,X 		; GET device
00CF26  2  FA           	PLX
00CF27  2  60           	RTS
00CF28  2               
00CF28  2               
00CF28  2               ;___COPY_DOS_SECTOR______________________________________________________________________________________
00CF28  2               ;
00CF28  2               ;	COPY 128 BYTE SECTOR FOR DOS/65
00CF28  2               ;
00CF28  2               ;________________________________________________________________________________________________________
00CF28  2               COPY_DOS_SECTOR:
00CF28  2  5A           	PHY
00CF29  2  A0 00        	LDY	#$00			;
00CF2B  2               COPY_DOS_SECTOR1:
00CF2B  2  B1 EE        	LDA	(SRC),Y			;
00CF2D  2  91 EC        	STA	(DEST),Y		;
00CF2F  2  C8           	INY				;
00CF30  2  98           	TYA				;
00CF31  2  C9 80        	CMP	#$80			;
00CF33  2  D0 F6        	BNE	COPY_DOS_SECTOR1	;
00CF35  2  7A           	PLY
00CF36  2  60           	RTS
00CF37  2               
00CF37  2               ;___DSPL_DSK_CFG_________________________________________________________________________________________
00CF37  2               ;
00CF37  2               ;	DISPLAY THE DISK CONFIGURATION FOR THE USER
00CF37  2               ;
00CF37  2               ;________________________________________________________________________________________________________
00CF37  2               DSPL_DSK_CFG:
00CF37  2  20 06 CC     	JSR 	NEWLINE
00CF3A  2  48 DA 5A A2  	PRTS "Disk Configuration:$"
00CF3E  2  00 BD 53 CF  
00CF42  2  E8 C9 24 F0  
00CF67  2  20 06 CC     	JSR 	NEWLINE
00CF6A  2  A2 00        	ldx 	#0
00CF6C  2               DSPL_DSK_CFG_1:
00CF6C  2  48 DA 5A A2  	PRTS "    $"		; MAKE IT PRETTY :)
00CF70  2  00 BD 85 CF  
00CF74  2  E8 C9 24 F0  
00CF8A  2  8A           	TXA
00CF8B  2  4A           	LSR	A
00CF8C  2  18           	CLC
00CF8D  2  69 41        	ADC 	#'A'
00CF8F  2  20 B5 CE     	JSR 	conwrt
00CF92  2  A9 3A        	LDA 	#':'
00CF94  2  20 B5 CE     	JSR 	conwrt
00CF97  2  A9 3D        	LDA 	#'='
00CF99  2  20 B5 CE     	JSR 	conwrt
00CF9C  2  20 B4 CF     	JSR 	prtdevice	; PRINT DEVICE NAME FROM TABLE (X)
00CF9F  2  A9 3A        	LDA 	#':'
00CFA1  2  20 B5 CE     	JSR 	conwrt
00CFA4  2  E8           	INX				; WANT SECOND BYTE OF ENTRY
00CFA5  2  BD 4A CE     	LDA 	dskcfg,x 		; GET SLICE
00CFA8  2  20 17 CC     	JSR 	PRTDEC 			; PRINT SLICE IN DECIMAL (A)
00CFAB  2  E8           	INX
00CFAC  2  20 06 CC     	JSR 	NEWLINE
00CFAF  2  E0 10        	CPX 	#16
00CFB1  2  D0 B9        	BNE 	DSPL_DSK_CFG_1
00CFB3  2  60           	RTS
00CFB4  2               
00CFB4  2               ; 	DEVICE TABLE:
00CFB4  2               ;	$00	MD
00CFB4  2               ;	$2x	FLOPPY
00CFB4  2               ;	$3x	IDE
00CFB4  2               prtdevice:
00CFB4  2  BD 4A CE     	LDA 	dskcfg,X 		; GET DEVICE TYPE
00CFB7  2  48           	PHA
00CFB8  2  29 F0        	AND 	#$F0 			; FILTER OUT UNIT
00CFBA  2  C9 00        	CMP 	#$00
00CFBC  2  D0 1F        	BNE 	prtdevice1
00CFBE  2  48 DA 5A A2  	PRTS "MD$"
00CFC2  2  00 BD D7 CF  
00CFC6  2  E8 C9 24 F0  
00CFDA  2  4C 67 D0     	jmp 	prtdevice_done
00CFDD  2               prtdevice1:
00CFDD  2  C9 10        	CMP 	#$10
00CFDF  2  D0 20        	BNE 	prtdevice2
00CFE1  2  48 DA 5A A2  	PRTS "UNK$"
00CFE5  2  00 BD FA CF  
00CFE9  2  E8 C9 24 F0  
00CFFE  2  4C 67 D0     	jmp 	prtdevice_done
00D001  2               prtdevice2:
00D001  2  C9 20        	CMP 	#$20
00D003  2  D0 1F        	BNE 	prtdevice3
00D005  2  48 DA 5A A2  	PRTS "FD$"
00D009  2  00 BD 1E D0  
00D00D  2  E8 C9 24 F0  
00D021  2  4C 67 D0     	jmp 	prtdevice_done
00D024  2               prtdevice3:
00D024  2  C9 30        	CMP 	#$30
00D026  2  D0 22        	BNE 	prtdevicex
00D028  2  48 DA 5A A2  	PRTS "PPIDE$"
00D02C  2  00 BD 41 D0  
00D030  2  E8 C9 24 F0  
00D047  2  4C 67 D0     	jmp 	prtdevice_done
00D04A  2               prtdevicex:
00D04A  2  48 DA 5A A2  	PRTS "UNK$"
00D04E  2  00 BD 63 D0  
00D052  2  E8 C9 24 F0  
00D067  2               prtdevice_done:
00D067  2  68           	PLA
00D068  2  29 0F        	AND 	#$0F 			; FILTER OUT DEVICE
00D06A  2  20 17 CC     	JSR 	PRTDEC
00D06D  2  60           	RTS
00D06E  2               
00D06E  2               
00D06E  2               	.IF USESERIAL=1
00D06E  2               		.INCLUDE "dosser.asm"
00D06E  3               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
00D06E  3               ;
00D06E  3               ; 	Nhyodyne serial drivers for single serial port card
00D06E  3               ;
00D06E  3               ;	Entry points:
00D06E  3               ;		SERIALINIT  - called during OS init
00D06E  3               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
00D06E  3               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
00D06E  3               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00D06E  3               ;		SERIALSTATUS- GET UART STATUS
00D06E  3               ;________________________________________________________________________________________________________________________________
00D06E  3               ;
00D06E  3               
00D06E  3               
00D06E  3               ;*
00D06E  3               ;* HARDWARE I/O ADDRESSES
00D06E  3               ;*
00D06E  3               
00D06E  3               ; UART 16C550 SERIAL
00D06E  3               UART0       	=    	$0368           ; DATA IN/OUT
00D06E  3               UART1       	=    	$0369           ; CHECK RX
00D06E  3               UART2       	=    	$036A           ; INTERRUPTS
00D06E  3               UART3       	=    	$036B           ; LINE CONTROL
00D06E  3               UART4       	=    	$036C           ; MODEM CONTROL
00D06E  3               UART5          	=    	$036D           ; LINE STATUS
00D06E  3               UART6          	=    	$036E           ; MODEM STATUS
00D06E  3               UART7	       	=    	$036F           ; SCRATCH REG.
00D06E  3               
00D06E  3               
00D06E  3               ;__SERIALINIT____________________________________________________________________________________________________________________
00D06E  3               ;
00D06E  3               ;	INITIALIZE SERIAL PORTS
00D06E  3               ;________________________________________________________________________________________________________________________________
00D06E  3               ;
00D06E  3               SERIALINIT:
00D06E  3               ;	LDA	#$80			;
00D06E  3               ;	STA	UART3			; SET DLAB FLAG
00D06E  3               ;	LDA	#12			; SET TO 12 = 9600 BAUD
00D06E  3               ;	STA	UART0			; save baud rate
00D06E  3               ;	LDA	#00			;
00D06E  3               ;	STA	UART1			;
00D06E  3               ;	LDA	#03			;
00D06E  3               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
00D06E  3               ;	STA	UART4			;
00D06E  3               
00D06E  3  60           	RTS
00D06F  3               
00D06F  3               
00D06F  3               
00D06F  3               ;__WRSER1________________________________________________________________________________________________________________________
00D06F  3               ;
00D06F  3               ;	WRITE CHARACTER(A) TO UART
00D06F  3               ;________________________________________________________________________________________________________________________________
00D06F  3               ;
00D06F  3               WRSER1:
00D06F  3  48           	PHA
00D070  3               WRSER1a:
00D070  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D073  3  29 20        	AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
00D075  3  C9 00        	CMP     #$00
00D077  3  F0 F7        	BEQ	WRSER1a			; NO, WAIT FOR IT
00D079  3  68           	PLA
00D07A  3  8D 68 03     	STA	UART0			; THEN WRITE THE CHAR TO UART
00D07D  3  60           	RTS
00D07E  3               
00D07E  3               ;__RDSER1________________________________________________________________________________________________________________________
00D07E  3               ;
00D07E  3               ;	READ CHARACTER FROM UART TO (A)
00D07E  3               ;________________________________________________________________________________________________________________________________
00D07E  3               ;
00D07E  3               RDSER1:
00D07E  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D081  3  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D083  3  C9 00        	CMP 	#$00
00D085  3  F0 04        	BEQ	RDSER1N			; LOOP UNTIL DATA IS READY
00D087  3  AD 68 03     	LDA	UART0			; THEN READ THE CHAR FROM THE UART
00D08A  3  60           	RTS
00D08B  3               RDSER1N:
00D08B  3  A9 00        	LDA	#$00			;
00D08D  3  60           	RTS				;
00D08E  3               
00D08E  3               ;__RDSER1W_______________________________________________________________________________________________________________________
00D08E  3               ;
00D08E  3               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
00D08E  3               ;________________________________________________________________________________________________________________________________
00D08E  3               ;
00D08E  3               
00D08E  3               RDSER1W:
00D08E  3  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
00D091  3  29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D093  3  C9 00        		CMP 	#$00
00D095  3  F0 F7        		BEQ	RDSER1W			; LOOP UNTIL DATA IS READY
00D097  3  AD 68 03     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
00D09A  3  29 7F        		AND #$7F
00D09C  3  60           		RTS
00D09D  3               
00D09D  3               ;__SERIALSTATUS__________________________________________________________________________________________________________________
00D09D  3               ;
00D09D  3               ;	READ UARD STATUS
00D09D  3               ;________________________________________________________________________________________________________________________________
00D09D  3               ;
00D09D  3               SERIALSTATUS:
00D09D  3  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00D0A0  3  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
00D0A2  3  C9 00        	CMP 	#$00
00D0A4  3  F0 03        	BEQ	RDSTAT1			; NO, INDICATE NO CHAR
00D0A6  3  A9 FF        	LDA	#$FF			; GET DATA CHAR
00D0A8  3  60           	RTS
00D0A9  3               RDSTAT1:
00D0A9  3  A9 00        	LDA	#$00			; GET DATA CHAR
00D0AB  3  60           	RTS
00D0AC  3               
00D0AC  3               ; end
00D0AC  3               
00D0AC  2               	.ENDIF
00D0AC  2               	.IF USEIDEC=1
00D0AC  2               		.INCLUDE "doside.asm"
00D0AC  3               ;__IDE DRIVERS___________________________________________________________________________________________________________________
00D0AC  3               ;
00D0AC  3               ; 	Nhyodyne IDE disk drivers for Z80PPIDE card
00D0AC  3               ;
00D0AC  3               ;	Entry points:
00D0AC  3               ;		PPIDE_INIT   	- called during OS init
00D0AC  3               ;		IDE_READ_SECTOR - read a sector from drive
00D0AC  3               ;		IDE_WRITE_SECTOR- write a sector to drive
00D0AC  3               ;________________________________________________________________________________________________________________________________
00D0AC  3               ;
00D0AC  3               PPIDE_PPI	=	$0360		; PORT A
00D0AC  3               ;
00D0AC  3               PPIDELO		=	PPIDE_PPI+0	; LSB
00D0AC  3               PPIDEHI		=	PPIDE_PPI+1	; MSB
00D0AC  3               PPIDECNTRL	=	PPIDE_PPI+2	; Control Signals
00D0AC  3               PPIDEPPIC	=	PPIDE_PPI+3	; CONTROL BYTE PPI 82C55
00D0AC  3               
00D0AC  3               PPIDE_A0_LINE	=	$01		;DIRECT FROM 8255 TO IDE INTERFACE
00D0AC  3               PPIDE_A1_LINE	=	$02		;DIRECT FROM 8255 TO IDE INTERFACE
00D0AC  3               PPIDE_A2_LINE	=	$04		;DIRECT FROM 8255 TO IDE INTERFACE
00D0AC  3               PPIDE_CS0_LINE	=	$08		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0AC  3               PPIDE_CS1_LINE	=	$10		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0AC  3               PPIDE_WR_LINE	=	$20		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0AC  3               PPIDE_RD_LINE	=	$40		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0AC  3               PPIDE_RST_LINE	=	$80		;INVERTER BETWEEN 8255 AND IDE INTERFACE
00D0AC  3               
00D0AC  3               PPIDE_DATA	=	PPIDE_CS0_LINE
00D0AC  3               PPIDE_ERR	=	PPIDE_CS0_LINE + PPIDE_A0_LINE
00D0AC  3               PPIDE_SEC_CNT	=	PPIDE_CS0_LINE + PPIDE_A1_LINE
00D0AC  3               PPIDE_LBALOW	=	PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0AC  3               PPIDE_LBAMID	=	PPIDE_CS0_LINE + PPIDE_A2_LINE
00D0AC  3               PPIDE_LBAHI	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
00D0AC  3               PPIDE_DEVICE	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00D0AC  3               PPIDE_COMMAND	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0AC  3               PPIDE_STATUS	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0AC  3               PPIDE_CONTROL	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00D0AC  3               PPIDE_ASTATUS	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00D0AC  3               
00D0AC  3               
00D0AC  3               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
00D0AC  3               PPIDE_CMD_RECAL	=	$10
00D0AC  3               PPIDE_CMD_READ	=	$20
00D0AC  3               PPIDE_CMD_WRITE	=	$30
00D0AC  3               PPIDE_CMD_INIT	=	$91
00D0AC  3               PPIDE_CMD_ID	=	$EC
00D0AC  3               PPIDE_CMD_SPINDOWN=	$E0
00D0AC  3               PPIDE_CMD_SPINUP=	$E1
00D0AC  3               
00D0AC  3               
00D0AC  3               PPRD_IDE_8255	=	%10010010	;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
00D0AC  3               PPWR_IDE_8255	=	%10000000	;ALL THREE PORTS OUTPUT
00D0AC  3               
00D0AC  3               
00D0AC  3  00           PPIDEINDEX:	.byte	$00
00D0AD  3  00 00        PPIDETIMEOUT:	.byte	$00,$00
00D0AF  3               
00D0AF  3               ;__PPIDE_INIT_________________________________________________________________________________________
00D0AF  3               ;
00D0AF  3               ;  INIT AND DISPLAY IDE INFO
00D0AF  3               ;____________________________________________________________________________________________________
00D0AF  3               ;
00D0AF  3               PPIDE_INIT:
00D0AF  3                       PRTDBG "PPIDE INIT:$"
00D0AF  3  48 DA 5A A2  	PRTS "PPIDE :$"
00D0B3  3  00 BD C8 D0  
00D0B7  3  E8 C9 24 F0  
00D0D0  3  20 06 CC            	JSR	NEWLINE
00D0D3  3  20 45 D3     	JSR	IDE_PPIDETECT		; TEST FOR PPI HARDWARE
00D0D6  3  D0 35                BNE     IDE_ABORT      		; BAIL OUT IF NOT THERE
00D0D8  3               ;
00D0D8  3  48 DA 5A A2  	PRTS    " IO=0x$"
00D0DC  3  00 BD F1 D0  
00D0E0  3  E8 C9 24 F0  
00D0F8  3  A9 03        	LDA	#>PPIDE_PPI		; GET BASE PORT
00D0FA  3  20 E4 CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D0FD  3  A9 60               	LDA	#<PPIDE_PPI		; GET BASE PORT
00D0FF  3  20 E4 CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D102  3               ;
00D102  3  20 E0 D3     	JSR	PPIDE_RESET		; RESET THE BUS
00D105  3  20 9B D1     	JSR	PPIDE_PROBE		; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
00D108  3  B0 03        	BCS 	IDE_ABORT
00D10A  3  4C 36 D1     	JMP 	IDE_PRINT_INFO
00D10D  3               IDE_ABORT:
00D10D  3  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
00D111  3  00 BD 26 D1  
00D115  3  E8 C9 24 F0  
00D133  3  4C 97 D1     	JMP 	IDE_INITA
00D136  3               IDE_PRINT_INFO:
00D136  3  20 06 CC     	JSR	NEWLINE
00D139  3  48 DA 5A A2  	PRTS    " PPIDE0: Blocks=$"
00D13D  3  00 BD 52 D1  
00D141  3  E8 C9 24 F0  
00D163  3  A9 00        	LDA	#$00
00D165  3  20 24 D2     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
00D168  3  48 DA 5A A2  	PRTS    " PPIDE1: Blocks=$"
00D16C  3  00 BD 81 D1  
00D170  3  E8 C9 24 F0  
00D192  3  A9 01        	LDA	#$01
00D194  3  20 24 D2     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
00D197  3               IDE_INITA:
00D197  3  20 06 CC     	JSR	NEWLINE
00D19A  3  60           	RTS				; DONE
00D19B  3               ;
00D19B  3               ;__PPIDE_PROBE_______________________________________________________________________________________
00D19B  3               ;
00D19B  3               ;  PROBE FOR IDE HARDWARE
00D19B  3               ;____________________________________________________________________________________________________
00D19B  3               ;
00D19B  3               PPIDE_PROBE:
00D19B  3               ;
00D19B  3               	; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
00D19B  3               	; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
00D19B  3               	; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
00D19B  3               	; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
00D19B  3               	; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
00D19B  3               	; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
00D19B  3               	; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
00D19B  3               	; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
00D19B  3               
00D19B  3  A9 00        	LDA 	#$00
00D19D  3  8D 60 03     	STA 	PPIDELO 		; PPI PORT A, DATALO
00D1A0  3               
00D1A0  3  20 0B D4     	JSR	IDE_WAIT_NOT_BUSY	; WAIT FOR BUSY TO CLEAR
00D1A3  3  B0 34        	BCS 	PPIDE_PROBE_FAIL	; IF TIMEOUT, REPORT NO IDE PRESENT
00D1A5  3  A9 0F        	LDA	#PPIDE_STATUS		; GET STATUS
00D1A7  3  20 BA D5     	JSR	IDE_READ
00D1AA  3  8A           	TXA
00D1AB  3  29 40        	AND 	#%01000000
00D1AD  3  C9 00        	CMP 	#$00
00D1AF  3  F0 28        	BEQ 	PPIDE_PROBE_FAIL	; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
00D1B1  3               
00D1B1  3               	; CHECK SIGNATURE
00D1B1  3  A9 0A        	LDA	#PPIDE_SEC_CNT
00D1B3  3  20 BA D5     	JSR	IDE_READ
00D1B6  3  E0 01        	CPX 	#$01
00D1B8  3  D0 1F        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
00D1BA  3  A9 0B        	LDA	#PPIDE_LBALOW
00D1BC  3  20 BA D5     	JSR	IDE_READ
00D1BF  3  E0 01        	CPX 	#$01
00D1C1  3  D0 16        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
00D1C3  3  A9 0C        	LDA	#PPIDE_LBAMID
00D1C5  3  20 BA D5     	JSR	IDE_READ
00D1C8  3  E0 00        	CPX 	#$00
00D1CA  3  D0 0D        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
00D1CC  3  A9 0D        	LDA	#PPIDE_LBAHI
00D1CE  3  20 BA D5     	JSR	IDE_READ
00D1D1  3  E0 00        	CPX 	#$00
00D1D3  3  D0 04        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
00D1D5  3  18           	CLC
00D1D6  3  4C DA D1     	JMP 	PPIDE_PROBE_SUCCESS
00D1D9  3               PPIDE_PROBE_FAIL:
00D1D9  3  38           	SEC
00D1DA  3               PPIDE_PROBE_SUCCESS:
00D1DA  3  60           	RTS				; DONE, NOTE THAT A=0 AND Z IS SET
00D1DB  3               
00D1DB  3               
00D1DB  3               ;___IDE_IDENTIFY_TYPE____________________________________________________________________________________
00D1DB  3               ;
00D1DB  3               ; 	READ THE DISK TYPE AND DETERMINE IF IT IS USABLE BY DOS/65
00D1DB  3               ; 	A=IDE DEVICE (0=MST,1=SLV)
00D1DB  3               ;________________________________________________________________________________________________________
00D1DB  3               
00D1DB  3               IDE_IDENTIFY_TYPE:
00D1DB  3  48           	PHA
00D1DC  3  20 0B D4     	JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D1DF  3  B0 40        	BCS 	IDE_IDENTIFY_TYPE_ERROR	; IF TIMEOUT, REPORT ERROR
00D1E1  3  A9 00        	LDA 	#$00
00D1E3  3  8D 76 DB     	STA	debsehd
00D1E6  3  8D 74 DB     	STA	debcyll			; STORE IN TRACK (lsb)
00D1E9  3  8D 75 DB     	STA	debcylm			; STORE IN TRACK (msb)
00D1EC  3  68           	PLA				; GET DRIVE TYPE
00D1ED  3  20 80 D3     	JSR 	IDE_READ_SECTOR_DIRTY1
00D1F0  3  C9 FF        	CMP 	#$FF			; IS THERE A READ ERROR?
00D1F2  3  F0 2D        	BEQ 	IDE_IDENTIFY_TYPE_ERROR
00D1F4  3  AD ED E5     	LDA 	hstbuf+$01FE
00D1F7  3  C9 55        	CMP 	#$55
00D1F9  3  D0 23        	BNE 	IDE_IDENTIFY_TYPE_OK
00D1FB  3  AD EE E5     	LDA 	hstbuf+$01FF
00D1FE  3  C9 AA        	CMP 	#$AA
00D200  3  D0 1C        	BNE 	IDE_IDENTIFY_TYPE_OK
00D202  3  AD B1 E5     	LDA 	hstbuf+$01C2
00D205  3  C9 00        	CMP 	#$00
00D207  3  D0 18        	BNE 	IDE_IDENTIFY_TYPE_ERROR
00D209  3  AD C1 E5     	LDA 	hstbuf+$01D2
00D20C  3  C9 00        	CMP 	#$00
00D20E  3  D0 11        	BNE 	IDE_IDENTIFY_TYPE_ERROR
00D210  3  AD D1 E5     	LDA 	hstbuf+$01E2
00D213  3  C9 00        	CMP 	#$00
00D215  3  D0 0A        	BNE 	IDE_IDENTIFY_TYPE_ERROR
00D217  3  AD E1 E5     	LDA 	hstbuf+$01F2
00D21A  3  C9 00        	CMP 	#$00
00D21C  3  D0 03        	BNE 	IDE_IDENTIFY_TYPE_ERROR
00D21E  3               IDE_IDENTIFY_TYPE_OK:
00D21E  3  A9 00        	LDA 	#$00			; EVERYTHING IS AWESOME
00D220  3  60           	RTS
00D221  3               IDE_IDENTIFY_TYPE_ERROR:
00D221  3  A9 FF        	LDA 	#$FF			; SIGNIFY ERROR
00D223  3  60           	RTS
00D224  3               
00D224  3               
00D224  3               ;*__IDE_READ_INFO___________________________________________________________________________________
00D224  3               ;*
00D224  3               ;*  READ IDE INFORMATION
00D224  3               ;*	CARRY SET ON ERROR
00D224  3               ;* 	A=MST/SLV
00D224  3               ;*____________________________________________________________________________________________________
00D224  3               IDE_READ_INFO:
00D224  3               		PRTDBG "IDE Read INFORMATION$"
00D224  3  48           		PHA
00D225  3  48           		PHA
00D226  3               		; SET DRIVE BIT
00D226  3  29 01        		AND 	#$01			; ONLY WANT THE 1 BIT (MST/SLV)
00D228  3  0A           		asl	a			; SHIFT 4
00D229  3  0A           		asl	a			;
00D22A  3  0A           		asl	a			;
00D22B  3  0A           		asl	a			;
00D22C  3  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
00D22E  3  AA           		TAX
00D22F  3  A0 00        		LDY	#$00
00D231  3  A9 0E        		LDA	#PPIDE_DEVICE
00D233  3  20 D8 D5     		JSR	IDE_WRITE
00D236  3               
00D236  3               
00D236  3  20 0B D4     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D239  3  B0 4E        		BCS	IDE_READ_INFO_ABORT
00D23B  3  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
00D23D  3  A2 EC        		LDX	#PPIDE_CMD_ID
00D23F  3  20 D8 D5     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
00D242  3  20 33 D4     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
00D245  3  B0 42        		BCS	IDE_READ_INFO_ABORT
00D247  3  20 63 D4     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
00D24A  3  48 DA 5A A2  		PRTS    "0x$"
00D24E  3  00 BD 63 D2  
00D252  3  E8 C9 24 F0  
00D266  3  AD 6A E4     		LDA 	hstbuf+123
00D269  3  20 E4 CB     		JSR 	PRTHEXBYTE
00D26C  3  AD 69 E4     		LDA 	hstbuf+122
00D26F  3  20 E4 CB     		JSR 	PRTHEXBYTE
00D272  3  AD 68 E4     		LDA 	hstbuf+121
00D275  3  20 E4 CB     		JSR 	PRTHEXBYTE
00D278  3  AD 67 E4     		LDA 	hstbuf+120
00D27B  3  20 E4 CB     		JSR 	PRTHEXBYTE
00D27E  3  68           		PLA
00D27F  3  20 DB D1     		JSR 	IDE_IDENTIFY_TYPE
00D282  3  C9 00        		CMP 	#$00
00D284  3  D0 32        		BNE 	IDE_READ_INFO_BADFS
00D286  3  4C EA D2     		JMP 	IDE_READ_INFO_OK
00D289  3               IDE_READ_INFO_ABORT:
00D289  3  68           		PLA
00D28A  3  48 DA 5A A2  		PRTS    "NOT PRESENT$"		; NOT PRESENT
00D28E  3  00 BD A3 D2  
00D292  3  E8 C9 24 F0  
00D2AF  3  20 06 CC     		JSR	NEWLINE
00D2B2  3  68           		PLA
00D2B3  3  20 21 D3     		JSR 	IDE_REMOVE_DRIVE_ASSIGNMENTS
00D2B6  3  38           		SEC
00D2B7  3  60           		RTS				;
00D2B8  3               IDE_READ_INFO_BADFS:
00D2B8  3  48 DA 5A A2  		PRTS    " BAD FILESYSTEM$"	; NOT PRESENT
00D2BC  3  00 BD D1 D2  
00D2C0  3  E8 C9 24 F0  
00D2E1  3  20 06 CC     		JSR	NEWLINE
00D2E4  3  68           		PLA
00D2E5  3  20 21 D3     		JSR 	IDE_REMOVE_DRIVE_ASSIGNMENTS
00D2E8  3  38           		SEC
00D2E9  3  60           		RTS				;
00D2EA  3               IDE_READ_INFO_OK:
00D2EA  3  48 DA 5A A2  		PRTS    " FILE SYSTEM COMPATIBLE$" ; NOT PRESENT
00D2EE  3  00 BD 03 D3  
00D2F2  3  E8 C9 24 F0  
00D31B  3  20 06 CC     		JSR	NEWLINE
00D31E  3  68           		PLA
00D31F  3  18           		CLC
00D320  3  60           		RTS
00D321  3               
00D321  3               IDE_REMOVE_DRIVE_ASSIGNMENTS:
00D321  3  18           		CLC
00D322  3  69 30        		ADC	#$30
00D324  3  A2 00        		LDX 	#$00
00D326  3               @1:
00D326  3  DD 4A CE     		CMP 	dskcfg,X 		; GET device
00D329  3  F0 09        		BEQ 	@2
00D32B  3  E8           		INX
00D32C  3  E8           		INX
00D32D  3  E0 10        		CPX 	#16
00D32F  3  D0 F5        		bne 	@1
00D331  3  4C 44 D3     		jmp 	@3
00D334  3               @2:
00D334  3  48           		PHA
00D335  3  A9 00        		LDA 	#$00
00D337  3  9D 4A CE     		STA 	dskcfg,X 		; SET device
00D33A  3  E8           		INX
00D33B  3  9D 4A CE     		STA 	dskcfg,X 		; SET device
00D33E  3  68           		pla
00D33F  3  E8           		INX
00D340  3  E0 10        		CPX 	#16
00D342  3  D0 E2        		bne 	@1
00D344  3               @3:
00D344  3  60           		rts
00D345  3               
00D345  3               ;__IDE_PPIDETECT____________________________________________________________________________________
00D345  3               ;
00D345  3               ;  PROBE FOR PPI HARDWARE
00D345  3               ;____________________________________________________________________________________________________
00D345  3               ;
00D345  3               IDE_PPIDETECT:
00D345  3               ;
00D345  3               	; TEST FOR PPI EXISTENCE
00D345  3               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
00D345  3               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
00D345  3               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
00D345  3               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
00D345  3               	; INTERFERE WITH THE VALUE BEING READ.
00D345  3  20 FC D5     	JSR	SET_PPI_WR
00D348  3               ;
00D348  3  A9 00        	LDA     #$00			; VALUE ZERO
00D34A  3  8D 60 03     	STA	PPIDELO			; PUSH VALUE TO PORT
00D34D  3  AD 60 03     	LDA	PPIDELO			; GET PORT VALUE
00D350  3  C9 00                CMP     #$00
00D352  3  60           	RTS				; AND RETURN
00D353  3               ;
00D353  3               
00D353  3               
00D353  3               ;*__IDE_READ_SECTOR___________________________________________________________________________________
00D353  3               ;*
00D353  3               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
00D353  3               ;*
00D353  3               ;*____________________________________________________________________________________________________
00D353  3               IDE_READ_SECTOR:
00D353  3               		PRTDBG "IDE Read Sector$"
00D353  3  20 5A D3     		JSR 	IDE_READ_RAW_SECTOR
00D356  3  20 D1 CE     		JSR 	DEBSECR512
00D359  3  60           		RTS
00D35A  3               
00D35A  3               IDE_READ_RAW_SECTOR:
00D35A  3               		PRTDBG "IDE Read Raw Sector$"
00D35A  3  20 FF D4     	  	JSR	IDE_CONVERT_SECTOR	;
00D35D  3               
00D35D  3  AD 76 DB     		LDA	debsehd			; STORE CURRENT PARMS
00D360  3  CD 7B DB     		CMP	Cdebsehd		;
00D363  3  D0 13        		BNE	IDE_READ_SECTOR_DIRTY
00D365  3  AD 75 DB     		LDA	debcylm			;
00D368  3  CD 7A DB     		CMP	Cdebcylm		;
00D36B  3  D0 0B        		BNE	IDE_READ_SECTOR_DIRTY
00D36D  3  AD 74 DB     		LDA	debcyll			;
00D370  3  CD 79 DB     		CMP	Cdebcyll		;
00D373  3  D0 03        		BNE	IDE_READ_SECTOR_DIRTY
00D375  3  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
00D377  3  60           		RTS
00D378  3               
00D378  3               IDE_READ_SECTOR_DIRTY:
00D378  3               		PRTDBG "IDE Read Sector Buffer Dirty$"
00D378  3  20 0B D4     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D37B  3  B0 2A        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D37D  3  20 1B CF     		JSR 	GET_DRIVE_DEVICE
00D380  3               IDE_READ_SECTOR_DIRTY1:
00D380  3  20 CF D4     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
00D383  3  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
00D385  3  A2 20        		LDX	#PPIDE_CMD_READ
00D387  3  20 D8 D5     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
00D38A  3  20 33 D4     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
00D38D  3  B0 18        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D38F  3  20 63 D4     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
00D392  3  AD 76 DB     		LDA	debsehd			; STORE CURRENT PARMS
00D395  3  8D 7B DB     		STA	Cdebsehd		;
00D398  3  AD 74 DB     		LDA	debcyll			;
00D39B  3  8D 79 DB     		STA	Cdebcyll		;
00D39E  3  AD 75 DB     		LDA	debcylm			;
00D3A1  3  8D 7A DB     		STA	Cdebcylm		;
00D3A4  3               
00D3A4  3  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
00D3A6  3  60           		RTS
00D3A7  3               IDE_READ_SECTOR_DIRTY_ERROR:
00D3A7  3  A9 FF        		LDA	#$FF			; ZERO = 1 ON RETURN = OPERATION OK
00D3A9  3  60           		RTS
00D3AA  3               
00D3AA  3               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
00D3AA  3               ;*
00D3AA  3               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
00D3AA  3               ;*
00D3AA  3               ;*____________________________________________________________________________________________________
00D3AA  3               IDE_WRITE_SECTOR:
00D3AA  3               		PRTDBG "IDE Write Sector$"
00D3AA  3  20 5A D3     	  	JSR	IDE_READ_RAW_SECTOR	; determine physical sector
00D3AD  3  20 FA CE     	  	JSR	BLKSECR512		; block sector for writing
00D3B0  3  20 0B D4     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
00D3B3  3  B0 28        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D3B5  3  20 1B CF     		JSR 	GET_DRIVE_DEVICE
00D3B8  3  20 CF D4     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
00D3BB  3  A9 0F        		LDA	#PPIDE_COMMAND
00D3BD  3  A2 30        		LDX	#PPIDE_CMD_WRITE
00D3BF  3  20 D8 D5     		JSR	IDE_WRITE		;TELL DRIVE TO WRITE A SECTOR
00D3C2  3  20 33 D4     		JSR	IDE_WAIT_DRQ		;WAIT UNIT IT WANTS THE DATA
00D3C5  3  B0 16        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D3C7  3  20 98 D4     		JSR	IDE_WRITE_BUFFER	;GIVE THE DATA TO THE DRIVE
00D3CA  3  20 0B D4     		JSR	IDE_WAIT_NOT_BUSY	;WAIT UNTIL THE WRITE IS COMPLETE
00D3CD  3  B0 0E        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
00D3CF  3  A9 FF        		LDA	#$FF			; STORE CURRENT PARMS
00D3D1  3  8D 7B DB     		STA	Cdebsehd		;
00D3D4  3  8D 79 DB     		STA	Cdebcyll		;
00D3D7  3  8D 7A DB     		STA	Cdebcylm		;
00D3DA  3               
00D3DA  3  A9 00        		LDA	#$00			; ZERO ON RETURN = OPERATION OK
00D3DC  3  60           		RTS
00D3DD  3               IDE_WRITE_SECTOR_ERROR:
00D3DD  3  A9 FF        		LDA	#$FF			; 1 ON RETURN = OPERATION FAIL
00D3DF  3  60           		RTS
00D3E0  3               
00D3E0  3               ;*__PPIDE_RESET____________________________________________________________________________________
00D3E0  3               ;*
00D3E0  3               ;*  SOFT RESET IDE CHANNEL
00D3E0  3               ;*
00D3E0  3               ;*____________________________________________________________________________________________________
00D3E0  3               PPIDE_RESET:
00D3E0  3                 	PRTDBG "IDE Reset$"
00D3E0  3  A9 00        		LDA	#$00
00D3E2  3  8D 76 DB     		STA	debsehd
00D3E5  3  8D 74 DB     		STA	debcyll
00D3E8  3  8D 75 DB     		STA	debcylm
00D3EB  3  A9 FF        		LDA	#$FF			;
00D3ED  3  8D 7B DB     		STA	Cdebsehd		;
00D3F0  3  8D 79 DB     		STA	Cdebcyll		;
00D3F3  3  8D 7A DB     		STA	Cdebcylm		;
00D3F6  3               
00D3F6  3  A9 80        		LDA	#PPIDE_RST_LINE
00D3F8  3  8D 62 03     		STA	PPIDECNTRL			; ASSERT RST LINE ON IDE INTERFACE
00D3FB  3  A2 00        		LDX	#$00
00D3FD  3               	PRTDBG "IDE Reset Delay$"
00D3FD  3               RST_DLY:
00D3FD  3  CA           		DEX
00D3FE  3  E0 00        		CPX	#$00
00D400  3  D0 FB        		BNE	RST_DLY
00D402  3  A9 00        		LDA	#$00
00D404  3  8D 62 03     		STA	PPIDECNTRL			; DEASSERT RST LINE ON IDE INTERFACE
00D407  3               
00D407  3               ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
00D407  3               ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
00D407  3               	.IF (USEDSKYNG=1)
00D407  3  20 F0 D6     	JSR 	DSKY_REINIT
00D40A  3               	.ENDIF
00D40A  3               
00D40A  3  60           		RTS
00D40B  3               
00D40B  3               
00D40B  3               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
00D40B  3               ;*
00D40B  3               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
00D40B  3               ;*
00D40B  3               ;*____________________________________________________________________________________________________
00D40B  3               IDE_WAIT_NOT_BUSY:
00D40B  3  DA           		PHX
00D40C  3  5A           		PHY
00D40D  3  48           		PHA
00D40E  3  A9 00        		LDA #$00
00D410  3  8D AD D0     		STA PPIDETIMEOUT
00D413  3  8D AE D0     		STA PPIDETIMEOUT+1
00D416  3               IDE_WAIT_NOT_BUSY1:
00D416  3  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR RDY BIT TO BE SET
00D418  3  20 BA D5     		JSR	IDE_READ
00D41B  3  8A           		TXA
00D41C  3  29 80        		AND	#$80
00D41E  3  F0 0E        		BEQ	IDE_WAIT_NOT_BUSY2
00D420  3  EE AD D0     		INC 	PPIDETIMEOUT
00D423  3  D0 F1        		BNE 	IDE_WAIT_NOT_BUSY1
00D425  3  EE AE D0     		INC 	PPIDETIMEOUT+1
00D428  3  D0 EC        		BNE 	IDE_WAIT_NOT_BUSY1
00D42A  3  38           		SEC
00D42B  3  4C 2F D4     		JMP	IDE_WAIT_NOT_BUSY3
00D42E  3               IDE_WAIT_NOT_BUSY2:
00D42E  3  18           		CLC
00D42F  3               IDE_WAIT_NOT_BUSY3:
00D42F  3  68           		PLA
00D430  3  7A           		PLY
00D431  3  FA           		PLX
00D432  3  60           		RTS
00D433  3               
00D433  3               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
00D433  3               ;*
00D433  3               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
00D433  3               ;*
00D433  3               ;*____________________________________________________________________________________________________
00D433  3               IDE_WAIT_DRQ:
00D433  3  DA           		PHX
00D434  3  5A           		PHY
00D435  3  48           		PHA
00D436  3  A9 00        		LDA #$00
00D438  3  8D AD D0     		STA PPIDETIMEOUT
00D43B  3  8D AE D0     		STA PPIDETIMEOUT+1
00D43E  3               IDE_WAIT_DRQ1:
00D43E  3  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR DRQ BIT TO BE SET
00D440  3  20 BA D5     		JSR	IDE_READ
00D443  3  8A           		TXA
00D444  3  29 88        		AND	#%10001000		; MASK OFF BUSY(7) AND DRQ(3)
00D446  3  C9 08        		CMP	#%00001000		; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
00D448  3  F0 14        		BEQ	IDE_WAIT_DRQ2
00D44A  3  29 01        		AND	#%00000001		; IS ERROR?
00D44C  3  C9 01        		CMP	#%00000001		;
00D44E  3  F0 0A        		BEQ	IDE_WAIT_DRQE
00D450  3  EE AD D0     		INC 	PPIDETIMEOUT
00D453  3  D0 E9        		BNE 	IDE_WAIT_DRQ1
00D455  3  EE AE D0     		INC 	PPIDETIMEOUT+1
00D458  3  D0 E4        		BNE 	IDE_WAIT_DRQ1
00D45A  3               IDE_WAIT_DRQE:
00D45A  3  38           		SEC
00D45B  3  4C 5F D4     		JMP	IDE_WAIT_DRQ3
00D45E  3               IDE_WAIT_DRQ2:
00D45E  3  18           		CLC
00D45F  3               IDE_WAIT_DRQ3:
00D45F  3  68           		PLA
00D460  3  7A           		PLY
00D461  3  FA           		PLX
00D462  3  60           		RTS
00D463  3               
00D463  3               
00D463  3               
00D463  3               ;*__IDE_READ_BUFFER___________________________________________________________________________________
00D463  3               ;*
00D463  3               ;*  READ IDE BUFFER LITTLE ENDIAN
00D463  3               ;*
00D463  3               ;*____________________________________________________________________________________________________
00D463  3               IDE_READ_BUFFER:
00D463  3  A2 00        		LDX    	#$00			; INDEX
00D465  3               IDEBUFRD:
00D465  3  8E AC D0     		STX	PPIDEINDEX
00D468  3  A9 08        		LDA	#PPIDE_DATA
00D46A  3  20 BA D5     		JSR	IDE_READ
00D46D  3  8A           		TXA
00D46E  3  AE AC D0     		LDX	PPIDEINDEX
00D471  3  9D EF E3     		STA	hstbuf,X		;
00D474  3  E8           		INX				;
00D475  3  98           		TYA				; THEN HIGH BYTE OF WORD
00D476  3  9D EF E3     		STA	hstbuf,X		;
00D479  3  E8           		INX
00D47A  3  E0 00        		CPX    	#$00			;
00D47C  3  D0 E7        		BNE	IDEBUFRD		;
00D47E  3               IDEBUFRD1:
00D47E  3  8E AC D0     		STX	PPIDEINDEX
00D481  3  A9 08        		LDA	#PPIDE_DATA
00D483  3  20 BA D5     		JSR	IDE_READ
00D486  3  8A           		TXA
00D487  3  AE AC D0     		LDX	PPIDEINDEX
00D48A  3  9D EF E4     		STA	hstbuf+256,X		;
00D48D  3  E8           		INX				;
00D48E  3  98           		TYA				; THEN HIGH BYTE OF WORD
00D48F  3  9D EF E4     		STA	hstbuf+256,X		;
00D492  3  E8           		INX				;
00D493  3  E0 00        		CPX    	#$00			;
00D495  3  D0 E7        		BNE	IDEBUFRD1		;
00D497  3  60           		RTS				;
00D498  3               
00D498  3               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
00D498  3               ;*
00D498  3               ;*  WRITE IDE BUFFER LITTLE ENDIAN
00D498  3               ;*
00D498  3               ;*____________________________________________________________________________________________________
00D498  3               IDE_WRITE_BUFFER:
00D498  3  A2 00        		LDX    	#$00			; INDEX
00D49A  3               IDEBUFWT:
00D49A  3  8E AC D0     		STX	PPIDEINDEX
00D49D  3  BD F0 E3     		LDA     hstbuf+1,X		; SECTORS ARE BIG ENDIAN
00D4A0  3  A8           		TAY				;
00D4A1  3  BD EF E3     		LDA     hstbuf,X		; SECTORS ARE BIG ENDIAN
00D4A4  3  AA           		TAX
00D4A5  3  A9 08        		LDA	#PPIDE_DATA
00D4A7  3  20 D8 D5     		JSR	IDE_WRITE
00D4AA  3  AE AC D0     		LDX	PPIDEINDEX
00D4AD  3  E8           		INX				;
00D4AE  3  E8           		INX				;
00D4AF  3  E0 00        		CPX    	#$00			;
00D4B1  3  D0 E7        		BNE	IDEBUFWT		;
00D4B3  3  A2 00        		LDX    	#$00			; INDEX
00D4B5  3               IDEBUFWT1:
00D4B5  3  8E AC D0     		STX	PPIDEINDEX
00D4B8  3  BD F0 E4     		LDA     hstbuf+257,X		; SECTORS ARE BIG ENDIAN
00D4BB  3  A8           		TAY
00D4BC  3  BD EF E4     		LDA     hstbuf+256,X		; SECTORS ARE BIG ENDIAN
00D4BF  3  AA           		TAX
00D4C0  3  A9 08        		LDA	#PPIDE_DATA
00D4C2  3  20 D8 D5     		JSR	IDE_WRITE
00D4C5  3  AE AC D0     		LDX	PPIDEINDEX
00D4C8  3  E8           		INX				;
00D4C9  3  E8           		INX				;
00D4CA  3  E0 00        		CPX    	#$00			;
00D4CC  3  D0 E7        		BNE	IDEBUFWT1		;
00D4CE  3  60           		RTS				;
00D4CF  3               
00D4CF  3               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
00D4CF  3               ;*
00D4CF  3               ;*  SETUP LBA DATA
00D4CF  3               ;*  A= DRIVE DEVICE
00D4CF  3               ;*____________________________________________________________________________________________________
00D4CF  3               IDE_SETUP_LBA:
00D4CF  3               		PRTDBG "PPIDE SETUP LBA$"
00D4CF  3  29 01        		and 	#$01			; only want drive cfg
00D4D1  3  0A           		asl	a			; SHIFT 4
00D4D2  3  0A           		asl	a			;
00D4D3  3  0A           		asl	a			;
00D4D4  3  0A           		asl	a			;
00D4D5  3  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
00D4D7  3  AA           		TAX
00D4D8  3  A0 00        		LDY	#$00
00D4DA  3  A9 0E        		LDA	#PPIDE_DEVICE
00D4DC  3  20 D8 D5     		JSR	IDE_WRITE
00D4DF  3               
00D4DF  3  AE 75 DB     		LDX    	debcylm
00D4E2  3  A9 0D        		LDA	#PPIDE_LBAHI
00D4E4  3  20 D8 D5     		JSR	IDE_WRITE
00D4E7  3               
00D4E7  3  AE 74 DB     		LDX    	debcyll			;
00D4EA  3  A9 0C        		LDA	#PPIDE_LBAMID
00D4EC  3  20 D8 D5     		JSR	IDE_WRITE
00D4EF  3               
00D4EF  3  AE 76 DB     		LDX    	debsehd			;
00D4F2  3  A9 0B        		LDA	#PPIDE_LBALOW
00D4F4  3  20 D8 D5     		JSR	IDE_WRITE
00D4F7  3               
00D4F7  3  A2 01        		LDX	#$01
00D4F9  3  A9 0A        		LDA	#PPIDE_SEC_CNT
00D4FB  3  20 D8 D5     		JSR	IDE_WRITE
00D4FE  3               
00D4FE  3  60           		RTS
00D4FF  3               
00D4FF  3               ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
00D4FF  3               ;
00D4FF  3               ; 	TRANSLATE SECTORS INTO IDE FORMAT
00D4FF  3               ;________________________________________________________________________________________________________
00D4FF  3               IDE_CONVERT_SECTOR:
00D4FF  3  AD 70 DB     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
00D502  3  29 0F        	AND 	#$0F			; ISOLATE HEAD IN LOW 4 BITS
00D504  3  0A           	asl	a			; MOVE TO HIGH BYTE
00D505  3  0A           	asl	a
00D506  3  0A           	asl	a
00D507  3  0A           	asl	a
00D508  3  AA           	TAX 				; PARK IN X
00D509  3  AD 72 DB     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
00D50C  3  4A           	LSR	A			;
00D50D  3  4A           	LSR	A			; DIVIDE BY 4 (FOR BLOCKING)
00D50E  3  29 0F        	AND 	#$0F 			; CLEAR UPPER 4 BITS (JUST 'CAUSE)
00D510  3  8D 76 DB     	STA	debsehd			; STORE IN SECTOR/HEAD
00D513  3  8A           	TXA 				; GET HEAD BACK
00D514  3  0D 76 DB     	ORA 	debsehd
00D517  3  8D 76 DB     	STA	debsehd			; STORE IN SECTOR/HEAD
00D51A  3               
00D51A  3  AD 70 DB     	LDA 	sektrk
00D51D  3  8D 74 DB     	STA	debcyll			; STORE IN TRACK (lsb)
00D520  3  AD 71 DB     	LDA 	sektrk+1
00D523  3  8D 75 DB     	STA	debcylm			; STORE IN TRACK (msb)
00D526  3               					; REMOVE HEAD FROM TRACK VALUE (DIV/4)
00D526  3  AD 75 DB     	LDA	debcylm
00D529  3  4A           	LSR 	A
00D52A  3  8D 75 DB     	STA	debcylm
00D52D  3  AD 74 DB     	LDA	debcyll
00D530  3  6A           	ROR 	A
00D531  3  8D 74 DB     	STA	debcyll
00D534  3               
00D534  3  AD 75 DB     	LDA	debcylm
00D537  3  4A           	LSR 	A
00D538  3  8D 75 DB     	STA	debcylm
00D53B  3  AD 74 DB     	LDA	debcyll
00D53E  3  6A           	ROR 	A
00D53F  3  8D 74 DB     	STA	debcyll
00D542  3               
00D542  3  AD 75 DB     	LDA	debcylm
00D545  3  4A           	LSR 	A
00D546  3  8D 75 DB     	STA	debcylm
00D549  3  AD 74 DB     	LDA	debcyll
00D54C  3  6A           	ROR 	A
00D54D  3  8D 74 DB     	STA	debcyll
00D550  3               
00D550  3  AD 75 DB     	LDA	debcylm
00D553  3  4A           	LSR 	A
00D554  3  8D 75 DB     	STA	debcylm
00D557  3  AD 74 DB     	LDA	debcyll
00D55A  3  6A           	ROR 	A
00D55B  3  8D 74 DB     	STA	debcyll
00D55E  3               
00D55E  3               ;	ADD SLICE OFFSET
00D55E  3  AD 68 DB     	LDA	sekdsk			; GET DRIVE#
00D561  3  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
00D563  3  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
00D564  3  AA           	TAX 				; MOVE TO X REGISTER
00D565  3  E8           	INX				; WANT SECOND BYTE OF ENTRY
00D566  3  BD 4A CE     	LDA 	dskcfg,X 		; GET SLICE#
00D569  3  8D 7E DB     	STA 	slicetmp+1 		; SLICE OFFSET MSB
00D56C  3  A9 00        	LDA 	#0	 		; GET SLICE#
00D56E  3  8D 7D DB     	STA 	slicetmp		; SLICE OFFSET LSB
00D571  3  18           	CLC				; VOODOO MATH TO TAKE SLICE*$4000
00D572  3  6E 7E DB     	ROR 	slicetmp+1
00D575  3  6E 7D DB     	ROR	slicetmp
00D578  3  6E 7E DB     	ROR 	slicetmp+1
00D57B  3  6E 7D DB     	ROR	slicetmp
00D57E  3               
00D57E  3  BD 4A CE     	LDA 	dskcfg,X 		; GET SLICE#
00D581  3  18           	clc
00D582  3  6D 7D DB     	adc 	slicetmp
00D585  3  8D 7D DB     	sta 	slicetmp
00D588  3               					; ADD SLICE OFFSET TO TRACK #
00D588  3  18           	clc				; clear carry
00D589  3  AD 7D DB     	lda slicetmp
00D58C  3  6D 74 DB     	adc debcyll
00D58F  3  8D 74 DB     	sta debcyll			; store sum of LSBs
00D592  3  AD 7E DB     	lda slicetmp+1
00D595  3  6D 75 DB     	adc debcylm			; add the MSBs using carry from
00D598  3  8D 75 DB     	sta debcylm			; the previous calculation
00D59B  3               
00D59B  3               
00D59B  3               
00D59B  3               
00D59B  3                 .IF USEDSKY=1 || USEDSKYNG=1
00D59B  3                 	PRTDBG "DSKY OUTPUT 1$"
00D59B  3  AD 68 DB       	lda	sekdsk
00D59E  3  8D 57 D9       	sta	DSKY_HEXBUF
00D5A1  3  AD 75 DB      	lda	debcylm
00D5A4  3  8D 58 D9       	sta	DSKY_HEXBUF+1
00D5A7  3  AD 74 DB      	lda	debcyll
00D5AA  3  8D 59 D9       	sta	DSKY_HEXBUF+2
00D5AD  3  AD 76 DB         	lda	debsehd
00D5B0  3  8D 5A D9       	sta	DSKY_HEXBUF+3
00D5B3  3  20 76 D7       	JSR	DSKY_BIN2SEG
00D5B6  3  20 AB D7     	JSR	DSKY_SHOW
00D5B9  3                 .ENDIF
00D5B9  3  60           	RTS
00D5BA  3               
00D5BA  3               
00D5BA  3               ;-------------------------------------------------------------------------------
00D5BA  3               
00D5BA  3               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
00D5BA  3               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
00D5BA  3               ; PROGRAM WOULD NOT CALL TO THESE.
00D5BA  3               
00D5BA  3               	;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
00D5BA  3               	;INPUT A = IDE REGSITER ADDRESS
00D5BA  3               	;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
00D5BA  3               	;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
00D5BA  3               
00D5BA  3               IDE_READ:
00D5BA  3  20 F4 D5     	JSR	SET_PPI_RD		; SETUP FOR A READ CYCLE
00D5BD  3               
00D5BD  3  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
00D5C0  3  09 40        	ORA	#PPIDE_RD_LINE		; ASSERT RD PIN
00D5C2  3  8D 62 03     	STA	PPIDECNTRL
00D5C5  3  48           	PHA
00D5C6  3               
00D5C6  3  AE 60 03     	LDX	PPIDELO			; READ LOWER BYTE
00D5C9  3  AC 61 03     	LDY	PPIDEHI			; READ UPPER BYTE
00D5CC  3               
00D5CC  3  68           	PLA				; RESTORE REGISTER VALUE
00D5CD  3  49 40        	EOR	#PPIDE_RD_LINE		; DE-ASSERT RD SIGNAL
00D5CF  3  8D 62 03     	STA	PPIDECNTRL
00D5D2  3  A9 00        	LDA	#$00
00D5D4  3  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
00D5D7  3  60           	RTS
00D5D8  3               
00D5D8  3               
00D5D8  3               
00D5D8  3               
00D5D8  3               	;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
00D5D8  3               	;INPUT A = IDE REGISTER ADDRESS
00D5D8  3               	;INPUT REGISTER X = LSB TO WRITE
00D5D8  3               	;INPUT REGISTER Y = MSB TO WRITE
00D5D8  3               	;
00D5D8  3               
00D5D8  3               
00D5D8  3               IDE_WRITE:
00D5D8  3  20 FC D5     	JSR	SET_PPI_WR		; SETUP FOR A WRITE CYCLE
00D5DB  3               
00D5DB  3  8E 60 03     	STX	PPIDELO			; WRITE LOWER BYTE
00D5DE  3  8C 61 03     	STY	PPIDEHI			; WRITE UPPER BYTE
00D5E1  3               
00D5E1  3  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
00D5E4  3               
00D5E4  3  09 20        	ORA	#PPIDE_WR_LINE		; ASSERT WRITE PIN
00D5E6  3  8D 62 03     	STA	PPIDECNTRL
00D5E9  3               
00D5E9  3  49 20        	EOR	#PPIDE_WR_LINE		; DE ASSERT WR PIN
00D5EB  3  8D 62 03     	STA	PPIDECNTRL
00D5EE  3               
00D5EE  3  A9 00        	LDA	#$00
00D5F0  3  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
00D5F3  3  60           	RTS
00D5F4  3               
00D5F4  3               
00D5F4  3               ;-----------------------------------------------------------------------------------
00D5F4  3               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
00D5F4  3               ;
00D5F4  3               ;------------------------------------------------------------------------------------
00D5F4  3               
00D5F4  3               SET_PPI_RD:
00D5F4  3  48           	PHA
00D5F5  3  A9 92        	LDA	#PPRD_IDE_8255
00D5F7  3  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, READ MODE
00D5FA  3  68           	PLA
00D5FB  3  60           	RTS
00D5FC  3               
00D5FC  3               SET_PPI_WR:
00D5FC  3  48           	PHA
00D5FD  3  A9 80        	LDA	#PPWR_IDE_8255
00D5FF  3  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, WRITE MODE
00D602  3  68           	PLA
00D603  3  60           	RTS
00D604  3               
00D604  2               	.ENDIF
00D604  2               
00D604  2               	.IF USEFLOPPYA=1 | USEFLOPPYB=1
00D604  2               		.INCLUDE "DOS65\\DOSFLPV3.ASM"
00D604  2               	.ENDIF
00D604  2               
00D604  2               	.IF USEDSKY=1
00D604  2               		.INCLUDE "DOSDSKY.ASM"
00D604  2               	.ENDIF
00D604  2               
00D604  2               	.IF USEDSKYNG=1
00D604  2               		.INCLUDE "dosdskyn.asm"
00D604  3               ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
00D604  3               ;
00D604  3               ; 	Nhyodyne DSKY/NG drivers
00D604  3               ;
00D604  3               ;	Entry points:
00D604  3               ;               DSKY_INIT
00D604  3               ;               DSKY_SHOW
00D604  3               ;               DSKY_BIN2SEG
00D604  3               ;               DSKY_RESET
00D604  3               ;               DSKY_STAT
00D604  3               ;               DSKY_GETKEY
00D604  3               ;               DSKY_BEEP
00D604  3               ;               DSKY_L1ON
00D604  3               ;               DSKY_L2ON
00D604  3               ;               DSKY_L1OFF
00D604  3               ;               DSKY_L2OFF
00D604  3               ;               DSKY_PUTLED
00D604  3               ;               DSKY_BLANK
00D604  3               ;________________________________________________________________________________________________________________________________
00D604  3               ;
00D604  3               ;
00D604  3               ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
00D604  3               ;
00D604  3               ; LED SEGMENTS (BIT VALUES)
00D604  3               ;
00D604  3               ;	+--01--+
00D604  3               ;	20    02
00D604  3               ;	+--40--+
00D604  3               ;	10    04
00D604  3               ;	+--08--+  80
00D604  3               ;
00D604  3               ; KEY CODE MAP (KEY CODES) CSCCCRRR
00D604  3               ;                          ||||||||
00D604  3               ;                          |||||+++-- ROW
00D604  3               ;                          ||+++----- COL
00D604  3               ;                          |+-------- SHIFT
00D604  3               ;                          +--------- CONTROL
00D604  3               ;
00D604  3               ;	00	08	10	18	23
00D604  3               ;	01	09	11	19	22
00D604  3               ;	02	0A	12	1A	21
00D604  3               ;	03	0B	13	1B	20
00D604  3               ;	04	0C	14	1C	SHIFT
00D604  3               ;	05	0D	15	1D	CTRL
00D604  3               ;
00D604  3               ; LED BIT MAP (BIT VALUES)
00D604  3               ;
00D604  3               ;	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
00D604  3               ;	---	---	---	---	---	---	---	---
00D604  3               ;	01	01	01	01	01
00D604  3               ;	02	02	02	02	02
00D604  3               ;	04      04      04      04	04
00D604  3               ;	08      08      08      08	08
00D604  3               ;	10      10      10      10	10
00D604  3               ;	20      20      20      20	20	L1	L2 	BUZZ
00D604  3               ;
00D604  3               DSKY_PPI	=	$0360		; PORT
00D604  3               DSKY_PPIA	= 	DSKY_PPI + 0 	; PORT A
00D604  3               DSKY_PPIB	= 	DSKY_PPI + 1 	; PORT B
00D604  3               DSKY_PPIC	= 	DSKY_PPI + 2    ; PORT C
00D604  3               DSKY_PPIX 	= 	DSKY_PPI + 3    ; PPI CONTROL PORT
00D604  3               ;
00D604  3               DSKY_PPIX_RD	=	%10010010	; PPIX VALUE FOR READS
00D604  3               DSKY_PPIX_WR	=	%10000010	; PPIX VALUE FOR WRITES
00D604  3               ;
00D604  3               ; PIO CHANNEL C:
00D604  3               ;
00D604  3               ;	7	6	5	4	3	2	1	0
00D604  3               ;	RES	0	0	CS	CS	/RD	/WR	A0
00D604  3               ;
00D604  3               ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
00D604  3               ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
00D604  3               ;
00D604  3               DSKY_PPI_IDLE	=	%00000110
00D604  3               ;
00D604  3               DSKY_CMD_CLR	=	%11011111	; CLEAR (ALL OFF)
00D604  3               DSKY_CMD_CLRX	=	%11010011	; CLEAR (ALL ON)
00D604  3               DSKY_CMD_WDSP	=	%10010000	; WRITE DISPLAY RAM
00D604  3               DSKY_CMD_RDSP	=	%01110000	; READ DISPLAY RAM
00D604  3               DSKY_CMD_CLK	=	%00100000	; SET CLK PRESCALE
00D604  3               DSKY_CMD_FIFO	=	%01000000	; READ FIFO
00D604  3               ;
00D604  3               DSKY_PRESCL	=	DSKYOSC/100000	; PRESCALER
00D604  3               ;
00D604  3               ;__DSKY_INIT_________________________________________________________________________________________
00D604  3               ;
00D604  3               ;  DISPLAY DSKY INFO
00D604  3               ;____________________________________________________________________________________________________
00D604  3               ;
00D604  3               DSKY_INIT:
00D604  3                       PRTDBG "DSKY INIT:$"
00D604  3  20 C0 D6             JSR     DSKY_PREINIT
00D607  3  48 DA 5A A2  	PRTS "DSKY:$"
00D60B  3  00 BD 20 D6  
00D60F  3  E8 C9 24 F0  
00D626  3  20 06 CC            	JSR	NEWLINE
00D629  3               
00D629  3               ;
00D629  3  48 DA 5A A2  	PRTS    " IO=0x$"
00D62D  3  00 BD 42 D6  
00D631  3  E8 C9 24 F0  
00D649  3  A9 03        	LDA	#>DSKY_PPI		; GET BASE PORT
00D64B  3  20 E4 CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D64E  3  A9 60               	LDA	#<DSKY_PPI		; GET BASE PORT
00D650  3  20 E4 CB     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00D653  3  48 DA 5A A2  	PRTS    " MODE=$"
00D657  3  00 BD 6C D6  
00D65B  3  E8 C9 24 F0  
00D673  3  48 DA 5A A2  	PRTS    "NG$"			; PRINT DSKY TYPE
00D677  3  00 BD 8C D6  
00D67B  3  E8 C9 24 F0  
00D68F  3               ;
00D68F  3  AD 4E D9     	LDA	DSKY_PRESENT	        ; PRESENT?
00D692  3  C9 FF        	CMP     #$FF		        ; SET FLAGS
00D694  3  F0 26                BEQ     DSKY_INITA
00D696  3  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
00D69A  3  00 BD AF D6  
00D69E  3  E8 C9 24 F0  
00D6BC  3               DSKY_INITA:
00D6BC  3  20 06 CC     	JSR	NEWLINE
00D6BF  3  60           	RTS				; DONE
00D6C0  3               ;
00D6C0  3               ;__DSKY_PREINIT______________________________________________________________________________________
00D6C0  3               ;
00D6C0  3               ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
00D6C0  3               ;____________________________________________________________________________________________________
00D6C0  3               ; HARDWARE RESET 8279 BY PULSING RESET LINE
00D6C0  3               DSKY_PREINIT:
00D6C0  3               	; CHECK FOR PPI
00D6C0  3  20 05 D7     	JSR	DSKY_PPIDETECT		; TEST FOR PPI HARDWARE
00D6C3  3  D0 2A                BNE     DSKY_ABORT      	; BAIL OUT IF NOT THERE
00D6C5  3               
00D6C5  3               	; SETUP PPI TO DEFAULT MODE
00D6C5  3  20 27 D9     	JSR	DSKY_PPIRD
00D6C8  3               	; INIT 8279 VALUES TO IDLE STATE
00D6C8  3  A9 06        	LDA	#DSKY_PPI_IDLE
00D6CA  3  8D 62 03     	STA	DSKY_PPIC
00D6CD  3               	; PULSE RESET SIGNAL ON 8279
00D6CD  3  09 80        	ORA 	#%10000000
00D6CF  3  8D 62 03     	STA	DSKY_PPIC
00D6D2  3  29 7F        	AND 	#%01111111
00D6D4  3  8D 62 03     	STA	DSKY_PPIC
00D6D7  3               	; INITIALIZE 8279
00D6D7  3  20 F0 D6     	JSR	DSKY_REINIT
00D6DA  3               	; NOW SEE IF A DSKYNG IS REALLY THERE...
00D6DA  3  A9 A5        	LDA     #$A5
00D6DC  3  A0 00                LDY     #$00
00D6DE  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D6E1  3  A0 00                LDY     #$00
00D6E3  3  20 55 D8     	JSR	DSKY_GETBYTE
00D6E6  3  C9 A5        	CMP	#$A5
00D6E8  3  D0 05        	BNE     DSKY_ABORT			; BAIL OUT IF MISCOMPARE
00D6EA  3  A9 FF        	LDA	#$FF
00D6EC  3  8D 4E D9     	STA	DSKY_PRESENT
00D6EF  3               DSKY_ABORT:
00D6EF  3  60           	RTS
00D6F0  3               ;
00D6F0  3               DSKY_REINIT:
00D6F0  3  20 39 D9     	JSR	DSKY_PPIIDLE
00D6F3  3               	; SET CLOCK SCALER TO 20
00D6F3  3  A9 21        	LDA	#DSKY_CMD_CLK | DSKY_PRESCL
00D6F5  3  20 C1 D7     	JSR	DSKY_CMD
00D6F8  3               	; FALL THRU
00D6F8  3               ;
00D6F8  3               DSKY_RESET:
00D6F8  3               	; RESET DSKY -- CLEAR RAM AND FIFO
00D6F8  3  A9 DF        	LDA	#DSKY_CMD_CLR
00D6FA  3  20 C1 D7     	JSR	DSKY_CMD
00D6FD  3               ;
00D6FD  3               	; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
00D6FD  3               	; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
00D6FD  3               	; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
00D6FD  3               	; IS USED TO IMPLEMENT A TIMEOUT.
00D6FD  3  A2 00        	LDX	#0			; TIMEOUT LOOP COUNTER
00D6FF  3               DSKY_RESET1:
00D6FF  3  DA           	PHX     			; SAVE COUNTER
00D700  3               	;JSR	DSKY_ST			; GET STATUS BYTE
00D700  3  FA           	PLX				; RECOVER COUNTER
00D701  3                     ;  AND     #%10000000
00D701  3                     ;  BEQ     DSKY_RESET2		; MOVE ON IF DONE
00D701  3  CA                   DEX
00D702  3  D0 FB                BNE     DSKY_RESET1		; LOOP TILL TIMEOUT
00D704  3               ;
00D704  3               DSKY_RESET2:
00D704  3  60           	RTS
00D705  3               ;
00D705  3               ;
00D705  3               ;
00D705  3               ;__DSKY_PPIDETECT____________________________________________________________________________________
00D705  3               ;
00D705  3               ;  PROBE FOR PPI HARDWARE
00D705  3               ;____________________________________________________________________________________________________
00D705  3               ;
00D705  3               DSKY_PPIDETECT:
00D705  3               ;
00D705  3               	; TEST FOR PPI EXISTENCE
00D705  3               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
00D705  3               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
00D705  3               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
00D705  3               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
00D705  3               	; INTERFERE WITH THE VALUE BEING READ.
00D705  3  20 10 D9     	JSR	DSKY_PPIWR
00D708  3               ;
00D708  3  A9 00        	LDA     #$00			; VALUE ZERO
00D70A  3  8D 60 03     	STA	DSKY_PPIA		; PUSH VALUE TO PORT
00D70D  3  AD 60 03     	LDA	DSKY_PPIA		; GET PORT VALUE
00D710  3  C9 00                CMP     #$00
00D712  3  60           	RTS				; AND RETURN
00D713  3               ;
00D713  3                .IF DSKY_KBD=1
00D713  3               ;
00D713  3               KY_0	=	$00
00D713  3               KY_1	=	$01
00D713  3               KY_2	=	$02
00D713  3               KY_3	=	$03
00D713  3               KY_4	=	$04
00D713  3               KY_5	=	$05
00D713  3               KY_6	=	$06
00D713  3               KY_7	=	$07
00D713  3               KY_8	=	$08
00D713  3               KY_9	=	$09
00D713  3               KY_A	=	$0A
00D713  3               KY_B	=	$0B
00D713  3               KY_C	=	$0C
00D713  3               KY_D	=	$0D
00D713  3               KY_E	=	$0E
00D713  3               KY_F	=	$0F
00D713  3               KY_FW	=	$10	; FORWARD
00D713  3               KY_BK	=	$11	; BACKWARD
00D713  3               KY_CL	=	$12	; CLEAR
00D713  3               KY_EN	=	$13	; ENTER
00D713  3               KY_DE	=	$14	; DEPOSIT
00D713  3               KY_EX	=	$15	; EXAMINE
00D713  3               KY_GO	=	$16	; GO
00D713  3               KY_BO	=	$17	; BOOT
00D713  3               KY_F4	=	$18	; F4
00D713  3               KY_F3	=	$19	; F3
00D713  3               KY_F2	=	$20	; F2
00D713  3               KY_F1	=	$21	; F1
00D713  3               ;
00D713  3               ;__DSKY_STAT_________________________________________________________________________________________
00D713  3               ;
00D713  3               ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
00D713  3               ;____________________________________________________________________________________________________
00D713  3               ;
00D713  3               DSKY_STAT:
00D713  3  AD 4E D9     	LDA	DSKY_PRESENT            ; DOES IT EXIST?
00D716  3  C9 FF        	CMP     #$FF			; SET FLAGS
00D718  3  D0 05                BNE     DSKY_STATA		; ABORT WITH A=0 IF NOT THERE
00D71A  3  20 FA D7     	JSR	DSKY_ST
00D71D  3  29 0F        	AND	#$0F			; ISOLATE THE CUR FIFO LEN
00D71F  3               DSKY_STATA:
00D71F  3  60           	RTS
00D720  3               ;
00D720  3               ;__DSKY_GETKEY_____________________________________________________________________________________
00D720  3               ;
00D720  3               ;  WAIT FOR A DSKY KEYPRESS AND RETURN
00D720  3               ;____________________________________________________________________________________________________
00D720  3               ;
00D720  3               DSKY_GETKEY:
00D720  3  AD 4E D9     	LDA	DSKY_PRESENT    	; DOES IT EXIST?
00D723  3  C9 FF               	CMP     #$FF			; SET FLAGS
00D725  3  D0 24                BNE     DSKY_GETKEY1A		; ABORT WITH A=0 IF NOT THERE
00D727  3  20 13 D7     	JSR	DSKY_STAT
00D72A  3  F0 F4                BEQ     DSKY_GETKEY		; LOOP IF NOTHING THERE
00D72C  3  A9 40        	LDA	#DSKY_CMD_FIFO
00D72E  3  20 C1 D7     	JSR	DSKY_CMD
00D731  3  20 FF D7     	JSR	DSKY_DIN
00D734  3  49 C0        	EOR	#%11000000		; FLIP POLARITY OF SHIFT/CTL BITS
00D736  3  48                   PHA
00D737  3  29 3F        	AND	#$3F			; STRIP SHIFT/CTL BITS FOR LOOKUP
00D739  3  8D 4C D9     	STA     DSKY_TEMP_VAL
00D73C  3  A2 00        	LDX	#0			; INDEX
00D73E  3               DSKY_GETKEY1:
00D73E  3  BD 5A D7             LDA     DSKY_KEYMAP,X
00D741  3  CD 4C D9     	CMP	DSKY_TEMP_VAL		; MATCH?
00D744  3  F0 09                BEQ     DSKY_GETKEY2		; FOUND, DONE
00D746  3  E8           	INX
00D747  3  E0 1C                CPX     #28
00D749  3  D0 F3                BNE	DSKY_GETKEY1		; LOOP UNTIL EOT
00D74B  3               DSKY_GETKEY1A:
00D74B  3  68                   PLA
00D74C  3  A9 FF        	LDA	#$FF			; NOT FOUND ERR, RETURN $FF
00D74E  3  60           	RTS
00D74F  3               DSKY_GETKEY2:
00D74F  3               	; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
00D74F  3               	; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
00D74F  3  68           	PLA				; RESTORE RAW VALUE
00D750  3  25 C0        	AND	%11000000		; ISOLATE SHIFT/CTRL BITS
00D752  3  8D 4C D9             STA     DSKY_TEMP_VAL
00D755  3  8A                   TXA
00D756  3  0D 4C D9     	ORA	DSKY_TEMP_VAL		; COMBINE WITH INDEX VALUE
00D759  3  60           	RTS
00D75A  3               ;
00D75A  3               ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
00D75A  3               ;
00D75A  3               DSKY_KEYMAP:
00D75A  3               	; POS	$00  $01  $02  $03  $04  $05  $06  $07
00D75A  3               	; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
00D75A  3  0D 04 0C 14  	.BYTE	$0D, $04, $0C, $14, $03, $0B, $13, $02
00D75E  3  03 0B 13 02  
00D762  3               ;
00D762  3               	; POS	$08  $09  $0A  $0B  $0C  $0D  $0E  $0F
00D762  3               	; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
00D762  3  0A 12 01 09  	.BYTE	$0A, $12, $01, $09, $11, $00, $08, $10
00D766  3  11 00 08 10  
00D76A  3               ;
00D76A  3               	; POS	$10  $11  $12  $13  $14  $15  $16  $17
00D76A  3               	; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
00D76A  3  05 15 1D 1C  	.BYTE	$05, $15, $1D, $1C, $1B, $1A, $19, $18
00D76E  3  1B 1A 19 18  
00D772  3               
00D772  3               	; POS	$18  $19  $20  $21
00D772  3               	; KEY   [F4] [F3] [F2] [F1]
00D772  3  23 22 21 20  	.BYTE	$23, $22, $21, $20
00D776  3               
00D776  3               ;
00D776  3                       .ENDIF	; DSKY_KBD
00D776  3               ;
00D776  3               ;__DSKY_BIN2SEG________________________________________________________________________________________
00D776  3               ;
00D776  3               ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
00D776  3               ;
00D776  3               ; DSKY_BUF: 32 BIT BINARY
00D776  3               ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
00D776  3               ;____________________________________________________________________________________________________
00D776  3               ;
00D776  3               DSKY_BIN2SEG:
00D776  3  A2 00        	LDX	#$00
00D778  3               DSKY_BIN2SEG1:
00D778  3  BD 57 D9     	LDA	DSKY_HEXBUF,X			; FIRST NIBBLE
00D77B  3  4A           	LSR	A
00D77C  3  4A                   LSR	A
00D77D  3  4A                   LSR	A
00D77E  3  4A                   LSR	A
00D77F  3  DA           	PHX                                     ; STORE READ INDEX
00D780  3  AA                   TAX					; MOVE DIGIT TO LOOKUP INDEX
00D781  3  BD 3C D9     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
00D784  3  FA           	PLX                                     ; GET READ INDEX
00D785  3  DA           	PHX
00D786  3  48           	PHA
00D787  3  8A           	TXA
00D788  3  0A           	asl	a
00D789  3  AA           	TAX
00D78A  3  68           	PLA
00D78B  3  9D 4F D9             STA     DSKY_BUF,X    		        ;STORE HIGH BYTE IN OUT BUFFER
00D78E  3  FA           	PLX
00D78F  3  BD 57 D9     	LDA	DSKY_HEXBUF,X			; SECOND NIBBLE
00D792  3               
00D792  3  29 0F        	AND	#$0F
00D794  3  DA                   PHX
00D795  3  AA                   TAX
00D796  3  BD 3C D9     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
00D799  3  FA           	PLX
00D79A  3  DA           	PHX
00D79B  3  48           	PHA
00D79C  3  8A           	TXA		                        ; GET READ INDEX
00D79D  3  0A           	asl	a
00D79E  3  AA           	TAX
00D79F  3  E8           	INX
00D7A0  3  68           	PLA
00D7A1  3  9D 4F D9             STA     DSKY_BUF,X	                ;STORE HIGH BYTE IN OUT BUFFER
00D7A4  3  FA           	PLX
00D7A5  3  E8                   INX
00D7A6  3  E0 04                CPX     #4
00D7A8  3  D0 CE                BNE     DSKY_BIN2SEG1
00D7AA  3  60           	RTS
00D7AB  3               ;
00D7AB  3               ;__DSKY_SHOW___________________________________________________________________________________________
00D7AB  3               ; DSKY SHOW BUFFER
00D7AB  3               ;______________________________________________________________________________________________________
00D7AB  3               ;
00D7AB  3               DSKY_SHOW:
00D7AB  3  48                   PHA
00D7AC  3  DA                   PHX
00D7AD  3  5A                   PHY
00D7AE  3  A2 00                LDX     #0
00D7B0  3               DSKY_SHOW1:
00D7B0  3  BD 4F D9     	LDA     DSKY_BUF,X
00D7B3  3  DA                   PHX
00D7B4  3  7A                   PLY
00D7B5  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D7B8  3  E8           	INX
00D7B9  3  E0 08                CPX     #8
00D7BB  3  D0 F3                BNE     DSKY_SHOW1
00D7BD  3  7A                   PLY
00D7BE  3  FA                   PLX
00D7BF  3  68                   PLA
00D7C0  3  60           	RTS
00D7C1  3               
00D7C1  3               ;______________________________________________________________________________________________________
00D7C1  3               ; DSKYNG OUTPUT ROUTINES
00D7C1  3               ;______________________________________________________________________________________________________
00D7C1  3               
00D7C1  3               ; SEND DSKY COMMAND BYTE IN REGISTER A
00D7C1  3               DSKY_CMD:
00D7C1  3  48                   PHA
00D7C2  3  A9 01        	LDA	#$01
00D7C4  3  4C CA D7     	JMP	DSKY_DOUT2
00D7C7  3               ;
00D7C7  3               ; SEND DSKY DATA BYTE IN REGISTER A
00D7C7  3               ; TRASHES BC
00D7C7  3               ;
00D7C7  3               DSKY_DOUT:
00D7C7  3  48                   PHA
00D7C8  3  A9 00        	LDA	#$00
00D7CA  3               ;
00D7CA  3               DSKY_DOUT2:
00D7CA  3               	; SET PPI LINE CONFIG TO WRITE MODE
00D7CA  3  20 10 D9     	JSR	DSKY_PPIWR
00D7CD  3               ;
00D7CD  3               	; SET ADDRESS FIRST
00D7CD  3  09 06                ORA     #DSKY_PPI_IDLE
00D7CF  3  8D 62 03     	STA	DSKY_PPIC
00D7D2  3               ;
00D7D2  3               	; ASSERT 8279 /CS
00D7D2  3  09 18        	ORA     #%00011000
00D7D4  3  8D 62 03     	STA	DSKY_PPIC
00D7D7  3               ;
00D7D7  3               	; PPIC WORKING VALUE TO DSKY_TEMP_VAL
00D7D7  3  8D 4C D9     	STA     DSKY_TEMP_VAL
00D7DA  3               ;
00D7DA  3               	; ASSERT DATA BYTE VALUE
00D7DA  3  68                   PLA
00D7DB  3  8D 60 03     	STA	DSKY_PPIA
00D7DE  3               ;
00D7DE  3               	; PULSE /WR
00D7DE  3  AD 4C D9             LDA     DSKY_TEMP_VAL
00D7E1  3  29 FD                AND     #%11111101
00D7E3  3  8D 62 03     	STA	DSKY_PPIC
00D7E6  3  EA           	NOP			; MAY NOT BE NEEDED
00D7E7  3  09 02                ORA     #%00000010
00D7E9  3  8D 62 03     	STA	DSKY_PPIC
00D7EC  3               ;
00D7EC  3               	; DEASSERT /CS
00D7EC  3  29 E7                AND     #%11100111
00D7EE  3  8D 62 03     	STA	DSKY_PPIC
00D7F1  3               ;
00D7F1  3               	; CLEAR ADDRESS BIT
00D7F1  3  29 E6                AND     #%11100110
00D7F3  3  8D 62 03     	STA	DSKY_PPIC
00D7F6  3               ;
00D7F6  3               	; DONE
00D7F6  3  20 39 D9     	JSR	DSKY_PPIIDLE
00D7F9  3  60           	RTS
00D7FA  3               ;
00D7FA  3               ;==================================================================================================
00D7FA  3               ; DSKYNG OUTPUT ROUTINES
00D7FA  3               ;==================================================================================================
00D7FA  3               ;
00D7FA  3               ; RETURN DSKY STATUS VALUE IN A
00D7FA  3               ;
00D7FA  3               DSKY_ST:
00D7FA  3  A9 01        	LDA	#$01
00D7FC  3  4C 01 D8     	JMP	DSKY_DIN2
00D7FF  3               ;
00D7FF  3               ; RETURN NEXT DATA VALUE IN A
00D7FF  3               ;
00D7FF  3               DSKY_DIN:
00D7FF  3  A9 00        	LDA	#$00
00D801  3               ;
00D801  3               DSKY_DIN2:
00D801  3               	; SET PPI LINE CONFIG TO READ MODE
00D801  3  20 27 D9     	JSR	DSKY_PPIRD
00D804  3               ;
00D804  3               	; SET ADDRESS FIRST
00D804  3  09 06        	ORA	#DSKY_PPI_IDLE
00D806  3  8D 62 03     	STA	DSKY_PPIC
00D809  3               ;
00D809  3               	; ASSERT 8279 /CS
00D809  3  09 18        	ORA     #%00011000
00D80B  3  8D 62 03     	STA	DSKY_PPIC
00D80E  3               ;
00D80E  3               	; ASSERT /RD
00D80E  3  29 7B        	AND     #%01111011
00D810  3  8D 62 03     	STA	DSKY_PPIC
00D813  3               ;
00D813  3  8D 4C D9     	STA 	DSKY_TEMP_VAL
00D816  3               	; GET VALUE
00D816  3  AD 60 03     	LDA	DSKY_PPIA
00D819  3  48                   PHA
00D81A  3               
00D81A  3  AD 4C D9     	LDA 	DSKY_TEMP_VAL
00D81D  3               	; DEASSERT /RD
00D81D  3  09 04        	ORA     #%00000100
00D81F  3  8D 62 03     	STA	DSKY_PPIC
00D822  3               ;
00D822  3               	; DEASSERT /CS
00D822  3  29 E7                AND     #%11100111
00D824  3  8D 62 03     	STA	DSKY_PPIC
00D827  3               ;
00D827  3               	; CLEAR ADDRESS BIT
00D827  3  29 E6                AND     #%11100110
00D829  3  8D 62 03     	STA	DSKY_PPIC
00D82C  3               ;
00D82C  3               	; DONE
00D82C  3  20 39 D9     	JSR	DSKY_PPIIDLE
00D82F  3  68                   PLA
00D830  3  60           	RTS
00D831  3               
00D831  3               ;__DSKY_BLANK_____________________________________________________________________________________
00D831  3               ;
00D831  3               ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
00D831  3               ;
00D831  3               ;_________________________________________________________________________________________________
00D831  3               ;
00D831  3               DSKY_BLANK:
00D831  3  A9 90        	LDA	#DSKY_CMD_WDSP
00D833  3  20 C1 D7     	JSR	DSKY_CMD
00D836  3  A2 10        	LDX	#16
00D838  3               DSKY_BLANK1:
00D838  3  A9 FF        	LDA	#$FF
00D83A  3  20 C7 D7     	JSR	DSKY_DOUT
00D83D  3  CA                   DEX
00D83E  3  D0 F8        	BNE	DSKY_BLANK1
00D840  3  60           	RTS
00D841  3               ;
00D841  3               ;__DSKY_PUTBYTE____________________________________________________________________________________
00D841  3               ;
00D841  3               ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
00D841  3               ; AT LOCATION IN REGISTER Y, VALUE IN A.
00D841  3               ;
00D841  3               ;__________________________________________________________________________________________________
00D841  3               ;
00D841  3               DSKY_PUTBYTE:
00D841  3  5A                   PHY
00D842  3  48                   PHA
00D843  3  48                   PHA
00D844  3  18           	CLC
00D845  3  98                   TYA
00D846  3  69 90        	ADC	#DSKY_CMD_WDSP
00D848  3  A8                   TAY
00D849  3  20 C1 D7     	JSR	DSKY_CMD
00D84C  3  68                   PLA
00D84D  3  49 FF        	EOR	#$FF
00D84F  3  20 C7 D7     	JSR	DSKY_DOUT
00D852  3  68                   PLA
00D853  3  7A                   PLY
00D854  3  60           	RTS
00D855  3               ;
00D855  3               ;__DSKY_GETBYTE___________________________________________________________________________________
00D855  3               ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
00D855  3               ; AT LOCATION IN REGISTER Y, VALUE RETURNED IN A
00D855  3               ;
00D855  3               ;_________________________________________________________________________________________________
00D855  3               ;
00D855  3               DSKY_GETBYTE:
00D855  3  18           	CLC
00D856  3  98                   TYA
00D857  3  69 70        	ADC	#DSKY_CMD_RDSP
00D859  3  A8                   TAY
00D85A  3  20 C1 D7     	JSR	DSKY_CMD
00D85D  3  20 FF D7     	JSR	DSKY_DIN
00D860  3  49 FF        	EOR	#$FF
00D862  3  60           	RTS
00D863  3               
00D863  3               ;
00D863  3               ;__DSKY_PUTLED____________________________________________________________________________________
00D863  3               ;
00D863  3               ;	This function is intended to update the LEDs.  It expects 8 bytes
00D863  3               ;	following the call, and	updates the entire matrix.
00D863  3               ;
00D863  3               ;  EXAMPLE:
00D863  3               ;	JSR 	DSKY_PUTLED
00D863  3               ;	.BYTE 	$00,$00,$00,$00,$00,$00,$00,$00
00D863  3               ;_________________________________________________________________________________________________
00D863  3               ;
00D863  3               DSKY_PUTLED:
00D863  3  8E 4C D9             STX     DSKY_TEMP_VAL           ; STORE X
00D866  3  BA                   TSX                             ; STORE STACK POINTER
00D867  3  68                   PLA                             ; GET ADDRESS OF BYTES
00D868  3  85 14                STA     pointr                  ; STORE ADDRESS IN POINTR
00D86A  3  68                   PLA
00D86B  3  85 15                STA     pointr+1
00D86D  3  9A                   TXS                             ; RESTORE STACK
00D86E  3  AE 4C D9             LDX     DSKY_TEMP_VAL           ; RESTORE X
00D871  3  DA                   PHX                             ; STASH REGISTERS
00D872  3  5A                   PHY
00D873  3  48                   PHA
00D874  3  18                   CLC                             ; REMEMBER ADDRESS IN STACK IS BEFORE STRING
00D875  3  E6 14                INC     pointr                  ; SO, INC 16BIT POINTER BY 1
00D877  3  90 02                BCC     @1
00D879  3  E6 15                INC     pointr+1
00D87B  3  A0 00        @1:	LDY 	#$00
00D87D  3               DSKY_PUTLED_1:
00D87D  3  B1 14                LDA     (pointr),Y              ; GET BYTE
00D87F  3  20 41 D8     	JSR	DSKY_PUTBYTE            ; SEND IT TO DSKY
00D882  3  C8                   INY                             ; LOOP TIL DONE
00D883  3  C0 08                CPY     #8
00D885  3  D0 F6                BNE     DSKY_PUTLED_1
00D887  3  68                   PLA                             ; RESTORE REGISTERS
00D888  3  7A                   PLY
00D889  3  FA                   PLX
00D88A  3  8D 4C D9             STA     DSKY_TEMP_VAL           ; STASH A
00D88D  3  18                   CLC                             ; INC RETURN ADDRESS BY 8
00D88E  3  68                   PLA
00D88F  3  69 08                ADC     #8
00D891  3  85 14                STA     pointr
00D893  3  90 03                BCC     DSKY_PUTLED_2
00D895  3  68                   PLA
00D896  3  1A                   INC     A
00D897  3  48                   PHA
00D898  3               DSKY_PUTLED_2:
00D898  3  A5 14                LDA     pointr
00D89A  3  48                   PHA
00D89B  3  AD 4C D9             LDA     DSKY_TEMP_VAL           ; RESTORE A
00D89E  3  60           	RTS
00D89F  3               ;
00D89F  3               ;__DSKY_BEEP______________________________________________________________________________________
00D89F  3               ;	This function is intended to beep the speaker on the DSKY
00D89F  3               ;_________________________________________________________________________________________________
00D89F  3               ;
00D89F  3               DSKY_BEEP:
00D89F  3  5A           	PHY
00D8A0  3  DA                   PHX
00D8A1  3  48           	PHA
00D8A2  3  A0 0F        	LDY 	#$0F
00D8A4  3  20 55 D8     	JSR	DSKY_GETBYTE
00D8A7  3  09 20        	ORA 	#$20
00D8A9  3  A9 20        			LDA 	#$20
00D8AB  3  A0 0F        	LDY	#$0F
00D8AD  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D8B0  3               
00D8B0  3               ;;; 	timer . . .
00D8B0  3  A2 8F        	LDX 	#$8F
00D8B2  3  A0 FF                LDY     #$FF
00D8B4  3               DSKY_BEEP1:
00D8B4  3  88                   DEY
00D8B5  3  D0 FD                BNE     DSKY_BEEP1
00D8B7  3  CA                   DEX
00D8B8  3  D0 FA                BNE     DSKY_BEEP1
00D8BA  3               
00D8BA  3  A0 0F        	LDY 	#$0F
00D8BC  3  20 55 D8     	JSR	DSKY_GETBYTE
00D8BF  3  29 DF        	AND 	#$DF
00D8C1  3  A9 DF        			LDA 	#$DF
00D8C3  3  A0 0F        	LDY	#$0F
00D8C5  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D8C8  3               
00D8C8  3  68                   PLA
00D8C9  3  FA                   PLX
00D8CA  3  7A                   PLY
00D8CB  3  60           	RTS
00D8CC  3               ;
00D8CC  3               ;__DSKY_L1ON______________________________________________________________________________________
00D8CC  3               ;	This function is intended to turn on DSKY L1
00D8CC  3               ;_________________________________________________________________________________________________
00D8CC  3               ;
00D8CC  3               DSKY_L1ON:
00D8CC  3  5A           	PHY
00D8CD  3  48           	PHA
00D8CE  3  A0 0D        	LDY 	#$0D
00D8D0  3  20 55 D8     	JSR	DSKY_GETBYTE
00D8D3  3  09 20        	ORA 	#$20
00D8D5  3  A0 0D        	LDY	#$0D
00D8D7  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D8DA  3  68           	PLA
00D8DB  3  7A                   PLY
00D8DC  3  60           	RTS
00D8DD  3               ;
00D8DD  3               ;__DSKY_L2ON______________________________________________________________________________________
00D8DD  3               ;	This function is intended to turn on DSKY L2
00D8DD  3               ;_________________________________________________________________________________________________
00D8DD  3               ;
00D8DD  3               DSKY_L2ON:
00D8DD  3  5A           	PHY
00D8DE  3  48           	PHA
00D8DF  3  A0 0E        	LDY 	#$0E
00D8E1  3  20 55 D8     	JSR	DSKY_GETBYTE
00D8E4  3  09 20        	ORA 	#$20
00D8E6  3  A0 0E        	LDY	#$0E
00D8E8  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D8EB  3  68           	PLA
00D8EC  3  7A                   PLY
00D8ED  3  60           	RTS
00D8EE  3               ;
00D8EE  3               ;__DSKY_L1OFF_____________________________________________________________________________________
00D8EE  3               ;	This function is intended to turn off DSKY L1
00D8EE  3               ;_________________________________________________________________________________________________
00D8EE  3               ;
00D8EE  3               DSKY_L1OFF:
00D8EE  3  5A           	PHY
00D8EF  3  48           	PHA
00D8F0  3  A0 0D        	LDY 	#$0D
00D8F2  3  20 55 D8     	JSR	DSKY_GETBYTE
00D8F5  3  29 DF        	AND 	#$DF
00D8F7  3  A0 0D        	LDY	#$0D
00D8F9  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D8FC  3  68           	PLA
00D8FD  3  7A                   PLY
00D8FE  3  60           	RTS
00D8FF  3               ;
00D8FF  3               ;__DSKY_L2OFF_____________________________________________________________________________________
00D8FF  3               ;	This function is intended to turn off DSKY L2
00D8FF  3               ;_________________________________________________________________________________________________
00D8FF  3               ;
00D8FF  3               DSKY_L2OFF:
00D8FF  3  5A           	PHY
00D900  3  48           	PHA
00D901  3  A0 0E        	LDY 	#$0E
00D903  3  20 55 D8     	JSR	DSKY_GETBYTE
00D906  3  29 DF        	AND 	#$DF
00D908  3  A0 0E        	LDY	#$0E
00D90A  3  20 41 D8     	JSR	DSKY_PUTBYTE
00D90D  3  68           	PLA
00D90E  3  7A                   PLY
00D90F  3  60           	RTS
00D910  3               ;
00D910  3               ;_________________________________________________________________________________________________
00D910  3               ; DSKYNG LINE CONTROL ROUTINES
00D910  3               ;
00D910  3               ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
00D910  3               ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
00D910  3               ;
00D910  3               ;_________________________________________________________________________________________________
00D910  3               ;
00D910  3               DSKY_PPIWR:
00D910  3  48           	PHA
00D911  3               ;
00D911  3               	; CHECK FOR WRITE MODE
00D911  3  AD 4D D9     	LDA     DSKY_PPIX_VAL
00D914  3  C9 82        	CMP	#DSKY_PPIX_WR
00D916  3  F0 0D        	BEQ	DSKY_PPIWR1
00D918  3               ;
00D918  3               	; SET PPI TO WRITE MODE
00D918  3  A9 82        	LDA	#DSKY_PPIX_WR
00D91A  3  8D 63 03     	STA	DSKY_PPIX
00D91D  3  8D 4D D9     	STA	DSKY_PPIX_VAL
00D920  3               ;
00D920  3               	; RESTORE PORT C (MAY NOT BE NEEDED)
00D920  3  A9 06        	LDA     #DSKY_PPI_IDLE
00D922  3  8D 62 03     	STA	DSKY_PPIC
00D925  3               ;
00D925  3               DSKY_PPIWR1:
00D925  3               ;
00D925  3  68           	PLA
00D926  3  60           	RTS
00D927  3               ;
00D927  3               ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
00D927  3               ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
00D927  3               ;
00D927  3               DSKY_PPIRD:
00D927  3  48           	PHA
00D928  3               ;
00D928  3               	; CHECK FOR READ MODE
00D928  3  AD 4D D9     	LDA	DSKY_PPIX_VAL
00D92B  3  C9 92        	CMP	#DSKY_PPIX_RD
00D92D  3  F0 08        	BEQ	DSKY_PPIRD1
00D92F  3               ;
00D92F  3               	; SET PPI TO READ MODE
00D92F  3  A9 92        	LDA	#DSKY_PPIX_RD
00D931  3  8D 63 03     	STA	DSKY_PPIX
00D934  3  8D 4D D9     	STA	DSKY_PPIX_VAL
00D937  3               ;
00D937  3               DSKY_PPIRD1:
00D937  3  68           	PLA
00D938  3  60           	RTS
00D939  3               ;
00D939  3               ; RELEASE USE OF PPI
00D939  3               ;
00D939  3               DSKY_PPIIDLE:
00D939  3  4C 27 D9     	JMP	DSKY_PPIRD		; SAME AS READ MODE
00D93C  3               ;
00D93C  3               ;__STORAGE_________________________________________________________________________________________
00D93C  3               ; CODES FOR NUMERICS
00D93C  3               ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
00D93C  3               ; SET HIGH BIT TO SHOW DECIMAL POINT
00D93C  3               ;_________________________________________________________________________________________________
00D93C  3               ;
00D93C  3               DSKY_HEXMAP:
00D93C  3  3F           	.BYTE	$3F	; 0
00D93D  3  06           	.BYTE	$06	; 1
00D93E  3  5B           	.BYTE	$5B	; 2
00D93F  3  4F           	.BYTE	$4F	; 3
00D940  3  66           	.BYTE	$66	; 4
00D941  3  6D           	.BYTE	$6D	; 5
00D942  3  7D           	.BYTE	$7D	; 6
00D943  3  07           	.BYTE	$07	; 7
00D944  3  7F           	.BYTE	$7F	; 8
00D945  3  67           	.BYTE	$67	; 9
00D946  3  77           	.BYTE	$77	; A
00D947  3  7C           	.BYTE	$7C	; B
00D948  3  39           	.BYTE	$39	; C
00D949  3  5E           	.BYTE	$5E	; D
00D94A  3  79           	.BYTE	$79	; E
00D94B  3  71           	.BYTE	$71	; F
00D94C  3               ;
00D94C  3  00           DSKY_TEMP_VAL:	.BYTE	0
00D94D  3  00           DSKY_PPIX_VAL:	.BYTE	0
00D94E  3  00           DSKY_PRESENT:	.BYTE	0
00D94F  3               ;
00D94F  3               ; SEG DISPLAY WORKING STORAGE
00D94F  3               ;
00D94F  3  00 00 00 00  DSKY_BUF:	.BYTE	0,0,0,0,0,0,0,0
00D953  3  00 00 00 00  
00D957  3               DSKY_BUFLEN	=	* - DSKY_BUF
00D957  3  00 00 00 00  DSKY_HEXBUF:	.BYTE	0,0,0,0
00D95B  3               DSKY_HEXBUFLEN	=	* - DSKY_HEXBUF
00D95B  3               
00D95B  2               	.ENDIF
00D95B  2               	.INCLUDE "dosmd.asm"
00D95B  3               ;__MD DRIVERS____________________________________________________________________________________________________________________
00D95B  3               ;
00D95B  3               ; 	Nhyodyne Memory disk drivers
00D95B  3               ;
00D95B  3               ;	Entry points:
00D95B  3               ;		MD_INIT          - called during OS init
00D95B  3               ;		MD_READ_SECTOR  - read a sector from drive
00D95B  3               ;		MD_WRITE_SECTOR - write a sector to drive
00D95B  3               ;________________________________________________________________________________________________________________________________
00D95B  3               ;
00D95B  3               MPCL_ROM	=	$037C		; ROM MAPPER
00D95B  3               MPCL_RAM	=	$0378		; RAM MAPPER
00D95B  3               MD_PAGERA       =       $0200           ; PAGE DRIVER ADDRESS
00D95B  3               MD_PAGEBU       =       $0400           ; PAGE BUFFER ADDRESS
00D95B  3               MD_PAGESE       =       pointr          ; PAGE SECTOR STORAGE
00D95B  3               
00D95B  3               ;
00D95B  3               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
00D95B  3               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
00D95B  3               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00D95B  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D95B  3               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
00D95B  3               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
00D95B  3               ;
00D95B  3               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
00D95B  3               ;
00D95B  3               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00D95B  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D95B  3               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
00D95B  3               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
00D95B  3               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
00D95B  3               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
00D95B  3               
00D95B  3               
00D95B  3               ;__MD_INIT___________________________________________________________________________________________
00D95B  3               ;
00D95B  3               ;  INIT -- Copy code into $0200-$02FF for controling banking and copying
00D95B  3               ;____________________________________________________________________________________________________
00D95B  3               ;
00D95B  3               MD_INIT:
00D95B  3                       PRTDBG "MD INIT:$"
00D95B  3  48 DA 5A A2          PRTS "MD: UNITS=2 RAMDISK=256KB ROMDISK=384KB$"
00D95F  3  00 BD 74 D9  
00D963  3  E8 C9 24 F0  
00D99C  3  20 06 CC            	JSR	NEWLINE
00D99F  3               MD_REINIT:
00D99F  3  A2 00                LDX     #$00
00D9A1  3               :
00D9A1  3  BD AD D9             LDA     md_pagecode,X
00D9A4  3  9D 00 02             STA     MD_PAGERA,X
00D9A7  3  E8                   INX
00D9A8  3  E0 00                CPX     #$00
00D9AA  3  D0 F5                BNE     :-
00D9AC  3  60                   RTS
00D9AD  3               
00D9AD  3               ;       X=Control Word
00D9AD  3               ;	7 6 5 4  3 2 1 0
00D9AD  3               ;	^ ^ ^ ^  ^ ^ ^ ^
00D9AD  3               ;       : : X X  X X X X    = UNUSED
00D9AD  3               ;	: :---------------0 = RAM=0, ROM=1
00D9AD  3               ;	:-----------------0 = Read=0, Write=1
00D9AD  3               ;       A= bank
00D9AD  3               ;       Y= page
00D9AD  3               ;
00D9AD  3               md_pagecode:
00D9AD  3  48                   PHA
00D9AE  3  84 15                STY     MD_PAGESE+1     ; setup copy from pointer
00D9B0  3  A0 00                LDY     #$00
00D9B2  3  84 14                STY     MD_PAGESE
00D9B4  3  8A                   TXA
00D9B5  3  29 80                AND     #%10000000
00D9B7  3  C9 00                CMP     #$00
00D9B9  3  D0 38                BNE     MD_PAGE_WRITE
00D9BB  3               ; PERFORM READ HERE
00D9BB  3  8A                   TXA
00D9BC  3  29 40                AND     #%01000000
00D9BE  3  C9 00                CMP     #$00
00D9C0  3  D0 0D                BNE     MD_PAGE_ROREAD
00D9C2  3               ; DO RAM READ
00D9C2  3  A9 80                LDA     #$80
00D9C4  3  8D 7C 03             STA     MPCL_ROM
00D9C7  3  68                   PLA
00D9C8  3  09 80                ORA     #$80
00D9CA  3  8D 78 03             STA     MPCL_RAM
00D9CD  3  D0 0B                BNE     MD_PAGE_COPYFRM
00D9CF  3               MD_PAGE_ROREAD:
00D9CF  3  A9 00                LDA     #$00
00D9D1  3  8D 78 03             STA     MPCL_RAM
00D9D4  3  68                   PLA
00D9D5  3  29 7F                AND     #$7F
00D9D7  3  8D 7C 03             STA     MPCL_ROM
00D9DA  3               MD_PAGE_COPYFRM:
00D9DA  3               ; DO THE COPY
00D9DA  3  A2 00                LDX     #$00
00D9DC  3               :
00D9DC  3  DA                   PHX
00D9DD  3  7A                   PLY
00D9DE  3  B1 14                LDA     (MD_PAGESE),Y
00D9E0  3  9D 00 04             STA     MD_PAGEBU,X
00D9E3  3  E8                   INX
00D9E4  3  E0 00                CPX     #$00
00D9E6  3  D0 F4                BNE     :-
00D9E8  3  A9 80                LDA     #$80
00D9EA  3  8D 7C 03             STA     MPCL_ROM
00D9ED  3  A9 8E                LDA     #$8E
00D9EF  3  8D 78 03             STA     MPCL_RAM
00D9F2  3  60                   RTS
00D9F3  3               MD_PAGE_WRITE:
00D9F3  3  68                   PLA
00D9F4  3  09 80                ORA     #%10000000
00D9F6  3  8D 78 03             STA     MPCL_RAM
00D9F9  3               ; DO THE COPY
00D9F9  3  A2 00                LDX     #$00
00D9FB  3               :
00D9FB  3  DA                   PHX
00D9FC  3  7A                   PLY
00D9FD  3  BD 00 04             LDA     MD_PAGEBU,X
00DA00  3  91 14                STA     (MD_PAGESE),Y
00DA02  3  E8                   INX
00DA03  3  E0 00                CPX     #$00
00DA05  3  D0 F4                BNE     :-
00DA07  3  A9 80                LDA     #$80
00DA09  3  8D 7C 03             STA     MPCL_ROM
00DA0C  3  A9 8E                LDA     #$8E
00DA0E  3  8D 78 03             STA     MPCL_RAM
00DA11  3  60                   RTS
00DA12  3               md_pagecodeend:
00DA12  3               
00DA12  3               
00DA12  3               ;*__MD_READ_SECTOR____________________________________________________________________________________
00DA12  3               ;*
00DA12  3               ;*  READ MD SECTOR INTO BUFFER
00DA12  3               ;*
00DA12  3               ;*____________________________________________________________________________________________________
00DA12  3               MD_READ_SECTOR:
00DA12  3  20 1B DA                     JSR MD_READ_RAW_SECTOR
00DA15  3  20 AC DA                     JSR DEBSECR256
00DA18  3  A9 00                        LDA #$00                        ; SHOULD ALWAYS SUCCEED
00DA1A  3  60                           RTS
00DA1B  3               
00DA1B  3               MD_READ_RAW_SECTOR:
00DA1B  3               		PRTDBG "MD Read Sector$"
00DA1B  3  20 1B CF                     JSR     GET_DRIVE_DEVICE
00DA1E  3  29 01        		and 	#$01			; only want drive cfg
00DA20  3  0A           		asl	a			; SHIFT 6
00DA21  3  0A           		asl	a			;
00DA22  3  0A           		asl	a			;
00DA23  3  0A              		asl	a			;
00DA24  3  0A           		asl	a			;
00DA25  3  0A           		asl	a			;
00DA26  3  29 7F        		AND 	#%01111111              ; TOGGLE READ
00DA28  3  AA                           TAX                             ; STASH CONTROL WORD
00DA29  3  20 69 DA                     JSR     MD_CONVERT_SECTOR
00DA2C  3  E0 00                        cpx     #$00                    ; read if ram
00DA2E  3  F0 0C                        BEQ     :+
00DA30  3  EE 74 DB                     inc     debcyll                 ; if rom, inc bank by 4 ()
00DA33  3  EE 74 DB                     inc     debcyll
00DA36  3  EE 74 DB                     inc     debcyll
00DA39  3  EE 74 DB                     inc     debcyll
00DA3C  3               :
00DA3C  3  AD 74 DB       	        LDA    	debcyll			; GET BANK
00DA3F  3  AC 76 DB     		LDY    	debsehd			; GET PAGE
00DA42  3                               PRTDBG "DO PAGER$"
00DA42  3  20 00 02                     JSR     MD_PAGERA
00DA45  3                               PRTDBG "PAGER RETURN$"
00DA45  3  60           		RTS
00DA46  3               
00DA46  3               
00DA46  3               ;*__MD_WRITE_SECTOR___________________________________________________________________________________
00DA46  3               ;*
00DA46  3               ;*  WRITE MD SECTOR FROM BUFFER
00DA46  3               ;*
00DA46  3               ;*____________________________________________________________________________________________________
00DA46  3               MD_WRITE_SECTOR:
00DA46  3               		PRTDBG "MD Write Sector$"
00DA46  3  20 1B CF                     JSR     GET_DRIVE_DEVICE
00DA49  3  29 01        		and 	#$01			; only want drive cfg
00DA4B  3  C9 00                        CMP     #$00                    ; NO WRITE FOR ROM
00DA4D  3  F0 03                        BEQ     MD_WRITE_SECTOR_RAM
00DA4F  3  A9 FF                        LDA     #$FF
00DA51  3  60                           RTS
00DA52  3               MD_WRITE_SECTOR_RAM:
00DA52  3  20 1B DA                     JSR     MD_READ_RAW_SECTOR
00DA55  3  20 69 DA                     JSR     MD_CONVERT_SECTOR
00DA58  3  20 D2 DA                     JSR     BLKSECR256
00DA5B  3  AD 74 DB      	        LDA    	debcyll			; GET BANK
00DA5E  3  AC 76 DB     		LDY    	debsehd			; GET PAGE
00DA61  3  A2 80        		LDX 	#$80                    ; TOGGLE WRITE RAM
00DA63  3                               PRTDBG "DO PAGER$"
00DA63  3  20 00 02                     JSR     MD_PAGERA
00DA66  3                               PRTDBG "PAGER RETURN$"
00DA66  3  A9 00                        LDA     #$00
00DA68  3  60           		RTS
00DA69  3               
00DA69  3               ;___MD_CONVERT_SECTOR___________________________________________________________________________________
00DA69  3               ;
00DA69  3               ; 	TRANSLATE SECTORS INTO MD FORMAT
00DA69  3               ;________________________________________________________________________________________________________
00DA69  3               MD_CONVERT_SECTOR:
00DA69  3                       PRTDBG "CONVERT SECTOR$"
00DA69  3  DA                   phx
00DA6A  3  AD 72 DB     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
00DA6D  3  4A           	LSR	A			; DIVIDE BY 2 (FOR BLOCKING)
00DA6E  3  29 1F        	AND 	#$1F 			; CLEAR UPPER 3 BITS (JUST 'CAUSE)
00DA70  3  8D 76 DB     	STA	debsehd			; STORE IN SECTOR/HEAD
00DA73  3  AD 70 DB     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
00DA76  3  29 03        	AND 	#$03			; BOTTOM 2 BITS ARE PART OF PAGE (PAGES ARE 32k)
00DA78  3  0A           	asl	a			; MOVE TO HIGH BITS
00DA79  3  0A           	asl	a
00DA7A  3  0A           	asl	a
00DA7B  3  0A           	asl	a
00DA7C  3  0A                  	asl	a
00DA7D  3  09 80                ORA     #$80                    ; PAGES ARE ALWAYS IN UPPER BANK
00DA7F  3  0D 76 DB     	ORA	debsehd			; STORE IN SECTOR/HEAD
00DA82  3  8D 76 DB             STA     debsehd                 ; STORE IN SECTOR/HEAD
00DA85  3                                                       ; AT THIS POINT PAGE REGISTER SHOULD BE
00DA85  3                                                       ; SET
00DA85  3  AD 70 DB     	LDA	sektrk			; LOAD TRACK #
00DA88  3  4A                  	LSR	a			; LOSE BOTTOM TWO BITS
00DA89  3  4A           	LSR	a
00DA8A  3  8D 74 DB     	STA	debcyll			; THIS SHOULD BE BANK#
00DA8D  3               
00DA8D  3               
00DA8D  3                 .IF USEDSKY=1 || USEDSKYNG=1
00DA8D  3                 	PRTDBG "DSKY OUTPUT 1$"
00DA8D  3  AD 68 DB       	lda	sekdsk
00DA90  3  8D 57 D9       	sta	DSKY_HEXBUF
00DA93  3  A9 00         	lda	#$00
00DA95  3  8D 58 D9       	sta	DSKY_HEXBUF+1
00DA98  3  AD 74 DB      	lda	debcyll
00DA9B  3  8D 59 D9       	sta	DSKY_HEXBUF+2
00DA9E  3  AD 76 DB         	lda	debsehd
00DAA1  3  8D 5A D9       	sta	DSKY_HEXBUF+3
00DAA4  3  20 76 D7       	JSR	DSKY_BIN2SEG
00DAA7  3  20 AB D7     	JSR	DSKY_SHOW
00DAAA  3                 .ENDIF
00DAAA  3  FA                   plx
00DAAB  3  60           	RTS
00DAAC  3               
00DAAC  3               ;___DEBSECR256________________________________________________________________________________________
00DAAC  3               ;
00DAAC  3               ;	DEBLOCK 256 BYTE SECTOR FOR DOS/65
00DAAC  3               ;
00DAAC  3               ;________________________________________________________________________________________________________
00DAAC  3               DEBSECR256:
00DAAC  3  48           	PHA
00DAAD  3  AD 72 DB     	LDA	seksec			;
00DAB0  3  29 01        	AND	#$01			; GET SECTOR INDEX
00DAB2  3  C9 00                CMP     #$00
00DAB4  3  D0 07                BNE     DEBSECR256_H
00DAB6  3  A9 00        	LDA	#$00                     ;
00DAB8  3  85 EE        	STA     SRC
00DABA  3  4C C1 DA             JMP     DEBSECR256_GO
00DABD  3               DEBSECR256_H:
00DABD  3  A9 80        	LDA	#$80                     ;
00DABF  3  85 EE        	STA     SRC
00DAC1  3               DEBSECR256_GO:
00DAC1  3  A9 04        	LDA	#>MD_PAGEBU             ;
00DAC3  3  85 EF        	STA	SRC+1			;
00DAC5  3  A5 F4        	LDA	dmaadr			;
00DAC7  3  85 EC        	STA	DEST			;
00DAC9  3  A5 F5        	LDA	dmaadr+1		;
00DACB  3  85 ED        	STA	DEST+1			;
00DACD  3  20 28 CF     	JSR	COPY_DOS_SECTOR		;
00DAD0  3  68           	PLA
00DAD1  3  60                   RTS
00DAD2  3               
00DAD2  3               ;___BLKSECR256________________________________________________________________________________________
00DAD2  3               ;
00DAD2  3               ;	BLOCK 256 BYTE SECTOR FOR DOS/65
00DAD2  3               ;
00DAD2  3               ;________________________________________________________________________________________________________
00DAD2  3               BLKSECR256:
00DAD2  3  48           	PHA
00DAD3  3  AD 72 DB     	LDA	seksec			;
00DAD6  3  29 01        	AND	#$01			; GET SECTOR INDEX
00DAD8  3  C9 00                CMP     #$00
00DADA  3  D0 07                BNE     BLKSECR256_H
00DADC  3  A9 00        	LDA	#$00                     ;
00DADE  3  85 EC        	STA     DEST
00DAE0  3  4C E7 DA             JMP     BLKSECR256_GO
00DAE3  3               BLKSECR256_H:
00DAE3  3  A9 80        	LDA	#$80                     ;
00DAE5  3  85 EC        	STA     DEST
00DAE7  3               BLKSECR256_GO:
00DAE7  3  A9 04        	LDA	#>MD_PAGEBU             ;
00DAE9  3  85 ED        	STA	DEST+1			;
00DAEB  3  A5 F4        	LDA	dmaadr			;
00DAED  3  85 EE        	STA	SRC			;
00DAEF  3  A5 F5        	LDA	dmaadr+1		;
00DAF1  3  85 EF        	STA	SRC+1			;
00DAF3  3  20 28 CF     	JSR	COPY_DOS_SECTOR		;
00DAF6  3  68           	PLA
00DAF7  3  60                   RTS
00DAF8  3               
00DAF8  2               
00DAF8  2               ;------------------------------------------------------------------------------------
00DAF8  2               
00DAF8  2               
00DAF8  2               ;disk control blocks
00DAF8  2  7F 00        dcba:	.word	127		;max block number
00DAFA  2  40 00        	.word	64		;sectors per track
00DAFC  2  00 00        	.word	0		;number system tracks
00DAFE  2  01           	.byte	1		;block size = 2048
00DAFF  2  FF 00        	.word	255		;max directory number
00DB01  2  7F DB        	.word	almpa		;address of map for a
00DB03  2  00           	.byte	00		;do checksums
00DB04  2  6F E3        	.word	ckmp		;checksum map
00DB06  2  BF 00        dcbb:	.word	191		;max block number
00DB08  2  40 00        	.word	64		;sectors per track
00DB0A  2  00 00        	.word	0		;number system tracks
00DB0C  2  01           	.byte	1		;block size = 2048
00DB0D  2  9B 00        	.word	155		;max directory number
00DB0F  2  7D DC        	.word	almpb		;address of map for b
00DB11  2  00           	.byte	00		;do checksums
00DB12  2  6F E3        	.word	ckmp		;checksum map
00DB14  2  FF 07        dcbc:	.word	2047		;max block number
00DB16  2  40 00        	.word	64		;sectors per track
00DB18  2  10 00        	.word	16		;number system tracks
00DB1A  2  02           	.byte	2		;block size = 4096
00DB1B  2  FF 01        	.word	511		;max directory number
00DB1D  2  7B DD        	.word	almpc		;address of map for C
00DB1F  2  00           	.byte	0		;do checksums
00DB20  2  6F E3        	.word	ckmp		;checksum map
00DB22  2  FF 07        dcbd:	.word	2047		;max block number
00DB24  2  40 00        	.word	64		;sectors per track
00DB26  2  10 00        	.word	16		;number system tracks
00DB28  2  02           	.byte	2		;block size = 4096
00DB29  2  FF 01        	.word	511		;max directory number
00DB2B  2  79 DE        	.word	almpd		;address of map for d
00DB2D  2  00           	.byte	0		;do checksums
00DB2E  2  6F E3        	.word	ckmp		;checksum map
00DB30  2  FF 07        dcbe:	.word	2047		;max block number
00DB32  2  40 00        	.word	64		;sectors per track
00DB34  2  10 00        	.word	16		;number system tracks
00DB36  2  02           	.byte	2		;block size = 4096
00DB37  2  FF 01        	.word	511		;max directory number
00DB39  2  77 DF        	.word	almpe		;address of map for e
00DB3B  2  00           	.byte	0		;do checksums
00DB3C  2  6F E3        	.word	ckmp		;checksum map
00DB3E  2  FF 07        dcbf:	.word	2047		;max block number
00DB40  2  40 00        	.word	64		;sectors per track
00DB42  2  10 00        	.word	16		;number system tracks
00DB44  2  02           	.byte	2		;block size = 4096
00DB45  2  FF 01        	.word	511		;max directory number
00DB47  2  75 E0        	.word	almpf		;address of map for f
00DB49  2  00           	.byte	0		;do checksums
00DB4A  2  6F E3        	.word	ckmp		;checksum map
00DB4C  2  FF 07        dcbg:	.word	2047		;max block number
00DB4E  2  40 00        	.word	64		;sectors per track
00DB50  2  10 00        	.word	16		;number system tracks
00DB52  2  02           	.byte	2		;block size = 4096
00DB53  2  FF 01        	.word	511		;max directory number
00DB55  2  73 E1        	.word	almpg		;address of map for g
00DB57  2  00           	.byte	0		;do checksums
00DB58  2  6F E3        	.word	ckmp		;checksum map
00DB5A  2  FF 07        dcbh:	.word	2047		;max block number
00DB5C  2  40 00        	.word	64		;sectors per track
00DB5E  2  10 00        	.word	16		;number system tracks
00DB60  2  02           	.byte	2		;block size = 4096
00DB61  2  FF 01        	.word	511		;max directory number
00DB63  2  71 E2        	.word	almph		;address of map for h
00DB65  2  00           	.byte	0		;do checksums
00DB66  2  6F E3        	.word	ckmp		;checksum map
00DB68  2               
00DB68  2               ;data area
00DB68  2               
00DB68  2               
00DB68  2  02           sekdsk:	.byte	2		;seek disk number
00DB69  2  00           hstwrt:	.byte	0		;0=written,1=pending host write
00DB6A  2               
00DB6A  2               ;allocate the following data areas to unused ram space
00DB6A  2  00           LASTCHAR: 	.byte 0		;save sector for warm boot
00DB6B  2  00           savsec:		.byte 0		;save sector for warm boot
00DB6C  2  00           count:		.byte 0		;counter in warm boot
00DB6D  2  00           temp:		.byte 0		;save hstdsk for warm boot
00DB6E  2  00           hstact:		.byte 0		;host active flag
00DB6F  2  00           unacnt:		.byte 0		;unalloc rec cnt
00DB70  2  00 00        sektrk:		.word 0		;seek track number
00DB72  2  00 00        seksec:		.word 0		;seek sector number
00DB74  2  00           debcyll:	.byte 0		; DEBLOCKED CYLINDER LSB
00DB75  2  00           debcylm:	.byte 0		; DEBLOCKED CYLINDER MSB
00DB76  2  00           debsehd:	.byte 0		; DEBLOCKED SECTOR AND HEAD (HS)
00DB77  2  00 00        debtmp:		.word 0		; DEBLOCK TEMP VAR
00DB79  2  00           Cdebcyll:	.byte 0		; DEBLOCKED CYLINDER LSB
00DB7A  2  00           Cdebcylm:	.byte 0		; DEBLOCKED CYLINDER MSB
00DB7B  2  00           Cdebsehd:	.byte 0		; DEBLOCKED SECTOR AND HEAD (HS)
00DB7C  2  00           DEBDIRTY:	.byte 0		; DIRTY FLAG
00DB7D  2  00 00        slicetmp:	.word 0		; USED TO CALCULATE SLICE OFFSET
00DB7F  2               
00DB7F  2               ;allocation maps
00DB7F  2  xx xx xx xx  almpa:		.res	254
00DB83  2  xx xx xx xx  
00DB87  2  xx xx xx xx  
00DC7D  2  xx xx xx xx  almpb:		.res	254
00DC81  2  xx xx xx xx  
00DC85  2  xx xx xx xx  
00DD7B  2  xx xx xx xx  almpc:		.res	254
00DD7F  2  xx xx xx xx  
00DD83  2  xx xx xx xx  
00DE79  2  xx xx xx xx  almpd:		.res	254
00DE7D  2  xx xx xx xx  
00DE81  2  xx xx xx xx  
00DF77  2  xx xx xx xx  almpe:		.res	254
00DF7B  2  xx xx xx xx  
00DF7F  2  xx xx xx xx  
00E075  2  xx xx xx xx  almpf:		.res	254
00E079  2  xx xx xx xx  
00E07D  2  xx xx xx xx  
00E173  2  xx xx xx xx  almpg:		.res	254
00E177  2  xx xx xx xx  
00E17B  2  xx xx xx xx  
00E271  2  xx xx xx xx  almph:		.res	254
00E275  2  xx xx xx xx  
00E279  2  xx xx xx xx  
00E36F  2               ;checksum maps
00E36F  2               
00E36F  2               ;not used
00E36F  2  xx xx xx xx  ckmp:		.res	128
00E373  2  xx xx xx xx  
00E377  2  xx xx xx xx  
00E3EF  2               
00E3EF  2               ;deblocking buffer for dba
00E3EF  2  xx xx xx xx  hstbuf:		.res	512		;256 or 512 byte sectors
00E3F3  2  xx xx xx xx  
00E3F7  2  xx xx xx xx  
00E5EF  2               
00E5EF  1               
00E5EF  1               	.end
