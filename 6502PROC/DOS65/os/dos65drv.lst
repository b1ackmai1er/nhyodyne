ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65drv.asm
Current file: dos65drv.asm

000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ;	Nhyodyne dos/65 banked driver code
000000r 1               ;       Intended for RAM BANK $0C
000000r 1               ;
000000r 1               ;  DWERNER 04/24/2022 	Initial
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1                       .PC02
000000r 1                       .SEGMENT "DRIVERS"
000000r 1                       .ORG    $8800
008800  1                       .INCLUDE "DOSDEFN.ASM"  ; base addresses and definitions
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               ;
008800  2               ;	Nhyodyne dos/65 base addresses and definitions
008800  2               ;
008800  2               ;  DWERNER 04/24/2022 	Initial
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               
008800  2               ;base addresses and definitions
008800  2               btejmp          = $0100         ; warm boot jump
008800  2               pemjmp          = $0103         ; jump to pem
008800  2               iostat          = $0106         ; i/o status
008800  2               dflfcb          = $0107         ; default fcb
008800  2               dflbuf          = $0128         ; default buffer
008800  2               memmovr         = $0200         ; 0200-02ff subr to move data from ram/rom disks
008800  2               MD_PAGERA       = $0200         ; PAGE DRIVER ADDRESS
008800  2               
008800  2               IO              = $0300         ; 0300-03FF Memory mapped IO
008800  2               MPCL_ROM        = $037C         ; ROM MAPPER
008800  2               MPCL_RAM        = $0378         ; RAM MAPPER
008800  2               
008800  2               MD_PAGEBU       = $0400         ; 0400-04FF PAGE BUFFER ADDRESS
008800  2               MD_PAGESE       = pointr        ; PAGE SECTOR STORAGE
008800  2               
008800  2               ;
008800  2               ; DRIVER WORKING STORAGE
008800  2               ;
008800  2               DSKY_BUF        = $0500         ; Eight Bytes DSKY display buffer
008800  2               DSKY_BUFLEN     = 8             ;
008800  2               DSKY_HEXBUF     = $0508         ; Four Bytes DSKY hex buffer
008800  2               DSKY_HEXBUFLEN  = 4             ;
008800  2               sektrk          = $050C         ; seek track number
008800  2               seksec          = $050E         ; seek sector number
008800  2               debcyll         = $0510         ; DEBLOCKED CYLINDER LSB
008800  2               debcylm         = $0511         ; DEBLOCKED CYLINDER MSB
008800  2               debsehd         = $0512         ; DEBLOCKED SECTOR AND HEAD (HS)
008800  2               sekdsk          = $0513         ; seek disk number
008800  2               dskcfg          = $0514         ; 16 bytes disk configuration table
008800  2               DSKUNIT         = $0525         ; seek disk number
008800  2               
008800  2               
008800  2               tea             = $800          ;tea start
008800  2               
008800  2               ;zero page for setup
008800  2               trknum          = $02           ;current track
008800  2               dcbadd          = $04           ;dcb address
008800  2               nmsstr          = $06           ;number system tracks
008800  2               nsectr          = $08           ;number sectors per track
008800  2               ttlsec          = $0A           ;total sectors to write
008800  2               trkcnt          = ttlsec
008800  2               size            = $0B           ;ascii size
008800  2               lokim           = $0D           ;low kim limit
008800  2               hikim           = $0F           ;high kim limit
008800  2               offset          = $11           ;relocation offset
008800  2               kimcnt          = $13           ;kim counter
008800  2               pointr          = $14           ;pointer
008800  2               lengt           = $16           ;inst length
008800  2               point           = $17           ;relocate pointer
008800  2               adjust          = $19           ;relocate distance
008800  2               kimpnt          = $1B           ;kim file index
008800  2               savex           = $1C           ;save for x
008800  2               savey           = $1D           ;save for y
008800  2               number          = $1E           ;input pack buffer
008800  2               dstdrv          = $20           ;destination drive
008800  2               defalt          = $21           ;default drive
008800  2               seccnt          = $22           ;sector count
008800  2               secnum          = $24           ;sector number
008800  2               curccm          = $26           ;start of current ccm
008800  2               simlng          = $28           ;length of sim
008800  2               room            = $2A           ;memory needed for sysgen
008800  2               stksav          = $2C           ;save stack register
008800  2               frstsc          = $2D           ;first sector number of disk
008800  2               dskcfpc         = $2E           ;pointer to disk configuration table
008800  2               cmdlnp          = $30           ;pointer to command line buffer
008800  2               farfunct        = $32           ;function to call in driver area
008800  2               farpointer      = $33           ;WORD POINTER to call in driver area
008800  2               IRQVECTOR       = $35           ; VECTOR FOR USER IRQ RTN
008800  2               NMIVECTOR       = $37           ; VECTOR FOR USER NMI RTN
008800  2               zptemp          = $39
008800  2               lastzp          = $3A
008800  2               ;pem constants on entry to write
008800  2               wrall           = 0             ;write to allocated
008800  2               wrdir           = 1             ;write to directory
008800  2               wrual           = 2             ;write to unallocated
008800  2               
008800  2               ;page zero and system ram assignments
008800  2               DEST            = $EC           ;pointer for OutMsg
008800  2               SRC             = $EE           ;pointer for OutMsg
008800  2               OUTMSG_W        = $F0           ;pointer for OutMsg
008800  2               mvepnt          = $f2           ;host buffer location
008800  2               dmaadr          = $f4           ;pointer for r/w
008800  2               
008800  2               ;fixed parameters
008800  2               lf              = $a            ;linefeeed
008800  2               cr              = $d            ;return
008800  2               eof             = $1a           ;end of file
008800  2               null            = 0             ;null
008800  2               ctlc            = 3             ;abort
008800  2               ctle            = 5             ;physical cr lf
008800  2               ctli            = 9             ;tab character
008800  2               ctlp            = $10           ;toggle printer
008800  2               ctlr            = $12           ;repeat line
008800  2               ctls            = $13           ;freeze
008800  2               ctlx            = $18           ;cancel
008800  2               semico          = $3b           ;semicolon
008800  2               delete          = $08           ;delete character
008800  2               numcmd          = 36            ;number commands
008800  2               
008800  2               BANKED_DRIVER_DISPATCHER=$8800  ; LOCATION OF DRIVER DISPATCHER
008800  2               DEBUG           = 0             ; assemble with debug information on
008800  2               
008800  2               
008800  2               USESERIAL       = 1             ; SET TO ONE SERIAL CONSOLE IO
008800  2               USEFLOPPYA      = 0             ; SET TO ONE FOR FLOPPY = "A"
008800  2               USEFLOPPYB      = 0             ; SET TO ONE FOR FLOPPY = "B"
008800  2               USEIDEC         = 1             ; SET TO ONE FOR IDE HDD="C"
008800  2               USEDSKY         = 0             ; SEND INFO TO DSKY
008800  2               USEDSKYNG       = 1             ; SEND INFO TO DSKYNG
008800  2               DSKY_KBD        = 1             ; USE DSKY KEYBOARD?
008800  2               DEFDRV          = 2             ; SET TO DEFAULT DRIVE LETTER
008800  2               USEDISKIOV1     = 0             ; Floppy and IDE card is  DISK IO V1
008800  2               USEDISKIOV3     = 0             ; Floppy and IDE card is  DISK IO V3
008800  2               
008800  2               FLPA35          = 0             ; set to 1 if floppy a is A 3.5" 80 track drive (0= 5.25" 40 track drive)
008800  2               FLPB35          = 0             ; set to 1 if floppy a is B 3.5" 80 track drive (0= 5.25" 40 track drive)
008800  2               
008800  2               DSKYOSC         = 1000000
008800  2               USEROM          = 0
008800  2               
008800  1               
008800  1               ; for Nhyodyne:
008800  1               ; RAM BANK $0C is RAM area for Drivers
008800  1               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
008800  1               ; RAM BANK $0F is fixed bank $0000-$7FFF
008800  1               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code (AS A SECONDARY CPU)
008800  1               
008800  1               ;       Area from $0C:8000 to $0C:8800 reserved for work RAM for drivers (FOR SECONDARY CPU, UNDER ROMWBW)
008800  1               ;       Area from $0C:8000 to $0C:8800 reserved for ROM for drivers (FOR PRIMARY CPU, NO ROMWBW)
008800  1               ;
008800  1               
008800  1               ;__DISPATCHER________________________________________________________________________________________
008800  1               ;
008800  1               ;  Function dispatcher
008800  1               ;  function to call is located in "farfunct"
008800  1               ;____________________________________________________________________________________________________
008800  1               ;
008800  1  48                   PHA
008801  1  DA                   PHX
008802  1  A5 32                LDA     farfunct
008804  1  0A                   ASL     A               ; DOUBLE NUMBER FOR TABLE LOOKUP
008805  1  AA                   TAX
008806  1  BD 15 88             LDA     DISPATCHTABLE,X
008809  1  85 33                STA     farpointer
00880B  1  BD 16 88             LDA     DISPATCHTABLE+1,X
00880E  1  85 34                STA     farpointer+1
008810  1               
008810  1  FA                   PLX
008811  1  68                   PLA
008812  1  6C 33 00             JMP     (farpointer)
008815  1               
008815  1               
008815  1               DISPATCHTABLE:
008815  1  C4 88                .WORD   WRSER1          ; FUNCTION 00 - WRITE SERIAL PORT
008817  1  D3 88                .WORD   RDSER1          ; FUNCTION 01 - READ SERIAL PORT
008819  1  E3 88                .WORD   RDSER1W         ; FUNCTION 02 - READ SERIAL PORT (BLOCKING)
00881B  1  F2 88                .WORD   SERIALSTATUS    ; FUNCTION 03 - GET SERIAL STATUS
00881D  1               
00881D  1  04 89                .WORD   PPIDE_INIT      ; FUNCTION 04 - called during OS init
00881F  1  A8 8B                .WORD   IDE_READ_SECTOR ; FUNCTION 05 - read a sector from drive
008821  1  FF 8B                .WORD   IDE_WRITE_SECTOR; FUNCTION 06 - write a sector to drive
008823  1               
008823  1  10 8F                .WORD   DSKY_INIT       ; FUNCTION 07 -
008825  1  B7 90                .WORD   DSKY_SHOW       ; FUNCTION 08 -
008827  1  82 90                .WORD   DSKY_BIN2SEG    ; FUNCTION 09 -
008829  1  04 90                .WORD   DSKY_RESET      ; FUNCTION 10 -
00882B  1  1F 90                .WORD   DSKY_STAT       ; FUNCTION 11 -
00882D  1  2C 90                .WORD   DSKY_GETKEY     ; FUNCTION 12 -
00882F  1  86 91                .WORD   DSKY_BEEP       ; FUNCTION 13 -
008831  1  B3 91                .WORD   DSKY_L1ON       ; FUNCTION 14 -
008833  1  C4 91                .WORD   DSKY_L2ON       ; FUNCTION 15 -
008835  1  D5 91                .WORD   DSKY_L1OFF      ; FUNCTION 16 -
008837  1  E6 91                .WORD   DSKY_L2OFF      ; FUNCTION 17 -
008839  1  6F 91                .WORD   DSKY_PUTLED     ; FUNCTION 18 -
00883B  1  3D 91                .WORD   DSKY_BLANK      ; FUNCTION 19 -
00883D  1               
00883D  1  7B 92                .WORD   MD_READ_SECTOR  ; FUNCTION 20 - read a sector from memory device
00883F  1  B8 92                .WORD   MD_WRITE_SECTOR ; FUNCTION 21 - write a sector to memory device
008841  1  36 92                .WORD   MD_SHOW         ; FUNCTION 22 - md show information
008843  1               
008843  1  FA 96                .WORD   FL_READ_SECTOR  ; FUNCTION 23 - read a sector from floppy device
008845  1  83 97                .WORD   FL_WRITE_SECTOR ; FUNCTION 24 - write a sector to floppy device
008847  1  DD 95                .WORD   FL_SETUP        ; FUNCTION 25 - init floppy device
008849  1  FA 96                .WORD   FL_READ_SECTOR  ; FUNCTION 26 - read a sector from floppy device
00884B  1  83 97                .WORD   FL_WRITE_SECTOR ; FUNCTION 27 - write a sector to floppy device
00884D  1               
00884D  1  0F 8E                .WORD   IDE_STORE_BOOT_IMAGE; FUNCTION 28 - save a boot image to a ppide device
00884F  1  64 8E                .WORD   IDE_RESTORE_BOOT_IMAGE; FUNCTION 29 - restore a boot image from a ppide device
008851  1               
008851  1               
008851  1               ;__DRIVERS___________________________________________________________________________________________
008851  1               ;
008851  1                       .INCLUDE "drvmacro.asm"
008851  2               ;__MACRO___________________________________________________________________________________________________________________
008851  2               ;
008851  2               ; 	Macros for the betterment of Mankind
008851  2               ;________________________________________________________________________________________________________________________________
008851  2               ;
008851  2               
008851  2               .macro          PRTDBG      message
008851  2               .LOCAL p1
008851  2               .LOCAL p2
008851  2               .LOCAL p3
008851  2               .LOCAL p4
008851  2               .LOCAL p5
008851  2                 .if     .paramcount <> 1
008851  2                       .error  "Too few parameters for macro PRTDBG"
008851  2                       .endif
008851  2                       .if DEBUG=1
008851  2                       PHA
008851  2                       PHX
008851  2                       PHY
008851  2                       LDX #$00
008851  2               p1:
008851  2                       LDA p4,x
008851  2                       INX
008851  2                       CMP #'$'
008851  2                       BEQ p2
008851  2                       JSR CONSOLE_OUT
008851  2                       JMP p1
008851  2               p2:
008851  2                       LDA #13
008851  2                       jsr CONSOLE_OUT
008851  2                       LDA #10
008851  2                       jsr CONSOLE_OUT
008851  2                       PLY
008851  2                       plx
008851  2                       pla
008851  2                       JMP p5
008851  2               p4:
008851  2                       .BYTE message
008851  2               p5:
008851  2                       .endif
008851  2               .endmacro
008851  2               
008851  2               .macro          PRTS      message
008851  2               .LOCAL p1
008851  2               .LOCAL p2
008851  2               .LOCAL p3
008851  2               .LOCAL p4
008851  2               .LOCAL p5
008851  2                 .if     .paramcount <> 1
008851  2                       .error  "Too few parameters for macro PRTS"
008851  2                       .endif
008851  2                       PHA
008851  2                       PHX
008851  2                       PHY
008851  2                       LDX #$00
008851  2               p1:
008851  2                       LDA p4,x
008851  2                       INX
008851  2                       CMP #'$'
008851  2                       BEQ p2
008851  2                       JSR CONSOLE_OUT
008851  2                       JMP p1
008851  2               p2:
008851  2                       PLY
008851  2                       plx
008851  2                       pla
008851  2                       JMP p5
008851  2               p4:
008851  2                       .BYTE message
008851  2               p5:
008851  2               .endmacro
008851  2               
008851  2               .macro          DBGFLAG      character
008851  2                 .if     .paramcount <> 1
008851  2                       .error  "Too few parameters for macro DBGFLAG"
008851  2                       .endif
008851  2                       .if DEBUG=1
008851  2                       PHA
008851  2                       LDA #character
008851  2                       JSR CONSOLE_OUT
008851  2                       pla
008851  2                       .endif
008851  2               .endmacro
008851  2               
008851  2               
008851  2               ;__PRTHEXBYTE__________________________________________________
008851  2               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
008851  2               ;______________________________________________________________
008851  2               PRTHEXBYTE:
008851  2  48                   PHA
008852  2  DA                   PHX
008853  2  5A                   PHY
008854  2  AA                   TAX				; SAVE A REGISTER
008855  2  4A                   LSR 				; SHIFT HIGH NIBBLE TO LOW NIBBLE
008856  2  4A                   LSR 				;
008857  2  4A                   LSR 				;
008858  2  4A                   LSR 				;
008859  2  18                   CLC               		; CLEAR CARRY
00885A  2  20 65 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
00885D  2  8A                   TXA				; RESTORE ACCUMULATOR
00885E  2  20 65 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
008861  2  7A                   PLY
008862  2  FA                   plx
008863  2  68                   PLA
008864  2  60                   RTS
008865  2               
008865  2               ;__PRINT_DIGIT_________________________________________________
008865  2               ;
008865  2               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
008865  2               ;
008865  2               ;______________________________________________________________
008865  2               PRINT_DIGIT:
008865  2  29 0F                       AND #$0F				; STRIP OFF HIGH NIBBLE
008867  2  09 30                       ORA #$30				; ADD $30 TO PRODUCE ASCII
008869  2  C9 3A                       CMP #$3A               		; IS GREATER THAN 9
00886B  2  30 03                       BMI PRINT_DIGIT_OUT		; NO, SKIP ADD
00886D  2  18                          CLC				; CLEAR CARRY
00886E  2  69 07                       ADC #$07				; ADD ON FOR LETTER VALUES
008870  2               PRINT_DIGIT_OUT:					;
008870  2  4C 53 9A                    JMP CONSOLE_OUT              		; PRINT OUT CHAR
008873  2               
008873  2               NEWLINE:
008873  2  48                           pha
008874  2  DA                           PHX
008875  2  5A                           phy
008876  2  A9 0D                        LDA #$0D
008878  2  20 53 9A                     JSR CONSOLE_OUT
00887B  2  A9 0A                        LDA #$0A
00887D  2  20 53 9A                     Jsr CONSOLE_OUT
008880  2  7A                           ply
008881  2  FA                           plx
008882  2  68                           pla
008883  2  60                           rts
008884  2               
008884  2               PRTDEC:
008884  2  5A                           phy
008885  2  DA                           PHX
008886  2  48                           PHA
008887  2  A0 00                        ldy #00
008889  2  A2 FF                        LDX #$FF
00888B  2  38                           SEC
00888C  2               PrDec100:
00888C  2  E8                           INX
00888D  2  E9 64                        SBC #100
00888F  2  B0 FB                        BCS PrDec100            ;Count how many 100s
008891  2  69 64                        ADC #100
008893  2  20 AD 88                     JSR PrDecDigit          ;Print the 100s
008896  2  A2 FF                        LDX #$FF
008898  2  38                           SEC                     ;Prepare for subtraction
008899  2               PrDec10:
008899  2  E8                           INX
00889A  2  E9 0A                        SBC #10
00889C  2  B0 FB                        BCS PrDec10             ;Count how many 10s
00889E  2  69 0A                        ADC #10
0088A0  2  20 AD 88                     JSR PrDecDigit          ;Print the 10s
0088A3  2  AA                           TAX                     ;Pass 1s into X
0088A4  2  A0 01                        ldy #1
0088A6  2  20 AD 88                     JSR PrDecDigit          ;Print the 1s
0088A9  2  68                           PLA
0088AA  2  FA                           PLX
0088AB  2  7A                           ply
0088AC  2  60                           RTS
0088AD  2               PrDecDigit:
0088AD  2  48                           PHA
0088AE  2  C0 00                        cpy #$00
0088B0  2  D0 09                        bne PrDecDigit1
0088B2  2  8A                           txa
0088B3  2  A8                           tay
0088B4  2  C0 00                        cpy #$00
0088B6  2  D0 03                        bne PrDecDigit1
0088B8  2  4C C1 88                     jmp PrDecDigit2
0088BB  2               PrDecDigit1:
0088BB  2  8A                           TXA                     ;Save A, pass digit to A
0088BC  2  09 30                        ORA #'0'
0088BE  2  20 53 9A                     JSR  CONSOLE_OUT        ;Convert to character and print it
0088C1  2               PrDecDigit2:
0088C1  2  68                           PLA
0088C2  2  60                           RTS                     ;Restore A and return
0088C3  2               
0088C3  1                       .INCLUDE "dosser.asm"
0088C3  2               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
0088C3  2               ;
0088C3  2               ; 	Nhyodyne serial drivers for single serial port card
0088C3  2               ;
0088C3  2               ;	Entry points:
0088C3  2               ;		SERIALINIT  - called during OS init
0088C3  2               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
0088C3  2               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
0088C3  2               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
0088C3  2               ;		SERIALSTATUS- GET UART STATUS
0088C3  2               ;________________________________________________________________________________________________________________________________
0088C3  2               ;
0088C3  2               
0088C3  2               
0088C3  2               ;*
0088C3  2               ;* HARDWARE I/O ADDRESSES
0088C3  2               ;*
0088C3  2               
0088C3  2               ; UART 16C550 SERIAL
0088C3  2               UART0           = $0368         ; DATA IN/OUT
0088C3  2               UART1           = $0369         ; CHECK RX
0088C3  2               UART2           = $036A         ; INTERRUPTS
0088C3  2               UART3           = $036B         ; LINE CONTROL
0088C3  2               UART4           = $036C         ; MODEM CONTROL
0088C3  2               UART5           = $036D         ; LINE STATUS
0088C3  2               UART6           = $036E         ; MODEM STATUS
0088C3  2               UART7           = $036F         ; SCRATCH REG.
0088C3  2               
0088C3  2               
0088C3  2               ;__SERIALINIT____________________________________________________________________________________________________________________
0088C3  2               ;
0088C3  2               ;	INITIALIZE SERIAL PORTS
0088C3  2               ;________________________________________________________________________________________________________________________________
0088C3  2               ;
0088C3  2               SERIALINIT:
0088C3  2               ;	LDA	#$80			;
0088C3  2               ;	STA	UART3			; SET DLAB FLAG
0088C3  2               ;	LDA	#12			; SET TO 12 = 9600 BAUD
0088C3  2               ;	STA	UART0			; save baud rate
0088C3  2               ;	LDA	#00			;
0088C3  2               ;	STA	UART1			;
0088C3  2               ;	LDA	#03			;
0088C3  2               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
0088C3  2               ;	STA	UART4			;
0088C3  2               
0088C3  2  60                   RTS
0088C4  2               
0088C4  2               
0088C4  2               
0088C4  2               ;__WRSER1________________________________________________________________________________________________________________________
0088C4  2               ;
0088C4  2               ;	WRITE CHARACTER(A) TO UART
0088C4  2               ;________________________________________________________________________________________________________________________________
0088C4  2               ;
0088C4  2               WRSER1:
0088C4  2  48                   PHA
0088C5  2               WRSER1a:
0088C5  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0088C8  2  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
0088CA  2  C9 00                CMP     #$00
0088CC  2  F0 F7                BEQ     WRSER1a         ; NO, WAIT FOR IT
0088CE  2  68                   PLA
0088CF  2  8D 68 03             STA     UART0           ; THEN WRITE THE CHAR TO UART
0088D2  2  60                   RTS
0088D3  2               
0088D3  2               ;__RDSER1________________________________________________________________________________________________________________________
0088D3  2               ;
0088D3  2               ;	READ CHARACTER FROM UART TO (A)
0088D3  2               ;________________________________________________________________________________________________________________________________
0088D3  2               ;
0088D3  2               RDSER1:
0088D3  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0088D6  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
0088D8  2  C9 00                CMP     #$00
0088DA  2  F0 04                BEQ     RDSER1N         ; LOOP UNTIL DATA IS READY
0088DC  2  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
0088DF  2  60                   RTS
0088E0  2               RDSER1N:
0088E0  2  A9 00                LDA     #$00            ;
0088E2  2  60                   RTS                     ;
0088E3  2               
0088E3  2               ;__RDSER1W_______________________________________________________________________________________________________________________
0088E3  2               ;
0088E3  2               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
0088E3  2               ;________________________________________________________________________________________________________________________________
0088E3  2               ;
0088E3  2               
0088E3  2               RDSER1W:
0088E3  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0088E6  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
0088E8  2  C9 00                CMP     #$00
0088EA  2  F0 F7                BEQ     RDSER1W         ; LOOP UNTIL DATA IS READY
0088EC  2  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
0088EF  2  29 7F                AND     #$7F
0088F1  2  60                   RTS
0088F2  2               
0088F2  2               ;__SERIALSTATUS__________________________________________________________________________________________________________________
0088F2  2               ;
0088F2  2               ;	READ UARD STATUS
0088F2  2               ;________________________________________________________________________________________________________________________________
0088F2  2               ;
0088F2  2               SERIALSTATUS:
0088F2  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0088F5  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
0088F7  2  C9 00                CMP     #$00
0088F9  2  F0 03                BEQ     RDSTAT1         ; NO, INDICATE NO CHAR
0088FB  2  A9 FF                LDA     #$FF            ; GET DATA CHAR
0088FD  2  60                   RTS
0088FE  2               RDSTAT1:
0088FE  2  A9 00                LDA     #$00            ; GET DATA CHAR
008900  2  60                   RTS
008901  2               
008901  2               ; end
008901  2               
008901  1                       .INCLUDE "doside.asm"
008901  2               ;__IDE DRIVERS___________________________________________________________________________________________________________________
008901  2               ;
008901  2               ; 	Nhyodyne IDE disk drivers for Z80PPIDE card
008901  2               ;
008901  2               ;	Entry points:
008901  2               ;		PPIDE_INIT   	- called during OS init
008901  2               ;		IDE_READ_SECTOR - read a sector from drive
008901  2               ;		IDE_WRITE_SECTOR- write a sector to drive
008901  2               ;________________________________________________________________________________________________________________________________
008901  2               ;
008901  2               PPIDE_PPI       = $0360         ; PORT A
008901  2               ;
008901  2               PPIDELO         = PPIDE_PPI+0   ; LSB
008901  2               PPIDEHI         = PPIDE_PPI+1   ; MSB
008901  2               PPIDECNTRL      = PPIDE_PPI+2   ; Control Signals
008901  2               PPIDEPPIC       = PPIDE_PPI+3   ; CONTROL BYTE PPI 82C55
008901  2               
008901  2               PPIDE_A0_LINE   = $01           ;DIRECT FROM 8255 TO IDE INTERFACE
008901  2               PPIDE_A1_LINE   = $02           ;DIRECT FROM 8255 TO IDE INTERFACE
008901  2               PPIDE_A2_LINE   = $04           ;DIRECT FROM 8255 TO IDE INTERFACE
008901  2               PPIDE_CS0_LINE  = $08           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
008901  2               PPIDE_CS1_LINE  = $10           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
008901  2               PPIDE_WR_LINE   = $20           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
008901  2               PPIDE_RD_LINE   = $40           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
008901  2               PPIDE_RST_LINE  = $80           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
008901  2               
008901  2               PPIDE_DATA      = PPIDE_CS0_LINE
008901  2               PPIDE_ERR       = PPIDE_CS0_LINE + PPIDE_A0_LINE
008901  2               PPIDE_SEC_CNT   = PPIDE_CS0_LINE + PPIDE_A1_LINE
008901  2               PPIDE_LBALOW    = PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
008901  2               PPIDE_LBAMID    = PPIDE_CS0_LINE + PPIDE_A2_LINE
008901  2               PPIDE_LBAHI     = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
008901  2               PPIDE_DEVICE    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
008901  2               PPIDE_COMMAND   = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
008901  2               PPIDE_STATUS    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
008901  2               PPIDE_CONTROL   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
008901  2               PPIDE_ASTATUS   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
008901  2               
008901  2               
008901  2               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
008901  2               PPIDE_CMD_RECAL = $10
008901  2               PPIDE_CMD_READ  = $20
008901  2               PPIDE_CMD_WRITE = $30
008901  2               PPIDE_CMD_INIT  = $91
008901  2               PPIDE_CMD_ID    = $EC
008901  2               PPIDE_CMD_SPINDOWN = $E0
008901  2               PPIDE_CMD_SPINUP = $E1
008901  2               
008901  2               
008901  2               PPRD_IDE_8255   = %10010010     ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
008901  2               PPWR_IDE_8255   = %10000000     ;ALL THREE PORTS OUTPUT
008901  2               
008901  2               
008901  2               PPIDEINDEX:
008901  2  00                   .BYTE   $00
008902  2               PPIDETIMEOUT:
008902  2  00 00                .BYTE   $00,$00
008904  2               
008904  2               ;__PPIDE_INIT_________________________________________________________________________________________
008904  2               ;
008904  2               ;  INIT AND DISPLAY IDE INFO
008904  2               ;____________________________________________________________________________________________________
008904  2               ;
008904  2               PPIDE_INIT:
008904  2                       PRTDBG  "PPIDE INIT:$"
008904  2  48 DA 5A A2          PRTS    "PPIDE :$"
008908  2  00 BD 1D 89  
00890C  2  E8 C9 24 F0  
008925  2  20 73 88             JSR     NEWLINE
008928  2  20 9A 8B             JSR     IDE_PPIDETECT   ; TEST FOR PPI HARDWARE
00892B  2  D0 35                BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
00892D  2               ;
00892D  2  48 DA 5A A2          PRTS    " IO=0x$"
008931  2  00 BD 46 89  
008935  2  E8 C9 24 F0  
00894D  2  A9 03                LDA     #>PPIDE_PPI     ; GET BASE PORT
00894F  2  20 51 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008952  2  A9 60                LDA     #<PPIDE_PPI     ; GET BASE PORT
008954  2  20 51 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008957  2               ;
008957  2  20 35 8C             JSR     PPIDE_RESET     ; RESET THE BUS
00895A  2  20 F0 89             JSR     PPIDE_PROBE     ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
00895D  2  B0 03                BCS     IDE_ABORT
00895F  2  4C 8B 89             JMP     IDE_PRINT_INFO
008962  2               IDE_ABORT:
008962  2  48 DA 5A A2          PRTS    " NOT PRESENT$" ; NOT PRESENT
008966  2  00 BD 7B 89  
00896A  2  E8 C9 24 F0  
008988  2  4C EC 89             JMP     IDE_INITA
00898B  2               IDE_PRINT_INFO:
00898B  2  20 73 88             JSR     NEWLINE
00898E  2  48 DA 5A A2          PRTS    " PPIDE0: Blocks=$"
008992  2  00 BD A7 89  
008996  2  E8 C9 24 F0  
0089B8  2  A9 00                LDA     #$00
0089BA  2  20 79 8A             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
0089BD  2  48 DA 5A A2          PRTS    " PPIDE1: Blocks=$"
0089C1  2  00 BD D6 89  
0089C5  2  E8 C9 24 F0  
0089E7  2  A9 01                LDA     #$01
0089E9  2  20 79 8A             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
0089EC  2               IDE_INITA:
0089EC  2  20 73 88             JSR     NEWLINE
0089EF  2  60                   RTS                     ; DONE
0089F0  2               ;
0089F0  2               ;__PPIDE_PROBE_______________________________________________________________________________________
0089F0  2               ;
0089F0  2               ;  PROBE FOR IDE HARDWARE
0089F0  2               ;____________________________________________________________________________________________________
0089F0  2               ;
0089F0  2               PPIDE_PROBE:
0089F0  2               ;
0089F0  2               ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
0089F0  2               ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
0089F0  2               ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
0089F0  2               ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
0089F0  2               ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
0089F0  2               ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
0089F0  2               ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
0089F0  2               ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
0089F0  2               
0089F0  2  A9 00                LDA     #$00
0089F2  2  8D 60 03             STA     PPIDELO         ; PPI PORT A, DATALO
0089F5  2               
0089F5  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY; WAIT FOR BUSY TO CLEAR
0089F8  2  B0 34                BCS     PPIDE_PROBE_FAIL; IF TIMEOUT, REPORT NO IDE PRESENT
0089FA  2  A9 0F                LDA     #PPIDE_STATUS   ; GET STATUS
0089FC  2  20 BE 8E             JSR     IDE_READ
0089FF  2  8A                   TXA
008A00  2  29 40                AND     #%01000000
008A02  2  C9 00                CMP     #$00
008A04  2  F0 28                BEQ     PPIDE_PROBE_FAIL; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
008A06  2               
008A06  2               ; CHECK SIGNATURE
008A06  2  A9 0A                LDA     #PPIDE_SEC_CNT
008A08  2  20 BE 8E             JSR     IDE_READ
008A0B  2  E0 01                CPX     #$01
008A0D  2  D0 1F                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
008A0F  2  A9 0B                LDA     #PPIDE_LBALOW
008A11  2  20 BE 8E             JSR     IDE_READ
008A14  2  E0 01                CPX     #$01
008A16  2  D0 16                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
008A18  2  A9 0C                LDA     #PPIDE_LBAMID
008A1A  2  20 BE 8E             JSR     IDE_READ
008A1D  2  E0 00                CPX     #$00
008A1F  2  D0 0D                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
008A21  2  A9 0D                LDA     #PPIDE_LBAHI
008A23  2  20 BE 8E             JSR     IDE_READ
008A26  2  E0 00                CPX     #$00
008A28  2  D0 04                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
008A2A  2  18                   CLC
008A2B  2  4C 2F 8A             JMP     PPIDE_PROBE_SUCCESS
008A2E  2               PPIDE_PROBE_FAIL:
008A2E  2  38                   SEC
008A2F  2               PPIDE_PROBE_SUCCESS:
008A2F  2  60                   RTS                     ; DONE, NOTE THAT A=0 AND Z IS SET
008A30  2               
008A30  2               
008A30  2               ;___IDE_IDENTIFY_TYPE____________________________________________________________________________________
008A30  2               ;
008A30  2               ; 	READ THE DISK TYPE AND DETERMINE IF IT IS USABLE BY DOS/65
008A30  2               ; 	A=IDE DEVICE (0=MST,1=SLV)
008A30  2               ;________________________________________________________________________________________________________
008A30  2               
008A30  2               IDE_IDENTIFY_TYPE:
008A30  2  48                   PHA
008A31  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008A34  2  B0 40                BCS     IDE_IDENTIFY_TYPE_ERROR; IF TIMEOUT, REPORT ERROR
008A36  2  A9 00                LDA     #$00
008A38  2  8D 12 05             STA     debsehd
008A3B  2  8D 10 05             STA     debcyll         ; STORE IN TRACK (lsb)
008A3E  2  8D 11 05             STA     debcylm         ; STORE IN TRACK (msb)
008A41  2  68                   PLA                     ; GET DRIVE TYPE
008A42  2  20 D5 8B             JSR     IDE_READ_SECTOR_DIRTY1
008A45  2  C9 FF                CMP     #$FF            ; IS THERE A READ ERROR?
008A47  2  F0 2D                BEQ     IDE_IDENTIFY_TYPE_ERROR
008A49  2  AD DB 95             LDA     hstbuf+$01FE
008A4C  2  C9 55                CMP     #$55
008A4E  2  D0 23                BNE     IDE_IDENTIFY_TYPE_OK
008A50  2  AD DC 95             LDA     hstbuf+$01FF
008A53  2  C9 AA                CMP     #$AA
008A55  2  D0 1C                BNE     IDE_IDENTIFY_TYPE_OK
008A57  2  AD 9F 95             LDA     hstbuf+$01C2
008A5A  2  C9 00                CMP     #$00
008A5C  2  D0 18                BNE     IDE_IDENTIFY_TYPE_ERROR
008A5E  2  AD AF 95             LDA     hstbuf+$01D2
008A61  2  C9 00                CMP     #$00
008A63  2  D0 11                BNE     IDE_IDENTIFY_TYPE_ERROR
008A65  2  AD BF 95             LDA     hstbuf+$01E2
008A68  2  C9 00                CMP     #$00
008A6A  2  D0 0A                BNE     IDE_IDENTIFY_TYPE_ERROR
008A6C  2  AD CF 95             LDA     hstbuf+$01F2
008A6F  2  C9 00                CMP     #$00
008A71  2  D0 03                BNE     IDE_IDENTIFY_TYPE_ERROR
008A73  2               IDE_IDENTIFY_TYPE_OK:
008A73  2  A9 00                LDA     #$00            ; EVERYTHING IS AWESOME
008A75  2  60                   RTS
008A76  2               IDE_IDENTIFY_TYPE_ERROR:
008A76  2  A9 FF                LDA     #$FF            ; SIGNIFY ERROR
008A78  2  60                   RTS
008A79  2               
008A79  2               
008A79  2               ;*__IDE_READ_INFO___________________________________________________________________________________
008A79  2               ;*
008A79  2               ;*  READ IDE INFORMATION
008A79  2               ;*	CARRY SET ON ERROR
008A79  2               ;* 	A=MST/SLV
008A79  2               ;*____________________________________________________________________________________________________
008A79  2               IDE_READ_INFO:
008A79  2                       PRTDBG  "IDE Read INFORMATION$"
008A79  2  48                   PHA
008A7A  2  48                   PHA
008A7B  2               ; SET DRIVE BIT
008A7B  2  29 01                AND     #$01            ; ONLY WANT THE 1 BIT (MST/SLV)
008A7D  2  0A                   ASL     a               ; SHIFT 4
008A7E  2  0A                   ASL     a               ;
008A7F  2  0A                   ASL     a               ;
008A80  2  0A                   ASL     a               ;
008A81  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
008A83  2  AA                   TAX
008A84  2  A0 00                LDY     #$00
008A86  2  A9 0E                LDA     #PPIDE_DEVICE
008A88  2  20 DA 8E             JSR     IDE_WRITE
008A8B  2               
008A8B  2               
008A8B  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008A8E  2  B0 4E                BCS     IDE_READ_INFO_ABORT
008A90  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
008A92  2  A2 EC                LDX     #PPIDE_CMD_ID
008A94  2  20 DA 8E             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
008A97  2  20 88 8C             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
008A9A  2  B0 42                BCS     IDE_READ_INFO_ABORT
008A9C  2  20 B8 8C             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
008A9F  2  48 DA 5A A2          PRTS    "0x$"
008AA3  2  00 BD B8 8A  
008AA7  2  E8 C9 24 F0  
008ABB  2  AD 58 94             LDA     hstbuf+123
008ABE  2  20 51 88             JSR     PRTHEXBYTE
008AC1  2  AD 57 94             LDA     hstbuf+122
008AC4  2  20 51 88             JSR     PRTHEXBYTE
008AC7  2  AD 56 94             LDA     hstbuf+121
008ACA  2  20 51 88             JSR     PRTHEXBYTE
008ACD  2  AD 55 94             LDA     hstbuf+120
008AD0  2  20 51 88             JSR     PRTHEXBYTE
008AD3  2  68                   PLA
008AD4  2  20 30 8A             JSR     IDE_IDENTIFY_TYPE
008AD7  2  C9 00                CMP     #$00
008AD9  2  D0 32                BNE     IDE_READ_INFO_BADFS
008ADB  2  4C 3F 8B             JMP     IDE_READ_INFO_OK
008ADE  2               IDE_READ_INFO_ABORT:
008ADE  2  68                   PLA
008ADF  2  48 DA 5A A2          PRTS    "NOT PRESENT$"  ; NOT PRESENT
008AE3  2  00 BD F8 8A  
008AE7  2  E8 C9 24 F0  
008B04  2  20 73 88             JSR     NEWLINE
008B07  2  68                   PLA
008B08  2  20 76 8B             JSR     IDE_REMOVE_DRIVE_ASSIGNMENTS
008B0B  2  38                   SEC
008B0C  2  60                   RTS                     ;
008B0D  2               IDE_READ_INFO_BADFS:
008B0D  2  48 DA 5A A2          PRTS    " BAD FILESYSTEM$"; NOT PRESENT
008B11  2  00 BD 26 8B  
008B15  2  E8 C9 24 F0  
008B36  2  20 73 88             JSR     NEWLINE
008B39  2  68                   PLA
008B3A  2  20 76 8B             JSR     IDE_REMOVE_DRIVE_ASSIGNMENTS
008B3D  2  38                   SEC
008B3E  2  60                   RTS                     ;
008B3F  2               IDE_READ_INFO_OK:
008B3F  2  48 DA 5A A2          PRTS    " FILE SYSTEM COMPATIBLE$"; NOT PRESENT
008B43  2  00 BD 58 8B  
008B47  2  E8 C9 24 F0  
008B70  2  20 73 88             JSR     NEWLINE
008B73  2  68                   PLA
008B74  2  18                   CLC
008B75  2  60                   RTS
008B76  2               
008B76  2               IDE_REMOVE_DRIVE_ASSIGNMENTS:
008B76  2  18                   CLC
008B77  2  69 30                ADC     #$30
008B79  2  A2 00                LDX     #$00
008B7B  2               @1:
008B7B  2  DD 14 05             CMP     dskcfg,X        ; GET device
008B7E  2  F0 09                BEQ     @2
008B80  2  E8                   INX
008B81  2  E8                   INX
008B82  2  E0 10                CPX     #16
008B84  2  D0 F5                BNE     @1
008B86  2  4C 99 8B             JMP     @3
008B89  2               @2:
008B89  2  48                   PHA
008B8A  2  A9 00                LDA     #$00
008B8C  2  9D 14 05             STA     dskcfg,X        ; SET device
008B8F  2  E8                   INX
008B90  2  9D 14 05             STA     dskcfg,X        ; SET device
008B93  2  68                   PLA
008B94  2  E8                   INX
008B95  2  E0 10                CPX     #16
008B97  2  D0 E2                BNE     @1
008B99  2               @3:
008B99  2  60                   RTS
008B9A  2               
008B9A  2               ;__IDE_PPIDETECT____________________________________________________________________________________
008B9A  2               ;
008B9A  2               ;  PROBE FOR PPI HARDWARE
008B9A  2               ;____________________________________________________________________________________________________
008B9A  2               ;
008B9A  2               IDE_PPIDETECT:
008B9A  2               ;
008B9A  2               ; TEST FOR PPI EXISTENCE
008B9A  2               ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
008B9A  2               ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
008B9A  2               ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
008B9A  2               ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
008B9A  2               ; INTERFERE WITH THE VALUE BEING READ.
008B9A  2  20 FE 8E             JSR     SET_PPI_WR
008B9D  2               ;
008B9D  2  A9 00                LDA     #$00            ; VALUE ZERO
008B9F  2  8D 60 03             STA     PPIDELO         ; PUSH VALUE TO PORT
008BA2  2  AD 60 03             LDA     PPIDELO         ; GET PORT VALUE
008BA5  2  C9 00                CMP     #$00
008BA7  2  60                   RTS                     ; AND RETURN
008BA8  2               ;
008BA8  2               
008BA8  2               
008BA8  2               ;*__IDE_READ_SECTOR___________________________________________________________________________________
008BA8  2               ;*
008BA8  2               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
008BA8  2               ;*
008BA8  2               ;*____________________________________________________________________________________________________
008BA8  2               IDE_READ_SECTOR:
008BA8  2                       PRTDBG  "IDE Read Sector$"
008BA8  2  20 AF 8B             JSR     IDE_READ_RAW_SECTOR
008BAB  2  20 23 93             JSR     DEBSECR512
008BAE  2  60                   RTS
008BAF  2               
008BAF  2               IDE_READ_RAW_SECTOR:
008BAF  2                       PRTDBG  "IDE Read Raw Sector$"
008BAF  2  20 54 8D             JSR     IDE_CONVERT_SECTOR;
008BB2  2               
008BB2  2  AD 12 05             LDA     debsehd         ; STORE CURRENT PARMS
008BB5  2  CD 0C 8F             CMP     Cdebsehd        ;
008BB8  2  D0 13                BNE     IDE_READ_SECTOR_DIRTY
008BBA  2  AD 11 05             LDA     debcylm         ;
008BBD  2  CD 0B 8F             CMP     Cdebcylm        ;
008BC0  2  D0 0B                BNE     IDE_READ_SECTOR_DIRTY
008BC2  2  AD 10 05             LDA     debcyll         ;
008BC5  2  CD 0A 8F             CMP     Cdebcyll        ;
008BC8  2  D0 03                BNE     IDE_READ_SECTOR_DIRTY
008BCA  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
008BCC  2  60                   RTS
008BCD  2               
008BCD  2               IDE_READ_SECTOR_DIRTY:
008BCD  2                       PRTDBG  "IDE Read Sector Buffer Dirty$"
008BCD  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008BD0  2  B0 2A                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008BD2  2  20 6D 93             JSR     GET_DRIVE_DEVICE
008BD5  2               IDE_READ_SECTOR_DIRTY1:
008BD5  2  20 24 8D             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
008BD8  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
008BDA  2  A2 20                LDX     #PPIDE_CMD_READ
008BDC  2  20 DA 8E             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
008BDF  2  20 88 8C             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
008BE2  2  B0 18                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008BE4  2  20 B8 8C             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
008BE7  2  AD 12 05             LDA     debsehd         ; STORE CURRENT PARMS
008BEA  2  8D 0C 8F             STA     Cdebsehd        ;
008BED  2  AD 10 05             LDA     debcyll         ;
008BF0  2  8D 0A 8F             STA     Cdebcyll        ;
008BF3  2  AD 11 05             LDA     debcylm         ;
008BF6  2  8D 0B 8F             STA     Cdebcylm        ;
008BF9  2               
008BF9  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
008BFB  2  60                   RTS
008BFC  2               IDE_READ_SECTOR_DIRTY_ERROR:
008BFC  2  A9 FF                LDA     #$FF            ; ZERO = 1 ON RETURN = OPERATION OK
008BFE  2  60                   RTS
008BFF  2               
008BFF  2               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
008BFF  2               ;*
008BFF  2               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
008BFF  2               ;*
008BFF  2               ;*____________________________________________________________________________________________________
008BFF  2               IDE_WRITE_SECTOR:
008BFF  2                       PRTDBG  "IDE Write Sector$"
008BFF  2  20 AF 8B             JSR     IDE_READ_RAW_SECTOR; determine physical sector
008C02  2  20 4C 93             JSR     BLKSECR512      ; block sector for writing
008C05  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008C08  2  B0 28                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C0A  2  20 6D 93             JSR     GET_DRIVE_DEVICE
008C0D  2               IDE_WRITE_SECTOR_RAW:
008C0D  2  20 24 8D             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
008C10  2  A9 0F                LDA     #PPIDE_COMMAND
008C12  2  A2 30                LDX     #PPIDE_CMD_WRITE
008C14  2  20 DA 8E             JSR     IDE_WRITE       ;TELL DRIVE TO WRITE A SECTOR
008C17  2  20 88 8C             JSR     IDE_WAIT_DRQ    ;WAIT UNIT IT WANTS THE DATA
008C1A  2  B0 16                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C1C  2  20 ED 8C             JSR     IDE_WRITE_BUFFER;GIVE THE DATA TO THE DRIVE
008C1F  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;WAIT UNTIL THE WRITE IS COMPLETE
008C22  2  B0 0E                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C24  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
008C26  2  8D 0C 8F             STA     Cdebsehd        ;
008C29  2  8D 0A 8F             STA     Cdebcyll        ;
008C2C  2  8D 0B 8F             STA     Cdebcylm        ;
008C2F  2               
008C2F  2  A9 00                LDA     #$00            ; ZERO ON RETURN = OPERATION OK
008C31  2  60                   RTS
008C32  2               IDE_WRITE_SECTOR_ERROR:
008C32  2  A9 FF                LDA     #$FF            ; 1 ON RETURN = OPERATION FAIL
008C34  2  60                   RTS
008C35  2               
008C35  2               ;*__PPIDE_RESET____________________________________________________________________________________
008C35  2               ;*
008C35  2               ;*  SOFT RESET IDE CHANNEL
008C35  2               ;*
008C35  2               ;*____________________________________________________________________________________________________
008C35  2               PPIDE_RESET:
008C35  2                       PRTDBG  "IDE Reset$"
008C35  2  A9 00                LDA     #$00
008C37  2  8D 12 05             STA     debsehd
008C3A  2  8D 10 05             STA     debcyll
008C3D  2  8D 11 05             STA     debcylm
008C40  2  A9 FF                LDA     #$FF            ;
008C42  2  8D 0C 8F             STA     Cdebsehd        ;
008C45  2  8D 0A 8F             STA     Cdebcyll        ;
008C48  2  8D 0B 8F             STA     Cdebcylm        ;
008C4B  2               
008C4B  2  A9 80                LDA     #PPIDE_RST_LINE
008C4D  2  8D 62 03             STA     PPIDECNTRL      ; ASSERT RST LINE ON IDE INTERFACE
008C50  2  A2 00                LDX     #$00
008C52  2                       PRTDBG  "IDE Reset Delay$"
008C52  2               RST_DLY:
008C52  2  CA                   DEX
008C53  2  E0 00                CPX     #$00
008C55  2  D0 FB                BNE     RST_DLY
008C57  2  A9 00                LDA     #$00
008C59  2  8D 62 03             STA     PPIDECNTRL      ; DEASSERT RST LINE ON IDE INTERFACE
008C5C  2               
008C5C  2               ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
008C5C  2               ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
008C5C  2                       .IF     (USEDSKYNG=1)
008C5C  2  20 FC 8F                 JSR     DSKY_REINIT
008C5F  2                       .ENDIF
008C5F  2               
008C5F  2  60                   RTS
008C60  2               
008C60  2               
008C60  2               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
008C60  2               ;*
008C60  2               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
008C60  2               ;*
008C60  2               ;*____________________________________________________________________________________________________
008C60  2               IDE_WAIT_NOT_BUSY:
008C60  2  DA                   PHX
008C61  2  5A                   PHY
008C62  2  48                   PHA
008C63  2  A9 00                LDA     #$00
008C65  2  8D 02 89             STA     PPIDETIMEOUT
008C68  2  8D 03 89             STA     PPIDETIMEOUT+1
008C6B  2               IDE_WAIT_NOT_BUSY1:
008C6B  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR RDY BIT TO BE SET
008C6D  2  20 BE 8E             JSR     IDE_READ
008C70  2  8A                   TXA
008C71  2  29 80                AND     #$80
008C73  2  F0 0E                BEQ     IDE_WAIT_NOT_BUSY2
008C75  2  EE 02 89             INC     PPIDETIMEOUT
008C78  2  D0 F1                BNE     IDE_WAIT_NOT_BUSY1
008C7A  2  EE 03 89             INC     PPIDETIMEOUT+1
008C7D  2  D0 EC                BNE     IDE_WAIT_NOT_BUSY1
008C7F  2  38                   SEC
008C80  2  4C 84 8C             JMP     IDE_WAIT_NOT_BUSY3
008C83  2               IDE_WAIT_NOT_BUSY2:
008C83  2  18                   CLC
008C84  2               IDE_WAIT_NOT_BUSY3:
008C84  2  68                   PLA
008C85  2  7A                   PLY
008C86  2  FA                   PLX
008C87  2  60                   RTS
008C88  2               
008C88  2               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
008C88  2               ;*
008C88  2               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
008C88  2               ;*
008C88  2               ;*____________________________________________________________________________________________________
008C88  2               IDE_WAIT_DRQ:
008C88  2  DA                   PHX
008C89  2  5A                   PHY
008C8A  2  48                   PHA
008C8B  2  A9 00                LDA     #$00
008C8D  2  8D 02 89             STA     PPIDETIMEOUT
008C90  2  8D 03 89             STA     PPIDETIMEOUT+1
008C93  2               IDE_WAIT_DRQ1:
008C93  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR DRQ BIT TO BE SET
008C95  2  20 BE 8E             JSR     IDE_READ
008C98  2  8A                   TXA
008C99  2  29 88                AND     #%10001000      ; MASK OFF BUSY(7) AND DRQ(3)
008C9B  2  C9 08                CMP     #%00001000      ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
008C9D  2  F0 14                BEQ     IDE_WAIT_DRQ2
008C9F  2  29 01                AND     #%00000001      ; IS ERROR?
008CA1  2  C9 01                CMP     #%00000001      ;
008CA3  2  F0 0A                BEQ     IDE_WAIT_DRQE
008CA5  2  EE 02 89             INC     PPIDETIMEOUT
008CA8  2  D0 E9                BNE     IDE_WAIT_DRQ1
008CAA  2  EE 03 89             INC     PPIDETIMEOUT+1
008CAD  2  D0 E4                BNE     IDE_WAIT_DRQ1
008CAF  2               IDE_WAIT_DRQE:
008CAF  2  38                   SEC
008CB0  2  4C B4 8C             JMP     IDE_WAIT_DRQ3
008CB3  2               IDE_WAIT_DRQ2:
008CB3  2  18                   CLC
008CB4  2               IDE_WAIT_DRQ3:
008CB4  2  68                   PLA
008CB5  2  7A                   PLY
008CB6  2  FA                   PLX
008CB7  2  60                   RTS
008CB8  2               
008CB8  2               
008CB8  2               
008CB8  2               ;*__IDE_READ_BUFFER___________________________________________________________________________________
008CB8  2               ;*
008CB8  2               ;*  READ IDE BUFFER LITTLE ENDIAN
008CB8  2               ;*
008CB8  2               ;*____________________________________________________________________________________________________
008CB8  2               IDE_READ_BUFFER:
008CB8  2  A2 00                LDX     #$00            ; INDEX
008CBA  2               IDEBUFRD:
008CBA  2  8E 01 89             STX     PPIDEINDEX
008CBD  2  A9 08                LDA     #PPIDE_DATA
008CBF  2  20 BE 8E             JSR     IDE_READ
008CC2  2  8A                   TXA
008CC3  2  AE 01 89             LDX     PPIDEINDEX
008CC6  2  9D DD 93             STA     hstbuf,X        ;
008CC9  2  E8                   INX                     ;
008CCA  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
008CCB  2  9D DD 93             STA     hstbuf,X        ;
008CCE  2  E8                   INX
008CCF  2  E0 00                CPX     #$00            ;
008CD1  2  D0 E7                BNE     IDEBUFRD        ;
008CD3  2               IDEBUFRD1:
008CD3  2  8E 01 89             STX     PPIDEINDEX
008CD6  2  A9 08                LDA     #PPIDE_DATA
008CD8  2  20 BE 8E             JSR     IDE_READ
008CDB  2  8A                   TXA
008CDC  2  AE 01 89             LDX     PPIDEINDEX
008CDF  2  9D DD 94             STA     hstbuf+256,X    ;
008CE2  2  E8                   INX                     ;
008CE3  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
008CE4  2  9D DD 94             STA     hstbuf+256,X    ;
008CE7  2  E8                   INX                     ;
008CE8  2  E0 00                CPX     #$00            ;
008CEA  2  D0 E7                BNE     IDEBUFRD1       ;
008CEC  2  60                   RTS                     ;
008CED  2               
008CED  2               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
008CED  2               ;*
008CED  2               ;*  WRITE IDE BUFFER LITTLE ENDIAN
008CED  2               ;*
008CED  2               ;*____________________________________________________________________________________________________
008CED  2               IDE_WRITE_BUFFER:
008CED  2  A2 00                LDX     #$00            ; INDEX
008CEF  2               IDEBUFWT:
008CEF  2  8E 01 89             STX     PPIDEINDEX
008CF2  2  BD DE 93             LDA     hstbuf+1,X      ; SECTORS ARE BIG ENDIAN
008CF5  2  A8                   TAY                     ;
008CF6  2  BD DD 93             LDA     hstbuf,X        ; SECTORS ARE BIG ENDIAN
008CF9  2  AA                   TAX
008CFA  2  A9 08                LDA     #PPIDE_DATA
008CFC  2  20 DA 8E             JSR     IDE_WRITE
008CFF  2  AE 01 89             LDX     PPIDEINDEX
008D02  2  E8                   INX                     ;
008D03  2  E8                   INX                     ;
008D04  2  E0 00                CPX     #$00            ;
008D06  2  D0 E7                BNE     IDEBUFWT        ;
008D08  2  A2 00                LDX     #$00            ; INDEX
008D0A  2               IDEBUFWT1:
008D0A  2  8E 01 89             STX     PPIDEINDEX
008D0D  2  BD DE 94             LDA     hstbuf+257,X    ; SECTORS ARE BIG ENDIAN
008D10  2  A8                   TAY
008D11  2  BD DD 94             LDA     hstbuf+256,X    ; SECTORS ARE BIG ENDIAN
008D14  2  AA                   TAX
008D15  2  A9 08                LDA     #PPIDE_DATA
008D17  2  20 DA 8E             JSR     IDE_WRITE
008D1A  2  AE 01 89             LDX     PPIDEINDEX
008D1D  2  E8                   INX                     ;
008D1E  2  E8                   INX                     ;
008D1F  2  E0 00                CPX     #$00            ;
008D21  2  D0 E7                BNE     IDEBUFWT1       ;
008D23  2  60                   RTS                     ;
008D24  2               
008D24  2               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
008D24  2               ;*
008D24  2               ;*  SETUP LBA DATA
008D24  2               ;*  A= DRIVE DEVICE
008D24  2               ;*____________________________________________________________________________________________________
008D24  2               IDE_SETUP_LBA:
008D24  2                       PRTDBG  "PPIDE SETUP LBA$"
008D24  2  29 01                AND     #$01            ; only want drive cfg
008D26  2  0A                   ASL     a               ; SHIFT 4
008D27  2  0A                   ASL     a               ;
008D28  2  0A                   ASL     a               ;
008D29  2  0A                   ASL     a               ;
008D2A  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
008D2C  2  AA                   TAX
008D2D  2  A0 00                LDY     #$00
008D2F  2  A9 0E                LDA     #PPIDE_DEVICE
008D31  2  20 DA 8E             JSR     IDE_WRITE
008D34  2               
008D34  2  AE 11 05             LDX     debcylm
008D37  2  A9 0D                LDA     #PPIDE_LBAHI
008D39  2  20 DA 8E             JSR     IDE_WRITE
008D3C  2               
008D3C  2  AE 10 05             LDX     debcyll         ;
008D3F  2  A9 0C                LDA     #PPIDE_LBAMID
008D41  2  20 DA 8E             JSR     IDE_WRITE
008D44  2               
008D44  2  AE 12 05             LDX     debsehd         ;
008D47  2  A9 0B                LDA     #PPIDE_LBALOW
008D49  2  20 DA 8E             JSR     IDE_WRITE
008D4C  2               
008D4C  2  A2 01                LDX     #$01
008D4E  2  A9 0A                LDA     #PPIDE_SEC_CNT
008D50  2  20 DA 8E             JSR     IDE_WRITE
008D53  2               
008D53  2  60                   RTS
008D54  2               
008D54  2               ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
008D54  2               ;
008D54  2               ; 	TRANSLATE SECTORS INTO IDE FORMAT
008D54  2               ;________________________________________________________________________________________________________
008D54  2               IDE_CONVERT_SECTOR:
008D54  2  AD 0C 05             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
008D57  2  29 0F                AND     #$0F            ; ISOLATE HEAD IN LOW 4 BITS
008D59  2  0A                   ASL     a               ; MOVE TO HIGH BYTE
008D5A  2  0A                   ASL     a
008D5B  2  0A                   ASL     a
008D5C  2  0A                   ASL     a
008D5D  2  AA                   TAX                     ; PARK IN X
008D5E  2  AD 0E 05             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
008D61  2  4A                   LSR     A               ;
008D62  2  4A                   LSR     A               ; DIVIDE BY 4 (FOR BLOCKING)
008D63  2  29 0F                AND     #$0F            ; CLEAR UPPER 4 BITS (JUST 'CAUSE)
008D65  2  8D 12 05             STA     debsehd         ; STORE IN SECTOR/HEAD
008D68  2  8A                   TXA                     ; GET HEAD BACK
008D69  2  0D 12 05             ORA     debsehd
008D6C  2  8D 12 05             STA     debsehd         ; STORE IN SECTOR/HEAD
008D6F  2               
008D6F  2  AD 0C 05             LDA     sektrk
008D72  2  8D 10 05             STA     debcyll         ; STORE IN TRACK (lsb)
008D75  2  AD 0D 05             LDA     sektrk+1
008D78  2  8D 11 05             STA     debcylm         ; STORE IN TRACK (msb)
008D7B  2               ; REMOVE HEAD FROM TRACK VALUE (DIV/4)
008D7B  2  AD 11 05             LDA     debcylm
008D7E  2  4A                   LSR     A
008D7F  2  8D 11 05             STA     debcylm
008D82  2  AD 10 05             LDA     debcyll
008D85  2  6A                   ROR     A
008D86  2  8D 10 05             STA     debcyll
008D89  2               
008D89  2  AD 11 05             LDA     debcylm
008D8C  2  4A                   LSR     A
008D8D  2  8D 11 05             STA     debcylm
008D90  2  AD 10 05             LDA     debcyll
008D93  2  6A                   ROR     A
008D94  2  8D 10 05             STA     debcyll
008D97  2               
008D97  2  AD 11 05             LDA     debcylm
008D9A  2  4A                   LSR     A
008D9B  2  8D 11 05             STA     debcylm
008D9E  2  AD 10 05             LDA     debcyll
008DA1  2  6A                   ROR     A
008DA2  2  8D 10 05             STA     debcyll
008DA5  2               
008DA5  2  AD 11 05             LDA     debcylm
008DA8  2  4A                   LSR     A
008DA9  2  8D 11 05             STA     debcylm
008DAC  2  AD 10 05             LDA     debcyll
008DAF  2  6A                   ROR     A
008DB0  2  8D 10 05             STA     debcyll
008DB3  2               
008DB3  2               ;	ADD SLICE OFFSET
008DB3  2  AD 13 05             LDA     sekdsk          ; GET DRIVE#
008DB6  2  29 07                AND     #7              ; ONLY FIRST 8 DEVICES SUPPORTED
008DB8  2  0A                   ASL     a               ; DOUBLE NUMBER FOR TABLE LOOKUP
008DB9  2  AA                   TAX                     ; MOVE TO X REGISTER
008DBA  2  E8                   INX                     ; WANT SECOND BYTE OF ENTRY
008DBB  2  BD 14 05             LDA     dskcfg,X        ; GET SLICE#
008DBE  2  8D 0F 8F             STA     slicetmp+1      ; SLICE OFFSET MSB
008DC1  2  A9 00                LDA     #0              ; GET SLICE#
008DC3  2  8D 0E 8F             STA     slicetmp        ; SLICE OFFSET LSB
008DC6  2  18                   CLC                     ; VOODOO MATH TO TAKE SLICE*$4000
008DC7  2  6E 0F 8F             ROR     slicetmp+1
008DCA  2  6E 0E 8F             ROR     slicetmp
008DCD  2  6E 0F 8F             ROR     slicetmp+1
008DD0  2  6E 0E 8F             ROR     slicetmp
008DD3  2               
008DD3  2  BD 14 05             LDA     dskcfg,X        ; GET SLICE#
008DD6  2  18                   CLC
008DD7  2  6D 0E 8F             ADC     slicetmp
008DDA  2  8D 0E 8F             STA     slicetmp
008DDD  2               ; ADD SLICE OFFSET TO TRACK #
008DDD  2  18                   CLC                     ; clear carry
008DDE  2  AD 0E 8F             LDA     slicetmp
008DE1  2  6D 10 05             ADC     debcyll
008DE4  2  8D 10 05             STA     debcyll         ; store sum of LSBs
008DE7  2  AD 0F 8F             LDA     slicetmp+1
008DEA  2  6D 11 05             ADC     debcylm         ; add the MSBs using carry from
008DED  2  8D 11 05             STA     debcylm         ; the previous calculation
008DF0  2               
008DF0  2               
008DF0  2               
008DF0  2               
008DF0  2                       .IF     USEDSKY=1 || USEDSKYNG=1
008DF0  2                           PRTDBG  "DSKY OUTPUT 1$"
008DF0  2  AD 13 05                 LDA     sekdsk
008DF3  2  8D 08 05                 STA     DSKY_HEXBUF
008DF6  2  AD 11 05                 LDA     debcylm
008DF9  2  8D 09 05                 STA     DSKY_HEXBUF+1
008DFC  2  AD 10 05                 LDA     debcyll
008DFF  2  8D 0A 05                 STA     DSKY_HEXBUF+2
008E02  2  AD 12 05                 LDA     debsehd
008E05  2  8D 0B 05                 STA     DSKY_HEXBUF+3
008E08  2  20 82 90                 JSR     DSKY_BIN2SEG
008E0B  2  20 B7 90                 JSR     DSKY_SHOW
008E0E  2                       .ENDIF
008E0E  2  60                   RTS
008E0F  2               
008E0F  2               
008E0F  2               ;*__IDE_STORE_BOOT_IMAGE______________________________________________________________________________
008E0F  2               ;*
008E0F  2               ;*  WRITE Boot image to block 0 of device
008E0F  2               ;*
008E0F  2               ;*  YA points to:
008E0F  2               ;* 			DB 	Device Unit
008E0F  2               ;*			DB 	RAM Page
008E0F  2               ;*			DW 	Source Address
008E0F  2               ;* 			DB	Image Length (Pages)
008E0F  2               ;*____________________________________________________________________________________________________
008E0F  2               IDE_STORE_BOOT_IMAGE:
008E0F  2               
008E0F  2  85 14                STA     pointr          ; SET POINTR TO INFO BLOCK
008E11  2  84 15                STY     pointr+1
008E13  2  A9 B9                LDA     #<BOOTUNIT
008E15  2  85 2A                STA     room
008E17  2  A9 8E                LDA     #>BOOTUNIT
008E19  2  85 2B                STA     room+1
008E1B  2  A0 00                LDY     #$00            ; COPY PARAMETERS TO USEFUL AREA
008E1D  2               :
008E1D  2  B1 14                LDA     (pointr),Y
008E1F  2  91 2A                STA     (room),Y
008E21  2  C8                   INY
008E22  2  C0 05                CPY     #05
008E24  2  D0 F7                BNE     :-
008E26  2               
008E26  2  A9 00                LDA     #$00
008E28  2  8D 11 05             STA     debcylm
008E2B  2  8D 10 05             STA     debcyll         ;
008E2E  2  8D 12 05             STA     debsehd         ;
008E31  2               
008E31  2  20 89 93             JSR     INIT_PAGE_COPY  ; COPY PAGE COPY CODE TO LORAM
008E34  2  AD BB 8E             LDA     BOOTSOURCE      ; SETUP SOURCE POINTER
008E37  2  85 14                STA     pointr
008E39  2  AD BC 8E             LDA     BOOTSOURCE+1
008E3C  2  85 15                STA     pointr+1
008E3E  2               
008E3E  2               :
008E3E  2  AD BA 8E             LDA     BOOTRAMPAGE
008E41  2  20 00 04             JSR     COPY_PAGE_TO_HSTBUF; COPY 512 BYTES AT POINTR TO HSTBUF (AND INC POINTER)
008E44  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008E47  2  AD B9 8E             LDA     BOOTUNIT
008E4A  2  20 0D 8C             JSR     IDE_WRITE_SECTOR_RAW
008E4D  2  C9 FF                CMP     #$FF
008E4F  2  F0 10                BEQ     IDE_STORE_BOOT_IMAGE_ERROR
008E51  2  EE 12 05             INC     debsehd
008E54  2  CE BD 8E             DEC     BOOTLENGTH
008E57  2  AD BD 8E             LDA     BOOTLENGTH
008E5A  2  C9 00                CMP     #$00
008E5C  2  D0 E0                BNE     :-
008E5E  2  A9 00                LDA     #$00            ; ZERO ON RETURN = OPERATION OK
008E60  2  60                   RTS
008E61  2               IDE_STORE_BOOT_IMAGE_ERROR:
008E61  2  A9 FF                LDA     #$FF            ; 1 ON RETURN = OPERATION FAIL
008E63  2  60                   RTS
008E64  2               
008E64  2               ;*__IDE_RESTORE_BOOT_IMAGE____________________________________________________________________________
008E64  2               ;*
008E64  2               ;*  READ Boot image from block 0 of device
008E64  2               ;*
008E64  2               ;*  YA points to:
008E64  2               ;* 			DB 	Device Unit
008E64  2               ;*			DB 	RAM Page
008E64  2               ;*			DW 	Source Address
008E64  2               ;* 			DB	Image Length (Pages)
008E64  2               ;*____________________________________________________________________________________________________
008E64  2               IDE_RESTORE_BOOT_IMAGE:
008E64  2               
008E64  2  85 14                STA     pointr          ; SET POINTR TO INFO BLOCK
008E66  2  84 15                STY     pointr+1
008E68  2  A9 B9                LDA     #<BOOTUNIT
008E6A  2  85 2A                STA     room
008E6C  2  A9 8E                LDA     #>BOOTUNIT
008E6E  2  85 2B                STA     room+1
008E70  2  A0 00                LDY     #$00            ; COPY PARAMETERS TO USEFUL AREA
008E72  2               :
008E72  2  B1 14                LDA     (pointr),Y
008E74  2  91 2A                STA     (room),Y
008E76  2  C8                   INY
008E77  2  C0 05                CPY     #05
008E79  2  D0 F7                BNE     :-
008E7B  2               
008E7B  2  A9 00                LDA     #$00
008E7D  2  8D 11 05             STA     debcylm
008E80  2  8D 10 05             STA     debcyll         ;
008E83  2  8D 12 05             STA     debsehd         ;
008E86  2               
008E86  2  20 89 93             JSR     INIT_PAGE_COPY  ; COPY PAGE COPY CODE TO LORAM
008E89  2  AD BB 8E             LDA     BOOTSOURCE      ; SETUP SOURCE POINTER
008E8C  2  85 14                STA     pointr
008E8E  2  AD BC 8E             LDA     BOOTSOURCE+1
008E91  2  85 15                STA     pointr+1
008E93  2               
008E93  2               :
008E93  2  AD BA 8E             LDA     BOOTRAMPAGE
008E96  2  20 22 04             JSR     COPY_HSTBUF_TOPAGE; COPY 512 BYTES FROM HSTBUF TO POINTR HSTBUF (AND INC POINTER)
008E99  2  20 60 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008E9C  2  AD B9 8E             LDA     BOOTUNIT
008E9F  2  20 D5 8B             JSR     IDE_READ_SECTOR_DIRTY1
008EA2  2  C9 FF                CMP     #$FF
008EA4  2  F0 10                BEQ     IDE_RESTORE_BOOT_IMAGE_ERROR
008EA6  2  EE 12 05             INC     debsehd
008EA9  2  CE BD 8E             DEC     BOOTLENGTH
008EAC  2  AD BD 8E             LDA     BOOTLENGTH
008EAF  2  C9 00                CMP     #$00
008EB1  2  D0 E0                BNE     :-
008EB3  2  A9 00                LDA     #$00            ; ZERO ON RETURN = OPERATION OK
008EB5  2  60                   RTS
008EB6  2               IDE_RESTORE_BOOT_IMAGE_ERROR:
008EB6  2  A9 FF                LDA     #$FF            ; 1 ON RETURN = OPERATION FAIL
008EB8  2  60                   RTS
008EB9  2               
008EB9  2               
008EB9  2               BOOTUNIT:
008EB9  2  00                   .BYTE   00
008EBA  2               BOOTRAMPAGE:
008EBA  2  00                   .BYTE   00
008EBB  2               BOOTSOURCE:
008EBB  2  00 00                .BYTE   00,00
008EBD  2               BOOTLENGTH:
008EBD  2  00                   .BYTE   00
008EBE  2               
008EBE  2               ;-------------------------------------------------------------------------------
008EBE  2               
008EBE  2               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
008EBE  2               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
008EBE  2               ; PROGRAM WOULD NOT CALL TO THESE.
008EBE  2               
008EBE  2               ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
008EBE  2               ;INPUT A = IDE REGSITER ADDRESS
008EBE  2               ;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
008EBE  2               ;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
008EBE  2               
008EBE  2               IDE_READ:
008EBE  2  20 F6 8E             JSR     SET_PPI_RD      ; SETUP FOR A READ CYCLE
008EC1  2  8D 62 03             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
008EC4  2  09 40                ORA     #PPIDE_RD_LINE  ; ASSERT RD PIN
008EC6  2  8D 62 03             STA     PPIDECNTRL
008EC9  2  AE 60 03             LDX     PPIDELO         ; READ LOWER BYTE
008ECC  2  AC 61 03             LDY     PPIDEHI         ; READ UPPER BYTE
008ECF  2  49 40                EOR     #PPIDE_RD_LINE  ; DE-ASSERT RD SIGNAL
008ED1  2  8D 62 03             STA     PPIDECNTRL
008ED4  2  A9 00                LDA     #$00
008ED6  2  8D 62 03             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
008ED9  2  60                   RTS
008EDA  2               
008EDA  2               
008EDA  2               
008EDA  2               
008EDA  2               ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
008EDA  2               ;INPUT A = IDE REGISTER ADDRESS
008EDA  2               ;INPUT REGISTER X = LSB TO WRITE
008EDA  2               ;INPUT REGISTER Y = MSB TO WRITE
008EDA  2               ;
008EDA  2               
008EDA  2               
008EDA  2               IDE_WRITE:
008EDA  2  20 FE 8E             JSR     SET_PPI_WR      ; SETUP FOR A WRITE CYCLE
008EDD  2               
008EDD  2  8E 60 03             STX     PPIDELO         ; WRITE LOWER BYTE
008EE0  2  8C 61 03             STY     PPIDEHI         ; WRITE UPPER BYTE
008EE3  2               
008EE3  2  8D 62 03             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
008EE6  2               
008EE6  2  09 20                ORA     #PPIDE_WR_LINE  ; ASSERT WRITE PIN
008EE8  2  8D 62 03             STA     PPIDECNTRL
008EEB  2               
008EEB  2  49 20                EOR     #PPIDE_WR_LINE  ; DE ASSERT WR PIN
008EED  2  8D 62 03             STA     PPIDECNTRL
008EF0  2               
008EF0  2  A9 00                LDA     #$00
008EF2  2  8D 62 03             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
008EF5  2  60                   RTS
008EF6  2               
008EF6  2               
008EF6  2               ;-----------------------------------------------------------------------------------
008EF6  2               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
008EF6  2               ;
008EF6  2               ;------------------------------------------------------------------------------------
008EF6  2               
008EF6  2               SET_PPI_RD:
008EF6  2  48                   PHA
008EF7  2  A9 92                LDA     #PPRD_IDE_8255
008EF9  2  8D 63 03             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, READ MODE
008EFC  2  68                   PLA
008EFD  2  60                   RTS
008EFE  2               
008EFE  2               SET_PPI_WR:
008EFE  2  48                   PHA
008EFF  2  A9 80                LDA     #PPWR_IDE_8255
008F01  2  8D 63 03             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, WRITE MODE
008F04  2  68                   PLA
008F05  2  60                   RTS
008F06  2               
008F06  2               
008F06  2               ;allocate the following data areas to unused ram space
008F06  2               LASTCHAR:
008F06  2  00                   .BYTE   0               ;save sector for warm boot
008F07  2               savsec:
008F07  2  00                   .BYTE   0               ;save sector for warm boot
008F08  2               count:
008F08  2  00                   .BYTE   0               ;counter in warm boot
008F09  2               temp:
008F09  2  00                   .BYTE   0               ;save hstdsk for warm boot
008F0A  2               Cdebcyll:
008F0A  2  00                   .BYTE   0               ; DEBLOCKED CYLINDER LSB
008F0B  2               Cdebcylm:
008F0B  2  00                   .BYTE   0               ; DEBLOCKED CYLINDER MSB
008F0C  2               Cdebsehd:
008F0C  2  00                   .BYTE   0               ; DEBLOCKED SECTOR AND HEAD (HS)
008F0D  2               DEBDIRTY:
008F0D  2  00                   .BYTE   0               ; DIRTY FLAG
008F0E  2               slicetmp:
008F0E  2  00 00                .WORD   0               ; USED TO CALCULATE SLICE OFFSET
008F10  2               
008F10  1                       .INCLUDE "dosdskyn.asm"
008F10  2               ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
008F10  2               ;
008F10  2               ; 	Nhyodyne DSKY/NG drivers
008F10  2               ;
008F10  2               ;	Entry points:
008F10  2               ;               DSKY_INIT
008F10  2               ;               DSKY_SHOW
008F10  2               ;               DSKY_BIN2SEG
008F10  2               ;               DSKY_RESET
008F10  2               ;               DSKY_STAT
008F10  2               ;               DSKY_GETKEY
008F10  2               ;               DSKY_BEEP
008F10  2               ;               DSKY_L1ON
008F10  2               ;               DSKY_L2ON
008F10  2               ;               DSKY_L1OFF
008F10  2               ;               DSKY_L2OFF
008F10  2               ;               DSKY_PUTLED
008F10  2               ;               DSKY_BLANK
008F10  2               ;________________________________________________________________________________________________________________________________
008F10  2               ;
008F10  2               ;
008F10  2               ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
008F10  2               ;
008F10  2               ; LED SEGMENTS (BIT VALUES)
008F10  2               ;
008F10  2               ;	+--01--+
008F10  2               ;	20    02
008F10  2               ;	+--40--+
008F10  2               ;	10    04
008F10  2               ;	+--08--+  80
008F10  2               ;
008F10  2               ; KEY CODE MAP (KEY CODES) CSCCCRRR
008F10  2               ;                          ||||||||
008F10  2               ;                          |||||+++-- ROW
008F10  2               ;                          ||+++----- COL
008F10  2               ;                          |+-------- SHIFT
008F10  2               ;                          +--------- CONTROL
008F10  2               ;
008F10  2               ;	00	08	10	18	23
008F10  2               ;	01	09	11	19	22
008F10  2               ;	02	0A	12	1A	21
008F10  2               ;	03	0B	13	1B	20
008F10  2               ;	04	0C	14	1C	SHIFT
008F10  2               ;	05	0D	15	1D	CTRL
008F10  2               ;
008F10  2               ; LED BIT MAP (BIT VALUES)
008F10  2               ;
008F10  2               ;	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
008F10  2               ;	---	---	---	---	---	---	---	---
008F10  2               ;	01	01	01	01	01
008F10  2               ;	02	02	02	02	02
008F10  2               ;	04      04      04      04	04
008F10  2               ;	08      08      08      08	08
008F10  2               ;	10      10      10      10	10
008F10  2               ;	20      20      20      20	20	L1	L2 	BUZZ
008F10  2               ;
008F10  2               DSKY_PPI        = $0360         ; PORT
008F10  2               DSKY_PPIA       = DSKY_PPI + 0  ; PORT A
008F10  2               DSKY_PPIB       = DSKY_PPI + 1  ; PORT B
008F10  2               DSKY_PPIC       = DSKY_PPI + 2  ; PORT C
008F10  2               DSKY_PPIX       = DSKY_PPI + 3  ; PPI CONTROL PORT
008F10  2               ;
008F10  2               DSKY_PPIX_RD    = %10010010     ; PPIX VALUE FOR READS
008F10  2               DSKY_PPIX_WR    = %10000010     ; PPIX VALUE FOR WRITES
008F10  2               ;
008F10  2               ; PIO CHANNEL C:
008F10  2               ;
008F10  2               ;	7	6	5	4	3	2	1	0
008F10  2               ;	RES	0	0	CS	CS	/RD	/WR	A0
008F10  2               ;
008F10  2               ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
008F10  2               ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
008F10  2               ;
008F10  2               DSKY_PPI_IDLE   = %00000110
008F10  2               ;
008F10  2               DSKY_CMD_CLR    = %11011111     ; CLEAR (ALL OFF)
008F10  2               DSKY_CMD_CLRX   = %11010011     ; CLEAR (ALL ON)
008F10  2               DSKY_CMD_WDSP   = %10010000     ; WRITE DISPLAY RAM
008F10  2               DSKY_CMD_RDSP   = %01110000     ; READ DISPLAY RAM
008F10  2               DSKY_CMD_CLK    = %00100000     ; SET CLK PRESCALE
008F10  2               DSKY_CMD_FIFO   = %01000000     ; READ FIFO
008F10  2               ;
008F10  2               DSKY_PRESCL     = DSKYOSC/100000; PRESCALER
008F10  2               ;
008F10  2               ;__DSKY_INIT_________________________________________________________________________________________
008F10  2               ;
008F10  2               ;  DISPLAY DSKY INFO
008F10  2               ;____________________________________________________________________________________________________
008F10  2               ;
008F10  2               DSKY_INIT:
008F10  2                       PRTDBG  "DSKY INIT:$"
008F10  2  20 CC 8F             JSR     DSKY_PREINIT
008F13  2  48 DA 5A A2          PRTS    "DSKY:$"
008F17  2  00 BD 2C 8F  
008F1B  2  E8 C9 24 F0  
008F32  2  20 73 88             JSR     NEWLINE
008F35  2               
008F35  2               ;
008F35  2  48 DA 5A A2          PRTS    " IO=0x$"
008F39  2  00 BD 4E 8F  
008F3D  2  E8 C9 24 F0  
008F55  2  A9 03                LDA     #>DSKY_PPI      ; GET BASE PORT
008F57  2  20 51 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008F5A  2  A9 60                LDA     #<DSKY_PPI      ; GET BASE PORT
008F5C  2  20 51 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008F5F  2  48 DA 5A A2          PRTS    " MODE=$"
008F63  2  00 BD 78 8F  
008F67  2  E8 C9 24 F0  
008F7F  2  48 DA 5A A2          PRTS    "NG$"           ; PRINT DSKY TYPE
008F83  2  00 BD 98 8F  
008F87  2  E8 C9 24 F0  
008F9B  2               ;
008F9B  2  AD 35 92             LDA     DSKY_PRESENT    ; PRESENT?
008F9E  2  C9 FF                CMP     #$FF            ; SET FLAGS
008FA0  2  F0 26                BEQ     DSKY_INITA
008FA2  2  48 DA 5A A2          PRTS    " NOT PRESENT$" ; NOT PRESENT
008FA6  2  00 BD BB 8F  
008FAA  2  E8 C9 24 F0  
008FC8  2               DSKY_INITA:
008FC8  2  20 73 88             JSR     NEWLINE
008FCB  2  60                   RTS                     ; DONE
008FCC  2               ;
008FCC  2               ;__DSKY_PREINIT______________________________________________________________________________________
008FCC  2               ;
008FCC  2               ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
008FCC  2               ;____________________________________________________________________________________________________
008FCC  2               ; HARDWARE RESET 8279 BY PULSING RESET LINE
008FCC  2               DSKY_PREINIT:
008FCC  2               ; CHECK FOR PPI
008FCC  2  20 11 90             JSR     DSKY_PPIDETECT  ; TEST FOR PPI HARDWARE
008FCF  2  D0 2A                BNE     DSKY_ABORT      ; BAIL OUT IF NOT THERE
008FD1  2               
008FD1  2               ; SETUP PPI TO DEFAULT MODE
008FD1  2  20 0E 92             JSR     DSKY_PPIRD
008FD4  2               ; INIT 8279 VALUES TO IDLE STATE
008FD4  2  A9 06                LDA     #DSKY_PPI_IDLE
008FD6  2  8D 62 03             STA     DSKY_PPIC
008FD9  2               ; PULSE RESET SIGNAL ON 8279
008FD9  2  09 80                ORA     #%10000000
008FDB  2  8D 62 03             STA     DSKY_PPIC
008FDE  2  29 7F                AND     #%01111111
008FE0  2  8D 62 03             STA     DSKY_PPIC
008FE3  2               ; INITIALIZE 8279
008FE3  2  20 FC 8F             JSR     DSKY_REINIT
008FE6  2               ; NOW SEE IF A DSKYNG IS REALLY THERE...
008FE6  2  A9 A5                LDA     #$A5
008FE8  2  A0 00                LDY     #$00
008FEA  2  20 4D 91             JSR     DSKY_PUTBYTE
008FED  2  A0 00                LDY     #$00
008FEF  2  20 61 91             JSR     DSKY_GETBYTE
008FF2  2  C9 A5                CMP     #$A5
008FF4  2  D0 05                BNE     DSKY_ABORT      ; BAIL OUT IF MISCOMPARE
008FF6  2  A9 FF                LDA     #$FF
008FF8  2  8D 35 92             STA     DSKY_PRESENT
008FFB  2               DSKY_ABORT:
008FFB  2  60                   RTS
008FFC  2               ;
008FFC  2               DSKY_REINIT:
008FFC  2  20 20 92             JSR     DSKY_PPIIDLE
008FFF  2               ; SET CLOCK SCALER TO 20
008FFF  2  A9 2A                LDA     #DSKY_CMD_CLK | DSKY_PRESCL
009001  2  20 CD 90             JSR     DSKY_CMD
009004  2               ; FALL THRU
009004  2               ;
009004  2               DSKY_RESET:
009004  2               ; RESET DSKY -- CLEAR RAM AND FIFO
009004  2  A9 DF                LDA     #DSKY_CMD_CLR
009006  2  20 CD 90             JSR     DSKY_CMD
009009  2               ;
009009  2               ; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
009009  2               ; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
009009  2               ; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
009009  2               ; IS USED TO IMPLEMENT A TIMEOUT.
009009  2  A2 00                LDX     #0              ; TIMEOUT LOOP COUNTER
00900B  2               DSKY_RESET1:
00900B  2  DA                   PHX                     ; SAVE COUNTER
00900C  2  FA                   PLX                     ; RECOVER COUNTER
00900D  2  CA                   DEX
00900E  2  D0 FB                BNE     DSKY_RESET1     ; LOOP TILL TIMEOUT
009010  2               ;
009010  2               DSKY_RESET2:
009010  2  60                   RTS
009011  2               ;
009011  2               ;
009011  2               ;
009011  2               ;__DSKY_PPIDETECT____________________________________________________________________________________
009011  2               ;
009011  2               ;  PROBE FOR PPI HARDWARE
009011  2               ;____________________________________________________________________________________________________
009011  2               ;
009011  2               DSKY_PPIDETECT:
009011  2               ;
009011  2               ; TEST FOR PPI EXISTENCE
009011  2               ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
009011  2               ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
009011  2               ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
009011  2               ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
009011  2               ; INTERFERE WITH THE VALUE BEING READ.
009011  2  20 F7 91             JSR     DSKY_PPIWR
009014  2               ;
009014  2  A9 00                LDA     #$00            ; VALUE ZERO
009016  2  8D 60 03             STA     DSKY_PPIA       ; PUSH VALUE TO PORT
009019  2  AD 60 03             LDA     DSKY_PPIA       ; GET PORT VALUE
00901C  2  C9 00                CMP     #$00
00901E  2  60                   RTS                     ; AND RETURN
00901F  2               ;
00901F  2                       .IF     DSKY_KBD=1
00901F  2               ;
00901F  2               KY_0                = $00
00901F  2               KY_1                = $01
00901F  2               KY_2                = $02
00901F  2               KY_3                = $03
00901F  2               KY_4                = $04
00901F  2               KY_5                = $05
00901F  2               KY_6                = $06
00901F  2               KY_7                = $07
00901F  2               KY_8                = $08
00901F  2               KY_9                = $09
00901F  2               KY_A                = $0A
00901F  2               KY_B                = $0B
00901F  2               KY_C                = $0C
00901F  2               KY_D                = $0D
00901F  2               KY_E                = $0E
00901F  2               KY_F                = $0F
00901F  2               KY_FW               = $10           ; FORWARD
00901F  2               KY_BK               = $11           ; BACKWARD
00901F  2               KY_CL               = $12           ; CLEAR
00901F  2               KY_EN               = $13           ; ENTER
00901F  2               KY_DE               = $14           ; DEPOSIT
00901F  2               KY_EX               = $15           ; EXAMINE
00901F  2               KY_GO               = $16           ; GO
00901F  2               KY_BO               = $17           ; BOOT
00901F  2               KY_F4               = $18           ; F4
00901F  2               KY_F3               = $19           ; F3
00901F  2               KY_F2               = $20           ; F2
00901F  2               KY_F1               = $21           ; F1
00901F  2               ;
00901F  2               ;__DSKY_STAT_________________________________________________________________________________________
00901F  2               ;
00901F  2               ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
00901F  2               ;____________________________________________________________________________________________________
00901F  2               ;
00901F  2               DSKY_STAT:
00901F  2  AD 35 92                 LDA     DSKY_PRESENT    ; DOES IT EXIST?
009022  2  C9 FF                    CMP     #$FF            ; SET FLAGS
009024  2  D0 05                    BNE     DSKY_STATA      ; ABORT WITH A=0 IF NOT THERE
009026  2  20 06 91                 JSR     DSKY_ST
009029  2  29 0F                    AND     #$0F            ; ISOLATE THE CUR FIFO LEN
00902B  2               DSKY_STATA:
00902B  2  60                       RTS
00902C  2               ;
00902C  2               ;__DSKY_GETKEY_____________________________________________________________________________________
00902C  2               ;
00902C  2               ;  WAIT FOR A DSKY KEYPRESS AND RETURN
00902C  2               ;____________________________________________________________________________________________________
00902C  2               ;
00902C  2               DSKY_GETKEY:
00902C  2  AD 35 92                 LDA     DSKY_PRESENT    ; DOES IT EXIST?
00902F  2  C9 FF                    CMP     #$FF            ; SET FLAGS
009031  2  D0 24                    BNE     DSKY_GETKEY1A   ; ABORT WITH A=0 IF NOT THERE
009033  2  20 1F 90                 JSR     DSKY_STAT
009036  2  F0 F4                    BEQ     DSKY_GETKEY     ; LOOP IF NOTHING THERE
009038  2  A9 40                    LDA     #DSKY_CMD_FIFO
00903A  2  20 CD 90                 JSR     DSKY_CMD
00903D  2  20 0B 91                 JSR     DSKY_DIN
009040  2  49 C0                    EOR     #%11000000      ; FLIP POLARITY OF SHIFT/CTL BITS
009042  2  48                       PHA
009043  2  29 3F                    AND     #$3F            ; STRIP SHIFT/CTL BITS FOR LOOKUP
009045  2  8D 33 92                 STA     DSKY_TEMP_VAL
009048  2  A2 00                    LDX     #0              ; INDEX
00904A  2               DSKY_GETKEY1:
00904A  2  BD 66 90                 LDA     DSKY_KEYMAP,X
00904D  2  CD 33 92                 CMP     DSKY_TEMP_VAL   ; MATCH?
009050  2  F0 09                    BEQ     DSKY_GETKEY2    ; FOUND, DONE
009052  2  E8                       INX
009053  2  E0 1C                    CPX     #28
009055  2  D0 F3                    BNE     DSKY_GETKEY1    ; LOOP UNTIL EOT
009057  2               DSKY_GETKEY1A:
009057  2  68                       PLA
009058  2  A9 FF                    LDA     #$FF            ; NOT FOUND ERR, RETURN $FF
00905A  2  60                       RTS
00905B  2               DSKY_GETKEY2:
00905B  2               ; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
00905B  2               ; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
00905B  2  68                       PLA                     ; RESTORE RAW VALUE
00905C  2  25 C0                    AND     %11000000       ; ISOLATE SHIFT/CTRL BITS
00905E  2  8D 33 92                 STA     DSKY_TEMP_VAL
009061  2  8A                       TXA
009062  2  0D 33 92                 ORA     DSKY_TEMP_VAL   ; COMBINE WITH INDEX VALUE
009065  2  60                       RTS
009066  2               ;
009066  2               ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
009066  2               ;
009066  2               DSKY_KEYMAP:
009066  2               ; POS	$00  $01  $02  $03  $04  $05  $06  $07
009066  2               ; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
009066  2  0D 04 0C 14              .BYTE   $0D, $04, $0C, $14, $03, $0B, $13, $02
00906A  2  03 0B 13 02  
00906E  2               ;
00906E  2               ; POS	$08  $09  $0A  $0B  $0C  $0D  $0E  $0F
00906E  2               ; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
00906E  2  0A 12 01 09              .BYTE   $0A, $12, $01, $09, $11, $00, $08, $10
009072  2  11 00 08 10  
009076  2               ;
009076  2               ; POS	$10  $11  $12  $13  $14  $15  $16  $17
009076  2               ; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
009076  2  05 15 1D 1C              .BYTE   $05, $15, $1D, $1C, $1B, $1A, $19, $18
00907A  2  1B 1A 19 18  
00907E  2               
00907E  2               ; POS	$18  $19  $20  $21
00907E  2               ; KEY   [F4] [F3] [F2] [F1]
00907E  2  23 22 21 20              .BYTE   $23, $22, $21, $20
009082  2               
009082  2               ;
009082  2                       .ENDIF                  ; DSKY_KBD
009082  2               ;
009082  2               ;__DSKY_BIN2SEG________________________________________________________________________________________
009082  2               ;
009082  2               ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
009082  2               ;
009082  2               ; DSKY_BUF: 32 BIT BINARY
009082  2               ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
009082  2               ;____________________________________________________________________________________________________
009082  2               ;
009082  2               DSKY_BIN2SEG:
009082  2  A2 00                LDX     #$00
009084  2               DSKY_BIN2SEG1:
009084  2  BD 08 05             LDA     DSKY_HEXBUF,X   ; FIRST NIBBLE
009087  2  4A                   LSR     A
009088  2  4A                   LSR     A
009089  2  4A                   LSR     A
00908A  2  4A                   LSR     A
00908B  2  DA                   PHX                     ; STORE READ INDEX
00908C  2  AA                   TAX                     ; MOVE DIGIT TO LOOKUP INDEX
00908D  2  BD 23 92             LDA     DSKY_HEXMAP,X   ; GET DECODED DIGIT INTO A
009090  2  FA                   PLX                     ; GET READ INDEX
009091  2  DA                   PHX
009092  2  48                   PHA
009093  2  8A                   TXA
009094  2  0A                   ASL     a
009095  2  AA                   TAX
009096  2  68                   PLA
009097  2  9D 00 05             STA     DSKY_BUF,X      ;STORE HIGH BYTE IN OUT BUFFER
00909A  2  FA                   PLX
00909B  2  BD 08 05             LDA     DSKY_HEXBUF,X   ; SECOND NIBBLE
00909E  2               
00909E  2  29 0F                AND     #$0F
0090A0  2  DA                   PHX
0090A1  2  AA                   TAX
0090A2  2  BD 23 92             LDA     DSKY_HEXMAP,X   ; GET DECODED DIGIT INTO A
0090A5  2  FA                   PLX
0090A6  2  DA                   PHX
0090A7  2  48                   PHA
0090A8  2  8A                   TXA                     ; GET READ INDEX
0090A9  2  0A                   ASL     a
0090AA  2  AA                   TAX
0090AB  2  E8                   INX
0090AC  2  68                   PLA
0090AD  2  9D 00 05             STA     DSKY_BUF,X      ;STORE HIGH BYTE IN OUT BUFFER
0090B0  2  FA                   PLX
0090B1  2  E8                   INX
0090B2  2  E0 04                CPX     #4
0090B4  2  D0 CE                BNE     DSKY_BIN2SEG1
0090B6  2  60                   RTS
0090B7  2               ;
0090B7  2               ;__DSKY_SHOW___________________________________________________________________________________________
0090B7  2               ; DSKY SHOW BUFFER
0090B7  2               ;______________________________________________________________________________________________________
0090B7  2               ;
0090B7  2               DSKY_SHOW:
0090B7  2  48                   PHA
0090B8  2  DA                   PHX
0090B9  2  5A                   PHY
0090BA  2  A2 00                LDX     #0
0090BC  2               DSKY_SHOW1:
0090BC  2  BD 00 05             LDA     DSKY_BUF,X
0090BF  2  DA                   PHX
0090C0  2  7A                   PLY
0090C1  2  20 4D 91             JSR     DSKY_PUTBYTE
0090C4  2  E8                   INX
0090C5  2  E0 08                CPX     #8
0090C7  2  D0 F3                BNE     DSKY_SHOW1
0090C9  2  7A                   PLY
0090CA  2  FA                   PLX
0090CB  2  68                   PLA
0090CC  2  60                   RTS
0090CD  2               
0090CD  2               ;______________________________________________________________________________________________________
0090CD  2               ; DSKYNG OUTPUT ROUTINES
0090CD  2               ;______________________________________________________________________________________________________
0090CD  2               
0090CD  2               ; SEND DSKY COMMAND BYTE IN REGISTER A
0090CD  2               DSKY_CMD:
0090CD  2  48                   PHA
0090CE  2  A9 01                LDA     #$01
0090D0  2  4C D6 90             JMP     DSKY_DOUT2
0090D3  2               ;
0090D3  2               ; SEND DSKY DATA BYTE IN REGISTER A
0090D3  2               ; TRASHES BC
0090D3  2               ;
0090D3  2               DSKY_DOUT:
0090D3  2  48                   PHA
0090D4  2  A9 00                LDA     #$00
0090D6  2               ;
0090D6  2               DSKY_DOUT2:
0090D6  2               ; SET PPI LINE CONFIG TO WRITE MODE
0090D6  2  20 F7 91             JSR     DSKY_PPIWR
0090D9  2               ;
0090D9  2               ; SET ADDRESS FIRST
0090D9  2  09 06                ORA     #DSKY_PPI_IDLE
0090DB  2  8D 62 03             STA     DSKY_PPIC
0090DE  2               ;
0090DE  2               ; ASSERT 8279 /CS
0090DE  2  09 18                ORA     #%00011000
0090E0  2  8D 62 03             STA     DSKY_PPIC
0090E3  2               ;
0090E3  2               ; PPIC WORKING VALUE TO DSKY_TEMP_VAL
0090E3  2  8D 33 92             STA     DSKY_TEMP_VAL
0090E6  2               ;
0090E6  2               ; ASSERT DATA BYTE VALUE
0090E6  2  68                   PLA
0090E7  2  8D 60 03             STA     DSKY_PPIA
0090EA  2               ;
0090EA  2               ; PULSE /WR
0090EA  2  AD 33 92             LDA     DSKY_TEMP_VAL
0090ED  2  29 FD                AND     #%11111101
0090EF  2  8D 62 03             STA     DSKY_PPIC
0090F2  2  EA                   NOP                     ; MAY NOT BE NEEDED
0090F3  2  09 02                ORA     #%00000010
0090F5  2  8D 62 03             STA     DSKY_PPIC
0090F8  2               ;
0090F8  2               ; DEASSERT /CS
0090F8  2  29 E7                AND     #%11100111
0090FA  2  8D 62 03             STA     DSKY_PPIC
0090FD  2               ;
0090FD  2               ; CLEAR ADDRESS BIT
0090FD  2  29 E6                AND     #%11100110
0090FF  2  8D 62 03             STA     DSKY_PPIC
009102  2               ;
009102  2               ; DONE
009102  2  20 20 92             JSR     DSKY_PPIIDLE
009105  2  60                   RTS
009106  2               ;
009106  2               ;==================================================================================================
009106  2               ; DSKYNG OUTPUT ROUTINES
009106  2               ;==================================================================================================
009106  2               ;
009106  2               ; RETURN DSKY STATUS VALUE IN A
009106  2               ;
009106  2               DSKY_ST:
009106  2  A9 01                LDA     #$01
009108  2  4C 0D 91             JMP     DSKY_DIN2
00910B  2               ;
00910B  2               ; RETURN NEXT DATA VALUE IN A
00910B  2               ;
00910B  2               DSKY_DIN:
00910B  2  A9 00                LDA     #$00
00910D  2               ;
00910D  2               DSKY_DIN2:
00910D  2               ; SET PPI LINE CONFIG TO READ MODE
00910D  2  20 0E 92             JSR     DSKY_PPIRD
009110  2               ;
009110  2               ; SET ADDRESS FIRST
009110  2  09 06                ORA     #DSKY_PPI_IDLE
009112  2  8D 62 03             STA     DSKY_PPIC
009115  2               ;
009115  2               ; ASSERT 8279 /CS
009115  2  09 18                ORA     #%00011000
009117  2  8D 62 03             STA     DSKY_PPIC
00911A  2               ;
00911A  2               ; ASSERT /RD
00911A  2  29 7B                AND     #%01111011
00911C  2  8D 62 03             STA     DSKY_PPIC
00911F  2               ;
00911F  2  8D 33 92             STA     DSKY_TEMP_VAL
009122  2               ; GET VALUE
009122  2  AD 60 03             LDA     DSKY_PPIA
009125  2  48                   PHA
009126  2               
009126  2  AD 33 92             LDA     DSKY_TEMP_VAL
009129  2               ; DEASSERT /RD
009129  2  09 04                ORA     #%00000100
00912B  2  8D 62 03             STA     DSKY_PPIC
00912E  2               ;
00912E  2               ; DEASSERT /CS
00912E  2  29 E7                AND     #%11100111
009130  2  8D 62 03             STA     DSKY_PPIC
009133  2               ;
009133  2               ; CLEAR ADDRESS BIT
009133  2  29 E6                AND     #%11100110
009135  2  8D 62 03             STA     DSKY_PPIC
009138  2               ;
009138  2               ; DONE
009138  2  20 20 92             JSR     DSKY_PPIIDLE
00913B  2  68                   PLA
00913C  2  60                   RTS
00913D  2               
00913D  2               ;__DSKY_BLANK_____________________________________________________________________________________
00913D  2               ;
00913D  2               ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
00913D  2               ;
00913D  2               ;_________________________________________________________________________________________________
00913D  2               ;
00913D  2               DSKY_BLANK:
00913D  2  A9 90                LDA     #DSKY_CMD_WDSP
00913F  2  20 CD 90             JSR     DSKY_CMD
009142  2  A2 10                LDX     #16
009144  2               DSKY_BLANK1:
009144  2  A9 FF                LDA     #$FF
009146  2  20 D3 90             JSR     DSKY_DOUT
009149  2  CA                   DEX
00914A  2  D0 F8                BNE     DSKY_BLANK1
00914C  2  60                   RTS
00914D  2               ;
00914D  2               ;__DSKY_PUTBYTE____________________________________________________________________________________
00914D  2               ;
00914D  2               ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
00914D  2               ; AT LOCATION IN REGISTER Y, VALUE IN A.
00914D  2               ;
00914D  2               ;__________________________________________________________________________________________________
00914D  2               ;
00914D  2               DSKY_PUTBYTE:
00914D  2  5A                   PHY
00914E  2  48                   PHA
00914F  2  48                   PHA
009150  2  18                   CLC
009151  2  98                   TYA
009152  2  69 90                ADC     #DSKY_CMD_WDSP
009154  2  A8                   TAY
009155  2  20 CD 90             JSR     DSKY_CMD
009158  2  68                   PLA
009159  2  49 FF                EOR     #$FF
00915B  2  20 D3 90             JSR     DSKY_DOUT
00915E  2  68                   PLA
00915F  2  7A                   PLY
009160  2  60                   RTS
009161  2               ;
009161  2               ;__DSKY_GETBYTE___________________________________________________________________________________
009161  2               ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
009161  2               ; AT LOCATION IN REGISTER Y, VALUE RETURNED IN A
009161  2               ;
009161  2               ;_________________________________________________________________________________________________
009161  2               ;
009161  2               DSKY_GETBYTE:
009161  2  18                   CLC
009162  2  98                   TYA
009163  2  69 70                ADC     #DSKY_CMD_RDSP
009165  2  A8                   TAY
009166  2  20 CD 90             JSR     DSKY_CMD
009169  2  20 0B 91             JSR     DSKY_DIN
00916C  2  49 FF                EOR     #$FF
00916E  2  60                   RTS
00916F  2               
00916F  2               ;
00916F  2               ;__DSKY_PUTLED____________________________________________________________________________________
00916F  2               ;
00916F  2               ;	This function is intended to update the LEDs.
00916F  2               ;	VALUES SHOULD BE IN DSKY_BUF
00916F  2               ;_________________________________________________________________________________________________
00916F  2               ;
00916F  2               DSKY_PUTLED:
00916F  2  DA                   PHX
009170  2  5A                   PHY
009171  2  48                   PHA
009172  2  A0 00                LDY     #$00
009174  2  A2 00                LDX     #$00
009176  2               DSKY_PUTLED_1:
009176  2  BD 00 05             LDA     DSKY_BUF,X      ; GET BYTE
009179  2  20 4D 91             JSR     DSKY_PUTBYTE    ; SEND IT TO DSKY
00917C  2  C8                   INY                     ; LOOP TIL DONE
00917D  2  E8                   INX
00917E  2  C0 08                CPY     #8
009180  2  D0 F4                BNE     DSKY_PUTLED_1
009182  2  68                   PLA                     ; RESTORE REGISTERS
009183  2  7A                   PLY
009184  2  FA                   PLX
009185  2  60                   RTS
009186  2               ;
009186  2               ;__DSKY_BEEP______________________________________________________________________________________
009186  2               ;	This function is intended to beep the speaker on the DSKY
009186  2               ;_________________________________________________________________________________________________
009186  2               ;
009186  2               DSKY_BEEP:
009186  2  5A                   PHY
009187  2  DA                   PHX
009188  2  48                   PHA
009189  2  A0 0F                LDY     #$0F
00918B  2  20 61 91             JSR     DSKY_GETBYTE
00918E  2  09 20                ORA     #$20
009190  2  A9 20                LDA     #$20
009192  2  A0 0F                LDY     #$0F
009194  2  20 4D 91             JSR     DSKY_PUTBYTE
009197  2               
009197  2               ;;; 	timer . . .
009197  2  A2 8F                LDX     #$8F
009199  2  A0 FF                LDY     #$FF
00919B  2               DSKY_BEEP1:
00919B  2  88                   DEY
00919C  2  D0 FD                BNE     DSKY_BEEP1
00919E  2  CA                   DEX
00919F  2  D0 FA                BNE     DSKY_BEEP1
0091A1  2               
0091A1  2  A0 0F                LDY     #$0F
0091A3  2  20 61 91             JSR     DSKY_GETBYTE
0091A6  2  29 DF                AND     #$DF
0091A8  2  A9 DF                LDA     #$DF
0091AA  2  A0 0F                LDY     #$0F
0091AC  2  20 4D 91             JSR     DSKY_PUTBYTE
0091AF  2               
0091AF  2  68                   PLA
0091B0  2  FA                   PLX
0091B1  2  7A                   PLY
0091B2  2  60                   RTS
0091B3  2               ;
0091B3  2               ;__DSKY_L1ON______________________________________________________________________________________
0091B3  2               ;	This function is intended to turn on DSKY L1
0091B3  2               ;_________________________________________________________________________________________________
0091B3  2               ;
0091B3  2               DSKY_L1ON:
0091B3  2  5A                   PHY
0091B4  2  48                   PHA
0091B5  2  A0 0D                LDY     #$0D
0091B7  2  20 61 91             JSR     DSKY_GETBYTE
0091BA  2  09 20                ORA     #$20
0091BC  2  A0 0D                LDY     #$0D
0091BE  2  20 4D 91             JSR     DSKY_PUTBYTE
0091C1  2  68                   PLA
0091C2  2  7A                   PLY
0091C3  2  60                   RTS
0091C4  2               ;
0091C4  2               ;__DSKY_L2ON______________________________________________________________________________________
0091C4  2               ;	This function is intended to turn on DSKY L2
0091C4  2               ;_________________________________________________________________________________________________
0091C4  2               ;
0091C4  2               DSKY_L2ON:
0091C4  2  5A                   PHY
0091C5  2  48                   PHA
0091C6  2  A0 0E                LDY     #$0E
0091C8  2  20 61 91             JSR     DSKY_GETBYTE
0091CB  2  09 20                ORA     #$20
0091CD  2  A0 0E                LDY     #$0E
0091CF  2  20 4D 91             JSR     DSKY_PUTBYTE
0091D2  2  68                   PLA
0091D3  2  7A                   PLY
0091D4  2  60                   RTS
0091D5  2               ;
0091D5  2               ;__DSKY_L1OFF_____________________________________________________________________________________
0091D5  2               ;	This function is intended to turn off DSKY L1
0091D5  2               ;_________________________________________________________________________________________________
0091D5  2               ;
0091D5  2               DSKY_L1OFF:
0091D5  2  5A                   PHY
0091D6  2  48                   PHA
0091D7  2  A0 0D                LDY     #$0D
0091D9  2  20 61 91             JSR     DSKY_GETBYTE
0091DC  2  29 DF                AND     #$DF
0091DE  2  A0 0D                LDY     #$0D
0091E0  2  20 4D 91             JSR     DSKY_PUTBYTE
0091E3  2  68                   PLA
0091E4  2  7A                   PLY
0091E5  2  60                   RTS
0091E6  2               ;
0091E6  2               ;__DSKY_L2OFF_____________________________________________________________________________________
0091E6  2               ;	This function is intended to turn off DSKY L2
0091E6  2               ;_________________________________________________________________________________________________
0091E6  2               ;
0091E6  2               DSKY_L2OFF:
0091E6  2  5A                   PHY
0091E7  2  48                   PHA
0091E8  2  A0 0E                LDY     #$0E
0091EA  2  20 61 91             JSR     DSKY_GETBYTE
0091ED  2  29 DF                AND     #$DF
0091EF  2  A0 0E                LDY     #$0E
0091F1  2  20 4D 91             JSR     DSKY_PUTBYTE
0091F4  2  68                   PLA
0091F5  2  7A                   PLY
0091F6  2  60                   RTS
0091F7  2               ;
0091F7  2               ;_________________________________________________________________________________________________
0091F7  2               ; DSKYNG LINE CONTROL ROUTINES
0091F7  2               ;
0091F7  2               ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
0091F7  2               ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
0091F7  2               ;
0091F7  2               ;_________________________________________________________________________________________________
0091F7  2               ;
0091F7  2               DSKY_PPIWR:
0091F7  2  48                   PHA
0091F8  2               ;
0091F8  2               ; CHECK FOR WRITE MODE
0091F8  2  AD 34 92             LDA     DSKY_PPIX_VAL
0091FB  2  C9 82                CMP     #DSKY_PPIX_WR
0091FD  2  F0 0D                BEQ     DSKY_PPIWR1
0091FF  2               ;
0091FF  2               ; SET PPI TO WRITE MODE
0091FF  2  A9 82                LDA     #DSKY_PPIX_WR
009201  2  8D 63 03             STA     DSKY_PPIX
009204  2  8D 34 92             STA     DSKY_PPIX_VAL
009207  2               ;
009207  2               ; RESTORE PORT C (MAY NOT BE NEEDED)
009207  2  A9 06                LDA     #DSKY_PPI_IDLE
009209  2  8D 62 03             STA     DSKY_PPIC
00920C  2               ;
00920C  2               DSKY_PPIWR1:
00920C  2               ;
00920C  2  68                   PLA
00920D  2  60                   RTS
00920E  2               ;
00920E  2               ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
00920E  2               ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
00920E  2               ;
00920E  2               DSKY_PPIRD:
00920E  2  48                   PHA
00920F  2               ;
00920F  2               ; CHECK FOR READ MODE
00920F  2  AD 34 92             LDA     DSKY_PPIX_VAL
009212  2  C9 92                CMP     #DSKY_PPIX_RD
009214  2  F0 08                BEQ     DSKY_PPIRD1
009216  2               ;
009216  2               ; SET PPI TO READ MODE
009216  2  A9 92                LDA     #DSKY_PPIX_RD
009218  2  8D 63 03             STA     DSKY_PPIX
00921B  2  8D 34 92             STA     DSKY_PPIX_VAL
00921E  2               ;
00921E  2               DSKY_PPIRD1:
00921E  2  68                   PLA
00921F  2  60                   RTS
009220  2               ;
009220  2               ; RELEASE USE OF PPI
009220  2               ;
009220  2               DSKY_PPIIDLE:
009220  2  4C 0E 92             JMP     DSKY_PPIRD      ; SAME AS READ MODE
009223  2               ;
009223  2               ;__STORAGE_________________________________________________________________________________________
009223  2               ; CODES FOR NUMERICS
009223  2               ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
009223  2               ; SET HIGH BIT TO SHOW DECIMAL POINT
009223  2               ;_________________________________________________________________________________________________
009223  2               ;
009223  2               DSKY_HEXMAP:
009223  2  3F                   .BYTE   $3F             ; 0
009224  2  06                   .BYTE   $06             ; 1
009225  2  5B                   .BYTE   $5B             ; 2
009226  2  4F                   .BYTE   $4F             ; 3
009227  2  66                   .BYTE   $66             ; 4
009228  2  6D                   .BYTE   $6D             ; 5
009229  2  7D                   .BYTE   $7D             ; 6
00922A  2  07                   .BYTE   $07             ; 7
00922B  2  7F                   .BYTE   $7F             ; 8
00922C  2  67                   .BYTE   $67             ; 9
00922D  2  77                   .BYTE   $77             ; A
00922E  2  7C                   .BYTE   $7C             ; B
00922F  2  39                   .BYTE   $39             ; C
009230  2  5E                   .BYTE   $5E             ; D
009231  2  79                   .BYTE   $79             ; E
009232  2  71                   .BYTE   $71             ; F
009233  2               ;
009233  2               DSKY_TEMP_VAL:
009233  2  00                   .BYTE   0
009234  2               DSKY_PPIX_VAL:
009234  2  00                   .BYTE   0
009235  2               DSKY_PRESENT:
009235  2  00                   .BYTE   0
009236  2               
009236  1                       .INCLUDE "dosmd.asm"
009236  2               ;__MD DRIVERS____________________________________________________________________________________________________________________
009236  2               ;
009236  2               ; 	Nhyodyne Memory disk drivers
009236  2               ;
009236  2               ;	Entry points:
009236  2               ;		MD_SHOW         - called during OS init
009236  2               ;		MD_READ_SECTOR  - read a sector from drive
009236  2               ;		MD_WRITE_SECTOR - write a sector to drive
009236  2               ;________________________________________________________________________________________________________________________________
009236  2               ;
009236  2               ; RAM BANK $0C is RAM area for Drivers
009236  2               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
009236  2               ; RAM BANK $0F is fixed bank $0000-$7FFF
009236  2               ;
009236  2               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
009236  2               ;
009236  2               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
009236  2               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
009236  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009236  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009236  2               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
009236  2               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
009236  2               ;
009236  2               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
009236  2               ;
009236  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009236  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009236  2               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
009236  2               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
009236  2               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
009236  2               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
009236  2               
009236  2               
009236  2               ;__MD_SHOW___________________________________________________________________________________________
009236  2               ;
009236  2               ;  Display info on MD devices
009236  2               ;____________________________________________________________________________________________________
009236  2               ;
009236  2               MD_SHOW:
009236  2                       PRTDBG  "MD INIT:$"
009236  2  48 DA 5A A2          PRTS    "MD: UNITS=2 RAMDISK=256KB ROMDISK=384KB$"
00923A  2  00 BD 4F 92  
00923E  2  E8 C9 24 F0  
009277  2  20 73 88             JSR     NEWLINE
00927A  2  60                   RTS
00927B  2               
00927B  2               ;*__MD_READ_SECTOR____________________________________________________________________________________
00927B  2               ;*
00927B  2               ;*  READ MD SECTOR INTO BUFFER
00927B  2               ;*
00927B  2               ;*____________________________________________________________________________________________________
00927B  2               MD_READ_SECTOR:
00927B  2                       PRTDBG  "MD Read Sector$"
00927B  2  20 6D 93             JSR     GET_DRIVE_DEVICE
00927E  2  29 01                AND     #$01            ; only want drive cfg
009280  2  0A                   ASL     a               ; SHIFT 6
009281  2  0A                   ASL     a               ;
009282  2  0A                   ASL     a               ;
009283  2  0A                   ASL     a               ;
009284  2  0A                   ASL     a               ;
009285  2  0A                   ASL     a               ;
009286  2  29 5F                AND     #%01011111      ; TOGGLE READ
009288  2  AA                   TAX                     ; STASH CONTROL WORD
009289  2  AD 0E 05             LDA     seksec          ;
00928C  2  29 01                AND     #$01            ; GET SECTOR INDEX
00928E  2  C9 00                CMP     #$00
009290  2  F0 04                BEQ     @1
009292  2  8A                   TXA
009293  2  09 80                ORA     #%10000000      ; TOGGLE TOP HALF OF PAGE
009295  2  AA                   TAX
009296  2               @1:
009296  2  20 E0 92             JSR     MD_CONVERT_SECTOR
009299  2  8A                   TXA
00929A  2  29 40                AND     #%01000000
00929C  2  C9 00                CMP     #$00            ; read if ram
00929E  2  F0 0C                BEQ     :+
0092A0  2  EE 10 05             INC     debcyll         ; if rom, inc bank by 4 ()
0092A3  2  EE 10 05             INC     debcyll
0092A6  2  EE 10 05             INC     debcyll
0092A9  2  EE 10 05             INC     debcyll
0092AC  2               :
0092AC  2  AD 10 05             LDA     debcyll         ; GET BANK
0092AF  2  AC 12 05             LDY     debsehd         ; GET PAGE
0092B2  2                       PRTDBG  "DO PAGER RD$"
0092B2  2  20 00 02             JSR     MD_PAGERA
0092B5  2                       PRTDBG  "PAGER RETURN$"
0092B5  2  A9 00                LDA     #$00
0092B7  2  60                   RTS
0092B8  2               
0092B8  2               
0092B8  2               ;*__MD_WRITE_SECTOR___________________________________________________________________________________
0092B8  2               ;*
0092B8  2               ;*  WRITE MD SECTOR FROM BUFFER
0092B8  2               ;*
0092B8  2               ;*____________________________________________________________________________________________________
0092B8  2               MD_WRITE_SECTOR:
0092B8  2                       PRTDBG  "MD Write Sector$"
0092B8  2  20 6D 93             JSR     GET_DRIVE_DEVICE
0092BB  2  29 01                AND     #$01            ; only want drive cfg
0092BD  2  C9 00                CMP     #$00            ; NO WRITE FOR ROM
0092BF  2  F0 03                BEQ     MD_WRITE_SECTOR_RAM
0092C1  2  A9 FF                LDA     #$FF
0092C3  2  60                   RTS
0092C4  2               MD_WRITE_SECTOR_RAM:
0092C4  2  20 E0 92             JSR     MD_CONVERT_SECTOR
0092C7  2  A2 20                LDX     #%00100000      ; TOGGLE WRITE RAM (LO)
0092C9  2  AD 0E 05             LDA     seksec          ;
0092CC  2  29 01                AND     #$01            ; GET SECTOR INDEX
0092CE  2  C9 00                CMP     #$00
0092D0  2  F0 02                BEQ     @1
0092D2  2  A2 A0                LDX     #%10100000      ; TOGGLE WRITE RAM (HI)
0092D4  2               @1:
0092D4  2  AD 10 05             LDA     debcyll         ; GET BANK
0092D7  2  AC 12 05             LDY     debsehd         ; GET PAGE
0092DA  2                       PRTDBG  "DO PAGER WR$"
0092DA  2  20 00 02             JSR     MD_PAGERA
0092DD  2                       PRTDBG  "PAGER RETURN$"
0092DD  2  A9 00                LDA     #$00
0092DF  2  60                   RTS
0092E0  2               
0092E0  2               ;___MD_CONVERT_SECTOR___________________________________________________________________________________
0092E0  2               ;
0092E0  2               ; 	TRANSLATE SECTORS INTO MD FORMAT
0092E0  2               ;________________________________________________________________________________________________________
0092E0  2               MD_CONVERT_SECTOR:
0092E0  2                       PRTDBG  "CONVERT SECTOR$"
0092E0  2  DA                   PHX
0092E1  2  AD 0E 05             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
0092E4  2  4A                   LSR     A               ; DIVIDE BY 2 (FOR BLOCKING)
0092E5  2  29 1F                AND     #$1F            ; CLEAR UPPER 3 BITS (JUST 'CAUSE)
0092E7  2  8D 12 05             STA     debsehd         ; STORE IN SECTOR/HEAD
0092EA  2  AD 0C 05             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
0092ED  2  29 03                AND     #$03            ; BOTTOM 2 BITS ARE PART OF PAGE (PAGES ARE 32k)
0092EF  2  0A                   ASL     a               ; MOVE TO HIGH BITS
0092F0  2  0A                   ASL     a
0092F1  2  0A                   ASL     a
0092F2  2  0A                   ASL     a
0092F3  2  0A                   ASL     a
0092F4  2  09 80                ORA     #$80            ; PAGES ARE ALWAYS IN UPPER BANK
0092F6  2  0D 12 05             ORA     debsehd         ; STORE IN SECTOR/HEAD
0092F9  2  8D 12 05             STA     debsehd         ; STORE IN SECTOR/HEAD
0092FC  2                                               ; AT THIS POINT PAGE REGISTER SHOULD BE
0092FC  2                                               ; SET
0092FC  2  AD 0C 05             LDA     sektrk          ; LOAD TRACK #
0092FF  2  4A                   LSR     a               ; LOSE BOTTOM TWO BITS
009300  2  4A                   LSR     a
009301  2  8D 10 05             STA     debcyll         ; THIS SHOULD BE BANK#
009304  2               
009304  2               
009304  2                       .IF     USEDSKY=1 || USEDSKYNG=1
009304  2                           PRTDBG  "DSKY OUTPUT 1$"
009304  2  AD 13 05                 LDA     sekdsk
009307  2  8D 08 05                 STA     DSKY_HEXBUF
00930A  2  A9 00                    LDA     #$00
00930C  2  8D 09 05                 STA     DSKY_HEXBUF+1
00930F  2  AD 10 05                 LDA     debcyll
009312  2  8D 0A 05                 STA     DSKY_HEXBUF+2
009315  2  AD 12 05                 LDA     debsehd
009318  2  8D 0B 05                 STA     DSKY_HEXBUF+3
00931B  2  20 82 90                 JSR     DSKY_BIN2SEG
00931E  2  20 B7 90                 JSR     DSKY_SHOW
009321  2                       .ENDIF
009321  2  FA                   PLX
009322  2  60                   RTS
009323  2               
009323  1                       .INCLUDE "dosdblk.asm"
009323  2               ;__DOS DEBLOCK DRIVERS___________________________________________________________________________________________________________
009323  2               ;
009323  2               ; 	Nhyodyne DOS/65 Blocking and Deblocking code
009323  2               ;
009323  2               ;________________________________________________________________________________________________________________________________
009323  2               ;
009323  2               
009323  2               ;___DEBSECR512________________________________________________________________________________________
009323  2               ;
009323  2               ;	DEBLOCK 512 BYTE SECTOR FOR DOS/65
009323  2               ;
009323  2               ;________________________________________________________________________________________________________
009323  2               DEBSECR512:
009323  2  48           	PHA
009324  2  AD 0E 05     	LDA	seksec			;
009327  2  29 03        	AND	#$03			; GET SECTOR INDEX
009329  2  18           	CLC				;
00932A  2  2A           	ROL	A			;
00932B  2  AA           	TAX				;
00932C  2  BD 44 93     	LDA	DEBTAB,X		;
00932F  2  85 EE        	STA     SRC
009331  2  E8           	INX
009332  2  BD 44 93     	LDA	DEBTAB,X		;
009335  2  85 EF        	STA	SRC+1			;
009337  2  A9 00        	LDA	#<MD_PAGEBU		;
009339  2  85 EC        	STA	DEST			;
00933B  2  A9 04        	LDA	#>MD_PAGEBU           	;
00933D  2  85 ED        	STA	DEST+1			;
00933F  2  20 7A 93     	JSR	COPY_DOS_SECTOR		;
009342  2  68           	PLA
009343  2  60           	RTS
009344  2               
009344  2               DEBTAB:
009344  2  DD 93        	.word	hstbuf			;
009346  2  5D 94        	.word	hstbuf+128		;
009348  2  DD 94        	.word	hstbuf+256		;
00934A  2  5D 95        	.word	hstbuf+384		;
00934C  2               
00934C  2               
00934C  2               ;___BLKSECR512___________________________________________________________________________________________
00934C  2               ;
00934C  2               ;	BLOCK 512 SECTOR FOR DOS/65
00934C  2               ;
00934C  2               ;________________________________________________________________________________________________________
00934C  2               BLKSECR512:
00934C  2  48           	PHA
00934D  2  AD 0E 05     	LDA	seksec			;
009350  2  29 03        	AND	#$03			; GET SECTOR INDEX
009352  2  18           	CLC				;
009353  2  2A           	ROL	A			;
009354  2  AA           	TAX				;
009355  2  BD 44 93     	LDA	DEBTAB,X		;
009358  2  85 EC        	STA     DEST
00935A  2  E8           	INX
00935B  2  BD 44 93     	LDA	DEBTAB,X		;
00935E  2  85 ED        	STA	DEST+1			;
009360  2  A9 00        	LDA	#<MD_PAGEBU		;
009362  2  85 EE        	STA	SRC			;
009364  2  A9 04        	LDA	#>MD_PAGEBU		;
009366  2  85 EF        	STA	SRC+1			;
009368  2  20 7A 93     	JSR	COPY_DOS_SECTOR		;
00936B  2  68           	PLA
00936C  2  60           	RTS
00936D  2               
00936D  2               ;___GET_DRIVE_DEVICE_____________________________________________________________________________________
00936D  2               ;
00936D  2               ;	GET SELECTED DEVICE TYPE AND UNIT, RETURN IN "A"
00936D  2               ;
00936D  2               ;________________________________________________________________________________________________________
00936D  2               GET_DRIVE_DEVICE:
00936D  2  DA           	PHX
00936E  2  AD 13 05     	LDA	sekdsk			; GET DRIVE
009371  2  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
009373  2  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
009374  2  AA           	TAX 				; MOVE TO X REGISTER
009375  2  BD 14 05     	LDA 	dskcfg,X 		; GET device
009378  2  FA           	PLX
009379  2  60           	RTS
00937A  2               
00937A  2               
00937A  2               ;___COPY_DOS_SECTOR______________________________________________________________________________________
00937A  2               ;
00937A  2               ;	COPY 128 BYTE SECTOR FOR DOS/65
00937A  2               ;
00937A  2               ;________________________________________________________________________________________________________
00937A  2               COPY_DOS_SECTOR:
00937A  2  5A           	PHY
00937B  2  A0 00        	LDY	#$00			;
00937D  2               COPY_DOS_SECTOR1:
00937D  2  B1 EE        	LDA	(SRC),Y			;
00937F  2  91 EC        	STA	(DEST),Y		;
009381  2  C8           	INY				;
009382  2  98           	TYA				;
009383  2  C9 80        	CMP	#$80			;
009385  2  D0 F6        	BNE	COPY_DOS_SECTOR1	;
009387  2  7A           	PLY
009388  2  60           	RTS
009389  2               
009389  2               ;___INIT_PAGE_COPY_______________________________________________________________________________________
009389  2               ;
009389  2               ;	COPY PAGE COPY CODE TO LORAM AT "MD_PAGEBU"
009389  2               ;
009389  2               ;________________________________________________________________________________________________________
009389  2               INIT_PAGE_COPY:
009389  2               
009389  2  A0 00        		LDY 	#$00
00938B  2               :
00938B  2  B9 97 93     		LDA 	INIT_PAGE_COPY_1,Y
00938E  2  99 00 04     		STA 	MD_PAGEBU,Y
009391  2  C8           		INY
009392  2  C0 00        		CPY 	#$00
009394  2  D0 F5        		BNE 	:-
009396  2  60           		RTS
009397  2               INIT_PAGE_COPY_1:
009397  2               						; COPY_PAGE_TO_HSTBUF
009397  2  85 39        		STA		zptemp
009399  2  A2 02        		LDX 	#$02
00939B  2  A0 00        		LDY 	#$00
00939D  2               :
00939D  2  A5 39                LDA		zptemp
00939F  2  8D 78 03             STA     MPCL_RAM	; SET PAGE TO SOURCE
0093A2  2  B1 14        		LDA 	(pointr),Y
0093A4  2  A9 8C                LDA     #$8C		; SET PAGE TO DRIVERSPACE
0093A6  2  8D 78 03             STA     MPCL_RAM
0093A9  2  99 DD 93     		STA 	hstbuf,Y
0093AC  2  C8           		INY
0093AD  2  C0 00        		CPY 	#$00
0093AF  2  D0 EC        		BNE 	:-
0093B1  2  E6 15        		INC 	pointr+1
0093B3  2  CA           		DEX
0093B4  2  E0 00        		CPX 	#$00
0093B6  2  D0 E5        		BNE 	:-
0093B8  2  60           		RTS
0093B9  2               INIT_PAGE_COPY_2:
0093B9  2               						; COPY_HSTBUF_TO_PAGE
0093B9  2  85 39        		STA		zptemp
0093BB  2  A2 02        		LDX 	#$02
0093BD  2  A0 00        		LDY 	#$00
0093BF  2               :
0093BF  2  B9 DD 93     		LDA 	hstbuf,Y
0093C2  2  48           		PHA
0093C3  2  A5 39                LDA		zptemp
0093C5  2  8D 78 03             STA     MPCL_RAM	; SET PAGE TO DESTINATION
0093C8  2  68           		PLA
0093C9  2  91 14        		STA 	(pointr),Y
0093CB  2  A9 8C                LDA     #$8C		; SET PAGE TO DRIVERSPACE
0093CD  2  8D 78 03             STA     MPCL_RAM
0093D0  2  C8           		INY
0093D1  2  C0 00        		CPY 	#$00
0093D3  2  D0 EA        		BNE 	:-
0093D5  2  E6 15        		INC 	pointr+1
0093D7  2  CA           		DEX
0093D8  2  E0 00        		CPX 	#$00
0093DA  2  D0 E3        		BNE 	:-
0093DC  2  60           		RTS
0093DD  2               
0093DD  2               COPY_PAGE_TO_HSTBUF	= MD_PAGEBU
0093DD  2               COPY_HSTBUF_TOPAGE	= MD_PAGEBU+INIT_PAGE_COPY_2-INIT_PAGE_COPY_1
0093DD  2               ;deblocking buffer for dba
0093DD  2  xx xx xx xx  hstbuf:		.res	512		;256 or 512 byte sectors
0093E1  2  xx xx xx xx  
0093E5  2  xx xx xx xx  
0095DD  2               
0095DD  1                       .INCLUDE "dosflp.asm"
0095DD  2               ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
0095DD  2               ;
0095DD  2               ; 	DOS/65 floppy drivers for MBC FDC card
0095DD  2               ;
0095DD  2               ;	Entry points:
0095DD  2               ;		FL_SETUP        - called during OS init
0095DD  2               ;		FL_READ_SECTOR	- read a sector from drive
0095DD  2               ;		FL_WRITE_SECTOR	- write a sector to drive
0095DD  2               ;
0095DD  2               ;________________________________________________________________________________________________________________________________
0095DD  2               ;
0095DD  2               ;*
0095DD  2               ;* HARDWARE I/O ADDRESSES
0095DD  2               ;*
0095DD  2               FDC_MSR         = $0330         ; ADDRESS OF MAIN STATUS REGISTER
0095DD  2               FDC_DATA        = $0331         ; FLOPPY DATA REGISTER
0095DD  2               FDC_RESET       = $0333         ; FLOPPY RESET
0095DD  2               FDC_DCR         = $0335         ; LOAD CONTROL REGISTER
0095DD  2               FDC_DOR         = $0336         ; CONFIGURATION CONTROL REGISTER
0095DD  2               FDC_TC          = $0337         ; TERMINAL COUNT
0095DD  2               
0095DD  2               ;
0095DD  2               ; FDC COMMANDS
0095DD  2               ;
0095DD  2               CFD_READ        = %00000110     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_READDEL     = %00001100     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_WRITE       = %00000101     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_WRITEDEL    = %00001001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_READTRK     = %00000010     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_READID      = %00001010     ; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_FMTTRK      = %00001101     ; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_SCANEQ      = %00010001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_SCANLOEQ    = %00011001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_SCANHIEQ    = %00011101     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0095DD  2               CFD_RECAL       = %00000111     ; CMD,DS --> <EMPTY>
0095DD  2               CFD_SENSEINT    = %00001000     ; CMD --> ST0,PCN
0095DD  2               CFD_SPECIFY     = %00000011     ; CMD,SRT/HUT,HLT/ND --> <EMPTY>
0095DD  2               CFD_DRVSTAT     = %00000100     ; CMD,HDS/DS --> ST3
0095DD  2               CFD_SEEK        = %00001111     ; CMD,HDS/DS --> <EMPTY>
0095DD  2               CFD_VERSION     = %00010000     ; CMD --> ST0
0095DD  2               
0095DD  2               CFD_MFM         = %01000000     ;
0095DD  2               
0095DD  2               ;
0095DD  2               ;
0095DD  2               ; Specify Command:
0095DD  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0095DD  2               ; |Byte |  7  |	 6  |  5  |  4	|  3  |	 2  |  1  |  0	|
0095DD  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0095DD  2               ; |  0	|  0  |	 0  |  0  |  0	|  0  |	 0  |  1  |  1	|
0095DD  2               ; |  1	| ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
0095DD  2               ; |  2	| ------------ HEAD LOAD TIME ----------- | NDM |
0095DD  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0095DD  2               ;
0095DD  2               ;
0095DD  2               ; Step Rate (milliseconds):		 Head Unload Time (milliseconds):	Head Load Time (milliseconds):
0095DD  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0095DD  2               ; |	 |	   BITRATE	     |	 |	|	  BITRATE	    |	|      |	 BITRATE	   |
0095DD  2               ; |  VAL | 1.0M | 500K | 300K | 250K |	 |  VAL | 1.0M | 500K | 300K | 250K |	|  VAL | 1.0M | 500K | 300K | 250K |
0095DD  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0095DD  2               ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |	 |    0 |  128 |  256 |	 426 |	512 |	|    0 |  128 |	 256 |	426 |  512 |
0095DD  2               ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |	 |    1 |    8 |   16 | 26.7 |	 32 |	|    1 |    1 |	   2 |	3.3 |	 4 |
0095DD  2               ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |	 |    2 |   16 |   32 | 53.3 |	 64 |	|    2 |    2 |	   4 |	6.7 |	 8 |
0095DD  2               ; |  ... |  ... |  ... |  ... |	 ... |	 |  ... |  ... |  ... |	 ... |	... |	|  ... |  ... |	 ... |	... |  ... |
0095DD  2               ; |   14 |  1.0 |  2.0 |  3.3 |	 4.0 |	 |   14 |  112 |  224 |	 373 |	448 |	|  126 |  126 |	 252 |	420 |  504 |
0095DD  2               ; |   15 |  0.5 |  1.0 |  1.7 |	 2.0 |	 |   15 |  120 |  240 |	 400 |	480 |	|  127 |  127 |	 254 |	423 |  508 |
0095DD  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0095DD  2               ;
0095DD  2               ; IBM PS/2 CALLS FOR:
0095DD  2               ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
0095DD  2               ;   HEAD LOAD TIME: 15ms
0095DD  2               
0095DD  2               DOR_INIT        = %00001100     ; SOFT RESET INACTIVE, DMA ENABLED
0095DD  2               DOR_BR250       = DOR_INIT
0095DD  2               DOR_BR500       = DOR_INIT
0095DD  2               
0095DD  2               
0095DD  2               
0095DD  2               FLOPPY_RETRIES  = 6             ; HOW ABOUT SIX RETIRES?
0095DD  2               FLOPPY_RETRIES1 = 2             ; TWO ITERATIONS OF RECAL?
0095DD  2               
0095DD  2               ;__FL_SETUP______________________________________________________________________________________________________________________
0095DD  2               ;
0095DD  2               ;	SETUP FLOPPY DRIVE SETTINGS
0095DD  2               ;________________________________________________________________________________________________________________________________
0095DD  2               ;
0095DD  2               FL_SETUP:
0095DD  2  A9 00                LDA     #$00            ; RESET TRACK/CYL/SEC STORAGE
0095DF  2  8D 47 9A             STA     debhead         ;
0095E2  2  8D 48 9A             STA     debcyl          ;
0095E5  2  8D 49 9A             STA     debsec          ;
0095E8  2  A9 FF                LDA     #$FF            ; SET CACHE TO INVALID
0095EA  2  8D 4A 9A             STA     Cdebhead        ;
0095ED  2  8D 4B 9A             STA     Cdebcyl         ;
0095F0  2  8D 4C 9A             STA     Cdebsec         ;
0095F3  2               
0095F3  2  48 DA 5A A2          PRTS    "FD: MODE=MBC$"
0095F7  2  00 BD 0C 96  
0095FB  2  E8 C9 24 F0  
009619  2               ;
009619  2  48 DA 5A A2          PRTS    " IO=0x$"
00961D  2  00 BD 32 96  
009621  2  E8 C9 24 F0  
009639  2  A9 03                LDA     #>FDC_MSR
00963B  2  20 51 88             JSR     PRTHEXBYTE
00963E  2  A9 30                LDA     #<FDC_MSR
009640  2  20 51 88             JSR     PRTHEXBYTE
009643  2  20 EB 99             JSR     FD_DETECT       ; CHECK FOR FDC
009646  2  C9 00                CMP     #$00
009648  2  F0 2C                BEQ     :+              ; CONTINUE IF FOUND
00964A  2  48 DA 5A A2          PRTS    " NOT PRESENT$" ; NOT ZERO, H/W NOT PRESENT
00964E  2  00 BD 63 96  
009652  2  E8 C9 24 F0  
009670  2  20 73 88             JSR     NEWLINE
009673  2  A9 FF                LDA     #$FF
009675  2  60                   RTS                     ; BAIL OUT
009676  2               :
009676  2  48 DA 5A A2          PRTS    " PRESENT$"     ; NOT ZERO, H/W NOT PRESENT
00967A  2  00 BD 8F 96  
00967E  2  E8 C9 24 F0  
009698  2  20 73 88             JSR     NEWLINE
00969B  2  A9 0C                LDA     #DOR_INIT       ; RESET SETTINGS
00969D  2  8D 36 03             STA     FDC_DOR
0096A0  2               
0096A0  2  20 89 99             JSR     CHECKINT        ;
0096A3  2  A9 03                LDA     #CFD_SPECIFY    ; SPECIFY COMMAND
0096A5  2  20 45 99             JSR     PFDATA          ; OUTPUT TO FDC
0096A8  2  A9 7F                LDA     #$7F            ; 6 MS STEP, 480 MS HEAD UNLOAD
0096AA  2  20 45 99             JSR     PFDATA          ; OUTPUT TO FDC
0096AD  2  A9 05                LDA     #$05            ; 508 MS HEAD LOAD, NON-DMA MODE
0096AF  2  20 45 99             JSR     PFDATA          ; OUTPUT TO FDC
0096B2  2               
0096B2  2  20 89 99             JSR     CHECKINT        ; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
0096B5  2  20 89 99             JSR     CHECKINT        ;
0096B8  2  20 89 99             JSR     CHECKINT        ;
0096BB  2  20 89 99             JSR     CHECKINT        ;
0096BE  2  20 89 99             JSR     CHECKINT        ;
0096C1  2  20 89 99             JSR     CHECKINT        ;
0096C4  2               
0096C4  2  A9 00                LDA     #$00
0096C6  2  8D 13 05             STA     sekdsk
0096C9  2  A9 10                LDA     #%00010000
0096CB  2  8D 25 05             STA     DSKUNIT
0096CE  2  20 1E 99             JSR     RECAL           ;
0096D1  2  A9 27                LDA     #39             ;
0096D3  2  8D 48 9A             STA     debcyl          ;
0096D6  2  20 01 99             JSR     SETTRK1
0096D9  2  20 1E 99             JSR     RECAL           ;
0096DC  2               
0096DC  2  A9 01                LDA     #$01
0096DE  2  8D 13 05             STA     sekdsk
0096E1  2  A9 21                LDA     #%00100001
0096E3  2  8D 25 05             STA     DSKUNIT
0096E6  2  20 1E 99             JSR     RECAL           ;
0096E9  2  A9 27                LDA     #39             ;
0096EB  2  8D 48 9A             STA     debcyl          ;
0096EE  2  20 01 99             JSR     SETTRK1
0096F1  2  20 1E 99             JSR     RECAL           ;
0096F4  2  A9 0C                LDA     #DOR_INIT       ; RESET SETTINGS
0096F6  2  8D 36 03             STA     FDC_DOR
0096F9  2  60                   RTS
0096FA  2               
0096FA  2               
0096FA  2               ;__FL_READ_SECTOR________________________________________________________________________________________________________________
0096FA  2               ;
0096FA  2               ; 	READ A FLOPPY SECTOR
0096FA  2               ;________________________________________________________________________________________________________________________________
0096FA  2               ;
0096FA  2               ;
0096FA  2               FL_READ_SECTOR:
0096FA  2  AD 46 9A             LDA     HARDWARE_DETCT
0096FD  2  C9 00                CMP     #$00
0096FF  2  F0 01                BEQ     :+
009701  2  60                   RTS
009702  2               :
009702  2  8D 51 9A             STA     FLRETRY         ; BLANK RETRIES
009705  2  8D 52 9A             STA     FLRETRY1
009708  2  20 11 97             JSR     FL_READ_SECTOR_RAW
00970B  2  48                   PHA
00970C  2  20 23 93             JSR     DEBSECR512
00970F  2  68                   PLA
009710  2  60                   RTS
009711  2               
009711  2               FL_READ_SECTOR_RAW:
009711  2  A9 0C                LDA     #DOR_INIT
009713  2  0D 25 05             ORA     DSKUNIT         ;
009716  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
009719  2  20 DC 97             JSR     SETUP_FD_CHS
00971C  2  AD 47 9A             LDA     debhead         ;
00971F  2  CD 4A 9A             CMP     Cdebhead        ;
009722  2  D0 13                BNE     READFL_DIRTY
009724  2  AD 48 9A             LDA     debcyl          ;
009727  2  CD 4B 9A             CMP     Cdebcyl         ;
00972A  2  D0 0B                BNE     READFL_DIRTY
00972C  2  AD 49 9A             LDA     debsec          ;
00972F  2  CD 4C 9A             CMP     Cdebsec         ;
009732  2  D0 03                BNE     READFL_DIRTY
009734  2               ; SECTOR ALREADY IN CACHE, DEBLOCK
009734  2  A9 00                LDA     #$00
009736  2  60                   RTS
009737  2               READFL_DIRTY:
009737  2  AD 47 9A             LDA     debhead         ; STORE CURRENT PARMS
00973A  2  8D 4A 9A             STA     Cdebhead        ;
00973D  2  AD 48 9A             LDA     debcyl          ;
009740  2  8D 4B 9A             STA     Cdebcyl         ;
009743  2  AD 49 9A             LDA     debsec          ;
009746  2  8D 4C 9A             STA     Cdebsec         ;
009749  2               
009749  2               READFL1:
009749  2  A9 46                LDA     #CFD_READ|CFD_MFM; BIT 6 SETS MFM, 06H IS READ COMMAND
00974B  2  8D 4F 9A             STA     FCMD            ; SET COMMAND
00974E  2  20 12 98             JSR     DSKOP           ; DO DISK OPERATION
009751  2               
009751  2  C9 00                CMP     #$00
009753  2  F0 2B                BEQ     READFLDONE      ; OPERATION SUCCESSFUL
009755  2  EE 51 9A             INC     FLRETRY         ; LET'S RETRY
009758  2  AD 51 9A             LDA     FLRETRY
00975B  2  C9 06                CMP     #FLOPPY_RETRIES
00975D  2  D0 EA                BNE     READFL1
00975F  2  20 1E 99             JSR     RECAL           ; AFTER X RETRIES, LET'S RECAL THE HEAD
009762  2  20 EF 98             JSR     SETTRACK        ;
009765  2  A9 00                LDA     #$00            ;
009767  2  8D 51 9A             STA     FLRETRY         ; MORE RETRIES!
00976A  2  EE 52 9A             INC     FLRETRY1
00976D  2  AD 52 9A             LDA     FLRETRY1
009770  2  C9 02                CMP     #FLOPPY_RETRIES1
009772  2  D0 D5                BNE     READFL1
009774  2               
009774  2  A9 FF                LDA     #$FF            ; RETRIES FAILED, INVALIDATE CACHE AND REPORT ERROR
009776  2  8D 4A 9A             STA     Cdebhead        ;
009779  2  8D 4B 9A             STA     Cdebcyl         ;
00977C  2  8D 4C 9A             STA     Cdebsec         ;
00977F  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
009780  2               READFLDONE:
009780  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
009782  2  60                   RTS
009783  2               
009783  2               ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
009783  2               ;
009783  2               ; 	WRITE A FLOPPY SECTOR
009783  2               ;________________________________________________________________________________________________________________________________
009783  2               ;
009783  2               FL_WRITE_SECTOR:
009783  2  AD 46 9A             LDA     HARDWARE_DETCT
009786  2  C9 00                CMP     #$00
009788  2  F0 01                BEQ     :+
00978A  2  60                   RTS
00978B  2               :
00978B  2  20 11 97             JSR     FL_READ_SECTOR_RAW
00978E  2  8D 51 9A             STA     FLRETRY         ; BLANK RETRIES
009791  2  8D 52 9A             STA     FLRETRY1
009794  2  20 4C 93             JSR     BLKSECR512
009797  2               
009797  2  A9 FF                LDA     #$FF
009799  2  8D 4A 9A             STA     Cdebhead        ; INVALIDATE CACHE
00979C  2  8D 4B 9A             STA     Cdebcyl         ;
00979F  2  8D 4C 9A             STA     Cdebsec         ;
0097A2  2               
0097A2  2               WRITEFL1:
0097A2  2  A9 45                LDA     #CFD_WRITE|CFD_MFM; BIT 6 SETS MFM, 05H IS WRITE COMMAND
0097A4  2  8D 4F 9A             STA     FCMD
0097A7  2  20 12 98             JSR     DSKOP
0097AA  2               
0097AA  2  C9 00                CMP     #$00
0097AC  2  F0 2B                BEQ     WRITEFLDONE
0097AE  2  EE 51 9A             INC     FLRETRY
0097B1  2  AD 51 9A             LDA     FLRETRY
0097B4  2  C9 06                CMP     #FLOPPY_RETRIES
0097B6  2  D0 EA                BNE     WRITEFL1
0097B8  2  20 1E 99             JSR     RECAL
0097BB  2  20 EF 98             JSR     SETTRACK
0097BE  2  A9 00                LDA     #$00
0097C0  2  8D 51 9A             STA     FLRETRY
0097C3  2  EE 52 9A             INC     FLRETRY1
0097C6  2  AD 52 9A             LDA     FLRETRY1
0097C9  2  C9 02                CMP     #FLOPPY_RETRIES1
0097CB  2  D0 D5                BNE     WRITEFL1
0097CD  2  A9 FF                LDA     #$FF            ; INVALIDATE CACHE
0097CF  2  8D 4A 9A             STA     Cdebhead        ;
0097D2  2  8D 4B 9A             STA     Cdebcyl         ;
0097D5  2  8D 4C 9A             STA     Cdebsec         ;
0097D8  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
0097D9  2               WRITEFLDONE:
0097D9  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
0097DB  2  60                   RTS
0097DC  2               
0097DC  2               
0097DC  2               ;__SETUP_FD_CHS__________________________________________________________________________________________________________________
0097DC  2               ;
0097DC  2               ; 	TRANSFORM DOS65 CHS TO FLOPPY
0097DC  2               ;________________________________________________________________________________________________________________________________
0097DC  2               ;
0097DC  2               SETUP_FD_CHS:
0097DC  2  AD 0C 05             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
0097DF  2  29 01                AND     #$01            ; FILTER OUT HEAD
0097E1  2  8D 47 9A             STA     debhead         ; STORE HEAD
0097E4  2  AD 0C 05             LDA     sektrk          ; SAVE TRACK IN A
0097E7  2  4A                   LSR     A               ; REMOVE HEAD BIT
0097E8  2  8D 48 9A             STA     debcyl          ; STORE IN TRACK
0097EB  2  AD 0E 05             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
0097EE  2  4A                   LSR     A               ;
0097EF  2  4A                   LSR     A               ; DIVIDE BY 4 (FOR BLOCKING)
0097F0  2  8D 49 9A             STA     debsec          ; STORE IN SECTOR
0097F3  2               
0097F3  2                       .IF     USEDSKY=1 || USEDSKYNG=1
0097F3  2                           PRTDBG  "DSKY OUTPUT 1$"
0097F3  2  AD 13 05                 LDA     sekdsk
0097F6  2  8D 08 05                 STA     DSKY_HEXBUF
0097F9  2  AD 48 9A                 LDA     debcyl
0097FC  2  8D 09 05                 STA     DSKY_HEXBUF+1
0097FF  2  AD 47 9A                 LDA     debhead
009802  2  8D 0A 05                 STA     DSKY_HEXBUF+2
009805  2  AD 49 9A                 LDA     debsec
009808  2  8D 0B 05                 STA     DSKY_HEXBUF+3
00980B  2  20 82 90                 JSR     DSKY_BIN2SEG
00980E  2  20 B7 90                 JSR     DSKY_SHOW
009811  2                       .ENDIF
009811  2               
009811  2  60                   RTS
009812  2               
009812  2               ;__DSKOP__________________________________________________________________________________________________________________________
009812  2               ;
009812  2               ; 	PERFORM A DISK OPERATION
009812  2               ;________________________________________________________________________________________________________________________________
009812  2               ;
009812  2               DSKOP:
009812  2  78                   SEI
009813  2  20 89 99             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
009816  2  C9 FF                CMP     #$FF            ; DID IT RETURN WITH ERROR CODE?
009818  2  F0 10                BEQ     DSKEXIT         ; IF YES, EXIT WITH ERROR CODE
00981A  2               ;
00981A  2  20 EF 98             JSR     SETTRACK        ; PERFORM SEEK TO TRACK
00981D  2               ;
00981D  2  AD 4F 9A             LDA     FCMD            ; WHAT COMMAND IS PENDING?
009820  2  C9 46                CMP     #CFD_READ|CFD_MFM; IS IT A READ COMMAND?
009822  2  D0 03                BNE     GWRR_POLL       ;
009824  2  4C 7F 98             JMP     RDD_POLL        ;
009827  2               GWRR_POLL:
009827  2  4C C5 98             JMP     WRR_POLL        ;
00982A  2               DSKEXIT:
00982A  2  A9 00                LDA     #0              ; SET MOTOR OFF
00982C  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
00982F  2  A9 FF                LDA     #$FF            ; SET IF ERROR
009831  2  58                   CLI
009832  2  60                   RTS
009833  2               
009833  2               SNDFDWR:
009833  2  18                   CLC
009834  2  AD 25 05             LDA     DSKUNIT         ; GET DISK UNIT NUMBER
009837  2  29 01                AND     #$01            ; MASK FOR TWO DRIVES.
009839  2  8D 4E 9A             STA     UNIT            ; PARK IT IN TEMP
00983C  2  AD 47 9A             LDA     debhead         ; GET HEAD SELECTION
00983F  2  29 01                AND     #$01            ; INSURE SINGLE BIT
009841  2  0A                   ASL     A               ;
009842  2  0A                   ASL     A               ; MOVE HEAD TO BIT 2 POSITION
009843  2  0D 4E 9A             ORA     UNIT            ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
009846  2  8D 4E 9A             STA     UNIT            ; STORE IN UNIT
009849  2  AD 4F 9A             LDA     FCMD            ;
00984C  2  20 45 99             JSR     PFDATA          ; PUSH COMMAND TO I8272
00984F  2  AD 4E 9A             LDA     UNIT            ;
009852  2  20 45 99             JSR     PFDATA          ;
009855  2  AD 48 9A             LDA     debcyl          ;
009858  2  20 45 99             JSR     PFDATA          ;
00985B  2  AD 47 9A             LDA     debhead         ;
00985E  2  20 45 99             JSR     PFDATA          ;
009861  2  18                   CLC                     ;
009862  2  AD 49 9A             LDA     debsec          ;
009865  2  69 01                ADC     #$01            ;
009867  2  20 45 99             JSR     PFDATA          ;
00986A  2  A9 02                LDA     #$02            ;
00986C  2  20 45 99             JSR     PFDATA          ; WHAT DENSITY
00986F  2  A9 09                LDA     #$09            ;
009871  2  20 45 99             JSR     PFDATA          ; ASSUME SC (SECTOR COUNT)  EOT
009874  2  A9 1B                LDA     #$1B            ;
009876  2  20 45 99             JSR     PFDATA          ; WHAT GAP IS NEEDED
009879  2  A9 FF                LDA     #$FF            ; DTL, IS THE LAST COMMAND BYTE TO I8272
00987B  2  20 70 99             JSR     PFDATAS
00987E  2  60                   RTS
00987F  2               
00987F  2               
00987F  2               ; PERFORM READ
00987F  2               ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN. (AT 2MHZ IS 2,000,000 CYCLES PER SECOND == 50 CYCLE BUDGET.)
00987F  2               ;
00987F  2               RDD_POLL:
00987F  2  A2 00                LDX     #$00
009881  2  A0 00                LDY     #$00
009883  2  20 33 98             JSR     SNDFDWR         ;
009886  2               RDS1:
009886  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS  (4 CYCLES)
009889  2  10 FB                BPL     RDS1            ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
00988B  2  29 20                AND     #%00100000      ; EXECUTION MODE? (2 CYCLES)
00988D  2  F0 1D                BEQ     DSKOPEND        ; NO, ERROR
00988F  2               RDS1A:
00988F  2  AD 31 03             LDA     FDC_DATA        ; GET DATA (4 CYCLES)
009892  2  99 DD 93             STA     hstbuf,Y        ; WRITE IT (5 CYCLES)
009895  2  C8                   INY                     ; (2 CYCLES)
009896  2  D0 EE                BNE     RDS1            ; KEEP GOING (UP TO 4 CYCLES)   TOTAL =
009898  2  A2 00                LDX     #$00
00989A  2               RDS2:
00989A  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
00989D  2  10 FB                BPL     RDS2            ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
00989F  2  29 20                AND     #%00100000      ; EXECUTION MODE?
0098A1  2  F0 09                BEQ     DSKOPEND        ; NO, ERROR
0098A3  2               RDS2A:
0098A3  2  AD 31 03             LDA     FDC_DATA        ; GET DATA
0098A6  2  99 DD 94             STA     hstbuf+256,Y    ; WRITE IT
0098A9  2  C8                   INY
0098AA  2  D0 EE                BNE     RDS2            ; KEEP GOING
0098AC  2               DSKOPEND:
0098AC  2  AD 37 03             LDA     FDC_TC
0098AF  2  20 37 9A             JSR     FDDELAY
0098B2  2               ;
0098B2  2  20 D2 99             JSR     GFDATA          ;GET ERROR TYPE
0098B5  2  8D 4D 9A             STA     FLERR
0098B8  2               ;* CLEAR OUT ANY REMAINING DATA
0098B8  2               RESUL3:
0098B8  2  20 D2 99             JSR     GFDATA          ;READ BYTE FROM FDC
0098BB  2  C9 00                CMP     #$00
0098BD  2  D0 F9                BNE     RESUL3          ;CLEAR THEM ALL
0098BF  2  AD 4D 9A             LDA     FLERR           ;
0098C2  2  29 C0                AND     #%11000000      ;
0098C4  2  60                   RTS
0098C5  2               
0098C5  2               
0098C5  2               WRR_POLL:
0098C5  2  20 33 98             JSR     SNDFDWR         ;
0098C8  2               WRS1:   ;
0098C8  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
0098CB  2  10 FB                BPL     WRS1            ; NOT READY
0098CD  2  29 20                AND     #%00100000      ; EXECUTION MODE?
0098CF  2  F0 1B                BEQ     WRS3            ; NO, ERROR
0098D1  2  B9 DD 93             LDA     hstbuf,Y        ; WRITE IT
0098D4  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
0098D7  2  C8                   INY
0098D8  2  D0 EE                BNE     WRS1            ; DO NEXT
0098DA  2               WRS2:   ;
0098DA  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
0098DD  2  10 FB                BPL     WRS2            ; NOT READY
0098DF  2  29 20                AND     #%00100000      ; EXECUTION MODE?
0098E1  2  F0 09                BEQ     WRS3            ; NO, ERROR
0098E3  2  B9 DD 94             LDA     hstbuf+256,Y    ; WRITE IT
0098E6  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
0098E9  2  C8                   INY
0098EA  2  D0 EE                BNE     WRS2            ; DO NEXT
0098EC  2               WRS3:
0098EC  2  4C AC 98             JMP     DSKOPEND        ;
0098EF  2               
0098EF  2               
0098EF  2               ;__SETTRACK__________________________________________________________________________________________________________________________
0098EF  2               ;
0098EF  2               ; 	SEEK TO A TRACK ON GIVEN UNIT
0098EF  2               ; 	A: TRACK #
0098EF  2               ;________________________________________________________________________________________________________________________________
0098EF  2               ;
0098EF  2               SETTRACK:
0098EF  2  A9 0C                LDA     #DOR_INIT
0098F1  2  0D 25 05             ORA     DSKUNIT         ; SET MOTOR ON
0098F4  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
0098F7  2               
0098F7  2               ; ANY INTERUPT PENDING
0098F7  2               ; IF YES FIND OUT WHY/CLEAR
0098F7  2  20 89 99             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
0098FA  2  C9 FF                CMP     #$FF            ; DID IT RTSURN WITH ERROR CODE?
0098FC  2  D0 03                BNE     SETTRK1
0098FE  2  4C 44 99             JMP     SETTRKEXIT      ;
009901  2               
009901  2               ;
009901  2               SETTRK1:
009901  2  AD 48 9A             LDA     debcyl          ; GET TRACK
009904  2  C9 00                CMP     #$00            ;
009906  2  F0 16                BEQ     RECAL           ; IF 0 PERFORM RECAL INSTEAD OF SEEK
009908  2  A9 0F                LDA     #CFD_SEEK       ; SEEK COMMAND
00990A  2  20 45 99             JSR     PFDATA          ; PUSH COMMAND
00990D  2  AD 25 05             LDA     DSKUNIT         ; SAY WHICH UNIT
009910  2  29 01                AND     #$01
009912  2  20 45 99             JSR     PFDATA          ; SEND THAT
009915  2  AD 48 9A             LDA     debcyl          ; TO WHAT TRACK
009918  2  20 45 99             JSR     PFDATA          ; SEND THAT TOO
00991B  2  4C 33 99             JMP     WAINT           ; WAIT FOR INTERRUPT SAYING DONE
00991E  2               RECAL:
00991E  2  A9 0C                LDA     #DOR_INIT
009920  2  0D 25 05             ORA     DSKUNIT         ; SET MOTOR ON
009923  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
009926  2  A9 07                LDA     #CFD_RECAL      ; RECAL TO TRACK 0
009928  2  20 45 99             JSR     PFDATA          ; SEND IT
00992B  2  AD 25 05             LDA     DSKUNIT         ; SAY WHICH UNIT
00992E  2  29 01                AND     #$01
009930  2  20 45 99             JSR     PFDATA          ; SEND THAT TOO
009933  2               ;
009933  2               WAINT:
009933  2  DA                   PHX
009934  2  A2 64                LDX     #100
009936  2  20 3C 9A             JSR     FDVDELAY
009939  2  FA                   PLX
00993A  2               :
00993A  2  20 89 99             JSR     CHECKINT
00993D  2  AD 30 03             LDA     FDC_MSR         ; READ SEEK STATUS
009940  2  29 0F                AND     #%00001111      ; ANY DRIVES SEEKING?
009942  2  D0 F6                BNE     :-              ; YES, WAIT FOR THEM
009944  2               ;
009944  2               SETTRKEXIT:
009944  2  60                   RTS
009945  2               
009945  2               ;__PFDATA__________________________________________________________________________________________________________________________
009945  2               ;
009945  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE
009945  2               ;
009945  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
009945  2               ;	RQM  DIO
009945  2               ;	0	0	BUSY
009945  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
009945  2               ;	1	1	BYTE FOR READ BY HOST PENDING
009945  2               ;	0	1	BUSY
009945  2               ;
009945  2               ;________________________________________________________________________________________________________________________________
009945  2               ;
009945  2               PFDATA:
009945  2  48                   PHA                     ; SAVE DATA BYTE
009946  2  A0 00                LDY     #$00
009948  2               WRF1:
009948  2  AD 30 03             LDA     FDC_MSR         ; READ FDC STATUS
00994B  2  AA                   TAX
00994C  2  29 80                AND     #$80            ;
00994E  2  D0 07                BNE     :+
009950  2  C8                   INY
009951  2  D0 F5                BNE     WRF1            ; FDC IS NOT READY, WAIT FOR IT
009953  2  68                   PLA
009954  2  A9 FF                LDA     #$FF
009956  2  60                   RTS
009957  2               :
009957  2  8A                   TXA
009958  2  29 40                AND     #$40            ; TEST DIO BIT
00995A  2  D0 0E                BNE     WRF2            ; FDC IS OUT OF SYNC
00995C  2  68                   PLA                     ; RESTORE DATA
00995D  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
009960  2  20 37 9A             JSR     FDDELAY
009963  2  20 37 9A             JSR     FDDELAY
009966  2  20 37 9A             JSR     FDDELAY
009969  2  60                   RTS
00996A  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
00996A  2               WRF2:
00996A  2  AD 31 03             LDA     FDC_DATA        ; READ DATA REGISTER
00996D  2  4C 48 99             JMP     WRF1            ; AND CONTINUE
009970  2               
009970  2               ;__PFDATAS_________________________________________________________________________________________________________________________
009970  2               ;
009970  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
009970  2               ;
009970  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
009970  2               ;	RQM  DIO
009970  2               ;	0	0	BUSY
009970  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
009970  2               ;	1	1	BYTE FOR READ BY HOST PENDING
009970  2               ;	0	1	BUSY
009970  2               ;
009970  2               ;________________________________________________________________________________________________________________________________
009970  2               ;
009970  2               PFDATAS:
009970  2  48                   PHA                     ; SAVE DATA BYTE
009971  2               WRF1S:
009971  2  AD 30 03             LDA     FDC_MSR         ; READ FDC STATUS
009974  2  AA                   TAX
009975  2  29 80                AND     #$80            ;
009977  2  F0 F8                BEQ     WRF1S           ; FDC IS NOT READY, WAIT FOR IT
009979  2  8A                   TXA
00997A  2  29 40                AND     #$40            ; TEST DIO BIT
00997C  2  D0 05                BNE     WRF2S           ; FDC IS OUT OF SYNC
00997E  2  68                   PLA                     ; RESTORE DATA
00997F  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
009982  2  60                   RTS
009983  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
009983  2               WRF2S:
009983  2  AD 31 03             LDA     FDC_DATA        ; READ DATA REGISTER
009986  2  4C 71 99             JMP     WRF1S           ; AND CONTINUE
009989  2               
009989  2               
009989  2               
009989  2               ;__CHECKINT__________________________________________________________________________________________________________________________
009989  2               ;
009989  2               ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
009989  2               ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
009989  2               ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
009989  2               ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
009989  2               ;________________________________________________________________________________________________________________________________
009989  2               ;
009989  2               CHECKINT:
009989  2  A0 00                LDY     #$00
00998B  2               :
00998B  2  AD 30 03             LDA     FDC_MSR         ; READING OR WRITING IS KEYS TO D7 RQM
00998E  2  29 80                AND     #$80
009990  2  D0 09                BNE     :+              ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
009992  2  20 37 9A             JSR     FDDELAY
009995  2  C8                   INY
009996  2  D0 F3                BNE     :-
009998  2  4C A3 99             JMP     ERRCLR
00999B  2               
00999B  2               :
00999B  2  AD 30 03             LDA     FDC_MSR         ; READING OR WRITING IS KEYS TO D7 RQM
00999E  2  29 40                AND     #$40            ; WAITING FOR INPUT?
0099A0  2  F0 16                BEQ     SENDINT
0099A2  2  60                   RTS
0099A3  2               
0099A3  2               ERRCLR:
0099A3  2  A0 00                LDY     #$00
0099A5  2               :
0099A5  2  AD 31 03             LDA     FDC_DATA        ; CLEAR THE JUNK OUT OF DATA REGISTER
0099A8  2  AD 30 03             LDA     FDC_MSR         ; CHECK WITH RQM
0099AB  2  29 80                AND     #$80            ; IF STILL NOT READY, READ OUT MORE JUNK
0099AD  2  D0 06                BNE     :+              ;
0099AF  2  20 37 9A             JSR     FDDELAY
0099B2  2  C8                   INY
0099B3  2  D0 F0                BNE     :-
0099B5  2               :
0099B5  2  A9 FF                LDA     #$FF            ; RETURN ERROR CODE -1
0099B7  2               ;
0099B7  2  60                   RTS
0099B8  2               
0099B8  2               ;__SENDINT__________________________________________________________________________________________________________________________
0099B8  2               ;
0099B8  2               ; SENSE INTERRUPT COMMAND
0099B8  2               ;________________________________________________________________________________________________________________________________
0099B8  2               ;
0099B8  2               SENDINT:
0099B8  2  A9 08                LDA     #CFD_SENSEINT   ; SENSE INTERRUPT COMMAND
0099BA  2  20 45 99             JSR     PFDATA          ; SEND IT
0099BD  2  20 D2 99             JSR     GFDATA          ; GET RESULTS
0099C0  2  8D 50 9A             STA     ST0             ; STORE THAT
0099C3  2  29 C0                AND     #$C0            ; MASK OFF INTERRUPT STATUS BITS
0099C5  2  C9 80                CMP     #$80            ; CHECK IF INVALID COMMAND
0099C7  2  F0 08                BEQ     ENDSENDINT      ; YES, EXIT
0099C9  2  20 D2 99             JSR     GFDATA          ; GET ANOTHER (STATUS CODE 1)
0099CC  2  AD 50 9A             LDA     ST0             ; GET FIRST ONE
0099CF  2  29 C0                AND     #$C0            ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
0099D1  2               ENDSENDINT:
0099D1  2  60                   RTS                     ; ANYTHING ELSE IS AN ERROR
0099D2  2               
0099D2  2               
0099D2  2               ;__GFDATA__________________________________________________________________________________________________________________________
0099D2  2               ;
0099D2  2               ; GET DATA FROM FLOPPY CONTROLLER
0099D2  2               ;
0099D2  2               ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
0099D2  2               ;	RQM  DIO
0099D2  2               ;	0	0	BUSY
0099D2  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
0099D2  2               ;	1	1	BYTE FOR READ BY HOST PENDING
0099D2  2               ;	0	1	BUSY
0099D2  2               ;
0099D2  2               ;________________________________________________________________________________________________________________________________
0099D2  2               ;
0099D2  2               GFDATA:
0099D2  2  A0 00                LDY     #$00
0099D4  2               :
0099D4  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
0099D7  2  AA                   TAX                     ;
0099D8  2  29 80                AND     #%10000000      ; NOT READY, WAIT
0099DA  2  D0 06                BNE     :+              ;
0099DC  2  C8                   INY
0099DD  2  D0 F5                BNE     :-
0099DF  2  A9 00                LDA     #$00
0099E1  2  60                   RTS
0099E2  2               :
0099E2  2  8A                   TXA
0099E3  2  29 40                AND     #%01000000      ; ANY DATA FOR US?
0099E5  2  F0 03                BEQ     GFDATA1         ; NO, SKIP IT
0099E7  2  AD 31 03             LDA     FDC_DATA        ; GET FDC DATA
0099EA  2               GFDATA1:
0099EA  2  60                   RTS
0099EB  2               
0099EB  2               ;__FD_DETECT______________________________________________________________________________________________________________________
0099EB  2               ;
0099EB  2               ; 	DETECT FLOPPY HARDWARE
0099EB  2               ;________________________________________________________________________________________________________________________________
0099EB  2               FD_DETECT:
0099EB  2               ; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
0099EB  2  20 19 9A             JSR     FC_RESETFDC     ; RESET FDC
0099EE  2               
0099EE  2  AD 30 03             LDA     FDC_MSR         ; READ MSR
0099F1  2  C9 80                CMP     #$80
0099F3  2  F0 0A                BEQ     FD_DETECT1      ; $80 IS OK
0099F5  2  C9 D0                CMP     #$D0
0099F7  2  F0 06                BEQ     FD_DETECT1      ; $D0 IS OK
0099F9  2  A9 FF                LDA     #$FF            ; NOT OK
0099FB  2  8D 46 9A             STA     HARDWARE_DETCT
0099FE  2  60                   RTS
0099FF  2               ;
0099FF  2               FD_DETECT1:
0099FF  2  A2 64                LDX     #100
009A01  2  20 3C 9A             JSR     FDVDELAY        ; WAIT A BIT FOR FDC
009A04  2  AD 30 03             LDA     FDC_MSR         ; READ MSR AGAIN
009A07  2  C9 80                CMP     #$80
009A09  2  F0 08                BEQ     :+              ; $80 IS OK
009A0B  2  C9 D0                CMP     #$D0
009A0D  2  A9 FF                LDA     #$FF            ; NOT OK
009A0F  2  8D 46 9A             STA     HARDWARE_DETCT
009A12  2  60                   RTS
009A13  2               :
009A13  2  A9 00                LDA     #$00            ; OK
009A15  2  8D 46 9A             STA     HARDWARE_DETCT
009A18  2  60                   RTS
009A19  2               
009A19  2               FC_RESETFDC:
009A19  2  AD 33 03             LDA     FDC_RESET
009A1C  2  AD 33 03             LDA     FDC_RESET
009A1F  2  A2 96                LDX     #150
009A21  2  20 3C 9A             JSR     FDVDELAY        ; WAIT A BIT FOR FDC
009A24  2               
009A24  2  A9 00                LDA     #$00
009A26  2  8D 36 03             STA     FDC_DOR
009A29  2  20 37 9A             JSR     FDDELAY
009A2C  2  A9 0C                LDA     #DOR_INIT
009A2E  2  8D 36 03             STA     FDC_DOR
009A31  2  A2 96                LDX     #150            ;
009A33  2  20 3C 9A             JSR     FDVDELAY
009A36  2  60                   RTS
009A37  2               
009A37  2               
009A37  2               FDDELAY:
009A37  2  48                   PHA
009A38  2  68                   PLA
009A39  2  48                   PHA
009A3A  2  68                   PLA
009A3B  2  60                   RTS
009A3C  2               FDVDELAY:
009A3C  2  48                   PHA
009A3D  2  68                   PLA
009A3E  2  48                   PHA
009A3F  2  68                   PLA
009A40  2  CA                   DEX
009A41  2  E0 00                CPX     #$00
009A43  2  D0 F7                BNE     FDVDELAY
009A45  2  60                   RTS
009A46  2               
009A46  2               
009A46  2               
009A46  2               HARDWARE_DETCT:
009A46  2  00                   .BYTE   0               ; HARDWARE DETECTED
009A47  2               debhead:
009A47  2  00                   .BYTE   0               ; DEBLOCKED HEAD
009A48  2               debcyl:
009A48  2  00                   .BYTE   0               ; DEBLOCKED CYLINDER
009A49  2               debsec:
009A49  2  00                   .BYTE   0               ; DEBLOCKED SECTOR
009A4A  2               Cdebhead:
009A4A  2  00                   .BYTE   0               ; DEBLOCKED HEAD (cache)
009A4B  2               Cdebcyl:
009A4B  2  00                   .BYTE   0               ; DEBLOCKED CYLINDER (cache)
009A4C  2               Cdebsec:
009A4C  2  00                   .BYTE   0               ; DEBLOCKED SECTOR (cache)
009A4D  2               FLERR:
009A4D  2  00                   .BYTE   $00             ;
009A4E  2               UNIT:
009A4E  2  00                   .BYTE   $00             ;
009A4F  2               FCMD:
009A4F  2  00                   .BYTE   0               ; COMMAND READ OR WRITE,
009A50  2               ST0:
009A50  2  00                   .BYTE   0               ; COMMAND READ OR WRITE,
009A51  2               FLRETRY:
009A51  2  00                   .BYTE   00
009A52  2               FLRETRY1:
009A52  2  00                   .BYTE   00
009A53  2               
009A53  1               
009A53  1               ;// TODO: this should be dependent on "active console. . ." and should be a driver call
009A53  1               CONSOLE_OUT:
009A53  1  20 C4 88             JSR     WRSER1
009A56  1  60                   RTS
009A57  1               
009A57  1               ;// TODO: CONSOLE_IN
009A57  1               
009A57  1               
009A57  1  EA                   NOP
009A58  1  EA                   NOP
009A59  1  EA                   NOP
009A5A  1  EA                   NOP
009A5B  1  EA                   NOP
009A5C  1  EA                   NOP
009A5D  1  EA                   NOP
009A5E  1  EA                   NOP
009A5F  1  EA                   NOP
009A60  1  EA                   NOP
009A61  1               
009A61  1                       .END
