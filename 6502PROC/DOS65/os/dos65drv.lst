ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65drv.asm
Current file: dos65drv.asm

000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ;	Nhyodyne dos/65 banked driver code
000000r 1               ;       Intended for RAM BANK $0D
000000r 1               ;
000000r 1               ;  DWERNER 04/24/2022 	Initial
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               
000000r 1               .include "dosdefn.asm" 		; base addresses and definitions
000000r 2               ;________________________________________________________________________________________________________________________________
000000r 2               ;
000000r 2               ;	Nhyodyne dos/65 base addresses and definitions
000000r 2               ;
000000r 2               ;  DWERNER 04/24/2022 	Initial
000000r 2               ;________________________________________________________________________________________________________________________________
000000r 2               
000000r 2               ;base addresses and definitions
000000r 2               btejmp	=	$100		;warm boot jump
000000r 2               pemjmp	=	$103		;jump to pem
000000r 2               iostat	=	$106		;i/o status
000000r 2               dflfcb	=	$107		;default fcb
000000r 2               dflbuf	=	$128		;default buffer
000000r 2               memmovr =	$200		;subr to move data from ram/rom disks
000000r 2               tea	=	$800		;tea start
000000r 2               
000000r 2               ;zero page for setup
000000r 2               trknum	=	$02			;current track
000000r 2               dcbadd	=	$04			;dcb address
000000r 2               nmsstr	=	$06			;number system tracks
000000r 2               nsectr	=	$08			;number sectors per track
000000r 2               ttlsec	=	$0A			;total sectors to write
000000r 2               trkcnt	=	ttlsec
000000r 2               size	=	$0B			;ascii size
000000r 2               lokim	=	$0D			;low kim limit
000000r 2               hikim	=	$0F			;high kim limit
000000r 2               offset	=	$11			;relocation offset
000000r 2               kimcnt	=	$13			;kim counter
000000r 2               pointr	=	$14			;pointer
000000r 2               lengt	=	$16			;inst length
000000r 2               point	=	$17			;relocate pointer
000000r 2               adjust	=	$19			;relocate distance
000000r 2               kimpnt	=	$1B			;kim file index
000000r 2               savex	=	$1C			;save for x
000000r 2               savey	=	$1D			;save for y
000000r 2               number	=	$1E			;input pack buffer
000000r 2               dstdrv	=	$20			;destination drive
000000r 2               defalt	=	$21			;default drive
000000r 2               seccnt	=	$22			;sector count
000000r 2               secnum	=	$24			;sector number
000000r 2               curccm	=	$26			;start of current ccm
000000r 2               simlng	=	$28			;length of sim
000000r 2               room	=	$2A			;memory needed for sysgen
000000r 2               stksav	=	$2C			;save stack register
000000r 2               frstsc	=	$2D			;first sector number of disk
000000r 2               dskcfpc	=	$2E			;pointer to disk configuration table
000000r 2               cmdlnp	=	$30			;pointer to command line buffer
000000r 2               farfunct=       $32                     ;function to call in driver area
000000r 2               farpointer=     $33                     ;WORD POINTER to call in driver area
000000r 2               lastzp	=	$35
000000r 2               ;fixed parameters
000000r 2               lf	=	$a		;linefeeed
000000r 2               cr	=	$d		;return
000000r 2               eof	=	$1a		;end of file
000000r 2               null	=	0		;null
000000r 2               ctlc	=	3		;abort
000000r 2               ctle	=	5		;physical cr lf
000000r 2               ctli	=	9		;tab character
000000r 2               ctlp	=	$10		;toggle printer
000000r 2               ctlr	=	$12		;repeat line
000000r 2               ctls	=	$13		;freeze
000000r 2               ctlx	=	$18		;cancel
000000r 2               semico	=	$3b		;semicolon
000000r 2               delete	=	$08		;delete character
000000r 2               numcmd	=	36		;number commands
000000r 2               
000000r 2               BANKED_DRIVER_DISPATCHER=$8800  ; LOCATION OF DRIVER DISPATCHER
000000r 2               DEBUG	=	0		; assemble with debug information on
000000r 2               
000000r 1               
000000r 1               
000000r 1               ; for Nhyodyne:
000000r 1               ; RAM BANK $0C is RAM area for Drivers
000000r 1               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
000000r 1               ; RAM BANK $0F is fixed bank $0000-$7FFF
000000r 1               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
000000r 1               
000000r 1               ;       Area from $0D:8000 to $0D:8800 reserved for work RAM for drivers
000000r 1               ;
000000r 1               
000000r 1               
000000r 1               		.PC02
000000r 1                               .segment "DRIVERS"
000000r 1               		.ORG $8800
008800  1               
008800  1               
008800  1               ;__DISPATCHER________________________________________________________________________________________
008800  1               ;
008800  1               ;  Function dispatcher
008800  1               ;  function to call is located in "farfunct"
008800  1               ;____________________________________________________________________________________________________
008800  1               ;
008800  1               
008800  1  48           		PHA
008801  1  DA           		PHX
008802  1  A5 32        		LDA     farfunct
008804  1  0A           		ASL	A			; DOUBLE NUMBER FOR TABLE LOOKUP
008805  1  AA           		TAX
008806  1  BD 15 88     		LDA 	DISPATCHTABLE,X
008809  1  85 33        		STA	farpointer
00880B  1  BD 16 88     		LDA 	DISPATCHTABLE+1,X
00880E  1  85 34        		STA	farpointer+1
008810  1  FA           		PLX
008811  1  68           		PLA
008812  1  6C 33 00     		JMP (farpointer)
008815  1               
008815  1               
008815  1               DISPATCHTABLE:
008815  1  1E 88        		.WORD 	WRSER1			; FUNCTION 00 - WRITE SERIAL PORT
008817  1  2D 88        		.WORD 	RDSER1			; FUNCTION 01 - READ SERIAL PORT
008819  1  3D 88        		.WORD 	RDSER1W			; FUNCTION 02 - READ SERIAL PORT (BLOCKING)
00881B  1  4C 88        		.WORD 	SERIALSTATUS		; FUNCTION 03 - GET SERIAL STATUS
00881D  1               
00881D  1               ;__DRIVERS___________________________________________________________________________________________
00881D  1               ;
00881D  1               		.INCLUDE "dosser.asm"
00881D  2               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
00881D  2               ;
00881D  2               ; 	Nhyodyne serial drivers for single serial port card
00881D  2               ;
00881D  2               ;	Entry points:
00881D  2               ;		SERIALINIT  - called during OS init
00881D  2               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
00881D  2               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
00881D  2               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00881D  2               ;		SERIALSTATUS- GET UART STATUS
00881D  2               ;________________________________________________________________________________________________________________________________
00881D  2               ;
00881D  2               
00881D  2               
00881D  2               ;*
00881D  2               ;* HARDWARE I/O ADDRESSES
00881D  2               ;*
00881D  2               
00881D  2               ; UART 16C550 SERIAL
00881D  2               UART0       	=    	$0368           ; DATA IN/OUT
00881D  2               UART1       	=    	$0369           ; CHECK RX
00881D  2               UART2       	=    	$036A           ; INTERRUPTS
00881D  2               UART3       	=    	$036B           ; LINE CONTROL
00881D  2               UART4       	=    	$036C           ; MODEM CONTROL
00881D  2               UART5          	=    	$036D           ; LINE STATUS
00881D  2               UART6          	=    	$036E           ; MODEM STATUS
00881D  2               UART7	       	=    	$036F           ; SCRATCH REG.
00881D  2               
00881D  2               
00881D  2               ;__SERIALINIT____________________________________________________________________________________________________________________
00881D  2               ;
00881D  2               ;	INITIALIZE SERIAL PORTS
00881D  2               ;________________________________________________________________________________________________________________________________
00881D  2               ;
00881D  2               SERIALINIT:
00881D  2               ;	LDA	#$80			;
00881D  2               ;	STA	UART3			; SET DLAB FLAG
00881D  2               ;	LDA	#12			; SET TO 12 = 9600 BAUD
00881D  2               ;	STA	UART0			; save baud rate
00881D  2               ;	LDA	#00			;
00881D  2               ;	STA	UART1			;
00881D  2               ;	LDA	#03			;
00881D  2               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
00881D  2               ;	STA	UART4			;
00881D  2               
00881D  2  60           	RTS
00881E  2               
00881E  2               
00881E  2               
00881E  2               ;__WRSER1________________________________________________________________________________________________________________________
00881E  2               ;
00881E  2               ;	WRITE CHARACTER(A) TO UART
00881E  2               ;________________________________________________________________________________________________________________________________
00881E  2               ;
00881E  2               WRSER1:
00881E  2  48           	PHA
00881F  2               WRSER1a:
00881F  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
008822  2  29 20        	AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
008824  2  C9 00        	CMP     #$00
008826  2  F0 F7        	BEQ	WRSER1a			; NO, WAIT FOR IT
008828  2  68           	PLA
008829  2  8D 68 03     	STA	UART0			; THEN WRITE THE CHAR TO UART
00882C  2  60           	RTS
00882D  2               
00882D  2               ;__RDSER1________________________________________________________________________________________________________________________
00882D  2               ;
00882D  2               ;	READ CHARACTER FROM UART TO (A)
00882D  2               ;________________________________________________________________________________________________________________________________
00882D  2               ;
00882D  2               RDSER1:
00882D  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
008830  2  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
008832  2  C9 00        	CMP 	#$00
008834  2  F0 04        	BEQ	RDSER1N			; LOOP UNTIL DATA IS READY
008836  2  AD 68 03     	LDA	UART0			; THEN READ THE CHAR FROM THE UART
008839  2  60           	RTS
00883A  2               RDSER1N:
00883A  2  A9 00        	LDA	#$00			;
00883C  2  60           	RTS				;
00883D  2               
00883D  2               ;__RDSER1W_______________________________________________________________________________________________________________________
00883D  2               ;
00883D  2               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
00883D  2               ;________________________________________________________________________________________________________________________________
00883D  2               ;
00883D  2               
00883D  2               RDSER1W:
00883D  2  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
008840  2  29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
008842  2  C9 00        		CMP 	#$00
008844  2  F0 F7        		BEQ	RDSER1W			; LOOP UNTIL DATA IS READY
008846  2  AD 68 03     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
008849  2  29 7F        		AND #$7F
00884B  2  60           		RTS
00884C  2               
00884C  2               ;__SERIALSTATUS__________________________________________________________________________________________________________________
00884C  2               ;
00884C  2               ;	READ UARD STATUS
00884C  2               ;________________________________________________________________________________________________________________________________
00884C  2               ;
00884C  2               SERIALSTATUS:
00884C  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
00884F  2  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
008851  2  C9 00        	CMP 	#$00
008853  2  F0 03        	BEQ	RDSTAT1			; NO, INDICATE NO CHAR
008855  2  A9 FF        	LDA	#$FF			; GET DATA CHAR
008857  2  60           	RTS
008858  2               RDSTAT1:
008858  2  A9 00        	LDA	#$00			; GET DATA CHAR
00885A  2  60           	RTS
00885B  2               
00885B  2               ; end
00885B  2               
00885B  1               
00885B  1               	.end
