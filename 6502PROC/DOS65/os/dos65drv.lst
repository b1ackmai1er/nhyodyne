ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65drv.asm
Current file: dos65drv.asm

000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ;	Nhyodyne dos/65 banked driver code
000000r 1               ;       Intended for RAM BANK $0D
000000r 1               ;
000000r 1               ;  DWERNER 04/24/2022 	Initial
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               		.PC02
000000r 1                               .segment "DRIVERS"
000000r 1               		.ORG $8800
008800  1               .include "dosdefn.asm" 		; base addresses and definitions
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               ;
008800  2               ;	Nhyodyne dos/65 base addresses and definitions
008800  2               ;
008800  2               ;  DWERNER 04/24/2022 	Initial
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               
008800  2               ;base addresses and definitions
008800  2               btejmp	        =	$0100		; warm boot jump
008800  2               pemjmp	        =	$0103		; jump to pem
008800  2               iostat	        =	$0106		; i/o status
008800  2               dflfcb	        =	$0107		; default fcb
008800  2               dflbuf	        =	$0128		; default buffer
008800  2               memmovr         =	$0200		; 0200-02ff subr to move data from ram/rom disks
008800  2               MD_PAGERA       =   $0200       ; PAGE DRIVER ADDRESS
008800  2               
008800  2               IO              =   $0300       ; 0300-03FF Memory mapped IO
008800  2               MPCL_ROM	    =	$037C		; ROM MAPPER
008800  2               MPCL_RAM	    =	$0378		; RAM MAPPER
008800  2               
008800  2               MD_PAGEBU       =   $0400       ; 0400-04FF PAGE BUFFER ADDRESS
008800  2               MD_PAGESE       =   pointr      ; PAGE SECTOR STORAGE
008800  2               
008800  2               ;
008800  2               ; DRIVER WORKING STORAGE
008800  2               ;
008800  2               DSKY_BUF        =       $0500	        ; Eight Bytes DSKY display buffer
008800  2               DSKY_BUFLEN	    =       8               ;
008800  2               DSKY_HEXBUF     =       $0508           ; Four Bytes DSKY hex buffer
008800  2               DSKY_HEXBUFLEN	=       4               ;
008800  2               sektrk          =       $050C		    ; seek track number
008800  2               seksec          =       $050E		    ; seek sector number
008800  2               debcyll         =       $0510	        ; DEBLOCKED CYLINDER LSB
008800  2               debcylm         =	    $0511           ; DEBLOCKED CYLINDER MSB
008800  2               debsehd         =	    $0512           ; DEBLOCKED SECTOR AND HEAD (HS)
008800  2               sekdsk          =       $0513           ; seek disk number
008800  2               dskcfg          =       $0514           ; 16 bytes disk configuration table
008800  2               
008800  2               
008800  2               
008800  2               tea	=	$800		;tea start
008800  2               
008800  2               ;zero page for setup
008800  2               trknum	=	$02			;current track
008800  2               dcbadd	=	$04			;dcb address
008800  2               nmsstr	=	$06			;number system tracks
008800  2               nsectr	=	$08			;number sectors per track
008800  2               ttlsec	=	$0A			;total sectors to write
008800  2               trkcnt	=	ttlsec
008800  2               size	=	$0B			;ascii size
008800  2               lokim	=	$0D			;low kim limit
008800  2               hikim	=	$0F			;high kim limit
008800  2               offset	=	$11			;relocation offset
008800  2               kimcnt	=	$13			;kim counter
008800  2               pointr	=	$14			;pointer
008800  2               lengt	=	$16			;inst length
008800  2               point	=	$17			;relocate pointer
008800  2               adjust	=	$19			;relocate distance
008800  2               kimpnt	=	$1B			;kim file index
008800  2               savex	=	$1C			;save for x
008800  2               savey	=	$1D			;save for y
008800  2               number	=	$1E			;input pack buffer
008800  2               dstdrv	=	$20			;destination drive
008800  2               defalt	=	$21			;default drive
008800  2               seccnt	=	$22			;sector count
008800  2               secnum	=	$24			;sector number
008800  2               curccm	=	$26			;start of current ccm
008800  2               simlng	=	$28			;length of sim
008800  2               room	=	$2A			;memory needed for sysgen
008800  2               stksav	=	$2C			;save stack register
008800  2               frstsc	=	$2D			;first sector number of disk
008800  2               dskcfpc	=	$2E			;pointer to disk configuration table
008800  2               cmdlnp	=	$30			;pointer to command line buffer
008800  2               farfunct=   $32         ;function to call in driver area
008800  2               farpointer= $33         ;WORD POINTER to call in driver area
008800  2               lastzp	=	$35
008800  2               
008800  2               ;pem constants on entry to write
008800  2               wrall	=	0		;write to allocated
008800  2               wrdir	=	1		;write to directory
008800  2               wrual	=	2		;write to unallocated
008800  2               
008800  2               ;page zero and system ram assignments
008800  2               DEST	=	$EC		;pointer for OutMsg
008800  2               SRC	    =	$EE		;pointer for OutMsg
008800  2               OUTMSG_W=	$F0		;pointer for OutMsg
008800  2               mvepnt	=	$f2		;host buffer location
008800  2               dmaadr	=	$f4		;pointer for r/w
008800  2               
008800  2               ;fixed parameters
008800  2               lf	    =	$a		;linefeeed
008800  2               cr	    =	$d		;return
008800  2               eof	    =	$1a		;end of file
008800  2               null	=	0		;null
008800  2               ctlc	=	3		;abort
008800  2               ctle	=	5		;physical cr lf
008800  2               ctli	=	9		;tab character
008800  2               ctlp	=	$10		;toggle printer
008800  2               ctlr	=	$12		;repeat line
008800  2               ctls	=	$13		;freeze
008800  2               ctlx	=	$18		;cancel
008800  2               semico	=	$3b		;semicolon
008800  2               delete	=	$08		;delete character
008800  2               numcmd	=	36		;number commands
008800  2               
008800  2               BANKED_DRIVER_DISPATCHER=$8800  ; LOCATION OF DRIVER DISPATCHER
008800  2               DEBUG	=	0		; assemble with debug information on
008800  2               
008800  2               
008800  2               USESERIAL 	= 	1	; SET TO ONE SERIAL CONSOLE IO
008800  2               USEFLOPPYA 	= 	0	; SET TO ONE FOR FLOPPY = "A"
008800  2               USEFLOPPYB 	= 	0	; SET TO ONE FOR FLOPPY = "B"
008800  2               USEIDEC 	= 	1	; SET TO ONE FOR IDE HDD="C"
008800  2               USEDSKY 	= 	0	; SEND INFO TO DSKY
008800  2               USEDSKYNG 	= 	1	; SEND INFO TO DSKYNG
008800  2               DSKY_KBD	=	1	; USE DSKY KEYBOARD?
008800  2               DEFDRV  	=	2	; SET TO DEFAULT DRIVE LETTER
008800  2               USEDISKIOV1 = 	0	; Floppy and IDE card is  DISK IO V1
008800  2               USEDISKIOV3 = 	0	; Floppy and IDE card is  DISK IO V3
008800  2               
008800  2               FLPA35		=	0	; set to 1 if floppy a is A 3.5" 80 track drive (0= 5.25" 40 track drive)
008800  2               FLPB35		=	0	; set to 1 if floppy a is B 3.5" 80 track drive (0= 5.25" 40 track drive)
008800  2               
008800  2               DSKYOSC     =	100000
008800  2               
008800  1               
008800  1               ; for Nhyodyne:
008800  1               ; RAM BANK $0C is RAM area for Drivers
008800  1               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
008800  1               ; RAM BANK $0F is fixed bank $0000-$7FFF
008800  1               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
008800  1               
008800  1               ;       Area from $0D:8000 to $0D:8800 reserved for work RAM for drivers
008800  1               ;
008800  1               
008800  1               ;__DISPATCHER________________________________________________________________________________________
008800  1               ;
008800  1               ;  Function dispatcher
008800  1               ;  function to call is located in "farfunct"
008800  1               ;____________________________________________________________________________________________________
008800  1               ;
008800  1  48           		PHA
008801  1  DA           		PHX
008802  1  A5 32        		LDA     farfunct
008804  1  0A           		ASL	A			; DOUBLE NUMBER FOR TABLE LOOKUP
008805  1  AA           		TAX
008806  1  BD 15 88     		LDA 	DISPATCHTABLE,X
008809  1  85 33        		STA	farpointer
00880B  1  BD 16 88     		LDA 	DISPATCHTABLE+1,X
00880E  1  85 34        		STA	farpointer+1
008810  1               
008810  1  FA           		PLX
008811  1  68           		PLA
008812  1  6C 33 00     		JMP (farpointer)
008815  1               
008815  1               
008815  1               DISPATCHTABLE:
008815  1  BC 88        		.WORD 	WRSER1			; FUNCTION 00 - WRITE SERIAL PORT
008817  1  CB 88        		.WORD 	RDSER1			; FUNCTION 01 - READ SERIAL PORT
008819  1  DB 88        		.WORD 	RDSER1W			; FUNCTION 02 - READ SERIAL PORT (BLOCKING)
00881B  1  EA 88        		.WORD 	SERIALSTATUS		; FUNCTION 03 - GET SERIAL STATUS
00881D  1               
00881D  1  FC 88        		.WORD 	PPIDE_INIT   		; FUNCTION 04 - called during OS init
00881F  1  A0 8B        		.WORD 	IDE_READ_SECTOR 	; FUNCTION 05 - read a sector from drive
008821  1  F7 8B        		.WORD 	IDE_WRITE_SECTOR	; FUNCTION 06 - write a sector to drive
008823  1               
008823  1  59 8E        		.WORD 	DSKY_INIT		; FUNCTION 07 -
008825  1  00 90        		.WORD 	DSKY_SHOW		; FUNCTION 08 -
008827  1  CB 8F        		.WORD 	DSKY_BIN2SEG		; FUNCTION 09 -
008829  1  4D 8F        		.WORD 	DSKY_RESET		; FUNCTION 10 -
00882B  1  68 8F        		.WORD 	DSKY_STAT		; FUNCTION 11 -
00882D  1  75 8F        		.WORD 	DSKY_GETKEY		; FUNCTION 12 -
00882F  1  CF 90        		.WORD 	DSKY_BEEP		; FUNCTION 13 -
008831  1  FC 90        		.WORD 	DSKY_L1ON		; FUNCTION 14 -
008833  1  0D 91        		.WORD 	DSKY_L2ON		; FUNCTION 15 -
008835  1  1E 91        		.WORD 	DSKY_L1OFF		; FUNCTION 16 -
008837  1  2F 91        		.WORD 	DSKY_L2OFF		; FUNCTION 17 -
008839  1  B8 90        		.WORD 	DSKY_PUTLED		; FUNCTION 18 -
00883B  1  86 90        		.WORD 	DSKY_BLANK		; FUNCTION 19 -
00883D  1               
00883D  1  C4 91        		.WORD 	MD_READ_SECTOR 		; FUNCTION 20 - read a sector from memory device
00883F  1  01 92        		.WORD 	MD_WRITE_SECTOR		; FUNCTION 21 - write a sector to memory device
008841  1  7F 91        		.WORD 	MD_SHOW			; FUNCTION 22 - md show information
008843  1               
008843  1  CA 95        		.WORD 	FL_READ_SECTOR 		; FUNCTION 23 - read a sector from floppy device
008845  1  52 96        		.WORD 	FL_WRITE_SECTOR		; FUNCTION 24 - write a sector to floppy device
008847  1  D2 94        		.WORD 	FL_SETUP		; FUNCTION 25 - init floppy device
008849  1               
008849  1               
008849  1               ;__DRIVERS___________________________________________________________________________________________
008849  1               ;
008849  1               		.include "drvmacro.asm"
008849  2               ;__MACRO___________________________________________________________________________________________________________________
008849  2               ;
008849  2               ; 	Macros for the betterment of Mankind
008849  2               ;________________________________________________________________________________________________________________________________
008849  2               ;
008849  2               
008849  2               .macro          PRTDBG      message
008849  2               .LOCAL p1
008849  2               .LOCAL p2
008849  2               .LOCAL p3
008849  2               .LOCAL p4
008849  2               .LOCAL p5
008849  2                 .if     .paramcount <> 1
008849  2                       .error  "Too few parameters for macro PRTDBG"
008849  2                       .endif
008849  2                       .if DEBUG=1
008849  2                       PHA
008849  2                       PHX
008849  2                       PHY
008849  2                       LDX #$00
008849  2               p1:
008849  2                       LDA p4,x
008849  2                       INX
008849  2                       CMP #'$'
008849  2                       BEQ p2
008849  2                       JSR CONSOLE_OUT
008849  2                       JMP p1
008849  2               p2:
008849  2                       LDA #13
008849  2                       jsr CONSOLE_OUT
008849  2                       LDA #10
008849  2                       jsr CONSOLE_OUT
008849  2                       PLY
008849  2                       plx
008849  2                       pla
008849  2                       JMP p5
008849  2               p4:
008849  2                       .BYTE message
008849  2               p5:
008849  2                       .endif
008849  2               .endmacro
008849  2               
008849  2               .macro          PRTS      message
008849  2               .LOCAL p1
008849  2               .LOCAL p2
008849  2               .LOCAL p3
008849  2               .LOCAL p4
008849  2               .LOCAL p5
008849  2                 .if     .paramcount <> 1
008849  2                       .error  "Too few parameters for macro PRTS"
008849  2                       .endif
008849  2                       PHA
008849  2                       PHX
008849  2                       PHY
008849  2                       LDX #$00
008849  2               p1:
008849  2                       LDA p4,x
008849  2                       INX
008849  2                       CMP #'$'
008849  2                       BEQ p2
008849  2                       JSR CONSOLE_OUT
008849  2                       JMP p1
008849  2               p2:
008849  2                       PLY
008849  2                       plx
008849  2                       pla
008849  2                       JMP p5
008849  2               p4:
008849  2                       .BYTE message
008849  2               p5:
008849  2               .endmacro
008849  2               
008849  2               .macro          DBGFLAG      character
008849  2                 .if     .paramcount <> 1
008849  2                       .error  "Too few parameters for macro DBGFLAG"
008849  2                       .endif
008849  2                       .if DEBUG=1
008849  2                       PHA
008849  2                       LDA #character
008849  2                       JSR CONSOLE_OUT
008849  2                       pla
008849  2                       .endif
008849  2               .endmacro
008849  2               
008849  2               
008849  2               ;__PRTHEXBYTE__________________________________________________
008849  2               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
008849  2               ;______________________________________________________________
008849  2               PRTHEXBYTE:
008849  2  48                   PHA
00884A  2  DA                   PHX
00884B  2  5A                   PHY
00884C  2  AA                   TAX				; SAVE A REGISTER
00884D  2  4A                   LSR 				; SHIFT HIGH NIBBLE TO LOW NIBBLE
00884E  2  4A                   LSR 				;
00884F  2  4A                   LSR 				;
008850  2  4A                   LSR 				;
008851  2  18                   CLC               		; CLEAR CARRY
008852  2  20 5D 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
008855  2  8A                   TXA				; RESTORE ACCUMULATOR
008856  2  20 5D 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
008859  2  7A                   PLY
00885A  2  FA                   plx
00885B  2  68                   PLA
00885C  2  60                   RTS
00885D  2               
00885D  2               ;__PRINT_DIGIT_________________________________________________
00885D  2               ;
00885D  2               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
00885D  2               ;
00885D  2               ;______________________________________________________________
00885D  2               PRINT_DIGIT:
00885D  2  29 0F                       AND #$0F				; STRIP OFF HIGH NIBBLE
00885F  2  09 30                       ORA #$30				; ADD $30 TO PRODUCE ASCII
008861  2  C9 3A                       CMP #$3A               		; IS GREATER THAN 9
008863  2  30 03                       BMI PRINT_DIGIT_OUT		; NO, SKIP ADD
008865  2  18                          CLC				; CLEAR CARRY
008866  2  69 07                       ADC #$07				; ADD ON FOR LETTER VALUES
008868  2               PRINT_DIGIT_OUT:					;
008868  2  4C 61 99                    JMP CONSOLE_OUT              		; PRINT OUT CHAR
00886B  2               
00886B  2               NEWLINE:
00886B  2  48                           pha
00886C  2  DA                           PHX
00886D  2  5A                           phy
00886E  2  A9 0D                        LDA #$0D
008870  2  20 61 99                     JSR CONSOLE_OUT
008873  2  A9 0A                        LDA #$0A
008875  2  20 61 99                     Jsr CONSOLE_OUT
008878  2  7A                           ply
008879  2  FA                           plx
00887A  2  68                           pla
00887B  2  60                           rts
00887C  2               
00887C  2               PRTDEC:
00887C  2  5A                           phy
00887D  2  DA                           PHX
00887E  2  48                           PHA
00887F  2  A0 00                        ldy #00
008881  2  A2 FF                        LDX #$FF
008883  2  38                           SEC
008884  2               PrDec100:
008884  2  E8                           INX
008885  2  E9 64                        SBC #100
008887  2  B0 FB                        BCS PrDec100            ;Count how many 100s
008889  2  69 64                        ADC #100
00888B  2  20 A5 88                     JSR PrDecDigit          ;Print the 100s
00888E  2  A2 FF                        LDX #$FF
008890  2  38                           SEC                     ;Prepare for subtraction
008891  2               PrDec10:
008891  2  E8                           INX
008892  2  E9 0A                        SBC #10
008894  2  B0 FB                        BCS PrDec10             ;Count how many 10s
008896  2  69 0A                        ADC #10
008898  2  20 A5 88                     JSR PrDecDigit          ;Print the 10s
00889B  2  AA                           TAX                     ;Pass 1s into X
00889C  2  A0 01                        ldy #1
00889E  2  20 A5 88                     JSR PrDecDigit          ;Print the 1s
0088A1  2  68                           PLA
0088A2  2  FA                           PLX
0088A3  2  7A                           ply
0088A4  2  60                           RTS
0088A5  2               PrDecDigit:
0088A5  2  48                           PHA
0088A6  2  C0 00                        cpy #$00
0088A8  2  D0 09                        bne PrDecDigit1
0088AA  2  8A                           txa
0088AB  2  A8                           tay
0088AC  2  C0 00                        cpy #$00
0088AE  2  D0 03                        bne PrDecDigit1
0088B0  2  4C B9 88                     jmp PrDecDigit2
0088B3  2               PrDecDigit1:
0088B3  2  8A                           TXA                     ;Save A, pass digit to A
0088B4  2  09 30                        ORA #'0'
0088B6  2  20 61 99                     JSR  CONSOLE_OUT        ;Convert to character and print it
0088B9  2               PrDecDigit2:
0088B9  2  68                           PLA
0088BA  2  60                           RTS                     ;Restore A and return
0088BB  2               
0088BB  1               		.INCLUDE "dosser.asm"
0088BB  2               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
0088BB  2               ;
0088BB  2               ; 	Nhyodyne serial drivers for single serial port card
0088BB  2               ;
0088BB  2               ;	Entry points:
0088BB  2               ;		SERIALINIT  - called during OS init
0088BB  2               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
0088BB  2               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
0088BB  2               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
0088BB  2               ;		SERIALSTATUS- GET UART STATUS
0088BB  2               ;________________________________________________________________________________________________________________________________
0088BB  2               ;
0088BB  2               
0088BB  2               
0088BB  2               ;*
0088BB  2               ;* HARDWARE I/O ADDRESSES
0088BB  2               ;*
0088BB  2               
0088BB  2               ; UART 16C550 SERIAL
0088BB  2               UART0       	=    	$0368           ; DATA IN/OUT
0088BB  2               UART1       	=    	$0369           ; CHECK RX
0088BB  2               UART2       	=    	$036A           ; INTERRUPTS
0088BB  2               UART3       	=    	$036B           ; LINE CONTROL
0088BB  2               UART4       	=    	$036C           ; MODEM CONTROL
0088BB  2               UART5          	=    	$036D           ; LINE STATUS
0088BB  2               UART6          	=    	$036E           ; MODEM STATUS
0088BB  2               UART7	       	=    	$036F           ; SCRATCH REG.
0088BB  2               
0088BB  2               
0088BB  2               ;__SERIALINIT____________________________________________________________________________________________________________________
0088BB  2               ;
0088BB  2               ;	INITIALIZE SERIAL PORTS
0088BB  2               ;________________________________________________________________________________________________________________________________
0088BB  2               ;
0088BB  2               SERIALINIT:
0088BB  2               ;	LDA	#$80			;
0088BB  2               ;	STA	UART3			; SET DLAB FLAG
0088BB  2               ;	LDA	#12			; SET TO 12 = 9600 BAUD
0088BB  2               ;	STA	UART0			; save baud rate
0088BB  2               ;	LDA	#00			;
0088BB  2               ;	STA	UART1			;
0088BB  2               ;	LDA	#03			;
0088BB  2               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
0088BB  2               ;	STA	UART4			;
0088BB  2               
0088BB  2  60           	RTS
0088BC  2               
0088BC  2               
0088BC  2               
0088BC  2               ;__WRSER1________________________________________________________________________________________________________________________
0088BC  2               ;
0088BC  2               ;	WRITE CHARACTER(A) TO UART
0088BC  2               ;________________________________________________________________________________________________________________________________
0088BC  2               ;
0088BC  2               WRSER1:
0088BC  2  48           	PHA
0088BD  2               WRSER1a:
0088BD  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
0088C0  2  29 20        	AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
0088C2  2  C9 00        	CMP     #$00
0088C4  2  F0 F7        	BEQ	WRSER1a			; NO, WAIT FOR IT
0088C6  2  68           	PLA
0088C7  2  8D 68 03     	STA	UART0			; THEN WRITE THE CHAR TO UART
0088CA  2  60           	RTS
0088CB  2               
0088CB  2               ;__RDSER1________________________________________________________________________________________________________________________
0088CB  2               ;
0088CB  2               ;	READ CHARACTER FROM UART TO (A)
0088CB  2               ;________________________________________________________________________________________________________________________________
0088CB  2               ;
0088CB  2               RDSER1:
0088CB  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
0088CE  2  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
0088D0  2  C9 00        	CMP 	#$00
0088D2  2  F0 04        	BEQ	RDSER1N			; LOOP UNTIL DATA IS READY
0088D4  2  AD 68 03     	LDA	UART0			; THEN READ THE CHAR FROM THE UART
0088D7  2  60           	RTS
0088D8  2               RDSER1N:
0088D8  2  A9 00        	LDA	#$00			;
0088DA  2  60           	RTS				;
0088DB  2               
0088DB  2               ;__RDSER1W_______________________________________________________________________________________________________________________
0088DB  2               ;
0088DB  2               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
0088DB  2               ;________________________________________________________________________________________________________________________________
0088DB  2               ;
0088DB  2               
0088DB  2               RDSER1W:
0088DB  2  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
0088DE  2  29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
0088E0  2  C9 00        		CMP 	#$00
0088E2  2  F0 F7        		BEQ	RDSER1W			; LOOP UNTIL DATA IS READY
0088E4  2  AD 68 03     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
0088E7  2  29 7F        		AND #$7F
0088E9  2  60           		RTS
0088EA  2               
0088EA  2               ;__SERIALSTATUS__________________________________________________________________________________________________________________
0088EA  2               ;
0088EA  2               ;	READ UARD STATUS
0088EA  2               ;________________________________________________________________________________________________________________________________
0088EA  2               ;
0088EA  2               SERIALSTATUS:
0088EA  2  AD 6D 03     	LDA	UART5			; READ LINE STATUS REGISTER
0088ED  2  29 01        	AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
0088EF  2  C9 00        	CMP 	#$00
0088F1  2  F0 03        	BEQ	RDSTAT1			; NO, INDICATE NO CHAR
0088F3  2  A9 FF        	LDA	#$FF			; GET DATA CHAR
0088F5  2  60           	RTS
0088F6  2               RDSTAT1:
0088F6  2  A9 00        	LDA	#$00			; GET DATA CHAR
0088F8  2  60           	RTS
0088F9  2               
0088F9  2               ; end
0088F9  2               
0088F9  1               		.INCLUDE "doside.asm"
0088F9  2               ;__IDE DRIVERS___________________________________________________________________________________________________________________
0088F9  2               ;
0088F9  2               ; 	Nhyodyne IDE disk drivers for Z80PPIDE card
0088F9  2               ;
0088F9  2               ;	Entry points:
0088F9  2               ;		PPIDE_INIT   	- called during OS init
0088F9  2               ;		IDE_READ_SECTOR - read a sector from drive
0088F9  2               ;		IDE_WRITE_SECTOR- write a sector to drive
0088F9  2               ;________________________________________________________________________________________________________________________________
0088F9  2               ;
0088F9  2               PPIDE_PPI	=	$0360		; PORT A
0088F9  2               ;
0088F9  2               PPIDELO		=	PPIDE_PPI+0	; LSB
0088F9  2               PPIDEHI		=	PPIDE_PPI+1	; MSB
0088F9  2               PPIDECNTRL	=	PPIDE_PPI+2	; Control Signals
0088F9  2               PPIDEPPIC	=	PPIDE_PPI+3	; CONTROL BYTE PPI 82C55
0088F9  2               
0088F9  2               PPIDE_A0_LINE	=	$01		;DIRECT FROM 8255 TO IDE INTERFACE
0088F9  2               PPIDE_A1_LINE	=	$02		;DIRECT FROM 8255 TO IDE INTERFACE
0088F9  2               PPIDE_A2_LINE	=	$04		;DIRECT FROM 8255 TO IDE INTERFACE
0088F9  2               PPIDE_CS0_LINE	=	$08		;INVERTER BETWEEN 8255 AND IDE INTERFACE
0088F9  2               PPIDE_CS1_LINE	=	$10		;INVERTER BETWEEN 8255 AND IDE INTERFACE
0088F9  2               PPIDE_WR_LINE	=	$20		;INVERTER BETWEEN 8255 AND IDE INTERFACE
0088F9  2               PPIDE_RD_LINE	=	$40		;INVERTER BETWEEN 8255 AND IDE INTERFACE
0088F9  2               PPIDE_RST_LINE	=	$80		;INVERTER BETWEEN 8255 AND IDE INTERFACE
0088F9  2               
0088F9  2               PPIDE_DATA	=	PPIDE_CS0_LINE
0088F9  2               PPIDE_ERR	=	PPIDE_CS0_LINE + PPIDE_A0_LINE
0088F9  2               PPIDE_SEC_CNT	=	PPIDE_CS0_LINE + PPIDE_A1_LINE
0088F9  2               PPIDE_LBALOW	=	PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
0088F9  2               PPIDE_LBAMID	=	PPIDE_CS0_LINE + PPIDE_A2_LINE
0088F9  2               PPIDE_LBAHI	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
0088F9  2               PPIDE_DEVICE	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
0088F9  2               PPIDE_COMMAND	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
0088F9  2               PPIDE_STATUS	=	PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
0088F9  2               PPIDE_CONTROL	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
0088F9  2               PPIDE_ASTATUS	=	PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
0088F9  2               
0088F9  2               
0088F9  2               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
0088F9  2               PPIDE_CMD_RECAL	=	$10
0088F9  2               PPIDE_CMD_READ	=	$20
0088F9  2               PPIDE_CMD_WRITE	=	$30
0088F9  2               PPIDE_CMD_INIT	=	$91
0088F9  2               PPIDE_CMD_ID	=	$EC
0088F9  2               PPIDE_CMD_SPINDOWN=	$E0
0088F9  2               PPIDE_CMD_SPINUP=	$E1
0088F9  2               
0088F9  2               
0088F9  2               PPRD_IDE_8255	=	%10010010	;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
0088F9  2               PPWR_IDE_8255	=	%10000000	;ALL THREE PORTS OUTPUT
0088F9  2               
0088F9  2               
0088F9  2  00           PPIDEINDEX:	.byte	$00
0088FA  2  00 00        PPIDETIMEOUT:	.byte	$00,$00
0088FC  2               
0088FC  2               ;__PPIDE_INIT_________________________________________________________________________________________
0088FC  2               ;
0088FC  2               ;  INIT AND DISPLAY IDE INFO
0088FC  2               ;____________________________________________________________________________________________________
0088FC  2               ;
0088FC  2               PPIDE_INIT:
0088FC  2                       PRTDBG "PPIDE INIT:$"
0088FC  2  48 DA 5A A2  	PRTS "PPIDE :$"
008900  2  00 BD 15 89  
008904  2  E8 C9 24 F0  
00891D  2  20 6B 88            	JSR	NEWLINE
008920  2  20 92 8B     	JSR	IDE_PPIDETECT		; TEST FOR PPI HARDWARE
008923  2  D0 35                BNE     IDE_ABORT      		; BAIL OUT IF NOT THERE
008925  2               ;
008925  2  48 DA 5A A2  	PRTS    " IO=0x$"
008929  2  00 BD 3E 89  
00892D  2  E8 C9 24 F0  
008945  2  A9 03        	LDA	#>PPIDE_PPI		; GET BASE PORT
008947  2  20 49 88     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00894A  2  A9 60               	LDA	#<PPIDE_PPI		; GET BASE PORT
00894C  2  20 49 88     	JSR	PRTHEXBYTE		; PRINT BASE PORT
00894F  2               ;
00894F  2  20 2D 8C     	JSR	PPIDE_RESET		; RESET THE BUS
008952  2  20 E8 89     	JSR	PPIDE_PROBE		; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
008955  2  B0 03        	BCS 	IDE_ABORT
008957  2  4C 83 89     	JMP 	IDE_PRINT_INFO
00895A  2               IDE_ABORT:
00895A  2  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
00895E  2  00 BD 73 89  
008962  2  E8 C9 24 F0  
008980  2  4C E4 89     	JMP 	IDE_INITA
008983  2               IDE_PRINT_INFO:
008983  2  20 6B 88     	JSR	NEWLINE
008986  2  48 DA 5A A2  	PRTS    " PPIDE0: Blocks=$"
00898A  2  00 BD 9F 89  
00898E  2  E8 C9 24 F0  
0089B0  2  A9 00        	LDA	#$00
0089B2  2  20 71 8A     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
0089B5  2  48 DA 5A A2  	PRTS    " PPIDE1: Blocks=$"
0089B9  2  00 BD CE 89  
0089BD  2  E8 C9 24 F0  
0089DF  2  A9 01        	LDA	#$01
0089E1  2  20 71 8A     	JSR	IDE_READ_INFO		; GET DRIVE INFO, ABORT IF ERROR
0089E4  2               IDE_INITA:
0089E4  2  20 6B 88     	JSR	NEWLINE
0089E7  2  60           	RTS				; DONE
0089E8  2               ;
0089E8  2               ;__PPIDE_PROBE_______________________________________________________________________________________
0089E8  2               ;
0089E8  2               ;  PROBE FOR IDE HARDWARE
0089E8  2               ;____________________________________________________________________________________________________
0089E8  2               ;
0089E8  2               PPIDE_PROBE:
0089E8  2               ;
0089E8  2               	; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
0089E8  2               	; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
0089E8  2               	; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
0089E8  2               	; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
0089E8  2               	; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
0089E8  2               	; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
0089E8  2               	; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
0089E8  2               	; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
0089E8  2               
0089E8  2  A9 00        	LDA 	#$00
0089EA  2  8D 60 03     	STA 	PPIDELO 		; PPI PORT A, DATALO
0089ED  2               
0089ED  2  20 58 8C     	JSR	IDE_WAIT_NOT_BUSY	; WAIT FOR BUSY TO CLEAR
0089F0  2  B0 34        	BCS 	PPIDE_PROBE_FAIL	; IF TIMEOUT, REPORT NO IDE PRESENT
0089F2  2  A9 0F        	LDA	#PPIDE_STATUS		; GET STATUS
0089F4  2  20 07 8E     	JSR	IDE_READ
0089F7  2  8A           	TXA
0089F8  2  29 40        	AND 	#%01000000
0089FA  2  C9 00        	CMP 	#$00
0089FC  2  F0 28        	BEQ 	PPIDE_PROBE_FAIL	; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
0089FE  2               
0089FE  2               	; CHECK SIGNATURE
0089FE  2  A9 0A        	LDA	#PPIDE_SEC_CNT
008A00  2  20 07 8E     	JSR	IDE_READ
008A03  2  E0 01        	CPX 	#$01
008A05  2  D0 1F        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
008A07  2  A9 0B        	LDA	#PPIDE_LBALOW
008A09  2  20 07 8E     	JSR	IDE_READ
008A0C  2  E0 01        	CPX 	#$01
008A0E  2  D0 16        	BNE 	PPIDE_PROBE_FAIL	; IF not '01' THEN REPORT NO IDE PRESENT
008A10  2  A9 0C        	LDA	#PPIDE_LBAMID
008A12  2  20 07 8E     	JSR	IDE_READ
008A15  2  E0 00        	CPX 	#$00
008A17  2  D0 0D        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
008A19  2  A9 0D        	LDA	#PPIDE_LBAHI
008A1B  2  20 07 8E     	JSR	IDE_READ
008A1E  2  E0 00        	CPX 	#$00
008A20  2  D0 04        	BNE 	PPIDE_PROBE_FAIL	; IF not '00' THEN REPORT NO IDE PRESENT
008A22  2  18           	CLC
008A23  2  4C 27 8A     	JMP 	PPIDE_PROBE_SUCCESS
008A26  2               PPIDE_PROBE_FAIL:
008A26  2  38           	SEC
008A27  2               PPIDE_PROBE_SUCCESS:
008A27  2  60           	RTS				; DONE, NOTE THAT A=0 AND Z IS SET
008A28  2               
008A28  2               
008A28  2               ;___IDE_IDENTIFY_TYPE____________________________________________________________________________________
008A28  2               ;
008A28  2               ; 	READ THE DISK TYPE AND DETERMINE IF IT IS USABLE BY DOS/65
008A28  2               ; 	A=IDE DEVICE (0=MST,1=SLV)
008A28  2               ;________________________________________________________________________________________________________
008A28  2               
008A28  2               IDE_IDENTIFY_TYPE:
008A28  2  48           	PHA
008A29  2  20 58 8C     	JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
008A2C  2  B0 40        	BCS 	IDE_IDENTIFY_TYPE_ERROR	; IF TIMEOUT, REPORT ERROR
008A2E  2  A9 00        	LDA 	#$00
008A30  2  8D 12 05     	STA	debsehd
008A33  2  8D 10 05     	STA	debcyll			; STORE IN TRACK (lsb)
008A36  2  8D 11 05     	STA	debcylm			; STORE IN TRACK (msb)
008A39  2  68           	PLA				; GET DRIVE TYPE
008A3A  2  20 CD 8B     	JSR 	IDE_READ_SECTOR_DIRTY1
008A3D  2  C9 FF        	CMP 	#$FF			; IS THERE A READ ERROR?
008A3F  2  F0 2D        	BEQ 	IDE_IDENTIFY_TYPE_ERROR
008A41  2  AD D0 94     	LDA 	hstbuf+$01FE
008A44  2  C9 55        	CMP 	#$55
008A46  2  D0 23        	BNE 	IDE_IDENTIFY_TYPE_OK
008A48  2  AD D1 94     	LDA 	hstbuf+$01FF
008A4B  2  C9 AA        	CMP 	#$AA
008A4D  2  D0 1C        	BNE 	IDE_IDENTIFY_TYPE_OK
008A4F  2  AD 94 94     	LDA 	hstbuf+$01C2
008A52  2  C9 00        	CMP 	#$00
008A54  2  D0 18        	BNE 	IDE_IDENTIFY_TYPE_ERROR
008A56  2  AD A4 94     	LDA 	hstbuf+$01D2
008A59  2  C9 00        	CMP 	#$00
008A5B  2  D0 11        	BNE 	IDE_IDENTIFY_TYPE_ERROR
008A5D  2  AD B4 94     	LDA 	hstbuf+$01E2
008A60  2  C9 00        	CMP 	#$00
008A62  2  D0 0A        	BNE 	IDE_IDENTIFY_TYPE_ERROR
008A64  2  AD C4 94     	LDA 	hstbuf+$01F2
008A67  2  C9 00        	CMP 	#$00
008A69  2  D0 03        	BNE 	IDE_IDENTIFY_TYPE_ERROR
008A6B  2               IDE_IDENTIFY_TYPE_OK:
008A6B  2  A9 00        	LDA 	#$00			; EVERYTHING IS AWESOME
008A6D  2  60           	RTS
008A6E  2               IDE_IDENTIFY_TYPE_ERROR:
008A6E  2  A9 FF        	LDA 	#$FF			; SIGNIFY ERROR
008A70  2  60           	RTS
008A71  2               
008A71  2               
008A71  2               ;*__IDE_READ_INFO___________________________________________________________________________________
008A71  2               ;*
008A71  2               ;*  READ IDE INFORMATION
008A71  2               ;*	CARRY SET ON ERROR
008A71  2               ;* 	A=MST/SLV
008A71  2               ;*____________________________________________________________________________________________________
008A71  2               IDE_READ_INFO:
008A71  2               		PRTDBG "IDE Read INFORMATION$"
008A71  2  48           		PHA
008A72  2  48           		PHA
008A73  2               		; SET DRIVE BIT
008A73  2  29 01        		AND 	#$01			; ONLY WANT THE 1 BIT (MST/SLV)
008A75  2  0A           		asl	a			; SHIFT 4
008A76  2  0A           		asl	a			;
008A77  2  0A           		asl	a			;
008A78  2  0A           		asl	a			;
008A79  2  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
008A7B  2  AA           		TAX
008A7C  2  A0 00        		LDY	#$00
008A7E  2  A9 0E        		LDA	#PPIDE_DEVICE
008A80  2  20 23 8E     		JSR	IDE_WRITE
008A83  2               
008A83  2               
008A83  2  20 58 8C     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
008A86  2  B0 4E        		BCS	IDE_READ_INFO_ABORT
008A88  2  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
008A8A  2  A2 EC        		LDX	#PPIDE_CMD_ID
008A8C  2  20 23 8E     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
008A8F  2  20 80 8C     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
008A92  2  B0 42        		BCS	IDE_READ_INFO_ABORT
008A94  2  20 B0 8C     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
008A97  2  48 DA 5A A2  		PRTS    "0x$"
008A9B  2  00 BD B0 8A  
008A9F  2  E8 C9 24 F0  
008AB3  2  AD 4D 93     		LDA 	hstbuf+123
008AB6  2  20 49 88     		JSR 	PRTHEXBYTE
008AB9  2  AD 4C 93     		LDA 	hstbuf+122
008ABC  2  20 49 88     		JSR 	PRTHEXBYTE
008ABF  2  AD 4B 93     		LDA 	hstbuf+121
008AC2  2  20 49 88     		JSR 	PRTHEXBYTE
008AC5  2  AD 4A 93     		LDA 	hstbuf+120
008AC8  2  20 49 88     		JSR 	PRTHEXBYTE
008ACB  2  68           		PLA
008ACC  2  20 28 8A     		JSR 	IDE_IDENTIFY_TYPE
008ACF  2  C9 00        		CMP 	#$00
008AD1  2  D0 32        		BNE 	IDE_READ_INFO_BADFS
008AD3  2  4C 37 8B     		JMP 	IDE_READ_INFO_OK
008AD6  2               IDE_READ_INFO_ABORT:
008AD6  2  68           		PLA
008AD7  2  48 DA 5A A2  		PRTS    "NOT PRESENT$"		; NOT PRESENT
008ADB  2  00 BD F0 8A  
008ADF  2  E8 C9 24 F0  
008AFC  2  20 6B 88     		JSR	NEWLINE
008AFF  2  68           		PLA
008B00  2  20 6E 8B     		JSR 	IDE_REMOVE_DRIVE_ASSIGNMENTS
008B03  2  38           		SEC
008B04  2  60           		RTS				;
008B05  2               IDE_READ_INFO_BADFS:
008B05  2  48 DA 5A A2  		PRTS    " BAD FILESYSTEM$"	; NOT PRESENT
008B09  2  00 BD 1E 8B  
008B0D  2  E8 C9 24 F0  
008B2E  2  20 6B 88     		JSR	NEWLINE
008B31  2  68           		PLA
008B32  2  20 6E 8B     		JSR 	IDE_REMOVE_DRIVE_ASSIGNMENTS
008B35  2  38           		SEC
008B36  2  60           		RTS				;
008B37  2               IDE_READ_INFO_OK:
008B37  2  48 DA 5A A2  		PRTS    " FILE SYSTEM COMPATIBLE$" ; NOT PRESENT
008B3B  2  00 BD 50 8B  
008B3F  2  E8 C9 24 F0  
008B68  2  20 6B 88     		JSR	NEWLINE
008B6B  2  68           		PLA
008B6C  2  18           		CLC
008B6D  2  60           		RTS
008B6E  2               
008B6E  2               IDE_REMOVE_DRIVE_ASSIGNMENTS:
008B6E  2  18           		CLC
008B6F  2  69 30        		ADC	#$30
008B71  2  A2 00        		LDX 	#$00
008B73  2               @1:
008B73  2  DD 14 05     		CMP 	dskcfg,X 		; GET device
008B76  2  F0 09        		BEQ 	@2
008B78  2  E8           		INX
008B79  2  E8           		INX
008B7A  2  E0 10        		CPX 	#16
008B7C  2  D0 F5        		bne 	@1
008B7E  2  4C 91 8B     		jmp 	@3
008B81  2               @2:
008B81  2  48           		PHA
008B82  2  A9 00        		LDA 	#$00
008B84  2  9D 14 05     		STA 	dskcfg,X 		; SET device
008B87  2  E8           		INX
008B88  2  9D 14 05     		STA 	dskcfg,X 		; SET device
008B8B  2  68           		pla
008B8C  2  E8           		INX
008B8D  2  E0 10        		CPX 	#16
008B8F  2  D0 E2        		bne 	@1
008B91  2               @3:
008B91  2  60           		rts
008B92  2               
008B92  2               ;__IDE_PPIDETECT____________________________________________________________________________________
008B92  2               ;
008B92  2               ;  PROBE FOR PPI HARDWARE
008B92  2               ;____________________________________________________________________________________________________
008B92  2               ;
008B92  2               IDE_PPIDETECT:
008B92  2               ;
008B92  2               	; TEST FOR PPI EXISTENCE
008B92  2               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
008B92  2               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
008B92  2               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
008B92  2               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
008B92  2               	; INTERFERE WITH THE VALUE BEING READ.
008B92  2  20 47 8E     	JSR	SET_PPI_WR
008B95  2               ;
008B95  2  A9 00        	LDA     #$00			; VALUE ZERO
008B97  2  8D 60 03     	STA	PPIDELO			; PUSH VALUE TO PORT
008B9A  2  AD 60 03     	LDA	PPIDELO			; GET PORT VALUE
008B9D  2  C9 00                CMP     #$00
008B9F  2  60           	RTS				; AND RETURN
008BA0  2               ;
008BA0  2               
008BA0  2               
008BA0  2               ;*__IDE_READ_SECTOR___________________________________________________________________________________
008BA0  2               ;*
008BA0  2               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
008BA0  2               ;*
008BA0  2               ;*____________________________________________________________________________________________________
008BA0  2               IDE_READ_SECTOR:
008BA0  2               		PRTDBG "IDE Read Sector$"
008BA0  2  20 A7 8B     		JSR 	IDE_READ_RAW_SECTOR
008BA3  2  20 6C 92     		JSR 	DEBSECR512
008BA6  2  60           		RTS
008BA7  2               
008BA7  2               IDE_READ_RAW_SECTOR:
008BA7  2               		PRTDBG "IDE Read Raw Sector$"
008BA7  2  20 4C 8D     	  	JSR	IDE_CONVERT_SECTOR	;
008BAA  2               
008BAA  2  AD 12 05     		LDA	debsehd			; STORE CURRENT PARMS
008BAD  2  CD 55 8E     		CMP	Cdebsehd		;
008BB0  2  D0 13        		BNE	IDE_READ_SECTOR_DIRTY
008BB2  2  AD 11 05     		LDA	debcylm			;
008BB5  2  CD 54 8E     		CMP	Cdebcylm		;
008BB8  2  D0 0B        		BNE	IDE_READ_SECTOR_DIRTY
008BBA  2  AD 10 05     		LDA	debcyll			;
008BBD  2  CD 53 8E     		CMP	Cdebcyll		;
008BC0  2  D0 03        		BNE	IDE_READ_SECTOR_DIRTY
008BC2  2  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
008BC4  2  60           		RTS
008BC5  2               
008BC5  2               IDE_READ_SECTOR_DIRTY:
008BC5  2               		PRTDBG "IDE Read Sector Buffer Dirty$"
008BC5  2  20 58 8C     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
008BC8  2  B0 2A        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
008BCA  2  20 B6 92     		JSR 	GET_DRIVE_DEVICE
008BCD  2               IDE_READ_SECTOR_DIRTY1:
008BCD  2  20 1C 8D     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
008BD0  2  A9 0F        		LDA	#PPIDE_COMMAND		;SELECT IDE REGISTER
008BD2  2  A2 20        		LDX	#PPIDE_CMD_READ
008BD4  2  20 23 8E     		JSR	IDE_WRITE		;ASK THE DRIVE TO READ IT
008BD7  2  20 80 8C     		JSR	IDE_WAIT_DRQ		;WAIT UNTIL IT'S GOT THE DATA
008BDA  2  B0 18        		BCS 	IDE_READ_SECTOR_DIRTY_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
008BDC  2  20 B0 8C     		JSR	IDE_READ_BUFFER		; GRAB THE 256 WORDS FROM THE BUFFER
008BDF  2  AD 12 05     		LDA	debsehd			; STORE CURRENT PARMS
008BE2  2  8D 55 8E     		STA	Cdebsehd		;
008BE5  2  AD 10 05     		LDA	debcyll			;
008BE8  2  8D 53 8E     		STA	Cdebcyll		;
008BEB  2  AD 11 05     		LDA	debcylm			;
008BEE  2  8D 54 8E     		STA	Cdebcylm		;
008BF1  2               
008BF1  2  A9 00        		LDA	#$00			; ZERO = 1 ON RETURN = OPERATION OK
008BF3  2  60           		RTS
008BF4  2               IDE_READ_SECTOR_DIRTY_ERROR:
008BF4  2  A9 FF        		LDA	#$FF			; ZERO = 1 ON RETURN = OPERATION OK
008BF6  2  60           		RTS
008BF7  2               
008BF7  2               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
008BF7  2               ;*
008BF7  2               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
008BF7  2               ;*
008BF7  2               ;*____________________________________________________________________________________________________
008BF7  2               IDE_WRITE_SECTOR:
008BF7  2               		PRTDBG "IDE Write Sector$"
008BF7  2  20 A7 8B     	  	JSR	IDE_READ_RAW_SECTOR	; determine physical sector
008BFA  2  20 95 92     	  	JSR	BLKSECR512		; block sector for writing
008BFD  2  20 58 8C     		JSR	IDE_WAIT_NOT_BUSY	;MAKE SURE DRIVE IS READY
008C00  2  B0 28        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
008C02  2  20 B6 92     		JSR 	GET_DRIVE_DEVICE
008C05  2  20 1C 8D     		JSR	IDE_SETUP_LBA		;TELL IT WHICH SECTOR WE WANT
008C08  2  A9 0F        		LDA	#PPIDE_COMMAND
008C0A  2  A2 30        		LDX	#PPIDE_CMD_WRITE
008C0C  2  20 23 8E     		JSR	IDE_WRITE		;TELL DRIVE TO WRITE A SECTOR
008C0F  2  20 80 8C     		JSR	IDE_WAIT_DRQ		;WAIT UNIT IT WANTS THE DATA
008C12  2  B0 16        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
008C14  2  20 E5 8C     		JSR	IDE_WRITE_BUFFER	;GIVE THE DATA TO THE DRIVE
008C17  2  20 58 8C     		JSR	IDE_WAIT_NOT_BUSY	;WAIT UNTIL THE WRITE IS COMPLETE
008C1A  2  B0 0E        		BCS 	IDE_WRITE_SECTOR_ERROR	; IF TIMEOUT, REPORT NO IDE PRESENT
008C1C  2  A9 FF        		LDA	#$FF			; STORE CURRENT PARMS
008C1E  2  8D 55 8E     		STA	Cdebsehd		;
008C21  2  8D 53 8E     		STA	Cdebcyll		;
008C24  2  8D 54 8E     		STA	Cdebcylm		;
008C27  2               
008C27  2  A9 00        		LDA	#$00			; ZERO ON RETURN = OPERATION OK
008C29  2  60           		RTS
008C2A  2               IDE_WRITE_SECTOR_ERROR:
008C2A  2  A9 FF        		LDA	#$FF			; 1 ON RETURN = OPERATION FAIL
008C2C  2  60           		RTS
008C2D  2               
008C2D  2               ;*__PPIDE_RESET____________________________________________________________________________________
008C2D  2               ;*
008C2D  2               ;*  SOFT RESET IDE CHANNEL
008C2D  2               ;*
008C2D  2               ;*____________________________________________________________________________________________________
008C2D  2               PPIDE_RESET:
008C2D  2                 	PRTDBG "IDE Reset$"
008C2D  2  A9 00        		LDA	#$00
008C2F  2  8D 12 05     		STA	debsehd
008C32  2  8D 10 05     		STA	debcyll
008C35  2  8D 11 05     		STA	debcylm
008C38  2  A9 FF        		LDA	#$FF			;
008C3A  2  8D 55 8E     		STA	Cdebsehd		;
008C3D  2  8D 53 8E     		STA	Cdebcyll		;
008C40  2  8D 54 8E     		STA	Cdebcylm		;
008C43  2               
008C43  2  A9 80        		LDA	#PPIDE_RST_LINE
008C45  2  8D 62 03     		STA	PPIDECNTRL			; ASSERT RST LINE ON IDE INTERFACE
008C48  2  A2 00        		LDX	#$00
008C4A  2               	PRTDBG "IDE Reset Delay$"
008C4A  2               RST_DLY:
008C4A  2  CA           		DEX
008C4B  2  E0 00        		CPX	#$00
008C4D  2  D0 FB        		BNE	RST_DLY
008C4F  2  A9 00        		LDA	#$00
008C51  2  8D 62 03     		STA	PPIDECNTRL			; DEASSERT RST LINE ON IDE INTERFACE
008C54  2               
008C54  2               ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
008C54  2               ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
008C54  2               	.IF (USEDSKYNG=1)
008C54  2  20 45 8F     	JSR 	DSKY_REINIT
008C57  2               	.ENDIF
008C57  2               
008C57  2  60           		RTS
008C58  2               
008C58  2               
008C58  2               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
008C58  2               ;*
008C58  2               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
008C58  2               ;*
008C58  2               ;*____________________________________________________________________________________________________
008C58  2               IDE_WAIT_NOT_BUSY:
008C58  2  DA           		PHX
008C59  2  5A           		PHY
008C5A  2  48           		PHA
008C5B  2  A9 00        		LDA #$00
008C5D  2  8D FA 88     		STA PPIDETIMEOUT
008C60  2  8D FB 88     		STA PPIDETIMEOUT+1
008C63  2               IDE_WAIT_NOT_BUSY1:
008C63  2  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR RDY BIT TO BE SET
008C65  2  20 07 8E     		JSR	IDE_READ
008C68  2  8A           		TXA
008C69  2  29 80        		AND	#$80
008C6B  2  F0 0E        		BEQ	IDE_WAIT_NOT_BUSY2
008C6D  2  EE FA 88     		INC 	PPIDETIMEOUT
008C70  2  D0 F1        		BNE 	IDE_WAIT_NOT_BUSY1
008C72  2  EE FB 88     		INC 	PPIDETIMEOUT+1
008C75  2  D0 EC        		BNE 	IDE_WAIT_NOT_BUSY1
008C77  2  38           		SEC
008C78  2  4C 7C 8C     		JMP	IDE_WAIT_NOT_BUSY3
008C7B  2               IDE_WAIT_NOT_BUSY2:
008C7B  2  18           		CLC
008C7C  2               IDE_WAIT_NOT_BUSY3:
008C7C  2  68           		PLA
008C7D  2  7A           		PLY
008C7E  2  FA           		PLX
008C7F  2  60           		RTS
008C80  2               
008C80  2               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
008C80  2               ;*
008C80  2               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
008C80  2               ;*
008C80  2               ;*____________________________________________________________________________________________________
008C80  2               IDE_WAIT_DRQ:
008C80  2  DA           		PHX
008C81  2  5A           		PHY
008C82  2  48           		PHA
008C83  2  A9 00        		LDA #$00
008C85  2  8D FA 88     		STA PPIDETIMEOUT
008C88  2  8D FB 88     		STA PPIDETIMEOUT+1
008C8B  2               IDE_WAIT_DRQ1:
008C8B  2  A9 0F        		LDA	#PPIDE_STATUS		;WAIT FOR DRQ BIT TO BE SET
008C8D  2  20 07 8E     		JSR	IDE_READ
008C90  2  8A           		TXA
008C91  2  29 88        		AND	#%10001000		; MASK OFF BUSY(7) AND DRQ(3)
008C93  2  C9 08        		CMP	#%00001000		; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
008C95  2  F0 14        		BEQ	IDE_WAIT_DRQ2
008C97  2  29 01        		AND	#%00000001		; IS ERROR?
008C99  2  C9 01        		CMP	#%00000001		;
008C9B  2  F0 0A        		BEQ	IDE_WAIT_DRQE
008C9D  2  EE FA 88     		INC 	PPIDETIMEOUT
008CA0  2  D0 E9        		BNE 	IDE_WAIT_DRQ1
008CA2  2  EE FB 88     		INC 	PPIDETIMEOUT+1
008CA5  2  D0 E4        		BNE 	IDE_WAIT_DRQ1
008CA7  2               IDE_WAIT_DRQE:
008CA7  2  38           		SEC
008CA8  2  4C AC 8C     		JMP	IDE_WAIT_DRQ3
008CAB  2               IDE_WAIT_DRQ2:
008CAB  2  18           		CLC
008CAC  2               IDE_WAIT_DRQ3:
008CAC  2  68           		PLA
008CAD  2  7A           		PLY
008CAE  2  FA           		PLX
008CAF  2  60           		RTS
008CB0  2               
008CB0  2               
008CB0  2               
008CB0  2               ;*__IDE_READ_BUFFER___________________________________________________________________________________
008CB0  2               ;*
008CB0  2               ;*  READ IDE BUFFER LITTLE ENDIAN
008CB0  2               ;*
008CB0  2               ;*____________________________________________________________________________________________________
008CB0  2               IDE_READ_BUFFER:
008CB0  2  A2 00        		LDX    	#$00			; INDEX
008CB2  2               IDEBUFRD:
008CB2  2  8E F9 88     		STX	PPIDEINDEX
008CB5  2  A9 08        		LDA	#PPIDE_DATA
008CB7  2  20 07 8E     		JSR	IDE_READ
008CBA  2  8A           		TXA
008CBB  2  AE F9 88     		LDX	PPIDEINDEX
008CBE  2  9D D2 92     		STA	hstbuf,X		;
008CC1  2  E8           		INX				;
008CC2  2  98           		TYA				; THEN HIGH BYTE OF WORD
008CC3  2  9D D2 92     		STA	hstbuf,X		;
008CC6  2  E8           		INX
008CC7  2  E0 00        		CPX    	#$00			;
008CC9  2  D0 E7        		BNE	IDEBUFRD		;
008CCB  2               IDEBUFRD1:
008CCB  2  8E F9 88     		STX	PPIDEINDEX
008CCE  2  A9 08        		LDA	#PPIDE_DATA
008CD0  2  20 07 8E     		JSR	IDE_READ
008CD3  2  8A           		TXA
008CD4  2  AE F9 88     		LDX	PPIDEINDEX
008CD7  2  9D D2 93     		STA	hstbuf+256,X		;
008CDA  2  E8           		INX				;
008CDB  2  98           		TYA				; THEN HIGH BYTE OF WORD
008CDC  2  9D D2 93     		STA	hstbuf+256,X		;
008CDF  2  E8           		INX				;
008CE0  2  E0 00        		CPX    	#$00			;
008CE2  2  D0 E7        		BNE	IDEBUFRD1		;
008CE4  2  60           		RTS				;
008CE5  2               
008CE5  2               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
008CE5  2               ;*
008CE5  2               ;*  WRITE IDE BUFFER LITTLE ENDIAN
008CE5  2               ;*
008CE5  2               ;*____________________________________________________________________________________________________
008CE5  2               IDE_WRITE_BUFFER:
008CE5  2  A2 00        		LDX    	#$00			; INDEX
008CE7  2               IDEBUFWT:
008CE7  2  8E F9 88     		STX	PPIDEINDEX
008CEA  2  BD D3 92     		LDA     hstbuf+1,X		; SECTORS ARE BIG ENDIAN
008CED  2  A8           		TAY				;
008CEE  2  BD D2 92     		LDA     hstbuf,X		; SECTORS ARE BIG ENDIAN
008CF1  2  AA           		TAX
008CF2  2  A9 08        		LDA	#PPIDE_DATA
008CF4  2  20 23 8E     		JSR	IDE_WRITE
008CF7  2  AE F9 88     		LDX	PPIDEINDEX
008CFA  2  E8           		INX				;
008CFB  2  E8           		INX				;
008CFC  2  E0 00        		CPX    	#$00			;
008CFE  2  D0 E7        		BNE	IDEBUFWT		;
008D00  2  A2 00        		LDX    	#$00			; INDEX
008D02  2               IDEBUFWT1:
008D02  2  8E F9 88     		STX	PPIDEINDEX
008D05  2  BD D3 93     		LDA     hstbuf+257,X		; SECTORS ARE BIG ENDIAN
008D08  2  A8           		TAY
008D09  2  BD D2 93     		LDA     hstbuf+256,X		; SECTORS ARE BIG ENDIAN
008D0C  2  AA           		TAX
008D0D  2  A9 08        		LDA	#PPIDE_DATA
008D0F  2  20 23 8E     		JSR	IDE_WRITE
008D12  2  AE F9 88     		LDX	PPIDEINDEX
008D15  2  E8           		INX				;
008D16  2  E8           		INX				;
008D17  2  E0 00        		CPX    	#$00			;
008D19  2  D0 E7        		BNE	IDEBUFWT1		;
008D1B  2  60           		RTS				;
008D1C  2               
008D1C  2               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
008D1C  2               ;*
008D1C  2               ;*  SETUP LBA DATA
008D1C  2               ;*  A= DRIVE DEVICE
008D1C  2               ;*____________________________________________________________________________________________________
008D1C  2               IDE_SETUP_LBA:
008D1C  2               		PRTDBG "PPIDE SETUP LBA$"
008D1C  2  29 01        		and 	#$01			; only want drive cfg
008D1E  2  0A           		asl	a			; SHIFT 4
008D1F  2  0A           		asl	a			;
008D20  2  0A           		asl	a			;
008D21  2  0A           		asl	a			;
008D22  2  09 E0        		ORA 	#$E0			; E0=MST  F0=SLV
008D24  2  AA           		TAX
008D25  2  A0 00        		LDY	#$00
008D27  2  A9 0E        		LDA	#PPIDE_DEVICE
008D29  2  20 23 8E     		JSR	IDE_WRITE
008D2C  2               
008D2C  2  AE 11 05     		LDX    	debcylm
008D2F  2  A9 0D        		LDA	#PPIDE_LBAHI
008D31  2  20 23 8E     		JSR	IDE_WRITE
008D34  2               
008D34  2  AE 10 05     		LDX    	debcyll			;
008D37  2  A9 0C        		LDA	#PPIDE_LBAMID
008D39  2  20 23 8E     		JSR	IDE_WRITE
008D3C  2               
008D3C  2  AE 12 05     		LDX    	debsehd			;
008D3F  2  A9 0B        		LDA	#PPIDE_LBALOW
008D41  2  20 23 8E     		JSR	IDE_WRITE
008D44  2               
008D44  2  A2 01        		LDX	#$01
008D46  2  A9 0A        		LDA	#PPIDE_SEC_CNT
008D48  2  20 23 8E     		JSR	IDE_WRITE
008D4B  2               
008D4B  2  60           		RTS
008D4C  2               
008D4C  2               ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
008D4C  2               ;
008D4C  2               ; 	TRANSLATE SECTORS INTO IDE FORMAT
008D4C  2               ;________________________________________________________________________________________________________
008D4C  2               IDE_CONVERT_SECTOR:
008D4C  2  AD 0C 05     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
008D4F  2  29 0F        	AND 	#$0F			; ISOLATE HEAD IN LOW 4 BITS
008D51  2  0A           	asl	a			; MOVE TO HIGH BYTE
008D52  2  0A           	asl	a
008D53  2  0A           	asl	a
008D54  2  0A           	asl	a
008D55  2  AA           	TAX 				; PARK IN X
008D56  2  AD 0E 05     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
008D59  2  4A           	LSR	A			;
008D5A  2  4A           	LSR	A			; DIVIDE BY 4 (FOR BLOCKING)
008D5B  2  29 0F        	AND 	#$0F 			; CLEAR UPPER 4 BITS (JUST 'CAUSE)
008D5D  2  8D 12 05     	STA	debsehd			; STORE IN SECTOR/HEAD
008D60  2  8A           	TXA 				; GET HEAD BACK
008D61  2  0D 12 05     	ORA 	debsehd
008D64  2  8D 12 05     	STA	debsehd			; STORE IN SECTOR/HEAD
008D67  2               
008D67  2  AD 0C 05     	LDA 	sektrk
008D6A  2  8D 10 05     	STA	debcyll			; STORE IN TRACK (lsb)
008D6D  2  AD 0D 05     	LDA 	sektrk+1
008D70  2  8D 11 05     	STA	debcylm			; STORE IN TRACK (msb)
008D73  2               					; REMOVE HEAD FROM TRACK VALUE (DIV/4)
008D73  2  AD 11 05     	LDA	debcylm
008D76  2  4A           	LSR 	A
008D77  2  8D 11 05     	STA	debcylm
008D7A  2  AD 10 05     	LDA	debcyll
008D7D  2  6A           	ROR 	A
008D7E  2  8D 10 05     	STA	debcyll
008D81  2               
008D81  2  AD 11 05     	LDA	debcylm
008D84  2  4A           	LSR 	A
008D85  2  8D 11 05     	STA	debcylm
008D88  2  AD 10 05     	LDA	debcyll
008D8B  2  6A           	ROR 	A
008D8C  2  8D 10 05     	STA	debcyll
008D8F  2               
008D8F  2  AD 11 05     	LDA	debcylm
008D92  2  4A           	LSR 	A
008D93  2  8D 11 05     	STA	debcylm
008D96  2  AD 10 05     	LDA	debcyll
008D99  2  6A           	ROR 	A
008D9A  2  8D 10 05     	STA	debcyll
008D9D  2               
008D9D  2  AD 11 05     	LDA	debcylm
008DA0  2  4A           	LSR 	A
008DA1  2  8D 11 05     	STA	debcylm
008DA4  2  AD 10 05     	LDA	debcyll
008DA7  2  6A           	ROR 	A
008DA8  2  8D 10 05     	STA	debcyll
008DAB  2               
008DAB  2               ;	ADD SLICE OFFSET
008DAB  2  AD 13 05     	LDA	sekdsk			; GET DRIVE#
008DAE  2  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
008DB0  2  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
008DB1  2  AA           	TAX 				; MOVE TO X REGISTER
008DB2  2  E8           	INX				; WANT SECOND BYTE OF ENTRY
008DB3  2  BD 14 05     	LDA 	dskcfg,X 		; GET SLICE#
008DB6  2  8D 58 8E     	STA 	slicetmp+1 		; SLICE OFFSET MSB
008DB9  2  A9 00        	LDA 	#0	 		; GET SLICE#
008DBB  2  8D 57 8E     	STA 	slicetmp		; SLICE OFFSET LSB
008DBE  2  18           	CLC				; VOODOO MATH TO TAKE SLICE*$4000
008DBF  2  6E 58 8E     	ROR 	slicetmp+1
008DC2  2  6E 57 8E     	ROR	slicetmp
008DC5  2  6E 58 8E     	ROR 	slicetmp+1
008DC8  2  6E 57 8E     	ROR	slicetmp
008DCB  2               
008DCB  2  BD 14 05     	LDA 	dskcfg,X 		; GET SLICE#
008DCE  2  18           	clc
008DCF  2  6D 57 8E     	adc 	slicetmp
008DD2  2  8D 57 8E     	sta 	slicetmp
008DD5  2               					; ADD SLICE OFFSET TO TRACK #
008DD5  2  18           	clc				; clear carry
008DD6  2  AD 57 8E     	lda slicetmp
008DD9  2  6D 10 05     	adc debcyll
008DDC  2  8D 10 05     	sta debcyll			; store sum of LSBs
008DDF  2  AD 58 8E     	lda slicetmp+1
008DE2  2  6D 11 05     	adc debcylm			; add the MSBs using carry from
008DE5  2  8D 11 05     	sta debcylm			; the previous calculation
008DE8  2               
008DE8  2               
008DE8  2               
008DE8  2               
008DE8  2                 .IF USEDSKY=1 || USEDSKYNG=1
008DE8  2                 	PRTDBG "DSKY OUTPUT 1$"
008DE8  2  AD 13 05       	lda	sekdsk
008DEB  2  8D 08 05       	sta	DSKY_HEXBUF
008DEE  2  AD 11 05      	lda	debcylm
008DF1  2  8D 09 05       	sta	DSKY_HEXBUF+1
008DF4  2  AD 10 05      	lda	debcyll
008DF7  2  8D 0A 05       	sta	DSKY_HEXBUF+2
008DFA  2  AD 12 05         	lda	debsehd
008DFD  2  8D 0B 05       	sta	DSKY_HEXBUF+3
008E00  2  20 CB 8F       	JSR	DSKY_BIN2SEG
008E03  2  20 00 90     	JSR	DSKY_SHOW
008E06  2                 .ENDIF
008E06  2  60           	RTS
008E07  2               
008E07  2               
008E07  2               ;-------------------------------------------------------------------------------
008E07  2               
008E07  2               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
008E07  2               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
008E07  2               ; PROGRAM WOULD NOT CALL TO THESE.
008E07  2               
008E07  2               	;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
008E07  2               	;INPUT A = IDE REGSITER ADDRESS
008E07  2               	;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
008E07  2               	;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
008E07  2               
008E07  2               IDE_READ:
008E07  2  20 3F 8E     	JSR	SET_PPI_RD		; SETUP FOR A READ CYCLE
008E0A  2  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
008E0D  2  09 40        	ORA	#PPIDE_RD_LINE		; ASSERT RD PIN
008E0F  2  8D 62 03     	STA	PPIDECNTRL
008E12  2  AE 60 03     	LDX	PPIDELO			; READ LOWER BYTE
008E15  2  AC 61 03     	LDY	PPIDEHI			; READ UPPER BYTE
008E18  2  49 40        	EOR	#PPIDE_RD_LINE		; DE-ASSERT RD SIGNAL
008E1A  2  8D 62 03     	STA	PPIDECNTRL
008E1D  2  A9 00        	LDA	#$00
008E1F  2  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
008E22  2  60           	RTS
008E23  2               
008E23  2               
008E23  2               
008E23  2               
008E23  2               	;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
008E23  2               	;INPUT A = IDE REGISTER ADDRESS
008E23  2               	;INPUT REGISTER X = LSB TO WRITE
008E23  2               	;INPUT REGISTER Y = MSB TO WRITE
008E23  2               	;
008E23  2               
008E23  2               
008E23  2               IDE_WRITE:
008E23  2  20 47 8E     	JSR	SET_PPI_WR		; SETUP FOR A WRITE CYCLE
008E26  2               
008E26  2  8E 60 03     	STX	PPIDELO			; WRITE LOWER BYTE
008E29  2  8C 61 03     	STY	PPIDEHI			; WRITE UPPER BYTE
008E2C  2               
008E2C  2  8D 62 03     	STA	PPIDECNTRL		;DRIVE ADDRESS ONTO CONTROL LINES
008E2F  2               
008E2F  2  09 20        	ORA	#PPIDE_WR_LINE		; ASSERT WRITE PIN
008E31  2  8D 62 03     	STA	PPIDECNTRL
008E34  2               
008E34  2  49 20        	EOR	#PPIDE_WR_LINE		; DE ASSERT WR PIN
008E36  2  8D 62 03     	STA	PPIDECNTRL
008E39  2               
008E39  2  A9 00        	LDA	#$00
008E3B  2  8D 62 03     	STA	PPIDECNTRL		;DEASSERT ALL CONTROL PINS
008E3E  2  60           	RTS
008E3F  2               
008E3F  2               
008E3F  2               ;-----------------------------------------------------------------------------------
008E3F  2               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
008E3F  2               ;
008E3F  2               ;------------------------------------------------------------------------------------
008E3F  2               
008E3F  2               SET_PPI_RD:
008E3F  2  48           	PHA
008E40  2  A9 92        	LDA	#PPRD_IDE_8255
008E42  2  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, READ MODE
008E45  2  68           	PLA
008E46  2  60           	RTS
008E47  2               
008E47  2               SET_PPI_WR:
008E47  2  48           	PHA
008E48  2  A9 80        	LDA	#PPWR_IDE_8255
008E4A  2  8D 63 03     	STA	PPIDEPPIC				;CONFIG 8255 CHIP, WRITE MODE
008E4D  2  68           	PLA
008E4E  2  60           	RTS
008E4F  2               
008E4F  2               
008E4F  2               ;allocate the following data areas to unused ram space
008E4F  2  00           LASTCHAR: 	.byte 0		;save sector for warm boot
008E50  2  00           savsec:		.byte 0		;save sector for warm boot
008E51  2  00           count:		.byte 0		;counter in warm boot
008E52  2  00           temp:		.byte 0		;save hstdsk for warm boot
008E53  2  00           Cdebcyll:	.byte 0		; DEBLOCKED CYLINDER LSB
008E54  2  00           Cdebcylm:	.byte 0		; DEBLOCKED CYLINDER MSB
008E55  2  00           Cdebsehd:	.byte 0		; DEBLOCKED SECTOR AND HEAD (HS)
008E56  2  00           DEBDIRTY:	.byte 0		; DIRTY FLAG
008E57  2  00 00        slicetmp:	.word 0		; USED TO CALCULATE SLICE OFFSET
008E59  2               
008E59  1               		.INCLUDE "dosdskyn.asm"
008E59  2               ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
008E59  2               ;
008E59  2               ; 	Nhyodyne DSKY/NG drivers
008E59  2               ;
008E59  2               ;	Entry points:
008E59  2               ;               DSKY_INIT
008E59  2               ;               DSKY_SHOW
008E59  2               ;               DSKY_BIN2SEG
008E59  2               ;               DSKY_RESET
008E59  2               ;               DSKY_STAT
008E59  2               ;               DSKY_GETKEY
008E59  2               ;               DSKY_BEEP
008E59  2               ;               DSKY_L1ON
008E59  2               ;               DSKY_L2ON
008E59  2               ;               DSKY_L1OFF
008E59  2               ;               DSKY_L2OFF
008E59  2               ;               DSKY_PUTLED
008E59  2               ;               DSKY_BLANK
008E59  2               ;________________________________________________________________________________________________________________________________
008E59  2               ;
008E59  2               ;
008E59  2               ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
008E59  2               ;
008E59  2               ; LED SEGMENTS (BIT VALUES)
008E59  2               ;
008E59  2               ;	+--01--+
008E59  2               ;	20    02
008E59  2               ;	+--40--+
008E59  2               ;	10    04
008E59  2               ;	+--08--+  80
008E59  2               ;
008E59  2               ; KEY CODE MAP (KEY CODES) CSCCCRRR
008E59  2               ;                          ||||||||
008E59  2               ;                          |||||+++-- ROW
008E59  2               ;                          ||+++----- COL
008E59  2               ;                          |+-------- SHIFT
008E59  2               ;                          +--------- CONTROL
008E59  2               ;
008E59  2               ;	00	08	10	18	23
008E59  2               ;	01	09	11	19	22
008E59  2               ;	02	0A	12	1A	21
008E59  2               ;	03	0B	13	1B	20
008E59  2               ;	04	0C	14	1C	SHIFT
008E59  2               ;	05	0D	15	1D	CTRL
008E59  2               ;
008E59  2               ; LED BIT MAP (BIT VALUES)
008E59  2               ;
008E59  2               ;	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
008E59  2               ;	---	---	---	---	---	---	---	---
008E59  2               ;	01	01	01	01	01
008E59  2               ;	02	02	02	02	02
008E59  2               ;	04      04      04      04	04
008E59  2               ;	08      08      08      08	08
008E59  2               ;	10      10      10      10	10
008E59  2               ;	20      20      20      20	20	L1	L2 	BUZZ
008E59  2               ;
008E59  2               DSKY_PPI	=	$0360		; PORT
008E59  2               DSKY_PPIA	= 	DSKY_PPI + 0 	; PORT A
008E59  2               DSKY_PPIB	= 	DSKY_PPI + 1 	; PORT B
008E59  2               DSKY_PPIC	= 	DSKY_PPI + 2    ; PORT C
008E59  2               DSKY_PPIX 	= 	DSKY_PPI + 3    ; PPI CONTROL PORT
008E59  2               ;
008E59  2               DSKY_PPIX_RD	=	%10010010	; PPIX VALUE FOR READS
008E59  2               DSKY_PPIX_WR	=	%10000010	; PPIX VALUE FOR WRITES
008E59  2               ;
008E59  2               ; PIO CHANNEL C:
008E59  2               ;
008E59  2               ;	7	6	5	4	3	2	1	0
008E59  2               ;	RES	0	0	CS	CS	/RD	/WR	A0
008E59  2               ;
008E59  2               ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
008E59  2               ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
008E59  2               ;
008E59  2               DSKY_PPI_IDLE	=	%00000110
008E59  2               ;
008E59  2               DSKY_CMD_CLR	=	%11011111	; CLEAR (ALL OFF)
008E59  2               DSKY_CMD_CLRX	=	%11010011	; CLEAR (ALL ON)
008E59  2               DSKY_CMD_WDSP	=	%10010000	; WRITE DISPLAY RAM
008E59  2               DSKY_CMD_RDSP	=	%01110000	; READ DISPLAY RAM
008E59  2               DSKY_CMD_CLK	=	%00100000	; SET CLK PRESCALE
008E59  2               DSKY_CMD_FIFO	=	%01000000	; READ FIFO
008E59  2               ;
008E59  2               DSKY_PRESCL	=	DSKYOSC/100000	; PRESCALER
008E59  2               ;
008E59  2               ;__DSKY_INIT_________________________________________________________________________________________
008E59  2               ;
008E59  2               ;  DISPLAY DSKY INFO
008E59  2               ;____________________________________________________________________________________________________
008E59  2               ;
008E59  2               DSKY_INIT:
008E59  2                       PRTDBG "DSKY INIT:$"
008E59  2  20 15 8F             JSR     DSKY_PREINIT
008E5C  2  48 DA 5A A2  	PRTS "DSKY:$"
008E60  2  00 BD 75 8E  
008E64  2  E8 C9 24 F0  
008E7B  2  20 6B 88            	JSR	NEWLINE
008E7E  2               
008E7E  2               ;
008E7E  2  48 DA 5A A2  	PRTS    " IO=0x$"
008E82  2  00 BD 97 8E  
008E86  2  E8 C9 24 F0  
008E9E  2  A9 03        	LDA	#>DSKY_PPI		; GET BASE PORT
008EA0  2  20 49 88     	JSR	PRTHEXBYTE		; PRINT BASE PORT
008EA3  2  A9 60               	LDA	#<DSKY_PPI		; GET BASE PORT
008EA5  2  20 49 88     	JSR	PRTHEXBYTE		; PRINT BASE PORT
008EA8  2  48 DA 5A A2  	PRTS    " MODE=$"
008EAC  2  00 BD C1 8E  
008EB0  2  E8 C9 24 F0  
008EC8  2  48 DA 5A A2  	PRTS    "NG$"			; PRINT DSKY TYPE
008ECC  2  00 BD E1 8E  
008ED0  2  E8 C9 24 F0  
008EE4  2               ;
008EE4  2  AD 7E 91     	LDA	DSKY_PRESENT	        ; PRESENT?
008EE7  2  C9 FF        	CMP     #$FF		        ; SET FLAGS
008EE9  2  F0 26                BEQ     DSKY_INITA
008EEB  2  48 DA 5A A2  	PRTS    " NOT PRESENT$"		; NOT PRESENT
008EEF  2  00 BD 04 8F  
008EF3  2  E8 C9 24 F0  
008F11  2               DSKY_INITA:
008F11  2  20 6B 88     	JSR	NEWLINE
008F14  2  60           	RTS				; DONE
008F15  2               ;
008F15  2               ;__DSKY_PREINIT______________________________________________________________________________________
008F15  2               ;
008F15  2               ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
008F15  2               ;____________________________________________________________________________________________________
008F15  2               ; HARDWARE RESET 8279 BY PULSING RESET LINE
008F15  2               DSKY_PREINIT:
008F15  2               	; CHECK FOR PPI
008F15  2  20 5A 8F     	JSR	DSKY_PPIDETECT		; TEST FOR PPI HARDWARE
008F18  2  D0 2A                BNE     DSKY_ABORT      	; BAIL OUT IF NOT THERE
008F1A  2               
008F1A  2               	; SETUP PPI TO DEFAULT MODE
008F1A  2  20 57 91     	JSR	DSKY_PPIRD
008F1D  2               	; INIT 8279 VALUES TO IDLE STATE
008F1D  2  A9 06        	LDA	#DSKY_PPI_IDLE
008F1F  2  8D 62 03     	STA	DSKY_PPIC
008F22  2               	; PULSE RESET SIGNAL ON 8279
008F22  2  09 80        	ORA 	#%10000000
008F24  2  8D 62 03     	STA	DSKY_PPIC
008F27  2  29 7F        	AND 	#%01111111
008F29  2  8D 62 03     	STA	DSKY_PPIC
008F2C  2               	; INITIALIZE 8279
008F2C  2  20 45 8F     	JSR	DSKY_REINIT
008F2F  2               	; NOW SEE IF A DSKYNG IS REALLY THERE...
008F2F  2  A9 A5        	LDA     #$A5
008F31  2  A0 00                LDY     #$00
008F33  2  20 96 90     	JSR	DSKY_PUTBYTE
008F36  2  A0 00                LDY     #$00
008F38  2  20 AA 90     	JSR	DSKY_GETBYTE
008F3B  2  C9 A5        	CMP	#$A5
008F3D  2  D0 05        	BNE     DSKY_ABORT			; BAIL OUT IF MISCOMPARE
008F3F  2  A9 FF        	LDA	#$FF
008F41  2  8D 7E 91     	STA	DSKY_PRESENT
008F44  2               DSKY_ABORT:
008F44  2  60           	RTS
008F45  2               ;
008F45  2               DSKY_REINIT:
008F45  2  20 69 91     	JSR	DSKY_PPIIDLE
008F48  2               	; SET CLOCK SCALER TO 20
008F48  2  A9 21        	LDA	#DSKY_CMD_CLK | DSKY_PRESCL
008F4A  2  20 16 90     	JSR	DSKY_CMD
008F4D  2               	; FALL THRU
008F4D  2               ;
008F4D  2               DSKY_RESET:
008F4D  2               	; RESET DSKY -- CLEAR RAM AND FIFO
008F4D  2  A9 DF        	LDA	#DSKY_CMD_CLR
008F4F  2  20 16 90     	JSR	DSKY_CMD
008F52  2               ;
008F52  2               	; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
008F52  2               	; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
008F52  2               	; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
008F52  2               	; IS USED TO IMPLEMENT A TIMEOUT.
008F52  2  A2 00        	LDX	#0			; TIMEOUT LOOP COUNTER
008F54  2               DSKY_RESET1:
008F54  2  DA           	PHX     			; SAVE COUNTER
008F55  2               	;JSR	DSKY_ST			; GET STATUS BYTE
008F55  2  FA           	PLX				; RECOVER COUNTER
008F56  2                     ;  AND     #%10000000
008F56  2                     ;  BEQ     DSKY_RESET2		; MOVE ON IF DONE
008F56  2  CA                   DEX
008F57  2  D0 FB                BNE     DSKY_RESET1		; LOOP TILL TIMEOUT
008F59  2               ;
008F59  2               DSKY_RESET2:
008F59  2  60           	RTS
008F5A  2               ;
008F5A  2               ;
008F5A  2               ;
008F5A  2               ;__DSKY_PPIDETECT____________________________________________________________________________________
008F5A  2               ;
008F5A  2               ;  PROBE FOR PPI HARDWARE
008F5A  2               ;____________________________________________________________________________________________________
008F5A  2               ;
008F5A  2               DSKY_PPIDETECT:
008F5A  2               ;
008F5A  2               	; TEST FOR PPI EXISTENCE
008F5A  2               	; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
008F5A  2               	; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
008F5A  2               	; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
008F5A  2               	; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
008F5A  2               	; INTERFERE WITH THE VALUE BEING READ.
008F5A  2  20 40 91     	JSR	DSKY_PPIWR
008F5D  2               ;
008F5D  2  A9 00        	LDA     #$00			; VALUE ZERO
008F5F  2  8D 60 03     	STA	DSKY_PPIA		; PUSH VALUE TO PORT
008F62  2  AD 60 03     	LDA	DSKY_PPIA		; GET PORT VALUE
008F65  2  C9 00                CMP     #$00
008F67  2  60           	RTS				; AND RETURN
008F68  2               ;
008F68  2                .IF DSKY_KBD=1
008F68  2               ;
008F68  2               KY_0	=	$00
008F68  2               KY_1	=	$01
008F68  2               KY_2	=	$02
008F68  2               KY_3	=	$03
008F68  2               KY_4	=	$04
008F68  2               KY_5	=	$05
008F68  2               KY_6	=	$06
008F68  2               KY_7	=	$07
008F68  2               KY_8	=	$08
008F68  2               KY_9	=	$09
008F68  2               KY_A	=	$0A
008F68  2               KY_B	=	$0B
008F68  2               KY_C	=	$0C
008F68  2               KY_D	=	$0D
008F68  2               KY_E	=	$0E
008F68  2               KY_F	=	$0F
008F68  2               KY_FW	=	$10	; FORWARD
008F68  2               KY_BK	=	$11	; BACKWARD
008F68  2               KY_CL	=	$12	; CLEAR
008F68  2               KY_EN	=	$13	; ENTER
008F68  2               KY_DE	=	$14	; DEPOSIT
008F68  2               KY_EX	=	$15	; EXAMINE
008F68  2               KY_GO	=	$16	; GO
008F68  2               KY_BO	=	$17	; BOOT
008F68  2               KY_F4	=	$18	; F4
008F68  2               KY_F3	=	$19	; F3
008F68  2               KY_F2	=	$20	; F2
008F68  2               KY_F1	=	$21	; F1
008F68  2               ;
008F68  2               ;__DSKY_STAT_________________________________________________________________________________________
008F68  2               ;
008F68  2               ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
008F68  2               ;____________________________________________________________________________________________________
008F68  2               ;
008F68  2               DSKY_STAT:
008F68  2  AD 7E 91     	LDA	DSKY_PRESENT            ; DOES IT EXIST?
008F6B  2  C9 FF        	CMP     #$FF			; SET FLAGS
008F6D  2  D0 05                BNE     DSKY_STATA		; ABORT WITH A=0 IF NOT THERE
008F6F  2  20 4F 90     	JSR	DSKY_ST
008F72  2  29 0F        	AND	#$0F			; ISOLATE THE CUR FIFO LEN
008F74  2               DSKY_STATA:
008F74  2  60           	RTS
008F75  2               ;
008F75  2               ;__DSKY_GETKEY_____________________________________________________________________________________
008F75  2               ;
008F75  2               ;  WAIT FOR A DSKY KEYPRESS AND RETURN
008F75  2               ;____________________________________________________________________________________________________
008F75  2               ;
008F75  2               DSKY_GETKEY:
008F75  2  AD 7E 91     	LDA	DSKY_PRESENT    	; DOES IT EXIST?
008F78  2  C9 FF               	CMP     #$FF			; SET FLAGS
008F7A  2  D0 24                BNE     DSKY_GETKEY1A		; ABORT WITH A=0 IF NOT THERE
008F7C  2  20 68 8F     	JSR	DSKY_STAT
008F7F  2  F0 F4                BEQ     DSKY_GETKEY		; LOOP IF NOTHING THERE
008F81  2  A9 40        	LDA	#DSKY_CMD_FIFO
008F83  2  20 16 90     	JSR	DSKY_CMD
008F86  2  20 54 90     	JSR	DSKY_DIN
008F89  2  49 C0        	EOR	#%11000000		; FLIP POLARITY OF SHIFT/CTL BITS
008F8B  2  48                   PHA
008F8C  2  29 3F        	AND	#$3F			; STRIP SHIFT/CTL BITS FOR LOOKUP
008F8E  2  8D 7C 91     	STA     DSKY_TEMP_VAL
008F91  2  A2 00        	LDX	#0			; INDEX
008F93  2               DSKY_GETKEY1:
008F93  2  BD AF 8F             LDA     DSKY_KEYMAP,X
008F96  2  CD 7C 91     	CMP	DSKY_TEMP_VAL		; MATCH?
008F99  2  F0 09                BEQ     DSKY_GETKEY2		; FOUND, DONE
008F9B  2  E8           	INX
008F9C  2  E0 1C                CPX     #28
008F9E  2  D0 F3                BNE	DSKY_GETKEY1		; LOOP UNTIL EOT
008FA0  2               DSKY_GETKEY1A:
008FA0  2  68                   PLA
008FA1  2  A9 FF        	LDA	#$FF			; NOT FOUND ERR, RETURN $FF
008FA3  2  60           	RTS
008FA4  2               DSKY_GETKEY2:
008FA4  2               	; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
008FA4  2               	; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
008FA4  2  68           	PLA				; RESTORE RAW VALUE
008FA5  2  25 C0        	AND	%11000000		; ISOLATE SHIFT/CTRL BITS
008FA7  2  8D 7C 91             STA     DSKY_TEMP_VAL
008FAA  2  8A                   TXA
008FAB  2  0D 7C 91     	ORA	DSKY_TEMP_VAL		; COMBINE WITH INDEX VALUE
008FAE  2  60           	RTS
008FAF  2               ;
008FAF  2               ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
008FAF  2               ;
008FAF  2               DSKY_KEYMAP:
008FAF  2               	; POS	$00  $01  $02  $03  $04  $05  $06  $07
008FAF  2               	; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
008FAF  2  0D 04 0C 14  	.BYTE	$0D, $04, $0C, $14, $03, $0B, $13, $02
008FB3  2  03 0B 13 02  
008FB7  2               ;
008FB7  2               	; POS	$08  $09  $0A  $0B  $0C  $0D  $0E  $0F
008FB7  2               	; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
008FB7  2  0A 12 01 09  	.BYTE	$0A, $12, $01, $09, $11, $00, $08, $10
008FBB  2  11 00 08 10  
008FBF  2               ;
008FBF  2               	; POS	$10  $11  $12  $13  $14  $15  $16  $17
008FBF  2               	; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
008FBF  2  05 15 1D 1C  	.BYTE	$05, $15, $1D, $1C, $1B, $1A, $19, $18
008FC3  2  1B 1A 19 18  
008FC7  2               
008FC7  2               	; POS	$18  $19  $20  $21
008FC7  2               	; KEY   [F4] [F3] [F2] [F1]
008FC7  2  23 22 21 20  	.BYTE	$23, $22, $21, $20
008FCB  2               
008FCB  2               ;
008FCB  2                       .ENDIF	; DSKY_KBD
008FCB  2               ;
008FCB  2               ;__DSKY_BIN2SEG________________________________________________________________________________________
008FCB  2               ;
008FCB  2               ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
008FCB  2               ;
008FCB  2               ; DSKY_BUF: 32 BIT BINARY
008FCB  2               ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
008FCB  2               ;____________________________________________________________________________________________________
008FCB  2               ;
008FCB  2               DSKY_BIN2SEG:
008FCB  2  A2 00        	LDX	#$00
008FCD  2               DSKY_BIN2SEG1:
008FCD  2  BD 08 05     	LDA	DSKY_HEXBUF,X			; FIRST NIBBLE
008FD0  2  4A           	LSR	A
008FD1  2  4A                   LSR	A
008FD2  2  4A                   LSR	A
008FD3  2  4A                   LSR	A
008FD4  2  DA           	PHX                                     ; STORE READ INDEX
008FD5  2  AA                   TAX					; MOVE DIGIT TO LOOKUP INDEX
008FD6  2  BD 6C 91     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
008FD9  2  FA           	PLX                                     ; GET READ INDEX
008FDA  2  DA           	PHX
008FDB  2  48           	PHA
008FDC  2  8A           	TXA
008FDD  2  0A           	asl	a
008FDE  2  AA           	TAX
008FDF  2  68           	PLA
008FE0  2  9D 00 05             STA     DSKY_BUF,X    		        ;STORE HIGH BYTE IN OUT BUFFER
008FE3  2  FA           	PLX
008FE4  2  BD 08 05     	LDA	DSKY_HEXBUF,X			; SECOND NIBBLE
008FE7  2               
008FE7  2  29 0F        	AND	#$0F
008FE9  2  DA                   PHX
008FEA  2  AA                   TAX
008FEB  2  BD 6C 91     	LDA	DSKY_HEXMAP,X                   ; GET DECODED DIGIT INTO A
008FEE  2  FA           	PLX
008FEF  2  DA           	PHX
008FF0  2  48           	PHA
008FF1  2  8A           	TXA		                        ; GET READ INDEX
008FF2  2  0A           	asl	a
008FF3  2  AA           	TAX
008FF4  2  E8           	INX
008FF5  2  68           	PLA
008FF6  2  9D 00 05             STA     DSKY_BUF,X	                ;STORE HIGH BYTE IN OUT BUFFER
008FF9  2  FA           	PLX
008FFA  2  E8                   INX
008FFB  2  E0 04                CPX     #4
008FFD  2  D0 CE                BNE     DSKY_BIN2SEG1
008FFF  2  60           	RTS
009000  2               ;
009000  2               ;__DSKY_SHOW___________________________________________________________________________________________
009000  2               ; DSKY SHOW BUFFER
009000  2               ;______________________________________________________________________________________________________
009000  2               ;
009000  2               DSKY_SHOW:
009000  2  48                   PHA
009001  2  DA                   PHX
009002  2  5A                   PHY
009003  2  A2 00                LDX     #0
009005  2               DSKY_SHOW1:
009005  2  BD 00 05     	LDA     DSKY_BUF,X
009008  2  DA                   PHX
009009  2  7A                   PLY
00900A  2  20 96 90     	JSR	DSKY_PUTBYTE
00900D  2  E8           	INX
00900E  2  E0 08                CPX     #8
009010  2  D0 F3                BNE     DSKY_SHOW1
009012  2  7A                   PLY
009013  2  FA                   PLX
009014  2  68                   PLA
009015  2  60           	RTS
009016  2               
009016  2               ;______________________________________________________________________________________________________
009016  2               ; DSKYNG OUTPUT ROUTINES
009016  2               ;______________________________________________________________________________________________________
009016  2               
009016  2               ; SEND DSKY COMMAND BYTE IN REGISTER A
009016  2               DSKY_CMD:
009016  2  48                   PHA
009017  2  A9 01        	LDA	#$01
009019  2  4C 1F 90     	JMP	DSKY_DOUT2
00901C  2               ;
00901C  2               ; SEND DSKY DATA BYTE IN REGISTER A
00901C  2               ; TRASHES BC
00901C  2               ;
00901C  2               DSKY_DOUT:
00901C  2  48                   PHA
00901D  2  A9 00        	LDA	#$00
00901F  2               ;
00901F  2               DSKY_DOUT2:
00901F  2               	; SET PPI LINE CONFIG TO WRITE MODE
00901F  2  20 40 91     	JSR	DSKY_PPIWR
009022  2               ;
009022  2               	; SET ADDRESS FIRST
009022  2  09 06                ORA     #DSKY_PPI_IDLE
009024  2  8D 62 03     	STA	DSKY_PPIC
009027  2               ;
009027  2               	; ASSERT 8279 /CS
009027  2  09 18        	ORA     #%00011000
009029  2  8D 62 03     	STA	DSKY_PPIC
00902C  2               ;
00902C  2               	; PPIC WORKING VALUE TO DSKY_TEMP_VAL
00902C  2  8D 7C 91     	STA     DSKY_TEMP_VAL
00902F  2               ;
00902F  2               	; ASSERT DATA BYTE VALUE
00902F  2  68                   PLA
009030  2  8D 60 03     	STA	DSKY_PPIA
009033  2               ;
009033  2               	; PULSE /WR
009033  2  AD 7C 91             LDA     DSKY_TEMP_VAL
009036  2  29 FD                AND     #%11111101
009038  2  8D 62 03     	STA	DSKY_PPIC
00903B  2  EA           	NOP			; MAY NOT BE NEEDED
00903C  2  09 02                ORA     #%00000010
00903E  2  8D 62 03     	STA	DSKY_PPIC
009041  2               ;
009041  2               	; DEASSERT /CS
009041  2  29 E7                AND     #%11100111
009043  2  8D 62 03     	STA	DSKY_PPIC
009046  2               ;
009046  2               	; CLEAR ADDRESS BIT
009046  2  29 E6                AND     #%11100110
009048  2  8D 62 03     	STA	DSKY_PPIC
00904B  2               ;
00904B  2               	; DONE
00904B  2  20 69 91     	JSR	DSKY_PPIIDLE
00904E  2  60           	RTS
00904F  2               ;
00904F  2               ;==================================================================================================
00904F  2               ; DSKYNG OUTPUT ROUTINES
00904F  2               ;==================================================================================================
00904F  2               ;
00904F  2               ; RETURN DSKY STATUS VALUE IN A
00904F  2               ;
00904F  2               DSKY_ST:
00904F  2  A9 01        	LDA	#$01
009051  2  4C 56 90     	JMP	DSKY_DIN2
009054  2               ;
009054  2               ; RETURN NEXT DATA VALUE IN A
009054  2               ;
009054  2               DSKY_DIN:
009054  2  A9 00        	LDA	#$00
009056  2               ;
009056  2               DSKY_DIN2:
009056  2               	; SET PPI LINE CONFIG TO READ MODE
009056  2  20 57 91     	JSR	DSKY_PPIRD
009059  2               ;
009059  2               	; SET ADDRESS FIRST
009059  2  09 06        	ORA	#DSKY_PPI_IDLE
00905B  2  8D 62 03     	STA	DSKY_PPIC
00905E  2               ;
00905E  2               	; ASSERT 8279 /CS
00905E  2  09 18        	ORA     #%00011000
009060  2  8D 62 03     	STA	DSKY_PPIC
009063  2               ;
009063  2               	; ASSERT /RD
009063  2  29 7B        	AND     #%01111011
009065  2  8D 62 03     	STA	DSKY_PPIC
009068  2               ;
009068  2  8D 7C 91     	STA 	DSKY_TEMP_VAL
00906B  2               	; GET VALUE
00906B  2  AD 60 03     	LDA	DSKY_PPIA
00906E  2  48                   PHA
00906F  2               
00906F  2  AD 7C 91     	LDA 	DSKY_TEMP_VAL
009072  2               	; DEASSERT /RD
009072  2  09 04        	ORA     #%00000100
009074  2  8D 62 03     	STA	DSKY_PPIC
009077  2               ;
009077  2               	; DEASSERT /CS
009077  2  29 E7                AND     #%11100111
009079  2  8D 62 03     	STA	DSKY_PPIC
00907C  2               ;
00907C  2               	; CLEAR ADDRESS BIT
00907C  2  29 E6                AND     #%11100110
00907E  2  8D 62 03     	STA	DSKY_PPIC
009081  2               ;
009081  2               	; DONE
009081  2  20 69 91     	JSR	DSKY_PPIIDLE
009084  2  68                   PLA
009085  2  60           	RTS
009086  2               
009086  2               ;__DSKY_BLANK_____________________________________________________________________________________
009086  2               ;
009086  2               ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
009086  2               ;
009086  2               ;_________________________________________________________________________________________________
009086  2               ;
009086  2               DSKY_BLANK:
009086  2  A9 90        	LDA	#DSKY_CMD_WDSP
009088  2  20 16 90     	JSR	DSKY_CMD
00908B  2  A2 10        	LDX	#16
00908D  2               DSKY_BLANK1:
00908D  2  A9 FF        	LDA	#$FF
00908F  2  20 1C 90     	JSR	DSKY_DOUT
009092  2  CA                   DEX
009093  2  D0 F8        	BNE	DSKY_BLANK1
009095  2  60           	RTS
009096  2               ;
009096  2               ;__DSKY_PUTBYTE____________________________________________________________________________________
009096  2               ;
009096  2               ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
009096  2               ; AT LOCATION IN REGISTER Y, VALUE IN A.
009096  2               ;
009096  2               ;__________________________________________________________________________________________________
009096  2               ;
009096  2               DSKY_PUTBYTE:
009096  2  5A                   PHY
009097  2  48                   PHA
009098  2  48                   PHA
009099  2  18           	CLC
00909A  2  98                   TYA
00909B  2  69 90        	ADC	#DSKY_CMD_WDSP
00909D  2  A8                   TAY
00909E  2  20 16 90     	JSR	DSKY_CMD
0090A1  2  68                   PLA
0090A2  2  49 FF        	EOR	#$FF
0090A4  2  20 1C 90     	JSR	DSKY_DOUT
0090A7  2  68                   PLA
0090A8  2  7A                   PLY
0090A9  2  60           	RTS
0090AA  2               ;
0090AA  2               ;__DSKY_GETBYTE___________________________________________________________________________________
0090AA  2               ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
0090AA  2               ; AT LOCATION IN REGISTER Y, VALUE RETURNED IN A
0090AA  2               ;
0090AA  2               ;_________________________________________________________________________________________________
0090AA  2               ;
0090AA  2               DSKY_GETBYTE:
0090AA  2  18           	CLC
0090AB  2  98                   TYA
0090AC  2  69 70        	ADC	#DSKY_CMD_RDSP
0090AE  2  A8                   TAY
0090AF  2  20 16 90     	JSR	DSKY_CMD
0090B2  2  20 54 90     	JSR	DSKY_DIN
0090B5  2  49 FF        	EOR	#$FF
0090B7  2  60           	RTS
0090B8  2               
0090B8  2               ;
0090B8  2               ;__DSKY_PUTLED____________________________________________________________________________________
0090B8  2               ;
0090B8  2               ;	This function is intended to update the LEDs.
0090B8  2               ;	VALUES SHOULD BE IN DSKY_BUF
0090B8  2               ;_________________________________________________________________________________________________
0090B8  2               ;
0090B8  2               DSKY_PUTLED:
0090B8  2  DA           	PHX
0090B9  2  5A           	PHY
0090BA  2  48           	PHA
0090BB  2  A0 00        	LDY 	#$00
0090BD  2  A2 00        	LDX 	#$00
0090BF  2               DSKY_PUTLED_1:
0090BF  2  BD 00 05             LDA     DSKY_BUF,X              ; GET BYTE
0090C2  2  20 96 90     	JSR	DSKY_PUTBYTE            ; SEND IT TO DSKY
0090C5  2  C8                   INY                             ; LOOP TIL DONE
0090C6  2  E8           	INX
0090C7  2  C0 08                CPY     #8
0090C9  2  D0 F4                BNE     DSKY_PUTLED_1
0090CB  2  68                   PLA                             ; RESTORE REGISTERS
0090CC  2  7A                   PLY
0090CD  2  FA                   PLX
0090CE  2  60           	RTS
0090CF  2               ;
0090CF  2               ;__DSKY_BEEP______________________________________________________________________________________
0090CF  2               ;	This function is intended to beep the speaker on the DSKY
0090CF  2               ;_________________________________________________________________________________________________
0090CF  2               ;
0090CF  2               DSKY_BEEP:
0090CF  2  5A           	PHY
0090D0  2  DA                   PHX
0090D1  2  48           	PHA
0090D2  2  A0 0F        	LDY 	#$0F
0090D4  2  20 AA 90     	JSR	DSKY_GETBYTE
0090D7  2  09 20        	ORA 	#$20
0090D9  2  A9 20        			LDA 	#$20
0090DB  2  A0 0F        	LDY	#$0F
0090DD  2  20 96 90     	JSR	DSKY_PUTBYTE
0090E0  2               
0090E0  2               ;;; 	timer . . .
0090E0  2  A2 8F        	LDX 	#$8F
0090E2  2  A0 FF                LDY     #$FF
0090E4  2               DSKY_BEEP1:
0090E4  2  88                   DEY
0090E5  2  D0 FD                BNE     DSKY_BEEP1
0090E7  2  CA                   DEX
0090E8  2  D0 FA                BNE     DSKY_BEEP1
0090EA  2               
0090EA  2  A0 0F        	LDY 	#$0F
0090EC  2  20 AA 90     	JSR	DSKY_GETBYTE
0090EF  2  29 DF        	AND 	#$DF
0090F1  2  A9 DF        			LDA 	#$DF
0090F3  2  A0 0F        	LDY	#$0F
0090F5  2  20 96 90     	JSR	DSKY_PUTBYTE
0090F8  2               
0090F8  2  68                   PLA
0090F9  2  FA                   PLX
0090FA  2  7A                   PLY
0090FB  2  60           	RTS
0090FC  2               ;
0090FC  2               ;__DSKY_L1ON______________________________________________________________________________________
0090FC  2               ;	This function is intended to turn on DSKY L1
0090FC  2               ;_________________________________________________________________________________________________
0090FC  2               ;
0090FC  2               DSKY_L1ON:
0090FC  2  5A           	PHY
0090FD  2  48           	PHA
0090FE  2  A0 0D        	LDY 	#$0D
009100  2  20 AA 90     	JSR	DSKY_GETBYTE
009103  2  09 20        	ORA 	#$20
009105  2  A0 0D        	LDY	#$0D
009107  2  20 96 90     	JSR	DSKY_PUTBYTE
00910A  2  68           	PLA
00910B  2  7A                   PLY
00910C  2  60           	RTS
00910D  2               ;
00910D  2               ;__DSKY_L2ON______________________________________________________________________________________
00910D  2               ;	This function is intended to turn on DSKY L2
00910D  2               ;_________________________________________________________________________________________________
00910D  2               ;
00910D  2               DSKY_L2ON:
00910D  2  5A           	PHY
00910E  2  48           	PHA
00910F  2  A0 0E        	LDY 	#$0E
009111  2  20 AA 90     	JSR	DSKY_GETBYTE
009114  2  09 20        	ORA 	#$20
009116  2  A0 0E        	LDY	#$0E
009118  2  20 96 90     	JSR	DSKY_PUTBYTE
00911B  2  68           	PLA
00911C  2  7A                   PLY
00911D  2  60           	RTS
00911E  2               ;
00911E  2               ;__DSKY_L1OFF_____________________________________________________________________________________
00911E  2               ;	This function is intended to turn off DSKY L1
00911E  2               ;_________________________________________________________________________________________________
00911E  2               ;
00911E  2               DSKY_L1OFF:
00911E  2  5A           	PHY
00911F  2  48           	PHA
009120  2  A0 0D        	LDY 	#$0D
009122  2  20 AA 90     	JSR	DSKY_GETBYTE
009125  2  29 DF        	AND 	#$DF
009127  2  A0 0D        	LDY	#$0D
009129  2  20 96 90     	JSR	DSKY_PUTBYTE
00912C  2  68           	PLA
00912D  2  7A                   PLY
00912E  2  60           	RTS
00912F  2               ;
00912F  2               ;__DSKY_L2OFF_____________________________________________________________________________________
00912F  2               ;	This function is intended to turn off DSKY L2
00912F  2               ;_________________________________________________________________________________________________
00912F  2               ;
00912F  2               DSKY_L2OFF:
00912F  2  5A           	PHY
009130  2  48           	PHA
009131  2  A0 0E        	LDY 	#$0E
009133  2  20 AA 90     	JSR	DSKY_GETBYTE
009136  2  29 DF        	AND 	#$DF
009138  2  A0 0E        	LDY	#$0E
00913A  2  20 96 90     	JSR	DSKY_PUTBYTE
00913D  2  68           	PLA
00913E  2  7A                   PLY
00913F  2  60           	RTS
009140  2               ;
009140  2               ;_________________________________________________________________________________________________
009140  2               ; DSKYNG LINE CONTROL ROUTINES
009140  2               ;
009140  2               ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
009140  2               ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
009140  2               ;
009140  2               ;_________________________________________________________________________________________________
009140  2               ;
009140  2               DSKY_PPIWR:
009140  2  48           	PHA
009141  2               ;
009141  2               	; CHECK FOR WRITE MODE
009141  2  AD 7D 91     	LDA     DSKY_PPIX_VAL
009144  2  C9 82        	CMP	#DSKY_PPIX_WR
009146  2  F0 0D        	BEQ	DSKY_PPIWR1
009148  2               ;
009148  2               	; SET PPI TO WRITE MODE
009148  2  A9 82        	LDA	#DSKY_PPIX_WR
00914A  2  8D 63 03     	STA	DSKY_PPIX
00914D  2  8D 7D 91     	STA	DSKY_PPIX_VAL
009150  2               ;
009150  2               	; RESTORE PORT C (MAY NOT BE NEEDED)
009150  2  A9 06        	LDA     #DSKY_PPI_IDLE
009152  2  8D 62 03     	STA	DSKY_PPIC
009155  2               ;
009155  2               DSKY_PPIWR1:
009155  2               ;
009155  2  68           	PLA
009156  2  60           	RTS
009157  2               ;
009157  2               ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
009157  2               ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
009157  2               ;
009157  2               DSKY_PPIRD:
009157  2  48           	PHA
009158  2               ;
009158  2               	; CHECK FOR READ MODE
009158  2  AD 7D 91     	LDA	DSKY_PPIX_VAL
00915B  2  C9 92        	CMP	#DSKY_PPIX_RD
00915D  2  F0 08        	BEQ	DSKY_PPIRD1
00915F  2               ;
00915F  2               	; SET PPI TO READ MODE
00915F  2  A9 92        	LDA	#DSKY_PPIX_RD
009161  2  8D 63 03     	STA	DSKY_PPIX
009164  2  8D 7D 91     	STA	DSKY_PPIX_VAL
009167  2               ;
009167  2               DSKY_PPIRD1:
009167  2  68           	PLA
009168  2  60           	RTS
009169  2               ;
009169  2               ; RELEASE USE OF PPI
009169  2               ;
009169  2               DSKY_PPIIDLE:
009169  2  4C 57 91     	JMP	DSKY_PPIRD		; SAME AS READ MODE
00916C  2               ;
00916C  2               ;__STORAGE_________________________________________________________________________________________
00916C  2               ; CODES FOR NUMERICS
00916C  2               ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
00916C  2               ; SET HIGH BIT TO SHOW DECIMAL POINT
00916C  2               ;_________________________________________________________________________________________________
00916C  2               ;
00916C  2               DSKY_HEXMAP:
00916C  2  3F           	.BYTE	$3F	; 0
00916D  2  06           	.BYTE	$06	; 1
00916E  2  5B           	.BYTE	$5B	; 2
00916F  2  4F           	.BYTE	$4F	; 3
009170  2  66           	.BYTE	$66	; 4
009171  2  6D           	.BYTE	$6D	; 5
009172  2  7D           	.BYTE	$7D	; 6
009173  2  07           	.BYTE	$07	; 7
009174  2  7F           	.BYTE	$7F	; 8
009175  2  67           	.BYTE	$67	; 9
009176  2  77           	.BYTE	$77	; A
009177  2  7C           	.BYTE	$7C	; B
009178  2  39           	.BYTE	$39	; C
009179  2  5E           	.BYTE	$5E	; D
00917A  2  79           	.BYTE	$79	; E
00917B  2  71           	.BYTE	$71	; F
00917C  2               ;
00917C  2  00           DSKY_TEMP_VAL:	.BYTE	0
00917D  2  00           DSKY_PPIX_VAL:	.BYTE	0
00917E  2  00           DSKY_PRESENT:	.BYTE	0
00917F  2               
00917F  1               		.INCLUDE "dosmd.asm"
00917F  2               ;__MD DRIVERS____________________________________________________________________________________________________________________
00917F  2               ;
00917F  2               ; 	Nhyodyne Memory disk drivers
00917F  2               ;
00917F  2               ;	Entry points:
00917F  2               ;		MD_SHOW         - called during OS init
00917F  2               ;		MD_READ_SECTOR  - read a sector from drive
00917F  2               ;		MD_WRITE_SECTOR - write a sector to drive
00917F  2               ;________________________________________________________________________________________________________________________________
00917F  2               ;
00917F  2               ; RAM BANK $0C is RAM area for Drivers
00917F  2               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
00917F  2               ; RAM BANK $0F is fixed bank $0000-$7FFF
00917F  2               ;
00917F  2               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
00917F  2               ;
00917F  2               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
00917F  2               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
00917F  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00917F  2               ;	^ ^ ^ ^  ^ ^ ^ ^
00917F  2               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
00917F  2               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
00917F  2               ;
00917F  2               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
00917F  2               ;
00917F  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
00917F  2               ;	^ ^ ^ ^  ^ ^ ^ ^
00917F  2               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
00917F  2               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
00917F  2               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
00917F  2               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
00917F  2               
00917F  2               
00917F  2               ;__MD_SHOW___________________________________________________________________________________________
00917F  2               ;
00917F  2               ;  Display info on MD devices
00917F  2               ;____________________________________________________________________________________________________
00917F  2               ;
00917F  2               MD_SHOW:
00917F  2                       PRTDBG "MD INIT:$"
00917F  2  48 DA 5A A2          PRTS "MD: UNITS=2 RAMDISK=256KB ROMDISK=384KB$"
009183  2  00 BD 98 91  
009187  2  E8 C9 24 F0  
0091C0  2  20 6B 88            	JSR	NEWLINE
0091C3  2  60                   rts
0091C4  2               
0091C4  2               ;*__MD_READ_SECTOR____________________________________________________________________________________
0091C4  2               ;*
0091C4  2               ;*  READ MD SECTOR INTO BUFFER
0091C4  2               ;*
0091C4  2               ;*____________________________________________________________________________________________________
0091C4  2               MD_READ_SECTOR:
0091C4  2               		PRTDBG "MD Read Sector$"
0091C4  2  20 B6 92                     JSR     GET_DRIVE_DEVICE
0091C7  2  29 01        		and 	#$01			; only want drive cfg
0091C9  2  0A           		asl	a			; SHIFT 6
0091CA  2  0A           		asl	a			;
0091CB  2  0A           		asl	a			;
0091CC  2  0A              		asl	a			;
0091CD  2  0A           		asl	a			;
0091CE  2  0A           		asl	a			;
0091CF  2  29 5F        		AND 	#%01011111              ; TOGGLE READ
0091D1  2  AA                           TAX                             ; STASH CONTROL WORD
0091D2  2  AD 0E 05                     LDA	seksec			;
0091D5  2  29 01                	AND	#$01			; GET SECTOR INDEX
0091D7  2  C9 00                        CMP     #$00
0091D9  2  F0 04                        BEQ     @1
0091DB  2  8A                           TXA
0091DC  2  09 80                        ORA 	#%10000000              ; TOGGLE TOP HALF OF PAGE
0091DE  2  AA                           TAX
0091DF  2               @1:
0091DF  2  20 29 92                     JSR     MD_CONVERT_SECTOR
0091E2  2  8A                           txa
0091E3  2  29 40                        and     #%01000000
0091E5  2  C9 00                        cmp     #$00                    ; read if ram
0091E7  2  F0 0C                        BEQ     :+
0091E9  2  EE 10 05                     inc     debcyll                 ; if rom, inc bank by 4 ()
0091EC  2  EE 10 05                     inc     debcyll
0091EF  2  EE 10 05                     inc     debcyll
0091F2  2  EE 10 05                     inc     debcyll
0091F5  2               :
0091F5  2  AD 10 05       	        LDA    	debcyll			; GET BANK
0091F8  2  AC 12 05     		LDY    	debsehd			; GET PAGE
0091FB  2                               PRTDBG "DO PAGER RD$"
0091FB  2  20 00 02                     JSR     MD_PAGERA
0091FE  2                               PRTDBG "PAGER RETURN$"
0091FE  2  A9 00                        LDA     #$00
009200  2  60           		RTS
009201  2               
009201  2               
009201  2               ;*__MD_WRITE_SECTOR___________________________________________________________________________________
009201  2               ;*
009201  2               ;*  WRITE MD SECTOR FROM BUFFER
009201  2               ;*
009201  2               ;*____________________________________________________________________________________________________
009201  2               MD_WRITE_SECTOR:
009201  2               		PRTDBG "MD Write Sector$"
009201  2  20 B6 92                     JSR     GET_DRIVE_DEVICE
009204  2  29 01        		and 	#$01			; only want drive cfg
009206  2  C9 00                        CMP     #$00                    ; NO WRITE FOR ROM
009208  2  F0 03                        BEQ     MD_WRITE_SECTOR_RAM
00920A  2  A9 FF                        LDA     #$FF
00920C  2  60                           RTS
00920D  2               MD_WRITE_SECTOR_RAM:
00920D  2  20 29 92                     JSR     MD_CONVERT_SECTOR
009210  2  A2 20        		LDX 	#%00100000              ; TOGGLE WRITE RAM (LO)
009212  2  AD 0E 05                     LDA	seksec			;
009215  2  29 01                	AND	#$01			; GET SECTOR INDEX
009217  2  C9 00                        CMP     #$00
009219  2  F0 02                        BEQ     @1
00921B  2  A2 A0        		LDX 	#%10100000              ; TOGGLE WRITE RAM (HI)
00921D  2               @1:
00921D  2  AD 10 05      	        LDA    	debcyll			; GET BANK
009220  2  AC 12 05     		LDY    	debsehd			; GET PAGE
009223  2                               PRTDBG "DO PAGER WR$"
009223  2  20 00 02                     JSR     MD_PAGERA
009226  2                               PRTDBG "PAGER RETURN$"
009226  2  A9 00                        LDA     #$00
009228  2  60           		RTS
009229  2               
009229  2               ;___MD_CONVERT_SECTOR___________________________________________________________________________________
009229  2               ;
009229  2               ; 	TRANSLATE SECTORS INTO MD FORMAT
009229  2               ;________________________________________________________________________________________________________
009229  2               MD_CONVERT_SECTOR:
009229  2                       PRTDBG "CONVERT SECTOR$"
009229  2  DA                   phx
00922A  2  AD 0E 05     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
00922D  2  4A           	LSR	A			; DIVIDE BY 2 (FOR BLOCKING)
00922E  2  29 1F        	AND 	#$1F 			; CLEAR UPPER 3 BITS (JUST 'CAUSE)
009230  2  8D 12 05     	STA	debsehd			; STORE IN SECTOR/HEAD
009233  2  AD 0C 05     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
009236  2  29 03        	AND 	#$03			; BOTTOM 2 BITS ARE PART OF PAGE (PAGES ARE 32k)
009238  2  0A           	asl	a			; MOVE TO HIGH BITS
009239  2  0A           	asl	a
00923A  2  0A           	asl	a
00923B  2  0A           	asl	a
00923C  2  0A                  	asl	a
00923D  2  09 80                ORA     #$80                    ; PAGES ARE ALWAYS IN UPPER BANK
00923F  2  0D 12 05     	ORA	debsehd			; STORE IN SECTOR/HEAD
009242  2  8D 12 05             STA     debsehd                 ; STORE IN SECTOR/HEAD
009245  2                                                       ; AT THIS POINT PAGE REGISTER SHOULD BE
009245  2                                                       ; SET
009245  2  AD 0C 05     	LDA	sektrk			; LOAD TRACK #
009248  2  4A                  	LSR	a			; LOSE BOTTOM TWO BITS
009249  2  4A           	LSR	a
00924A  2  8D 10 05     	STA	debcyll			; THIS SHOULD BE BANK#
00924D  2               
00924D  2               
00924D  2                 .IF USEDSKY=1 || USEDSKYNG=1
00924D  2                 	PRTDBG "DSKY OUTPUT 1$"
00924D  2  AD 13 05       	lda	sekdsk
009250  2  8D 08 05       	sta	DSKY_HEXBUF
009253  2  A9 00         	lda	#$00
009255  2  8D 09 05       	sta	DSKY_HEXBUF+1
009258  2  AD 10 05      	lda	debcyll
00925B  2  8D 0A 05       	sta	DSKY_HEXBUF+2
00925E  2  AD 12 05         	lda	debsehd
009261  2  8D 0B 05       	sta	DSKY_HEXBUF+3
009264  2  20 CB 8F             jsr     DSKY_BIN2SEG
009267  2  20 00 90             jsr     DSKY_SHOW
00926A  2                 .ENDIF
00926A  2  FA                   plx
00926B  2  60           	RTS
00926C  2               
00926C  1               		.INCLUDE "dosdblk.asm"
00926C  2               ;__DOS DEBLOCK DRIVERS___________________________________________________________________________________________________________
00926C  2               ;
00926C  2               ; 	Nhyodyne DOS/65 Blocking and Deblocking code
00926C  2               ;
00926C  2               ;________________________________________________________________________________________________________________________________
00926C  2               ;
00926C  2               
00926C  2               ;___DEBSECR512________________________________________________________________________________________
00926C  2               ;
00926C  2               ;	DEBLOCK 512 BYTE SECTOR FOR DOS/65
00926C  2               ;
00926C  2               ;________________________________________________________________________________________________________
00926C  2               DEBSECR512:
00926C  2  48           	PHA
00926D  2  AD 0E 05     	LDA	seksec			;
009270  2  29 03        	AND	#$03			; GET SECTOR INDEX
009272  2  18           	CLC				;
009273  2  2A           	ROL	A			;
009274  2  AA           	TAX				;
009275  2  BD 8D 92     	LDA	DEBTAB,X		;
009278  2  85 EE        	STA     SRC
00927A  2  E8           	INX
00927B  2  BD 8D 92     	LDA	DEBTAB,X		;
00927E  2  85 EF        	STA	SRC+1			;
009280  2  A9 00        	LDA	#<MD_PAGEBU		;
009282  2  85 EC        	STA	DEST			;
009284  2  A9 04        	LDA	#>MD_PAGEBU           	;
009286  2  85 ED        	STA	DEST+1			;
009288  2  20 C3 92     	JSR	COPY_DOS_SECTOR		;
00928B  2  68           	PLA
00928C  2  60           	RTS
00928D  2               
00928D  2               DEBTAB:
00928D  2  D2 92        	.word	hstbuf			;
00928F  2  52 93        	.word	hstbuf+128		;
009291  2  D2 93        	.word	hstbuf+256		;
009293  2  52 94        	.word	hstbuf+384		;
009295  2               
009295  2               
009295  2               ;___BLKSECR512___________________________________________________________________________________________
009295  2               ;
009295  2               ;	BLOCK 512 SECTOR FOR DOS/65
009295  2               ;
009295  2               ;________________________________________________________________________________________________________
009295  2               BLKSECR512:
009295  2  48           	PHA
009296  2  AD 0E 05     	LDA	seksec			;
009299  2  29 03        	AND	#$03			; GET SECTOR INDEX
00929B  2  18           	CLC				;
00929C  2  2A           	ROL	A			;
00929D  2  AA           	TAX				;
00929E  2  BD 8D 92     	LDA	DEBTAB,X		;
0092A1  2  85 EC        	STA     DEST
0092A3  2  E8           	INX
0092A4  2  BD 8D 92     	LDA	DEBTAB,X		;
0092A7  2  85 ED        	STA	DEST+1			;
0092A9  2  A9 00        	LDA	#<MD_PAGEBU		;
0092AB  2  85 EE        	STA	SRC			;
0092AD  2  A9 04        	LDA	#>MD_PAGEBU		;
0092AF  2  85 EF        	STA	SRC+1			;
0092B1  2  20 C3 92     	JSR	COPY_DOS_SECTOR		;
0092B4  2  68           	PLA
0092B5  2  60           	RTS
0092B6  2               
0092B6  2               ;___GET_DRIVE_DEVICE_____________________________________________________________________________________
0092B6  2               ;
0092B6  2               ;	GET SELECTED DEVICE TYPE AND UNIT, RETURN IN "A"
0092B6  2               ;
0092B6  2               ;________________________________________________________________________________________________________
0092B6  2               GET_DRIVE_DEVICE:
0092B6  2  DA           	PHX
0092B7  2  AD 13 05     	LDA	sekdsk			; GET DRIVE
0092BA  2  29 07        	AND 	#7			; ONLY FIRST 8 DEVICES SUPPORTED
0092BC  2  0A           	asl	a			; DOUBLE NUMBER FOR TABLE LOOKUP
0092BD  2  AA           	TAX 				; MOVE TO X REGISTER
0092BE  2  BD 14 05     	LDA 	dskcfg,X 		; GET device
0092C1  2  FA           	PLX
0092C2  2  60           	RTS
0092C3  2               
0092C3  2               
0092C3  2               ;___COPY_DOS_SECTOR______________________________________________________________________________________
0092C3  2               ;
0092C3  2               ;	COPY 128 BYTE SECTOR FOR DOS/65
0092C3  2               ;
0092C3  2               ;________________________________________________________________________________________________________
0092C3  2               COPY_DOS_SECTOR:
0092C3  2  5A           	PHY
0092C4  2  A0 00        	LDY	#$00			;
0092C6  2               COPY_DOS_SECTOR1:
0092C6  2  B1 EE        	LDA	(SRC),Y			;
0092C8  2  91 EC        	STA	(DEST),Y		;
0092CA  2  C8           	INY				;
0092CB  2  98           	TYA				;
0092CC  2  C9 80        	CMP	#$80			;
0092CE  2  D0 F6        	BNE	COPY_DOS_SECTOR1	;
0092D0  2  7A           	PLY
0092D1  2  60           	RTS
0092D2  2               
0092D2  2               
0092D2  2               ;deblocking buffer for dba
0092D2  2  xx xx xx xx  hstbuf:		.res	512		;256 or 512 byte sectors
0092D6  2  xx xx xx xx  
0092DA  2  xx xx xx xx  
0094D2  2               
0094D2  1               		.INCLUDE "dosflp.asm"
0094D2  2               ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
0094D2  2               ;
0094D2  2               ; 	DOS/65 floppy drivers for direct attached disk-io V3 card
0094D2  2               ;
0094D2  2               ;	Entry points:
0094D2  2               ;		FL_SETUP        - called during OS init
0094D2  2               ;		FL_READ_SECTOR	- read a sector from drive
0094D2  2               ;		FL_WRITE_SECTOR	- write a sector to drive
0094D2  2               ;
0094D2  2               ;________________________________________________________________________________________________________________________________
0094D2  2               ;
0094D2  2               ;*
0094D2  2               ;* HARDWARE I/O ADDRESSES
0094D2  2               ;*
0094D2  2               FDC_MSR		=	$0330		; ADDRESS OF MAIN STATUS REGISTER
0094D2  2               FDC_DATA	=	$0331		; FLOPPY DATA REGISTER
0094D2  2               FDC_RESET	=	$0333		; FLOPPY RESET
0094D2  2               FDC_DCR		=	$0335		; LOAD CONTROL REGISTER
0094D2  2               FDC_DOR		=   $0336		; CONFIGURATION CONTROL REGISTER
0094D2  2               FDC_TC		=	$0337		; TERMINAL COUNT
0094D2  2               
0094D2  2               ;
0094D2  2               ; FDC COMMANDS
0094D2  2               ;
0094D2  2               CFD_READ	=	%00000110	; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_READDEL	=	%00001100	; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_WRITE	=	%00000101	; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_WRITEDEL=	%00001001	; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_READTRK	=	%00000010	; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_READID	=	%00001010	; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_FMTTRK	=	%00001101	; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_SCANEQ	=	%00010001	; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_SCANLOEQ=	%00011001	; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_SCANHIEQ=	%00011101	; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
0094D2  2               CFD_RECAL	=	%00000111	; CMD,DS --> <EMPTY>
0094D2  2               CFD_SENSEINT=	%00001000	; CMD --> ST0,PCN
0094D2  2               CFD_SPECIFY	=	%00000011	; CMD,SRT/HUT,HLT/ND --> <EMPTY>
0094D2  2               CFD_DRVSTAT	=	%00000100	; CMD,HDS/DS --> ST3
0094D2  2               CFD_SEEK	=	%00001111	; CMD,HDS/DS --> <EMPTY>
0094D2  2               CFD_VERSION	=	%00010000	; CMD --> ST0
0094D2  2               
0094D2  2               CFD_MFM	    =	%01000000	;
0094D2  2               
0094D2  2               ;
0094D2  2               ;
0094D2  2               ; Specify Command:
0094D2  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0094D2  2               ; |Byte |  7  |	 6  |  5  |  4	|  3  |	 2  |  1  |  0	|
0094D2  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0094D2  2               ; |  0	|  0  |	 0  |  0  |  0	|  0  |	 0  |  1  |  1	|
0094D2  2               ; |  1	| ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
0094D2  2               ; |  2	| ------------ HEAD LOAD TIME ----------- | NDM |
0094D2  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
0094D2  2               ;
0094D2  2               ;
0094D2  2               ; Step Rate (milliseconds):		 Head Unload Time (milliseconds):	Head Load Time (milliseconds):
0094D2  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0094D2  2               ; |	 |	   BITRATE	     |	 |	|	  BITRATE	    |	|      |	 BITRATE	   |
0094D2  2               ; |  VAL | 1.0M | 500K | 300K | 250K |	 |  VAL | 1.0M | 500K | 300K | 250K |	|  VAL | 1.0M | 500K | 300K | 250K |
0094D2  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0094D2  2               ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |	 |    0 |  128 |  256 |	 426 |	512 |	|    0 |  128 |	 256 |	426 |  512 |
0094D2  2               ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |	 |    1 |    8 |   16 | 26.7 |	 32 |	|    1 |    1 |	   2 |	3.3 |	 4 |
0094D2  2               ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |	 |    2 |   16 |   32 | 53.3 |	 64 |	|    2 |    2 |	   4 |	6.7 |	 8 |
0094D2  2               ; |  ... |  ... |  ... |  ... |	 ... |	 |  ... |  ... |  ... |	 ... |	... |	|  ... |  ... |	 ... |	... |  ... |
0094D2  2               ; |   14 |  1.0 |  2.0 |  3.3 |	 4.0 |	 |   14 |  112 |  224 |	 373 |	448 |	|  126 |  126 |	 252 |	420 |  504 |
0094D2  2               ; |   15 |  0.5 |  1.0 |  1.7 |	 2.0 |	 |   15 |  120 |  240 |	 400 |	480 |	|  127 |  127 |	 254 |	423 |  508 |
0094D2  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
0094D2  2               ;
0094D2  2               ; IBM PS/2 CALLS FOR:
0094D2  2               ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
0094D2  2               ;   HEAD LOAD TIME: 15ms
0094D2  2               
0094D2  2               
0094D2  2               
0094D2  2               ; DOR BITS (3AH)
0094D2  2               ;
0094D2  2               ;	DISKIO			250KBPS		500KBPS
0094D2  2               ;	-------			-------		-------
0094D2  2               ;D7	/DC/RDY			1 (N/A)		1 (N/A)
0094D2  2               ;D6	/REDWC (DENSITY)	0 (DD)		1 (HD)
0094D2  2               ;D5	P0* (PRECOMP BIT 0)	1 \		0 \
0094D2  2               ;D4	P1* (PRECOMP BIT 1)	0 (125NS)	1 (125NS)
0094D2  2               ;D3	P2* (PRECOMP BIT 2)	0 /		0 /
0094D2  2               ;D2	MINI (BITRATE)		1 (250KBPS)	0 (500KBPS)
0094D2  2               ;D1	/MOTOR (ACTIVE LO)	1 (OFF)		1 (OFF)
0094D2  2               ;D0	TC (TERMINAL COUNT)	0 (OFF)		0 (OFF)
0094D2  2               ;
0094D2  2               FDREADY		=	%10000000	; BIT PATTERN IN LATCH TO FLOPPY READY (P-34):
0094D2  2               FDDENSITY	=	%01000000	; BIT PATTERN IN LATCH TO FLOPPY LOW DENSITY (HIGH IS 1)
0094D2  2               FDPRECOMP	=	%00100000	; BIT PATTERN IN LATCH TO SET WRITE PRECOMP
0094D2  2               FDPRECOMP1	=	%00010000	; BIT PATTERN IN LATCH TO SET WRITE PRECOMP
0094D2  2               FDPRECOMP2	=	%00001000	; BIT PATTERN IN LATCH TO SET WRITE PRECOMP
0094D2  2               FDMINI		=	%00000100	; BIT PATTERN IN LATCH TO SET MINI MODE FDC9229 LOW DENS=1, HIGH DENS=0
0094D2  2               FDMOTOR_ON	=	%00000010	; BIT PATTERN IN LATCH FOR MOTOR CONTROL (ON)
0094D2  2               FDTERMCN	=	%00000001	; BIT PATTERN IN LATCH TO WRITE A TC STROBE
0094D2  2               FDRESETL	=	%00000000	; BIT PATTERN IN LATCH TO RESET ALL BITS
0094D2  2               
0094D2  2               FDMOTOR_OFF	=	%11111101	; BIT PATTERN IN LATCH FOR MOTOR CONTROL (OFF)
0094D2  2               
0094D2  2               DOR_BR250	=	FDREADY | FDPRECOMP | FDMINI
0094D2  2               DOR_BR500	=	FDREADY | FDDENSITY | FDPRECOMP1
0094D2  2               DOR_INIT        =       DOR_BR250
0094D2  2               
0094D2  2               FLOPPY_RETRIES  =       6               ; HOW ABOUT SIX RETIRES?
0094D2  2               FLOPPY_RETRIES1 =       2               ; TWO ITERATIONS OF RECAL?
0094D2  2               
0094D2  2               ;__FL_SETUP______________________________________________________________________________________________________________________
0094D2  2               ;
0094D2  2               ;	SETUP FLOPPY DRIVE SETTINGS
0094D2  2               ;________________________________________________________________________________________________________________________________
0094D2  2               ;
0094D2  2               FL_SETUP:
0094D2  2  A9 00        	LDA	#$00                    ; RESET TRACK/CYL/SEC STORAGE
0094D4  2  8D 54 99     	STA	debhead                 ;
0094D7  2  8D 55 99     	STA	debcyl                  ;
0094DA  2  8D 56 99     	STA	debsec                  ;
0094DD  2  A9 FF        	LDA	#$FF			; SET CACHE TO INVALID
0094DF  2  8D 57 99     	STA	Cdebhead		;
0094E2  2  8D 58 99     	STA	Cdebcyl			;
0094E5  2  8D 59 99     	STA	Cdebsec			;
0094E8  2               
0094E8  2  48 DA 5A A2  	PRTS "FD: MODE=MBC$"
0094EC  2  00 BD 01 95  
0094F0  2  E8 C9 24 F0  
00950E  2               ;
00950E  2  48 DA 5A A2  	PRTS " IO=0x$"
009512  2  00 BD 27 95  
009516  2  E8 C9 24 F0  
00952E  2  A9 03        	LDA	#>FDC_MSR
009530  2  20 49 88     	JSR	PRTHEXBYTE
009533  2  A9 30        	LDA	#<FDC_MSR
009535  2  20 49 88     	JSR	PRTHEXBYTE
009538  2  20 F2 98     	JSR	FD_DETECT		; CHECK FOR FDC
00953B  2  C9 00            CMP     #$00
00953D  2  F0 2C            BEQ     :+                      ; CONTINUE IF FOUND
00953F  2  48 DA 5A A2  	PRTS " NOT PRESENT$" 		; NOT ZERO, H/W NOT PRESENT
009543  2  00 BD 58 95  
009547  2  E8 C9 24 F0  
009565  2  20 6B 88        	JSR	NEWLINE
009568  2  A9 FF            LDA     #$FF
00956A  2  60           	RTS				; BAIL OUT
00956B  2               :
00956B  2  48 DA 5A A2      PRTS " PRESENT$" 		; NOT ZERO, H/W NOT PRESENT
00956F  2  00 BD 84 95  
009573  2  E8 C9 24 F0  
00958D  2  20 6B 88         JSR	NEWLINE
009590  2  A9 A4        	LDA	#DOR_BR250 		; RESET SETTINGS
009592  2  8D 5E 99     	STA	FDC_DOR_STORE		; SAVE SETTINGS
009595  2  8D 36 03     	STA	FDC_DOR
009598  2               
009598  2  20 90 98     	JSR	CHECKINT		;
00959B  2  A9 03        	LDA	#CFD_SPECIFY		; SPECIFY COMMAND
00959D  2  20 4C 98     	JSR	PFDATA			; OUTPUT TO FDC
0095A0  2  A9 7F        	LDA	#$7F			; 6 MS STEP, 480 MS HEAD UNLOAD
0095A2  2  20 4C 98     	JSR	PFDATA			; OUTPUT TO FDC
0095A5  2  A9 05        	LDA	#$05			; 508 MS HEAD LOAD, NON-DMA MODE
0095A7  2  20 4C 98     	JSR	PFDATA			; OUTPUT TO FDC
0095AA  2               
0095AA  2  20 90 98     	JSR	CHECKINT		; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
0095AD  2  20 90 98     	JSR	CHECKINT		;
0095B0  2  20 90 98     	JSR	CHECKINT		;
0095B3  2  20 90 98     	JSR	CHECKINT		;
0095B6  2  20 90 98     	JSR	CHECKINT		;
0095B9  2  20 90 98     	JSR	CHECKINT		;
0095BC  2               
0095BC  2  20 24 98     	JSR	RECAL			;
0095BF  2               
0095BF  2  A9 27        	LDA	#39			;
0095C1  2  8D 55 99     	STA	debcyl			;
0095C4  2  20 F4 97     	JSR	SETTRACK
0095C7  2  4C 24 98     	JMP	RECAL			;
0095CA  2               
0095CA  2               
0095CA  2               ;__FL_READ_SECTOR________________________________________________________________________________________________________________
0095CA  2               ;
0095CA  2               ; 	READ A FLOPPY SECTOR
0095CA  2               ;________________________________________________________________________________________________________________________________
0095CA  2               ;
0095CA  2               ;
0095CA  2               FL_READ_SECTOR:
0095CA  2  AD 53 99             LDA     HARDWARE_DETCT
0095CD  2               ;;;;        CMP     #$00
0095CD  2               ;;;;        BEQ     :+
0095CD  2  60                   RTS
0095CE  2               :
0095CE  2  8D 5F 99             STA     FLRETRY                 ; BLANK RETRIES
0095D1  2  8D 60 99             STA     FLRETRY1
0095D4  2               
0095D4  2  20 DD 95             JSR     FL_READ_SECTOR_RAW
0095D7  2  48                   PHA
0095D8  2  20 6C 92             JSR	DEBSECR512
0095DB  2  68                   PLA
0095DC  2  60                   RTS
0095DD  2               
0095DD  2               FL_READ_SECTOR_RAW:
0095DD  2                       DBGFLAG 'A'
0095DD  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FDC_DOR
0095E0  2  09 02        	ORA	#FDMOTOR_ON		; SET MOTOR ON
0095E2  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO FDC_DOR
0095E5  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
0095E8  2                       DBGFLAG 'B'
0095E8  2  20 A7 96             JSR     SETUP_FD_CHS
0095EB  2                       DBGFLAG 'C'
0095EB  2  AD 54 99     	LDA	debhead			;
0095EE  2  CD 57 99     	CMP	Cdebhead		;
0095F1  2  D0 13        	BNE	READFL_DIRTY
0095F3  2  AD 55 99     	LDA	debcyl			;
0095F6  2  CD 58 99     	CMP	Cdebcyl			;
0095F9  2  D0 0B        	BNE	READFL_DIRTY
0095FB  2  AD 56 99     	LDA	debsec			;
0095FE  2  CD 59 99     	CMP	Cdebsec			;
009601  2  D0 03        	BNE	READFL_DIRTY
009603  2                                                       ; SECTOR ALREADY IN CACHE, DEBLOCK
009603  2                       DBGFLAG 'D'
009603  2  A9 00        	LDA	#$00
009605  2  60           	RTS
009606  2               READFL_DIRTY:
009606  2                       DBGFLAG 'E'
009606  2  AD 54 99     	LDA	debhead			; STORE CURRENT PARMS
009609  2  8D 57 99     	STA	Cdebhead		;
00960C  2  AD 55 99     	LDA	debcyl			;
00960F  2  8D 58 99     	STA	Cdebcyl			;
009612  2  AD 56 99     	LDA	debsec			;
009615  2  8D 59 99     	STA	Cdebsec			;
009618  2               
009618  2               READFL1:
009618  2                       DBGFLAG 'F'
009618  2  A9 46        	LDA	#CFD_READ|CFD_MFM	; BIT 6 SETS MFM, 06H IS READ COMMAND
00961A  2  8D 5C 99     	STA	FCMD                    ; SET COMMAND
00961D  2  20 DD 96     	JSR	DSKOP                   ; DO DISK OPERATION
009620  2               
009620  2  C9 00        	CMP	#$00
009622  2  F0 2B        	BEQ	READFLDONE              ; OPERATION SUCCESSFUL
009624  2  EE 5F 99     	INC	FLRETRY                 ; LET'S RETRY
009627  2  AD 5F 99     	LDA	FLRETRY
00962A  2  C9 06        	CMP	#FLOPPY_RETRIES
00962C  2  D0 EA        	BNE	READFL1
00962E  2  20 24 98     	JSR 	RECAL                   ; AFTER X RETRIES, LET'S RECAL THE HEAD
009631  2  20 F4 97     	JSR	SETTRACK                ;
009634  2  A9 00        	LDA	#$00                    ;
009636  2  8D 5F 99     	STA	FLRETRY                 ; MORE RETRIES!
009639  2  EE 60 99     	INC	FLRETRY1
00963C  2  AD 60 99     	LDA	FLRETRY1
00963F  2  C9 02        	CMP	#FLOPPY_RETRIES1
009641  2  D0 D5        	BNE	READFL1
009643  2               
009643  2  A9 FF        	LDA	#$FF                    ; RETRIES FAILED, INVALIDATE CACHE AND REPORT ERROR
009645  2  8D 57 99     	STA	Cdebhead		;
009648  2  8D 58 99     	STA	Cdebcyl			;
00964B  2  8D 59 99     	STA	Cdebsec			;
00964E  2                       DBGFLAG 'G'
00964E  2  60           	RTS				; A = $FF ON RETURN = OPERATION ERROR
00964F  2               READFLDONE:
00964F  2                       DBGFLAG 'H'
00964F  2  A9 00        	LDA	#$00			; A = 0 ON RETURN = OPERATION OK
009651  2  60           	RTS
009652  2               
009652  2               ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
009652  2               ;
009652  2               ; 	WRITE A FLOPPY SECTOR
009652  2               ;________________________________________________________________________________________________________________________________
009652  2               ;
009652  2               FL_WRITE_SECTOR:
009652  2  AD 53 99             LDA     HARDWARE_DETCT
009655  2                   ;;;    CMP     #$00
009655  2                   ;;;    BEQ     :+
009655  2  60                   RTS
009656  2               :
009656  2  20 DD 95             JSR     FL_READ_SECTOR_RAW
009659  2  8D 5F 99             STA     FLRETRY                 ; BLANK RETRIES
00965C  2  8D 60 99             STA     FLRETRY1
00965F  2  20 95 92             JSR	BLKSECR512
009662  2               
009662  2  A9 FF        	LDA	#$FF
009664  2  8D 57 99     	STA	Cdebhead		; INVALIDATE CACHE
009667  2  8D 58 99     	STA	Cdebcyl			;
00966A  2  8D 59 99     	STA	Cdebsec			;
00966D  2               
00966D  2               WRITEFL1:
00966D  2  A9 45        	LDA	#CFD_WRITE|CFD_MFM	; BIT 6 SETS MFM, 05H IS WRITE COMMAND
00966F  2  8D 5C 99     	STA	FCMD
009672  2  20 DD 96     	JSR	DSKOP
009675  2               
009675  2  C9 00        	CMP	#$00
009677  2  F0 2B        	BEQ	WRITEFLDONE
009679  2  EE 5F 99     	INC	FLRETRY
00967C  2  AD 5F 99     	LDA	FLRETRY
00967F  2  C9 06        	CMP	#FLOPPY_RETRIES
009681  2  D0 EA        	BNE	WRITEFL1
009683  2  20 24 98     	JSR 	RECAL
009686  2  20 F4 97     	JSR	SETTRACK
009689  2  A9 00        	LDA	#$00
00968B  2  8D 5F 99     	STA	FLRETRY
00968E  2  EE 60 99     	INC	FLRETRY1
009691  2  AD 60 99     	LDA	FLRETRY1
009694  2  C9 02        	CMP	#FLOPPY_RETRIES1
009696  2  D0 D5        	BNE	WRITEFL1
009698  2  A9 FF        	LDA	#$FF			; INVALIDATE CACHE
00969A  2  8D 57 99     	STA	Cdebhead		;
00969D  2  8D 58 99     	STA	Cdebcyl			;
0096A0  2  8D 59 99     	STA	Cdebsec			;
0096A3  2  60           	RTS				; A = $FF ON RETURN = OPERATION ERROR
0096A4  2               WRITEFLDONE:
0096A4  2  A9 00        	LDA	#$00			; A = 0 ON RETURN = OPERATION OK
0096A6  2  60           	RTS
0096A7  2               
0096A7  2               
0096A7  2               ;__SETUP_FD_CHS__________________________________________________________________________________________________________________
0096A7  2               ;
0096A7  2               ; 	TRANSFORM DOS65 CHS TO FLOPPY
0096A7  2               ;________________________________________________________________________________________________________________________________
0096A7  2               ;
0096A7  2               SETUP_FD_CHS:
0096A7  2  AD 0C 05     	LDA	sektrk			; LOAD TRACK # (LOW BYTE)
0096AA  2  29 01        	AND	#$01			; FILTER OUT HEAD
0096AC  2  8D 54 99     	STA	debhead			; STORE HEAD
0096AF  2  AD 0C 05     	LDA	sektrk			; SAVE TRACK IN A
0096B2  2  4A           	LSR	A			; REMOVE HEAD BIT
0096B3  2  8D 55 99     	STA	debcyl			; STORE IN TRACK
0096B6  2  AD 0E 05     	LDA	seksec			; LOAD SECTOR # (LOW BYTE)
0096B9  2  4A           	LSR	A			;
0096BA  2  4A           	LSR	A			; DIVIDE BY 4 (FOR BLOCKING)
0096BB  2  8D 56 99     	STA	debsec			; STORE IN SECTOR
0096BE  2               
0096BE  2                 .IF USEDSKY=1 || USEDSKYNG=1
0096BE  2                 	PRTDBG "DSKY OUTPUT 1$"
0096BE  2  AD 13 05       	lda	sekdsk
0096C1  2  8D 08 05       	sta	DSKY_HEXBUF
0096C4  2  AD 55 99      	lda	debcyl
0096C7  2  8D 09 05       	sta	DSKY_HEXBUF+1
0096CA  2  AD 54 99      	lda	debhead
0096CD  2  8D 0A 05       	sta	DSKY_HEXBUF+2
0096D0  2  AD 56 99         	lda	debsec
0096D3  2  8D 0B 05       	sta	DSKY_HEXBUF+3
0096D6  2  20 CB 8F       	JSR	DSKY_BIN2SEG
0096D9  2  20 00 90     	JSR	DSKY_SHOW
0096DC  2                 .ENDIF
0096DC  2               
0096DC  2  60                   RTS
0096DD  2               
0096DD  2               ;__DSKOP__________________________________________________________________________________________________________________________
0096DD  2               ;
0096DD  2               ; 	PERFORM A DISK OPERATION
0096DD  2               ;________________________________________________________________________________________________________________________________
0096DD  2               ;
0096DD  2               DSKOP:
0096DD  2                       DBGFLAG 'I'
0096DD  2  78           	SEI
0096DE  2  20 90 98     	JSR	CHECKINT		; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
0096E1  2  C9 FF        	CMP	#$FF			; DID IT RETURN WITH ERROR CODE?
0096E3  2  F0 1B        	BEQ	DSKEXIT			; IF YES, EXIT WITH ERROR CODE
0096E5  2               					;
0096E5  2                       DBGFLAG 'J'
0096E5  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
0096E8  2  09 02        	ORA	#FDMOTOR_ON		; SET MOTOR ON
0096EA  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO FLATCH
0096ED  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
0096F0  2               					;
0096F0  2  20 F4 97     	JSR	SETTRACK		; PERFORM SEEK TO TRACK
0096F3  2                       DBGFLAG 'K'
0096F3  2               					;
0096F3  2  AD 5C 99     	LDA	FCMD			; WHAT COMMAND IS PENDING?
0096F6  2  C9 46        	CMP	#CFD_READ|CFD_MFM	; IS IT A READ COMMAND?
0096F8  2  D0 03        	BNE	GWRR_POLL		;
0096FA  2  4C 5B 97     	JMP	RDD_POLL		;
0096FD  2               GWRR_POLL:
0096FD  2  4C CA 97     	JMP	WRR_POLL		;
009700  2               DSKEXIT:
009700  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
009703  2  29 FD        	AND	#FDMOTOR_OFF		; SET MOTOR OFF
009705  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO FLATCH
009708  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
00970B  2  A9 FF        	LDA	#$FF			; SET IF ERROR
00970D  2  58           	CLI
00970E  2  60           	RTS
00970F  2               
00970F  2               SNDFDWR:
00970F  2                       DBGFLAG 'L'
00970F  2  18           	CLC
009710  2  AD 13 05     	LDA	sekdsk			; GET DISK UNIT NUMBER
009713  2  29 03        	AND	#$03			; MASK FOR FOUR DRIVES.
009715  2  8D 5B 99     	STA	UNIT			; PARK IT IN TEMP
009718  2  AD 54 99     	LDA	debhead			; GET HEAD SELECTION
00971B  2  29 01        	AND	#$01			; INSURE SINGLE BIT
00971D  2  0A           	ASL	A			;
00971E  2  0A           	ASL	A			; MOVE HEAD TO BIT 2 POSITION
00971F  2  0D 5B 99     	ORA	UNIT			; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
009722  2  8D 5B 99     	STA	UNIT			; STORE IN UNIT
009725  2  AD 5C 99     	LDA	FCMD			;
009728  2  20 4C 98     	JSR	PFDATA			; PUSH COMMAND TO I8272
00972B  2                               DBGFLAG 'm'
00972B  2  AD 5B 99     	LDA	UNIT			;
00972E  2  20 4C 98     	JSR	PFDATA			;
009731  2                               DBGFLAG 'n'
009731  2  AD 55 99     	LDA	debcyl			;
009734  2  20 4C 98     	JSR	PFDATA			;
009737  2                               DBGFLAG 'o'
009737  2  AD 54 99     	LDA	debhead			;
00973A  2  20 4C 98     	JSR	PFDATA			;
00973D  2                               DBGFLAG 'p'
00973D  2  18           	CLC				;
00973E  2  AD 56 99     	LDA	debsec			;
009741  2  69 01        	ADC	#$01			;
009743  2  20 4C 98     	JSR	PFDATA			;
009746  2                               DBGFLAG 'q'
009746  2  A9 02        	LDA	#$02			;
009748  2  20 4C 98     	JSR	PFDATA			; WHAT DENSITY
00974B  2                               DBGFLAG 'r'
00974B  2  A9 09        	LDA	#$09			;
00974D  2  20 4C 98     	JSR	PFDATA			; ASSUME SC (SECTOR COUNT)  EOT
009750  2                                       DBGFLAG 's'
009750  2  A9 1B        	LDA	#$1B			;
009752  2  20 4C 98     	JSR	PFDATA			; WHAT GAP IS NEEDED
009755  2                               DBGFLAG 't'
009755  2  A9 FF        	LDA	#$FF			; DTL, IS THE LAST COMMAND BYTE TO I8272
009757  2  20 77 98     	JSR	PFDATAS
00975A  2  60           	RTS
00975B  2               ; PERFORM READ
00975B  2               ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN. (AT 2MHZ IS 2,000,000 CYCLES PER SECOND == 50 CYCLE BUDGET.)
00975B  2               ;
00975B  2               RDD_POLL:
00975B  2  A2 00                LDX     #$00
00975D  2  A0 00        		LDY     #$00
00975F  2  20 0F 97     		JSR	SNDFDWR			;
009762  2  AD 30 03     RDS1:	LDA	FDC_MSR			; GET STATUS  (4 CYCLES)
009765  2               	;BPL	RDS1                    ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
009765  2               ;	AND	#%00100000		; EXECUTION MODE? (2 CYCLES)
009765  2               ;	BEQ	DSKOPEND		; NO, ERROR
009765  2  C9 F0                CMP     #$F0                    ; (2 CYCLES)
009767  2  F0 06        	BEQ	RDS1A			; READY TO GO
009769  2  E8                   INX
00976A  2  D0 F6                BNE     RDS1                    ; NOT READY TO GO
00976C  2  4C 90 97            	JMP	DSKOPEND		; ERROR
00976F  2               RDS1A:
00976F  2  AD 31 03     	LDA	FDC_DATA		; GET DATA (4 CYCLES)
009772  2  99 D2 92     	STA	hstbuf,Y		; WRITE IT (5 CYCLES)
009775  2  C8           	INY                             ; (2 CYCLES)
009776  2  D0 EA        	BNE	RDS1			; KEEP GOING (UP TO 4 CYCLES)   TOTAL =
009778  2  A2 00                LDX     #$00
00977A  2  AD 30 03     RDS2:	LDA	FDC_MSR			; GET STATUS
00977D  2               ;	BPL	RDS2                    ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
00977D  2               ;	AND	#%00100000		; EXECUTION MODE?
00977D  2               ;	BEQ	DSKOPEND		; NO, ERROR
00977D  2  C9 F0                CMP     #$F0                    ; (2 CYCLES)
00977F  2  F0 06        	BEQ	RDS2A			; READY TO GO
009781  2  E8                   INX
009782  2  D0 F6                BNE     RDS2                    ; NOT READY TO GO
009784  2  4C 90 97            	JMP	DSKOPEND		; ERROR
009787  2               RDS2A:
009787  2  AD 31 03     	LDA	FDC_DATA		; GET DATA
00978A  2  99 D2 93     	STA	hstbuf+256,Y		; WRITE IT
00978D  2  C8           	INY
00978E  2  D0 EA        	BNE	RDS2			; KEEP GOING
009790  2               DSKOPEND:
009790  2                       DBGFLAG 'Y'
009790  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
009793  2  09 01        	ORA	#%00000001		;
009795  2  8D 5E 99     	STA	FDC_DOR_STORE		; SET TC
009798  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
00979B  2  20 44 99             JSR     FDDELAY
00979E  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
0097A1  2  29 FE        	AND	#%11111110		;
0097A3  2  8D 5E 99     	STA	FDC_DOR_STORE		; CLEAR TC
0097A6  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
0097A9  2  20 44 99             JSR     FDDELAY
0097AC  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
0097AF  2  29 FD        	AND	#%11111101		; SET MOTOR OFF
0097B1  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO FLATCH
0097B4  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER					;
0097B7  2               					;
0097B7  2  20 D9 98     	JSR	GFDATA			;GET ERROR TYPE
0097BA  2  8D 5A 99     	STA	FLERR
0097BD  2                       DBGFLAG '('
0097BD  2               ;* CLEAR OUT ANY REMAINING DATA
0097BD  2               RESUL3:
0097BD  2  20 D9 98     	JSR	GFDATA			;READ BYTE FROM FDC
0097C0  2  C9 00        	CMP	#$00
0097C2  2  D0 F9        	BNE	RESUL3			;CLEAR THEM ALL
0097C4  2                       DBGFLAG ')'
0097C4  2  AD 5A 99     	LDA	FLERR			;
0097C7  2  29 C0        	AND	#%11000000		;
0097C9  2  60           	RTS
0097CA  2               
0097CA  2               WRR_POLL:
0097CA  2  20 0F 97     	JSR	SNDFDWR			;
0097CD  2               WRS1:					;
0097CD  2  AD 30 03     	LDA	FDC_MSR			; GET STATUS
0097D0  2  10 FB        	BPL	WRS1			; NOT READY
0097D2  2  29 20        	AND	#%00100000		; EXECUTION MODE?
0097D4  2  F0 1B        	BEQ	WRS3			; NO, ERROR
0097D6  2  B9 D2 92     	LDA	hstbuf,Y		; WRITE IT
0097D9  2  8D 31 03     	STA	FDC_DATA			; WRITE TO FDC
0097DC  2  C8           	INY
0097DD  2  D0 EE        	BNE	WRS1			; DO NEXT
0097DF  2               WRS2:					;
0097DF  2  AD 30 03     	LDA	FDC_MSR			; GET STATUS
0097E2  2  10 FB        	BPL	WRS2			; NOT READY
0097E4  2  29 20        	AND	#%00100000		; EXECUTION MODE?
0097E6  2  F0 09        	BEQ	WRS3			; NO, ERROR
0097E8  2  B9 D2 93     	LDA	hstbuf+256,Y		; WRITE IT
0097EB  2  8D 31 03     	STA	FDC_DATA		; WRITE TO FDC
0097EE  2  C8           	INY
0097EF  2  D0 EE        	BNE	WRS2			; DO NEXT
0097F1  2               WRS3:
0097F1  2  4C 90 97     	JMP	DSKOPEND		;
0097F4  2               
0097F4  2               
0097F4  2               ;__SETTRACK__________________________________________________________________________________________________________________________
0097F4  2               ;
0097F4  2               ; 	SEEK TO A TRACK ON GIVEN UNIT
0097F4  2               ; 	A: TRACK #
0097F4  2               ;________________________________________________________________________________________________________________________________
0097F4  2               ;
0097F4  2               SETTRACK:
0097F4  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO FLATCH
0097F7  2  09 02        	ORA	#FDMOTOR_ON		; SET MOTOR ON
0097F9  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO FLATCH
0097FC  2  8D 36 03     	STA	FDC_DOR			; OUTPUT TO CONTROLLER
0097FF  2               
0097FF  2               					; ANY INTERUPT PENDING
0097FF  2               					; IF YES FIND OUT WHY/CLEAR
0097FF  2  20 90 98     	JSR	CHECKINT		; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
009802  2  C9 FF        	CMP	#$FF			; DID IT RTSURN WITH ERROR CODE?
009804  2  D0 03        	BNE	SETTRK1
009806  2  4C 4B 98     	JMP	SETTRKEXIT		;
009809  2               
009809  2               					;
009809  2               SETTRK1:
009809  2  AD 55 99     	LDA	debcyl			; GET TRACK
00980C  2  C9 00        	CMP	#$00			;
00980E  2  F0 14        	BEQ	RECAL			; IF 0 PERFORM RECAL INSTEAD OF SEEK
009810  2  A9 0F        	LDA	#CFD_SEEK		; SEEK COMMAND
009812  2  20 4C 98     	JSR	PFDATA			; PUSH COMMAND
009815  2  AD 13 05     	LDA	sekdsk			; SAY WHICH UNIT
009818  2  20 4C 98     	JSR	PFDATA			; SEND THAT
00981B  2  AD 55 99     	LDA	debcyl			; TO WHAT TRACK
00981E  2  20 4C 98     	JSR	PFDATA			; SEND THAT TOO
009821  2  4C 3A 98     	JMP	WAINT			; WAIT FOR INTERRUPT SAYING DONE
009824  2               RECAL:
009824  2  AD 5E 99     	LDA	FDC_DOR_STORE		; POINT TO DOR
009827  2  09 02        	ORA	#FDMOTOR_ON		; SET MOTOR ON
009829  2  8D 5E 99     	STA	FDC_DOR_STORE		; POINT TO DOR
00982C  2  8D 36 03             STA	FDC_DOR			; OUTPUT TO CONTROLLER
00982F  2  A9 07        	LDA	#CFD_RECAL		; RECAL TO TRACK 0
009831  2  20 4C 98     	JSR	PFDATA			; SEND IT
009834  2  AD 13 05     	LDA	sekdsk			; WHICH UNIT
009837  2  20 4C 98     	JSR	PFDATA			; SEND THAT TOO
00983A  2               ;
00983A  2               WAINT:
00983A  2  DA                   PHX
00983B  2  A2 64        	LDX	#100
00983D  2  20 49 99             JSR     FDVDELAY
009840  2  FA                   PLX
009841  2               :
009841  2  20 90 98     	JSR	CHECKINT
009844  2  AD 30 03     	LDA	FDC_MSR			; READ SEEK STATUS
009847  2  29 0F        	AND	#%00001111		; ANY DRIVES SEEKING?
009849  2  D0 F6        	BNE	:-			; YES, WAIT FOR THEM
00984B  2               ;
00984B  2               SETTRKEXIT:
00984B  2  60           	RTS
00984C  2               
00984C  2               ;__PFDATA__________________________________________________________________________________________________________________________
00984C  2               ;
00984C  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE
00984C  2               ;
00984C  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
00984C  2               ;	RQM  DIO
00984C  2               ;	0	0	BUSY
00984C  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
00984C  2               ;	1	1	BYTE FOR READ BY HOST PENDING
00984C  2               ;	0	1	BUSY
00984C  2               ;
00984C  2               ;________________________________________________________________________________________________________________________________
00984C  2               ;
00984C  2               PFDATA:
00984C  2  48           	PHA				; SAVE DATA BYTE
00984D  2  A0 00                LDY     #$00
00984F  2               WRF1:
00984F  2  AD 30 03     	LDA	FDC_MSR			; READ FDC STATUS
009852  2  AA           	TAX
009853  2  29 80        	AND	#$80			;
009855  2  D0 07        	BNE     :+
009857  2  C8                   INY
009858  2  D0 F5                BNE     WRF1			; FDC IS NOT READY, WAIT FOR IT
00985A  2  68                   PLA
00985B  2  A9 FF                LDA     #$FF
00985D  2  60                   RTS
00985E  2               :
00985E  2  8A           	TXA
00985F  2  29 40        	AND	#$40			; TEST DIO BIT
009861  2  D0 0E        	BNE	WRF2			; FDC IS OUT OF SYNC
009863  2  68           	PLA				; RESTORE DATA
009864  2  8D 31 03     	STA	FDC_DATA		; WRITE TO FDC
009867  2  20 44 99             JSR     FDDELAY
00986A  2  20 44 99             JSR     FDDELAY
00986D  2  20 44 99             JSR     FDDELAY
009870  2  60           	RTS
009871  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
009871  2               WRF2:
009871  2  AD 31 03     	LDA	FDC_DATA		; READ DATA REGISTER
009874  2  4C 4F 98     	JMP	WRF1			; AND CONTINUE
009877  2               
009877  2               ;__PFDATAS_________________________________________________________________________________________________________________________
009877  2               ;
009877  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
009877  2               ;
009877  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
009877  2               ;	RQM  DIO
009877  2               ;	0	0	BUSY
009877  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
009877  2               ;	1	1	BYTE FOR READ BY HOST PENDING
009877  2               ;	0	1	BUSY
009877  2               ;
009877  2               ;________________________________________________________________________________________________________________________________
009877  2               ;
009877  2               PFDATAS:
009877  2  48           	PHA				; SAVE DATA BYTE
009878  2               WRF1S:
009878  2  AD 30 03     	LDA	FDC_MSR			; READ FDC STATUS
00987B  2  AA           	TAX
00987C  2  29 80        	AND	#$80			;
00987E  2  F0 F8        	BEQ	WRF1S			; FDC IS NOT READY, WAIT FOR IT
009880  2  8A           	TXA
009881  2  29 40        	AND	#$40			; TEST DIO BIT
009883  2  D0 05        	BNE	WRF2S			; FDC IS OUT OF SYNC
009885  2  68           	PLA				; RESTORE DATA
009886  2  8D 31 03     	STA	FDC_DATA		; WRITE TO FDC
009889  2  60           	RTS
00988A  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
00988A  2               WRF2S:
00988A  2  AD 31 03     	LDA	FDC_DATA		; READ DATA REGISTER
00988D  2  4C 78 98     	JMP	WRF1S			; AND CONTINUE
009890  2               
009890  2               
009890  2               
009890  2               ;__CHECKINT__________________________________________________________________________________________________________________________
009890  2               ;
009890  2               ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
009890  2               ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
009890  2               ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
009890  2               ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
009890  2               ;________________________________________________________________________________________________________________________________
009890  2               ;
009890  2               CHECKINT:
009890  2  A0 00                LDY     #$00
009892  2               :
009892  2  AD 30 03     	LDA	FDC_MSR			; READING OR WRITING IS KEYS TO D7 RQM
009895  2  29 80        	AND	#$80
009897  2  D0 09        	BNE	:+      		; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
009899  2  20 44 99             JSR     FDDELAY
00989C  2  C8                   INY
00989D  2  D0 F3                BNE     :-
00989F  2  4C AA 98             JMP     ERRCLR
0098A2  2               
0098A2  2               :
0098A2  2  AD 30 03     	LDA	FDC_MSR			; READING OR WRITING IS KEYS TO D7 RQM
0098A5  2  29 40        	AND	#$40			; WAITING FOR INPUT?
0098A7  2  F0 16        	BEQ	SENDINT
0098A9  2  60           	RTS
0098AA  2               
0098AA  2               ERRCLR:
0098AA  2  A0 00                LDY     #$00
0098AC  2               :
0098AC  2  AD 31 03     	LDA	FDC_DATA		; CLEAR THE JUNK OUT OF DATA REGISTER
0098AF  2  AD 30 03     	LDA	FDC_MSR			; CHECK WITH RQM
0098B2  2  29 80        	AND	#$80			; IF STILL NOT READY, READ OUT MORE JUNK
0098B4  2  D0 06        	BNE	:+			;
0098B6  2  20 44 99             JSR     FDDELAY
0098B9  2  C8                   INY
0098BA  2  D0 F0                BNE     :-
0098BC  2               :
0098BC  2  A9 FF        	LDA	#$FF			; RETURN ERROR CODE -1
0098BE  2               					;
0098BE  2  60           	RTS
0098BF  2               
0098BF  2               ;__SENDINT__________________________________________________________________________________________________________________________
0098BF  2               ;
0098BF  2               ; SENSE INTERRUPT COMMAND
0098BF  2               ;________________________________________________________________________________________________________________________________
0098BF  2               ;
0098BF  2               SENDINT:
0098BF  2  A9 08        	LDA	#CFD_SENSEINT		; SENSE INTERRUPT COMMAND
0098C1  2  20 4C 98     	JSR	PFDATA			; SEND IT
0098C4  2  20 D9 98     	JSR	GFDATA			; GET RESULTS
0098C7  2  8D 5D 99     	STA	ST0			; STORE THAT
0098CA  2  29 C0        	AND	#$C0			; MASK OFF INTERRUPT STATUS BITS
0098CC  2  C9 80        	CMP	#$80			; CHECK IF INVALID COMMAND
0098CE  2  F0 08        	BEQ	ENDSENDINT		; YES, EXIT
0098D0  2  20 D9 98     	JSR	GFDATA			; GET ANOTHER (STATUS CODE 1)
0098D3  2  AD 5D 99     	LDA	ST0			; GET FIRST ONE
0098D6  2  29 C0        	AND	#$C0			; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
0098D8  2               ENDSENDINT:
0098D8  2  60           	RTS				; ANYTHING ELSE IS AN ERROR
0098D9  2               
0098D9  2               
0098D9  2               ;__GFDATA__________________________________________________________________________________________________________________________
0098D9  2               ;
0098D9  2               ; GET DATA FROM FLOPPY CONTROLLER
0098D9  2               ;
0098D9  2               ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
0098D9  2               ;	RQM  DIO
0098D9  2               ;	0	0	BUSY
0098D9  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
0098D9  2               ;	1	1	BYTE FOR READ BY HOST PENDING
0098D9  2               ;	0	1	BUSY
0098D9  2               ;
0098D9  2               ;________________________________________________________________________________________________________________________________
0098D9  2               ;
0098D9  2               GFDATA:
0098D9  2  A0 00                LDY     #$00
0098DB  2               :
0098DB  2  AD 30 03     	LDA	FDC_MSR			; GET STATUS
0098DE  2  AA           	TAX				;
0098DF  2  29 80        	AND	#%10000000		; NOT READY, WAIT
0098E1  2  D0 06        	BNE	:+			;
0098E3  2  C8                   INY
0098E4  2  D0 F5                BNE     :-
0098E6  2  A9 00                LDA     #$00
0098E8  2  60                   RTS
0098E9  2               :
0098E9  2  8A           	TXA
0098EA  2  29 40        	AND	#%01000000		; ANY DATA FOR US?
0098EC  2  F0 03        	BEQ	GFDATA1			; NO, SKIP IT
0098EE  2  AD 31 03     	LDA	FDC_DATA		; GET FDC DATA
0098F1  2               GFDATA1:
0098F1  2  60           	RTS
0098F2  2               
0098F2  2               ;__FD_DETECT______________________________________________________________________________________________________________________
0098F2  2               ;
0098F2  2               ; 	DETECT FLOPPY HARDWARE
0098F2  2               ;________________________________________________________________________________________________________________________________
0098F2  2               FD_DETECT:
0098F2  2               	; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
0098F2  2  A9 A4        	LDA     #DOR_INIT	; MAKE SURE INITIAL DOR VALUE IS SETUP
0098F4  2  8D 5E 99             STA	FDC_DOR_STORE	; AND PUT IN SHADOW REGISTER
0098F7  2               
0098F7  2  20 25 99     	JSR	FC_RESETFDC	; RESET FDC
0098FA  2               
0098FA  2  AD 30 03     	LDA 	FDC_MSR	        ; READ MSR
0098FD  2  C9 80        	CMP	#$80
0098FF  2  F0 0A        	BEQ 	FD_DETECT1	; $80 IS OK
009901  2  C9 D0        	CMP	#$D0
009903  2  F0 06        	BEQ	FD_DETECT1	; $D0 IS OK
009905  2  A9 FF                LDA     #$FF            ; NOT OK
009907  2  8D 53 99             STA     HARDWARE_DETCT
00990A  2  60                   RTS
00990B  2               ;
00990B  2               FD_DETECT1:
00990B  2  A2 64        	LDX     #100
00990D  2  20 49 99             JSR     FDVDELAY	; WAIT A BIT FOR FDC
009910  2  AD 30 03     	LDA	FDC_MSR 	; READ MSR AGAIN
009913  2  C9 80        	CMP	#$80
009915  2  F0 08        	BEQ 	:+      	; $80 IS OK
009917  2  C9 D0        	CMP	#$D0
009919  2  A9 FF                LDA     #$FF            ; NOT OK
00991B  2  8D 53 99             STA     HARDWARE_DETCT
00991E  2  60                   RTS
00991F  2               :
00991F  2  A9 00                LDA     #$00            ; OK
009921  2  8D 53 99             STA     HARDWARE_DETCT
009924  2  60                   RTS
009925  2               
009925  2               FC_RESETFDC:
009925  2  AD 33 03             LDA     FDC_RESET
009928  2  AD 33 03             LDA     FDC_RESET
00992B  2  A2 96        	LDX     #150
00992D  2  20 49 99             JSR     FDVDELAY	; WAIT A BIT FOR FDC
009930  2               
009930  2  A9 00        	LDA     #FDRESETL
009932  2  8D 36 03            	STA     FDC_DOR
009935  2  20 44 99     	JSR	FDDELAY
009938  2  AD 5E 99     	LDA     FDC_DOR_STORE
00993B  2  8D 36 03            	STA     FDC_DOR
00993E  2  A2 96        	LDX	#150			;
009940  2  20 49 99     	JSR	FDVDELAY
009943  2  60           	RTS
009944  2               
009944  2               
009944  2               FDDELAY:
009944  2  48                   PHA
009945  2  68                   PLA
009946  2  48                   PHA
009947  2  68                   PLA
009948  2  60                   RTS
009949  2               FDVDELAY:
009949  2  48                   PHA
00994A  2  68                   PLA
00994B  2  48                   PHA
00994C  2  68                   PLA
00994D  2  CA                   DEX
00994E  2  E0 00                CPX     #$00
009950  2  D0 F7                BNE     FDVDELAY
009952  2  60                   RTS
009953  2               
009953  2               
009953  2               
009953  2  00           HARDWARE_DETCT: .byte 0		; HARDWARE DETECTED
009954  2  00           debhead:        .byte 0		; DEBLOCKED HEAD
009955  2  00           debcyl:	        .byte 0		; DEBLOCKED CYLINDER
009956  2  00           debsec:	        .byte 0		; DEBLOCKED SECTOR
009957  2  00           Cdebhead:	.byte 0		; DEBLOCKED HEAD (cache)
009958  2  00           Cdebcyl:	.byte 0		; DEBLOCKED CYLINDER (cache)
009959  2  00           Cdebsec:	.byte 0		; DEBLOCKED SECTOR (cache)
00995A  2  00           FLERR:	        .BYTE	$00	;
00995B  2  00           UNIT:	        .BYTE	$00	;
00995C  2  00           FCMD:	        .BYTE	0	; COMMAND READ OR WRITE,
00995D  2  00           ST0:	        .BYTE	0	; COMMAND READ OR WRITE,
00995E  2  00           FDC_DOR_STORE:  .BYTE	00
00995F  2  00           FLRETRY:        .BYTE	00
009960  2  00           FLRETRY1:       .BYTE	00
009961  2               
009961  1               
009961  1               ;// TODO: this should be dependent on "active console. . ." and should be a driver call
009961  1               CONSOLE_OUT:
009961  1  20 BC 88     		JSR WRSER1
009964  1  60           		RTS
009965  1               
009965  1               ;// TODO: CONSOLE_IN
009965  1               
009965  1               
009965  1  EA           	NOP
009966  1  EA           	NOP
009967  1  EA           	NOP
009968  1  EA           	NOP
009969  1  EA           	NOP
00996A  1  EA           	NOP
00996B  1  EA           	NOP
00996C  1  EA           	NOP
00996D  1  EA           	NOP
00996E  1  EA           	NOP
00996F  1               
00996F  1               	.end
