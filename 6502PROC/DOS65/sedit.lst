ca65 V2.18 - Ubuntu 2.19-1
Main file   : sedit.asm
Current file: sedit.asm

000000r 1               ;__SCREEN EDITOR_________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; 	DOS/65 SCREEN EDITOR (ANSI TERMINAL/CONSOLE)
000000r 1               ;	DAN WERNER 5/31/2014
000000r 1               ;
000000r 1               ;
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               
000000r 1               DFLFCB	=	$107		;DEFAULT FCB
000000r 1               PEM	=	$103		;PEM ENTRY
000000r 1               BOOT	=	$100		;WARM BOOT
000000r 1               TEA	=	$800		;EXECUTION ORG
000000r 1               CCMLNG	=	2048		;CCM LENGTH
000000r 1               CRSYM	=	32		;CR SYMBOL
000000r 1               LASTROW =	20
000000r 1               MAXCOL  =	80
000000r 1               
000000r 1               ;ZERO PAGE
000000r 1               NAMED	=$02			;"TO" FILE NAMED IF <128
000000r 1               TOIND	=$03			;"TO" FILE INDEX
000000r 1               FRMIND	=$05			;"FROM" FILE INDEX
000000r 1               TEMP	=$08			;
000000r 1               FCBPTR 	=$09			; POINTER TO FCB FOR FILE OPS
000000r 1               CSRPOSX =$0B			;
000000r 1               CSRPOSY =$0C			;
000000r 1               EDTPOS  =$0D			;
000000r 1               TMPPOS  =$0F			;
000000r 1               TEMP1   =$11			;
000000r 1               CURRENTLEN =$12			;
000000r 1               MODE	= $14			; 0= OVERWRITE MODE, 1= INSERT MODE
000000r 1               
000000r 1               ;INCLUDE "MACLIB.MAC"
000000r 1               
000000r 1               ;MAIN PROGRAM
000000r 1                		.segment "TEA"
000000r 1               		.ORG $0800
000800  1               
000800  1  20 60 11     	JSR	CLEARBUFFER
000803  1  20 7A 11     	JSR	DOS65LOAD
000806  1  20 74 0E     	JSR	PAINTSCREEN
000809  1               
000809  1  A9 00        	LDA	#$00
00080B  1  85 14        	STA	MODE
00080D  1  85 0B        	STA	CSRPOSX
00080F  1  85 0C        	STA 	CSRPOSY
000811  1  20 F6 0F     	JSR	GOCSR
000814  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
000816  1  85 0D        	STA	EDTPOS			; STORE DEST BUFFER
000818  1  A9 17        	LDA	#>BUFFER	;
00081A  1  85 0E        	STA	EDTPOS+1		; STORE DEST BUFFER
00081C  1               
00081C  1               
00081C  1               
00081C  1               EDITLOOP:
00081C  1  20 8E 10     	JSR	READKB			; GET USER INPUT
00081F  1               					;
00081F  1  C0 01        	CPY	#$01			; IF IT IS A NORMAL KEYSTROKE
000821  1  D0 66        	BNE	EDIT			; GOTO EDIT
000823  1               
000823  1  C0 FF        	CPY	#$FF			; IF IT IS AN ERROR
000825  1  F0 F5        	BEQ	EDITLOOP		;  LOOP
000827  1               
000827  1               
000827  1               
000827  1  85 08        	STA	TEMP			; STORE COMMAND IN TEMP
000829  1  A0 00        	LDY	#$00			;
00082B  1               EDITLOOP1A:
00082B  1  B9 55 08     	LDA	COMMANDTABLE,Y		; CHECK TOKEN
00082E  1  C5 08        	CMP	TEMP			; COMPARE
000830  1  D0 15        	BNE	EDITLOOP2A		;
000832  1  C8           	INY
000833  1  C8           	INY
000834  1  B9 55 08     	LDA	COMMANDTABLE,Y		; CHECK TOKEN
000837  1  8D 42 08     	STA	JMPTMP+1		;
00083A  1  C8           	INY
00083B  1  B9 55 08     	LDA	COMMANDTABLE,Y		; CHECK TOKEN
00083E  1  8D 43 08     	STA	JMPTMP+2		;
000841  1               JMPTMP:
000841  1  20 00 00     	JSR	$0000
000844  1  4C 1C 08     	JMP	EDITLOOP
000847  1               EDITLOOP2A:
000847  1  C9 FF        	CMP	#$FF
000849  1  F0 07        	BEQ	EDITLOOP3A
00084B  1  C8           	INY
00084C  1  C8           	INY
00084D  1  C8           	INY
00084E  1  C8           	INY
00084F  1  4C 2B 08     	JMP	EDITLOOP1A
000852  1               
000852  1               EDITLOOP3A:
000852  1  4C 1C 08     	JMP	EDITLOOP
000855  1               
000855  1  00 FE 0B     COMMANDTABLE:	.byte 	$00,<CRSRUP,>CRSRUP
000858  1  01 23 0C     		.byte 	$01,<CRSRDN,>CRSRDN
00085B  1  02 4A 0C     		.byte 	$02,<CRSRLEFT,>CRSRLEFT
00085E  1  03 71 0C     		.byte 	$03,<CRSRRIGHT,>CRSRRIGHT
000861  1  05 25 0E     		.byte 	$05,<PAGEUP,>PAGEUP
000864  1  06 D8 0D     		.byte 	$06,<PAGEDOWN,>PAGEDOWN
000867  1  08 44 0B     		.byte 	$08,<BACKSPACE,>BACKSPACE
00086A  1  13 80 08     		.byte 	$13,<RETURN_TO_OS,>RETURN_TO_OS
00086D  1  14 B2 0B     		.byte 	$14,<TOGGLEMODE,>TOGGLEMODE
000870  1  30 F9 08     		.byte 	$30,<INSERTCR,>INSERTCR
000873  1  7F 4A 0B     		.byte 	127,<DELETECHAR,>DELETECHAR
000876  1  18 FD 13     		.byte 	$18,<DOS65SAVE,>DOS65SAVE
000879  1  19 5C 12     		.byte 	$19,<DOS65SAVEAS,>DOS65SAVEAS
00087C  1  24 82 09     		.byte 	$24,<TRUNCATE,>TRUNCATE
00087F  1  FF           		.byte 	$FF
000880  1               
000880  1               
000880  1               
000880  1               RETURN_TO_OS:
000880  1  20 E8 0F     	JSR 	CLEARSCREEN
000883  1  20 50 11     	JSR	READKB_XON
000886  1  4C 00 01     	JMP 	$0100
000889  1               
000889  1               
000889  1               ;__EDIT__________________________________________________________________________________________________________________________
000889  1               ;
000889  1               ; 	EDIT THE FILE
000889  1               ;
000889  1               ;________________________________________________________________________________________________________________________________
000889  1               ;
000889  1               EDIT:
000889  1  48           	PHA				; STORE KEYSTROKE
00088A  1  A5 14        	LDA	MODE			; OVERWRITE OR INSERT?
00088C  1  C9 00        	CMP	#$00			;
00088E  1  F0 03        	BEQ     EDIT_OM			; OVERWRITE MODE
000890  1  20 9B 0A     	JSR	INSERTCHAR		; INSERT CHAR SPACE
000893  1               EDIT_OM:
000893  1  A0 00        	LDY	#$00			;
000895  1  B1 0D        	LDA	(EDTPOS),Y		; IS CRSR OVER A CR?
000897  1  C9 0D        	CMP	#13			;
000899  1  D0 25        	BNE	EDIT_OMB		; NO, CONTINUE
00089B  1  C8           	INY				;
00089C  1  B1 0D        	LDA	(EDTPOS),Y		; IS NEXT POS A NULL?
00089E  1  C9 00        	CMP	#$00			;
0008A0  1  D0 2F        	BNE	EDIT_OMC		;
0008A2  1               EDIT_OMA:
0008A2  1  68           	PLA				;
0008A3  1  A0 00        	LDY	#$00			;
0008A5  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
0008A7  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
0008AA  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
0008AD  1  A9 0D        	LDA	#13			;
0008AF  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
0008B1  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
0008B4  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
0008B7  1  20 4A 0C     	JSR	CRSRLEFT		; MOVE CSR BACK 1
0008BA  1  20 E0 08     	JSR	EDITCHECK		;
0008BD  1  4C 1C 08     	JMP	EDITLOOP		;
0008C0  1               
0008C0  1               EDIT_OMB:
0008C0  1  68           	PLA
0008C1  1  A0 00        	LDY	#$00
0008C3  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
0008C5  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
0008C8  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
0008CB  1  20 E0 08     	JSR	EDITCHECK		;
0008CE  1  4C 1C 08     	JMP	EDITLOOP
0008D1  1               
0008D1  1               EDIT_OMC:
0008D1  1               
0008D1  1  A5 0C        	LDA	CSRPOSY			; HAVE WE REACHED THE END OF THE SCREEN?
0008D3  1  C9 13        	CMP	#LASTROW-1		;
0008D5  1  D0 03        	BNE	*+5			; NO
0008D7  1  20 27 0D     	JSR	SCROLLDOWN		; SCROLL
0008DA  1               
0008DA  1  20 C2 09     	JSR	INSERTLINE
0008DD  1  4C A2 08     	JMP	EDIT_OMA
0008E0  1               
0008E0  1               ;__EDITCHECK_____________________________________________________________________________________________________________________
0008E0  1               ;
0008E0  1               ; 	IF EDTPOS > CURRENTLEN CHANGE CURRENTLEN
0008E0  1               ;
0008E0  1               ;________________________________________________________________________________________________________________________________
0008E0  1               ;
0008E0  1               EDITCHECK:
0008E0  1  48           	PHA
0008E1  1  A5 0E        	LDA	EDTPOS+1
0008E3  1  C5 13        	CMP	CURRENTLEN+1
0008E5  1  90 10        	BCC	EDITCHECK_1
0008E7  1  A5 0D        	LDA	EDTPOS
0008E9  1  C5 12        	CMP	CURRENTLEN
0008EB  1  90 0A        	BCC	EDITCHECK_1
0008ED  1               
0008ED  1  A5 0E        	LDA	EDTPOS+1
0008EF  1  85 13        	STA	CURRENTLEN+1
0008F1  1  A5 0D        	LDA	EDTPOS
0008F3  1  85 12        	STA	CURRENTLEN
0008F5  1  E6 12        	INC 	CURRENTLEN
0008F7  1               EDITCHECK_1:
0008F7  1  68           	PLA
0008F8  1  60           	RTS
0008F9  1               
0008F9  1               ;__INSERTCR______________________________________________________________________________________________________________________
0008F9  1               ;
0008F9  1               ; 	INSERT CR AT THE CURRENT POSITION
0008F9  1               ;
0008F9  1               ;________________________________________________________________________________________________________________________________
0008F9  1               ;
0008F9  1               INSERTCR:
0008F9  1  A5 0B        	LDA	CSRPOSX			; Store current cursor and edit position into stack
0008FB  1  48           	PHA				;
0008FC  1  A5 0C        	LDA	CSRPOSY			;
0008FE  1  48           	PHA				;
0008FF  1  A5 0D        	LDA	EDTPOS			;
000901  1  48           	PHA				;
000902  1  A5 0E        	LDA	EDTPOS+1		;
000904  1  48           	PHA				;
000905  1               
000905  1               
000905  1  A0 00        	LDY	#$00			; move editpos to the end of the screen and store count into INSERTCHTEMP
000907  1  8C 81 09     	STY	INSERTCHTEMP		; INSERTCHTEMP=0
00090A  1  A6 0B        	LDX	CSRPOSX			; x=current x pos
00090C  1               INSERTCR1:
00090C  1  E8           	INX				; x++
00090D  1  EE 81 09     	INC	INSERTCHTEMP		; INSERTCHTEMP++
000910  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000913  1  E0 50        	CPX	#MAXCOL			; are we at the end of the line?
000915  1  D0 F5        	BNE	INSERTCR1		; no, loop
000917  1               
000917  1               INSERTCR2:
000917  1  A9 00        	LDA	#$00			; INSERT A LINE
000919  1  85 0B        	STA	CSRPOSX			;
00091B  1  E6 0C        	INC	CSRPOSY			;
00091D  1  20 F6 0F     	JSR	GOCSR			;
000920  1  20 C2 09     	JSR	INSERTLINE		; INSERT A LINE
000923  1               
000923  1               
000923  1  BA           	TSX				;
000924  1  68           	PLA				;
000925  1  85 0E        	STA	EDTPOS+1		;
000927  1  68           	PLA				;
000928  1  85 0D        	STA	EDTPOS			;
00092A  1  68           	PLA				;
00092B  1  85 0C        	STA	CSRPOSY			;
00092D  1  68           	PLA				;
00092E  1  85 0B        	STA	CSRPOSX			;
000930  1  9A           	TXS				;
000931  1               
000931  1  AE 81 09     	LDX	INSERTCHTEMP		;
000934  1               
000934  1               INSERTCR3:
000934  1  A0 00        	LDY    	#$00
000936  1  B1 0D        	LDA	(EDTPOS),Y		;
000938  1  AC 81 09     	LDY	INSERTCHTEMP		;
00093B  1  91 0D        	STA	(EDTPOS),Y		;
00093D  1               
00093D  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
000940  1  A9 00        	LDA	#$00			;
000942  1  A8           	TAY				;
000943  1  91 0D        	STA	(EDTPOS),Y		;
000945  1               
000945  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000948  1  CA           	DEX				;
000949  1  E0 00        	CPX	#$00			;
00094B  1  D0 E7        	BNE	INSERTCR3		;
00094D  1               
00094D  1  68           	PLA				;
00094E  1  85 0E        	STA	EDTPOS+1		;
000950  1  68           	PLA				;
000951  1  85 0D        	STA	EDTPOS			;
000953  1  68           	PLA				;
000954  1  85 0C        	STA	CSRPOSY			;
000956  1  68           	PLA				;
000957  1  85 0B        	STA	CSRPOSX			;
000959  1  20 F6 0F     	JSR	GOCSR
00095C  1               
00095C  1  A0 00        	LDY	#$00			;
00095E  1  A9 0D        	LDA	#13			;
000960  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
000962  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
000965  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000968  1               
000968  1               
000968  1  AE 81 09     	LDX	INSERTCHTEMP		;
00096B  1  CA           	DEX				;
00096C  1               INSERTCR4:
00096C  1  8A           	TXA
00096D  1  48           	PHA
00096E  1  B1 0D        	LDA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
000970  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
000973  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000976  1  68           	PLA				;
000977  1  AA           	TAX				;
000978  1  CA           	DEX				;
000979  1  E0 00        	CPX	#$00			;
00097B  1  D0 EF        	BNE	INSERTCR4		;
00097D  1               
00097D  1  20 F6 0F     	JSR	GOCSR
000980  1  60           	RTS
000981  1               
000981  1  00           INSERTCHTEMP:	.byte	0		;
000982  1               
000982  1               ;__TRUNCATE______________________________________________________________________________________________________________________
000982  1               ;
000982  1               ; 	TRUNCATE FILE AT THE CURRENT POSITION
000982  1               ;
000982  1               ;________________________________________________________________________________________________________________________________
000982  1               ;
000982  1               TRUNCATE:
000982  1  A5 0B        	LDA	CSRPOSX			; Store current cursor and edit position into stack
000984  1  48           	PHA				;
000985  1  A5 0C        	LDA	CSRPOSY			;
000987  1  48           	PHA				;
000988  1  A5 0D        	LDA	EDTPOS			;
00098A  1  48           	PHA				;
00098B  1  A5 0E        	LDA	EDTPOS+1		;
00098D  1  48           	PHA				;
00098E  1               
00098E  1  A0 00        	LDY	#$00			;
000990  1  A9 0D        	LDA	#13			;
000992  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
000994  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
000997  1               
000997  1               TRUNCATE_LOOP:
000997  1  20 C6 0D     	JSR	INCEDTPOS
00099A  1  A9 00        	LDA	#$00			;
00099C  1  A8           	TAY				;
00099D  1  91 0D        	STA	(EDTPOS),Y		; PUT CHAR IN EDIT BUFFER
00099F  1               
00099F  1  A5 0E        	LDA 	EDTPOS+1		;
0009A1  1  C5 13        	CMP 	CURRENTLEN+1		;
0009A3  1  D0 F2        	BNE 	TRUNCATE_LOOP		;
0009A5  1  A5 0D        	LDA 	EDTPOS			;
0009A7  1  C5 12        	CMP 	CURRENTLEN		;
0009A9  1  D0 EC        	BNE	TRUNCATE_LOOP		;
0009AB  1               
0009AB  1  68           	PLA				;
0009AC  1  85 0E        	STA	EDTPOS+1		;
0009AE  1  85 13        	STA 	CURRENTLEN+1		;
0009B0  1  68           	PLA				;
0009B1  1  85 0D        	STA	EDTPOS			;
0009B3  1  85 12        	STA 	CURRENTLEN		;
0009B5  1  68           	PLA				;
0009B6  1  85 0C        	STA	CSRPOSY			;
0009B8  1  68           	PLA				;
0009B9  1  85 0B        	STA	CSRPOSX			;
0009BB  1               
0009BB  1  20 8A 0D     	JSR	CHKPOS			;
0009BE  1  20 25 0E     	JSR	PAGEUP			;
0009C1  1               
0009C1  1  60           	RTS
0009C2  1               
0009C2  1               
0009C2  1               ;__INSERTLINE____________________________________________________________________________________________________________________
0009C2  1               ;
0009C2  1               ; 	INSERT ONE LINE AT THE CURRENT POSITION
0009C2  1               ;
0009C2  1               ;________________________________________________________________________________________________________________________________
0009C2  1               ;
0009C2  1               INSERTLINE:
0009C2  1  20 E0 08     	JSR	EDITCHECK		; VERIFY WE ARE NOT PAST EOF
0009C5  1  A5 12        	LDA	CURRENTLEN		;
0009C7  1  85 0F        	STA	TMPPOS			;
0009C9  1  A5 13        	LDA	CURRENTLEN+1		;
0009CB  1  85 10        	STA	TMPPOS+1		; TMPPOS SHOULD BE BOTTOM OF COPY
0009CD  1               
0009CD  1  A5 12        	LDA	CURRENTLEN		; SET CURRENTLEN TO NEW TOP
0009CF  1  18           	CLC				; (+80)
0009D0  1  69 50        	ADC	#$50			;
0009D2  1  85 12        	STA	CURRENTLEN		;
0009D4  1  A5 13        	LDA	CURRENTLEN+1		;
0009D6  1  69 00        	ADC	#$00			;
0009D8  1  85 13        	STA	CURRENTLEN+1		;
0009DA  1  C9 B7        	CMP	#>(Ram_top-1)		; are we at the end of RAM?
0009DC  1  B0 57        	BCS	INSERTLINE_ABORT	; IF SO, ABORT
0009DE  1               					;
0009DE  1               INSERTLINE1:
0009DE  1  A0 00        	LDY	#$00			;
0009E0  1  B1 0F        	LDA	(TMPPOS),Y		;
0009E2  1  A0 50        	LDY	#$50        		;
0009E4  1  91 0F        	STA	(TMPPOS),Y		;
0009E6  1  C6 0F        	DEC	TMPPOS			;
0009E8  1  A5 0F        	LDA	TMPPOS			;
0009EA  1  C9 FF        	CMP	#$FF			;
0009EC  1  D0 02        	BNE	INSERTLINE1A		;
0009EE  1  C6 10        	DEC	TMPPOS+1		;
0009F0  1               INSERTLINE1A:
0009F0  1  A5 10        	LDA 	TMPPOS+1		;
0009F2  1  C5 0E        	CMP 	EDTPOS+1		;
0009F4  1  D0 E8        	BNE 	INSERTLINE1		;
0009F6  1  A5 0F        	LDA 	TMPPOS			;
0009F8  1  C5 0D        	CMP 	EDTPOS			;
0009FA  1  D0 E2        	BNE	INSERTLINE1		;
0009FC  1  A2 50        	LDX	#80			;
0009FE  1  A0 00        	LDY	#$00			;
000A00  1  A9 00        	LDA	#$00			;
000A02  1               INSERTLINE2:
000A02  1  91 0F        	STA	(TMPPOS),Y		;
000A04  1  C8           	INY				;
000A05  1  CA           	DEX				;
000A06  1  E0 00        	CPX	#$00			;
000A08  1  D0 F8        	BNE	INSERTLINE2		;
000A0A  1               
000A0A  1  A5 0B        	LDA	CSRPOSX			;
000A0C  1  48           	PHA				;
000A0D  1  A5 0C        	LDA	CSRPOSY			;
000A0F  1  48           	PHA				;
000A10  1  A5 0D        	LDA	EDTPOS			;
000A12  1  48           	PHA				;
000A13  1  A5 0E        	LDA	EDTPOS+1		;
000A15  1  48           	PHA				;
000A16  1  A0 00        	LDY	#$00			;
000A18  1               
000A18  1               INSERTLINE3:
000A18  1  B1 0D        	LDA	(EDTPOS),Y		;
000A1A  1  20 4B 10     	JSR	TOCONSOLE		;
000A1D  1  20 C6 0D     	JSR	INCEDTPOS		;
000A20  1  A5 0C        	LDA	CSRPOSY			; HAVE WE REACHED THE END OF THE SCREEN?
000A22  1  C9 14        	CMP	#LASTROW		;
000A24  1  D0 F2        	BNE	INSERTLINE3		; NO
000A26  1  68           	PLA				;
000A27  1  85 0E        	STA	EDTPOS+1		;
000A29  1  68           	PLA				;
000A2A  1  85 0D        	STA	EDTPOS			;
000A2C  1  68           	PLA				;
000A2D  1  85 0C        	STA	CSRPOSY			;
000A2F  1  68           	PLA				;
000A30  1  85 0B        	STA	CSRPOSX			;
000A32  1  4C F6 0F     	JMP	GOCSR			;
000A35  1               
000A35  1               INSERTLINE_ABORT:
000A35  1  60           	RTS
000A36  1               
000A36  1               
000A36  1               
000A36  1               ;__DELETELINE____________________________________________________________________________________________________________________
000A36  1               ;
000A36  1               ; 	DELETE ONE LINE AT THE CURRENT POSITION
000A36  1               ;
000A36  1               ;________________________________________________________________________________________________________________________________
000A36  1               ;
000A36  1               DELETELINE:
000A36  1  A5 0D        	LDA	EDTPOS			;
000A38  1  85 0F        	STA	TMPPOS			;
000A3A  1  A5 0E        	LDA	EDTPOS+1		;
000A3C  1  85 10        	STA	TMPPOS+1		; TMPPOS SHOULD BE TOP OF COPY
000A3E  1               
000A3E  1  A5 12        	LDA	CURRENTLEN		; SET CURRENTLEN TO NEW TOP
000A40  1  38           	SEC				; (+80)
000A41  1  E9 50        	SBC	#$50			;
000A43  1  85 12        	STA	CURRENTLEN		;
000A45  1  A5 13        	LDA	CURRENTLEN+1		;
000A47  1  E9 00        	SBC	#$00			;
000A49  1  85 13        	STA	CURRENTLEN+1		;
000A4B  1               					;
000A4B  1               DELETELINE1:
000A4B  1  A0 50        	LDY	#$50			;
000A4D  1  B1 0F        	LDA	(TMPPOS),Y		;
000A4F  1  A0 00        	LDY	#$00        		;
000A51  1  91 0F        	STA	(TMPPOS),Y		;
000A53  1  E6 0F        	INC	TMPPOS			;
000A55  1  A5 0F        	LDA	TMPPOS			;
000A57  1  C9 00        	CMP	#$00			;
000A59  1  D0 02        	BNE	DELETELINE1A		;
000A5B  1  E6 10        	INC	TMPPOS+1		;
000A5D  1               DELETELINE1A:
000A5D  1  A5 10        	LDA 	TMPPOS+1		;
000A5F  1  C5 13        	CMP 	CURRENTLEN+1		;
000A61  1  D0 E8        	BNE 	DELETELINE1		;
000A63  1  A5 0F        	LDA 	TMPPOS			;
000A65  1  C5 12        	CMP 	CURRENTLEN		;
000A67  1  D0 E2        	BNE	DELETELINE1		;
000A69  1               
000A69  1  A5 0B        	LDA	CSRPOSX			;
000A6B  1  48           	PHA				;
000A6C  1  A5 0C        	LDA	CSRPOSY			;
000A6E  1  48           	PHA				;
000A6F  1  A5 0D        	LDA	EDTPOS			;
000A71  1  48           	PHA				;
000A72  1  A5 0E        	LDA	EDTPOS+1		;
000A74  1  48           	PHA				;
000A75  1  A9 00        	LDA	#$00			;
000A77  1  85 0B        	STA	CSRPOSX			;
000A79  1  20 F6 0F     	JSR	GOCSR			;
000A7C  1  A0 00        	LDY	#$00			;
000A7E  1               DELETELINE3:
000A7E  1  B1 0D        	LDA	(EDTPOS),Y		;
000A80  1  20 4B 10     	JSR	TOCONSOLE		;
000A83  1  20 C6 0D     	JSR	INCEDTPOS		;
000A86  1  A5 0C        	LDA	CSRPOSY			; HAVE WE REACHED THE END OF THE SCREEN?
000A88  1  C9 14        	CMP	#LASTROW		;
000A8A  1  D0 F2        	BNE	DELETELINE3		; NO
000A8C  1  68           	PLA				;
000A8D  1  85 0E        	STA	EDTPOS+1		;
000A8F  1  68           	PLA				;
000A90  1  85 0D        	STA	EDTPOS			;
000A92  1  68           	PLA				;
000A93  1  85 0C        	STA	CSRPOSY			;
000A95  1  68           	PLA				;
000A96  1  85 0B        	STA	CSRPOSX			;
000A98  1  4C F6 0F     	JMP	GOCSR			;
000A9B  1               
000A9B  1               
000A9B  1               ;__INSERTCHAR____________________________________________________________________________________________________________________
000A9B  1               ;
000A9B  1               ; 	INSERT ONE CHAR AT THE CURRENT POSITION
000A9B  1               ;
000A9B  1               ;________________________________________________________________________________________________________________________________
000A9B  1               ;
000A9B  1               INSERTCHAR:
000A9B  1  A5 0D        	LDA	EDTPOS			; STORE CURRENT POSITION
000A9D  1  85 0F        	STA	TMPPOS			;
000A9F  1  A5 0E        	LDA	EDTPOS+1		;
000AA1  1  85 10        	STA	TMPPOS+1		;
000AA3  1               
000AA3  1               					; FIND END OF LINE
000AA3  1  A0 00        	LDY	#$00			;
000AA5  1               INSERTCHAR1:
000AA5  1  B1 0F        	LDA	(TMPPOS),Y		;
000AA7  1               
000AA7  1  E6 0F        	INC	TMPPOS			; INC POINTER
000AA9  1  D0 02        	BNE	*+4			;
000AAB  1  E6 10        	INC	TMPPOS+1		;
000AAD  1  C9 0D        	CMP	#13			; AT END?
000AAF  1  F0 09        	BEQ	INSERTCHAR2		; FOUND END
000AB1  1               
000AB1  1  A5 10        	LDA	TMPPOS+1
000AB3  1  C9 B7        	CMP	#>(Ram_top-1)	; are we at the end of RAM?
000AB5  1  B0 54        	BCS	INSERTCHAR_ABORT	; IF SO, ABORT
000AB7  1  4C A5 0A     	JMP	INSERTCHAR1		;
000ABA  1               
000ABA  1               INSERTCHAR2:
000ABA  1  B1 0F        	LDA	(TMPPOS),Y		; FREE SPACE AT END OF LINE?
000ABC  1  C9 00        	CMP	#$00			;
000ABE  1  F0 03        	BEQ	INSERTCHAR3		;
000AC0  1  20 0C 0B     	JSR	INSERTCHAR5		; NO, INSERT A LINE
000AC3  1               
000AC3  1               INSERTCHAR3:
000AC3  1  C6 0F        	DEC	TMPPOS			; DEC TMPPOS
000AC5  1  A5 0F        	LDA	TMPPOS			;
000AC7  1  C9 FF        	CMP	#$FF			;
000AC9  1  D0 02        	BNE	*+4			;
000ACB  1  C6 10        	DEC	TMPPOS+1		;
000ACD  1               
000ACD  1  A0 00        	LDY	#$00			; MOVE EVERYTHING UP ONE POS
000ACF  1  B1 0F        	LDA	(TMPPOS),Y		;
000AD1  1  C8           	INY				;
000AD2  1  91 0F        	STA	(TMPPOS),Y		;
000AD4  1  A5 10        	LDA	TMPPOS+1		; AT CURRENT POSITION?
000AD6  1  C5 0E        	CMP	EDTPOS+1		;
000AD8  1  D0 E9        	BNE	INSERTCHAR3		; NO, LOOP
000ADA  1  A5 0F        	LDA	TMPPOS			;
000ADC  1  C5 0D        	CMP	EDTPOS			;
000ADE  1  D0 E3        	BNE	INSERTCHAR3		; NO, LOOP
000AE0  1               
000AE0  1  A5 0B        	LDA	CSRPOSX			;
000AE2  1  48           	PHA				;
000AE3  1  A5 0C        	LDA	CSRPOSY			;
000AE5  1  48           	PHA				;
000AE6  1  A5 0D        	LDA	EDTPOS			;
000AE8  1  48           	PHA				;
000AE9  1  A5 0E        	LDA	EDTPOS+1		;
000AEB  1  48           	PHA				;
000AEC  1  A0 00        	LDY	#$00			;
000AEE  1               INSERTCHAR4:
000AEE  1  B1 0D        	LDA	(EDTPOS),Y		;
000AF0  1  48           	PHA				;
000AF1  1  20 4B 10     	JSR	TOCONSOLE		;
000AF4  1  20 C6 0D     	JSR	INCEDTPOS		;
000AF7  1  68           	PLA 				;
000AF8  1  C9 0D        	CMP	#13			; HAVE WE REACHED THE END OF THE ROW?
000AFA  1  D0 F2        	BNE	INSERTCHAR4		; NO
000AFC  1  68           	PLA				;
000AFD  1  85 0E        	STA	EDTPOS+1		;
000AFF  1  68           	PLA				;
000B00  1  85 0D        	STA	EDTPOS			;
000B02  1  68           	PLA				;
000B03  1  85 0C        	STA	CSRPOSY			;
000B05  1  68           	PLA				;
000B06  1  85 0B        	STA	CSRPOSX			;
000B08  1  4C F6 0F     	JMP	GOCSR			;
000B0B  1               INSERTCHAR_ABORT:
000B0B  1  60           	RTS				;
000B0C  1               INSERTCHAR5:
000B0C  1  A5 0C        	LDA	CSRPOSY			; HAVE WE REACHED THE END OF THE SCREEN?
000B0E  1  C9 13        	CMP	#LASTROW-1		;
000B10  1  D0 03        	BNE	*+5			; NO
000B12  1  20 27 0D     	JSR	SCROLLDOWN		; SCROLL
000B15  1               
000B15  1  A5 0D        	LDA	EDTPOS			;
000B17  1  48           	PHA				;
000B18  1  A5 0E        	LDA	EDTPOS+1		;
000B1A  1  48           	PHA				;
000B1B  1  A5 0B        	LDA	CSRPOSX			;
000B1D  1  48           	PHA				;
000B1E  1  A5 0C        	LDA	CSRPOSY			;
000B20  1  48           	PHA				;
000B21  1  A9 00        	LDA	#$00			;
000B23  1  85 0B        	STA	CSRPOSX			;
000B25  1  E6 0C        	INC	CSRPOSY			;
000B27  1  20 F6 0F     	JSR	GOCSR			;
000B2A  1               
000B2A  1  A5 0F        	LDA	TMPPOS			;
000B2C  1  85 0D        	STA	EDTPOS			;
000B2E  1  A5 10        	LDA	TMPPOS+1		;
000B30  1  85 0E        	STA	EDTPOS+1		;
000B32  1               
000B32  1  20 C2 09     	JSR	INSERTLINE		;
000B35  1  68           	PLA				;
000B36  1  85 0C        	STA	CSRPOSY			;
000B38  1  68           	PLA				;
000B39  1  85 0B        	STA	CSRPOSX			;
000B3B  1  68           	PLA				;
000B3C  1  85 0E        	STA	EDTPOS+1		;
000B3E  1  68           	PLA				;
000B3F  1  85 0D        	STA	EDTPOS			;
000B41  1  4C F6 0F     	JMP	GOCSR			;
000B44  1               
000B44  1               
000B44  1               
000B44  1               
000B44  1               ;__BACKSPACE_____________________________________________________________________________________________________________________
000B44  1               ;
000B44  1               ; 	PERFORM BACKSPACE FUNCTION AT THE CURRENT POSITION
000B44  1               ;
000B44  1               ;________________________________________________________________________________________________________________________________
000B44  1               ;
000B44  1               BACKSPACE:
000B44  1  20 4A 0C     	JSR	CRSRLEFT
000B47  1  4C 4A 0B     	JMP	DELETECHAR
000B4A  1               
000B4A  1               
000B4A  1               ;__DELETECHAR____________________________________________________________________________________________________________________
000B4A  1               ;
000B4A  1               ; 	DELETE ONE CHAR AT THE CURRENT POSITION
000B4A  1               ;
000B4A  1               ;________________________________________________________________________________________________________________________________
000B4A  1               ;
000B4A  1               DELETECHAR:
000B4A  1  A5 0D        	LDA	EDTPOS			; STORE CURRENT POSITION
000B4C  1  85 0F        	STA	TMPPOS			;
000B4E  1  A5 0E        	LDA	EDTPOS+1		;
000B50  1  85 10        	STA	TMPPOS+1		;
000B52  1               
000B52  1               					; FIND MOVE CHARS BACK ONE SPACE UNTIL THE END OF LINE
000B52  1               DELETECHAR1:
000B52  1  A0 01        	LDY	#$01			;
000B54  1  B1 0F        	LDA	(TMPPOS),Y		;
000B56  1  C9 00        	CMP	#$00			;
000B58  1  D0 02        	BNE	DELETECHAR1A		;
000B5A  1  A9 20        	LDA	#32			; REPLACE NULLS WITH SPACES
000B5C  1               DELETECHAR1A:
000B5C  1  A0 00        	LDY	#$00			;
000B5E  1  91 0F        	STA	(TMPPOS),Y		;
000B60  1               
000B60  1  E6 0F        	INC	TMPPOS			; INC POINTER
000B62  1  D0 02        	BNE	*+4			;
000B64  1  E6 10        	INC	TMPPOS+1		;
000B66  1  C9 0D        	CMP	#13			; AT END?
000B68  1  F0 09        	BEQ	DELETECHAR2		; FOUND END
000B6A  1               
000B6A  1  A5 10        	LDA	TMPPOS+1
000B6C  1  C9 B7        	CMP	#>(Ram_top-1)		; are we at the end of RAM?
000B6E  1  B0 40        	BCS	DELETECHAR_ABORT	; IF SO, ABORT
000B70  1  4C 52 0B     	JMP	DELETECHAR1		;
000B73  1               
000B73  1               
000B73  1               
000B73  1               
000B73  1               DELETECHAR2:
000B73  1  A9 00        	LDA	#$00
000B75  1  91 0F        	STA	(TMPPOS),Y		;
000B77  1               
000B77  1  A5 0B        	LDA	CSRPOSX			;
000B79  1  48           	PHA				;
000B7A  1  A5 0C        	LDA	CSRPOSY			;
000B7C  1  48           	PHA				;
000B7D  1  A5 0D        	LDA	EDTPOS			;
000B7F  1  48           	PHA				;
000B80  1  A5 0E        	LDA	EDTPOS+1		;
000B82  1  48           	PHA				;
000B83  1  A0 00        	LDY	#$00			;
000B85  1               DELETECHAR4:
000B85  1  B1 0D        	LDA	(EDTPOS),Y		;
000B87  1  48           	PHA				;
000B88  1  20 4B 10     	JSR	TOCONSOLE		;
000B8B  1  20 C6 0D     	JSR	INCEDTPOS		;
000B8E  1  68           	PLA 				;
000B8F  1  C9 0D        	CMP	#13			; HAVE WE REACHED THE END OF THE ROW?
000B91  1  D0 F2        	BNE	DELETECHAR4		; NO
000B93  1               
000B93  1  A9 00        	LDA	#$00			; BLOT OUT THE OLD END OF LINE CHAR
000B95  1  20 4B 10     	JSR	TOCONSOLE		;
000B98  1  A5 0B        	LDA	CSRPOSX			;
000B9A  1  C9 01        	CMP	#01			; IF WE STAYED ON THE SAME LINE, DO NOTHING
000B9C  1  D0 03        	BNE	DELETECHAR5		;
000B9E  1  20 36 0A     	JSR	DELETELINE		;
000BA1  1               DELETECHAR5:
000BA1  1  68           	PLA				;
000BA2  1  85 0E        	STA	EDTPOS+1		;
000BA4  1  68           	PLA				;
000BA5  1  85 0D        	STA	EDTPOS			;
000BA7  1  68           	PLA				;
000BA8  1  85 0C        	STA	CSRPOSY			;
000BAA  1  68           	PLA				;
000BAB  1  85 0B        	STA	CSRPOSX			;
000BAD  1  4C F6 0F     	JMP	GOCSR			;
000BB0  1               DELETECHAR_ABORT:
000BB0  1  60           	RTS				;
000BB1  1               
000BB1  1  00           DELETECHARTMP:	.byte	0
000BB2  1               
000BB2  1               
000BB2  1               ;__TOGGLEMODE_____________________________________________________________________________________________________________________
000BB2  1               ;
000BB2  1               ; 	TOGGLE INSERT/OVERWRITE MODE
000BB2  1               ;
000BB2  1               ;________________________________________________________________________________________________________________________________
000BB2  1               ;
000BB2  1               TOGGLEMODE:
000BB2  1               
000BB2  1  A5 14        	LDA	MODE			;
000BB4  1  C9 00        	CMP	#$00			;
000BB6  1  D0 23        	BNE	TOGGLEMODEOW		;
000BB8  1               
000BB8  1               TOGGLEMODEIM:
000BB8  1  A9 01        	LDA	#$01			;
000BBA  1  85 14        	STA	MODE			;
000BBC  1  A9 C8        	LDA	#<IMMODE	     	;
000BBE  1  A0 0B        	LDY	#>IMMODE	;
000BC0  1  A2 09        	LDX	#9			;
000BC2  1  20 03 01     	JSR	PEM			;
000BC5  1  4C F6 0F     	JMP	GOCSR			;
000BC8  1               IMMODE:
000BC8  1  1B 5B 32 33  	.byte	$1B,'[','2','3',';','6','2','H'
000BCC  1  3B 36 32 48  
000BD0  1  1B 5B 37 6D  	.byte	$1B,'[','7','m'
000BD4  1  49 4D        	.byte	"IM"
000BD6  1  1B 5B 30 6D  	.byte	$1B,'[','0','m','$'
000BDA  1  24           
000BDB  1               TOGGLEMODEOW:
000BDB  1  A9 00        	LDA	#$00			;
000BDD  1  85 14        	STA	MODE			;
000BDF  1  A9 EB        	LDA	#<OWMODE		;
000BE1  1  A0 0B        	LDY	#>OWMODE		;
000BE3  1  A2 09        	LDX	#9			;
000BE5  1  20 03 01     	JSR	PEM			;
000BE8  1  4C F6 0F     	JMP	GOCSR			;
000BEB  1               
000BEB  1               OWMODE:
000BEB  1  1B 5B 32 33  	.byte	$1B,'[','2','3',';','6','2','H'
000BEF  1  3B 36 32 48  
000BF3  1  1B 5B 37 6D  	.byte	$1B,'[','7','m'
000BF7  1  4F 4D        	.byte	"OM"
000BF9  1  1B 5B 30 6D  	.byte	$1B,'[','0','m','$'
000BFD  1  24           
000BFE  1               
000BFE  1               
000BFE  1               
000BFE  1               ;__CRSRUP________________________________________________________________________________________________________________________
000BFE  1               ;
000BFE  1               ; 	MOVE THE CURSOR UP ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000BFE  1               ;
000BFE  1               ;________________________________________________________________________________________________________________________________
000BFE  1               ;
000BFE  1               CRSRUP:
000BFE  1  A5 0D        	LDA	EDTPOS			;
000C00  1  D0 07        	BNE	CRSRUP1			; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C02  1  A5 0E        	LDA	EDTPOS+1		; BUFFER.  IF IT IS, DO NOTHING.
000C04  1  C9 17        	CMP	#>BUFFER	;
000C06  1  D0 01        	BNE	CRSRUP1			;
000C08  1  60           	RTS				;
000C09  1               CRSRUP1:
000C09  1  A2 00        	LDX	#$00			;
000C0B  1  A5 0C        	LDA	CSRPOSY			; FIRST LINE?
000C0D  1  C9 00        	CMP	#$00			; THEN SCROLL UP
000C0F  1  D0 04        	BNE	CRSRUP2			;
000C11  1  20 A8 0C     	JSR	SCROLLUP		;
000C14  1  60           	RTS
000C15  1               
000C15  1               CRSRUP2:
000C15  1  20 CD 0D     	JSR	DECEDTPOS		; MOVE POINTER BACK ONE
000C18  1  E8           	INX				; INC COUNTER
000C19  1  E0 50        	CPX	#MAXCOL			; HAVE WE GONE BACK MAXCOL POSITIONS?
000C1B  1  D0 F8        	BNE	CRSRUP2			; YES, EXIT
000C1D  1               
000C1D  1  C6 0C        	DEC	CSRPOSY			;
000C1F  1  20 8A 0D     	JSR	CHKPOS			; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C22  1  60           	RTS				;
000C23  1               
000C23  1               
000C23  1               ;__CRSRDN________________________________________________________________________________________________________________________
000C23  1               ;
000C23  1               ; 	MOVE THE CURSOR DOWN ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C23  1               ;
000C23  1               ;________________________________________________________________________________________________________________________________
000C23  1               ;
000C23  1               CRSRDN:
000C23  1               
000C23  1  A5 0C        	LDA	CSRPOSY			; HAVE WE REACHED THE END OF THE SCREEN?
000C25  1  C9 13        	CMP	#LASTROW-1		;
000C27  1  D0 03        	BNE	CRSRDN1			; NO, JUST MOVE DOWN
000C29  1  20 27 0D     	JSR	SCROLLDOWN		; SCROLL
000C2C  1               
000C2C  1               CRSRDN1:
000C2C  1  A2 00        	LDX	#$00
000C2E  1               CRSRDN2:
000C2E  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000C31  1  E8           	INX
000C32  1  E0 50        	CPX	#MAXCOL
000C34  1  F0 0B        	BEQ 	CRSRDN3			; YES, DONE
000C36  1  A5 0E        	LDA 	EDTPOS+1		; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000C38  1  C9 B8        	CMP 	#>Ram_top	; are we at the end of RAM?
000C3A  1  F0 0B        	BEQ 	CRSRDN4			; YES, DONE THEN
000C3C  1  A5 0E        	LDA	EDTPOS+1		;
000C3E  1               
000C3E  1               CRSRDN2A:
000C3E  1  4C 2E 0C     	JMP 	CRSRDN2			; NO, KEEP GOING
000C41  1               CRSRDN3:
000C41  1  E6 0C        	INC 	CSRPOSY			;
000C43  1  20 8A 0D     	JSR	CHKPOS			; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C46  1  60           	RTS				;
000C47  1               CRSRDN4:
000C47  1  4C 77 0E     	JMP	PAINTSCREEN0		;
000C4A  1               
000C4A  1               
000C4A  1               
000C4A  1               ;__CRSRLEFT______________________________________________________________________________________________________________________
000C4A  1               ;
000C4A  1               ; 	MOVE THE CURSOR LEFT ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000C4A  1               ;
000C4A  1               ;________________________________________________________________________________________________________________________________
000C4A  1               ;
000C4A  1               CRSRLEFT:
000C4A  1  A5 0D        	LDA	EDTPOS			;
000C4C  1  D0 07        	BNE	CRSRLEFT1		; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C4E  1  A5 0E        	LDA	EDTPOS+1		; BUFFER.  IF IT IS, DO NOTHING.
000C50  1  C9 17        	CMP	#>BUFFER	;
000C52  1  D0 01        	BNE	CRSRLEFT1		;
000C54  1  60           	RTS				;
000C55  1               CRSRLEFT1:
000C55  1  C6 0B        	DEC	CSRPOSX			; DEC THE CURSOR POSITION
000C57  1  A5 0B        	LDA	CSRPOSX			; CHECK TO SEE IF WE WERE AT THE LEFT MOST POSITION
000C59  1  C9 FF        	CMP	#$FF			;
000C5B  1  F0 06        	BEQ	CRSRLEFT2		; IF WE WERE, DO SOME SPECIAL STUFF
000C5D  1  20 CD 0D     	JSR	DECEDTPOS		; MOVE EDTPOS 1 TO THE LEFT
000C60  1  4C 8A 0D     	JMP	CHKPOS			; POSITION THE CURSOR
000C63  1               CRSRLEFT2:				; CURSOR IS AT THE LEFT MOST LINE
000C63  1  A9 4F        	LDA	#MAXCOL-1		;
000C65  1  85 0B        	STA	CSRPOSX			;
000C67  1  AA           	TAX				;
000C68  1               CRSRLEFT2A:
000C68  1  20 C6 0D     	JSR	INCEDTPOS		;
000C6B  1  CA           	DEX				;
000C6C  1  D0 FA        	BNE	CRSRLEFT2A		;
000C6E  1  4C FE 0B     	JMP	CRSRUP			; MOVE UP ONE LINE
000C71  1               
000C71  1               
000C71  1               ;__CRSRRIGHT_____________________________________________________________________________________________________________________
000C71  1               ;
000C71  1               ; 	MOVE THE CURSOR RIGHT ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C71  1               ;
000C71  1               ;________________________________________________________________________________________________________________________________
000C71  1               ;
000C71  1               CRSRRIGHT:
000C71  1  A5 0C        	LDA	CSRPOSY			; IS CURSOR ON LAST POSITION OF SCREEN?
000C73  1  C9 13        	CMP	#LASTROW-1		; IF NOT, BRANCH TO CSRRIGHT1, OTHERWISE
000C75  1  D0 09        	BNE	CRSRRIGHT1		; SCROLL SCREEN
000C77  1  A5 0B        	LDA	CSRPOSX			;
000C79  1  C9 4F        	CMP	#MAXCOL-1		;
000C7B  1  D0 03        	BNE	CRSRRIGHT1		;
000C7D  1               					;
000C7D  1  20 27 0D     	JSR	SCROLLDOWN		;
000C80  1               					;
000C80  1               CRSRRIGHT1:				;
000C80  1  20 F6 0F     	JSR	GOCSR			; POSITION CURSOR
000C83  1  A0 00        	LDY	#$00			;
000C85  1  B1 0D        	LDA	(EDTPOS),Y		; GET CHAR FROM EDIT BUFFER
000C87  1  20 4B 10     	JSR	TOCONSOLE		; PLACE CHAR ON SCREEN
000C8A  1               					;
000C8A  1  20 C6 0D     	JSR	INCEDTPOS		; MOVE EDTPOS 1 TO THE RIGHT
000C8D  1               					;
000C8D  1  A5 0E        	LDA	EDTPOS+1		;
000C8F  1  C9 B8        	CMP	#>Ram_top	; are we at the end of RAM?
000C91  1  D0 11        	BNE	CRSRRIGHT2		; NO, EXIT
000C93  1  20 CD 0D     	JSR	DECEDTPOS		; OTHERWISE BACK POINTER OFF ONE
000C96  1               					; AND PLACE CURSOR BACK ONE POSITION
000C96  1  C6 0B        	DEC	CSRPOSX			;
000C98  1  A5 0B        	LDA	CSRPOSX			;
000C9A  1  C9 FF        	CMP	#$FF			;
000C9C  1  D0 06        	BNE	CRSRRIGHT2		;
000C9E  1  C6 0C        	DEC	CSRPOSY			;
000CA0  1  A9 50        	LDA	#MAXCOL			;
000CA2  1  85 0B        	STA	CSRPOSX			; DDW 11/29/2014 (FROM Y)
000CA4  1               CRSRRIGHT2:
000CA4  1  20 8A 0D     	JSR	CHKPOS
000CA7  1  60           	RTS				;
000CA8  1               
000CA8  1               
000CA8  1               
000CA8  1               ;__SCROLLUP_____________________________________________________________________________________________________________________
000CA8  1               ;
000CA8  1               ; 	SCROLL UP ONE LINE
000CA8  1               ;
000CA8  1               ;
000CA8  1               ;
000CA8  1               ;
000CA8  1               ;________________________________________________________________________________________________________________________________
000CA8  1               ;
000CA8  1               SCROLLUP:
000CA8  1  A5 0E        	LDA	EDTPOS+1		; CHECK HIGH BYTE, IF NOT EQUAL
000CAA  1  C9 17        	CMP	#>BUFFER	; NO WAY WE ARE AT START OF BUFFER
000CAC  1  D0 07        	BNE	SCROLLUPSTART		; SO SCROLL
000CAE  1  A5 0D        	LDA	EDTPOS			; CHECK LOW BYTE
000CB0  1  C9 51        	CMP	#MAXCOL+1		; IF WE ARE NOT ON TOP LINE
000CB2  1  B0 01        	BCS	SCROLLUPSTART		; SCROLL
000CB4  1  60           	RTS        			; IF NOT, DO NOTHING
000CB5  1               
000CB5  1               SCROLLUPSTART:
000CB5  1  A9 14        	LDA	#<SCROLLUPT		;
000CB7  1  A0 0D        	LDY	#>SCROLLUPT
000CB9  1  A2 09        	LDX	#9			;
000CBB  1  20 03 01     	JSR	PEM			;
000CBE  1               
000CBE  1  A5 0C        	LDA	CSRPOSY
000CC0  1  48           	PHA
000CC1  1  A5 0B        	LDA	CSRPOSX
000CC3  1  48           	PHA
000CC4  1               
000CC4  1  A9 50        	LDA	#MAXCOL
000CC6  1  18           	CLC
000CC7  1  65 0B        	ADC	CSRPOSX
000CC9  1  AA           	TAX
000CCA  1               SCROLLUP1:
000CCA  1  20 CD 0D     	JSR	DECEDTPOS
000CCD  1  CA           	DEX
000CCE  1  E0 00        	CPX	#$00
000CD0  1  D0 F8        	BNE	SCROLLUP1
000CD2  1               
000CD2  1  A2 00        	LDX	#$00
000CD4  1  86 0B        	STX	CSRPOSX
000CD6  1  86 0C        	STX	CSRPOSY
000CD8  1  20 F6 0F     	JSR	GOCSR
000CDB  1               
000CDB  1  A5 0D        	LDA	EDTPOS
000CDD  1  48           	PHA
000CDE  1  A5 0E        	LDA	EDTPOS+1
000CE0  1  48           	PHA
000CE1  1               
000CE1  1  20 CD 0D     	JSR	DECEDTPOS
000CE4  1  A0 00        	LDY	#$00
000CE6  1  A2 50        	LDX	#MAXCOL
000CE8  1               SCROLLUP2:
000CE8  1  20 C6 0D     	JSR	INCEDTPOS
000CEB  1  B1 0D        	LDA	(EDTPOS),Y
000CED  1  20 4B 10     	JSR	TOCONSOLE
000CF0  1  CA           	DEX
000CF1  1  E0 00        	CPX	#$00
000CF3  1  D0 F3        	BNE	SCROLLUP2
000CF5  1               
000CF5  1  68           	PLA
000CF6  1  85 0E        	STA	EDTPOS+1
000CF8  1  68           	PLA
000CF9  1  85 0D        	STA	EDTPOS
000CFB  1               
000CFB  1  68           	PLA
000CFC  1  85 0B        	STA	CSRPOSX			;
000CFE  1  AA           	TAX
000CFF  1  68           	PLA
000D00  1  85 0C        	STA	CSRPOSY			;
000D02  1  20 F6 0F     	JSR	GOCSR			;
000D05  1               
000D05  1               SCROLLUP3:
000D05  1  E0 00        	CPX	#$00
000D07  1  F0 07        	BEQ	SCROLLUP4
000D09  1  20 C6 0D     	JSR	INCEDTPOS
000D0C  1  CA           	DEX
000D0D  1  4C 05 0D     	JMP	SCROLLUP3
000D10  1               
000D10  1               SCROLLUP4:
000D10  1  20 8A 0D     	JSR	CHKPOS
000D13  1  60           	RTS
000D14  1               
000D14  1               SCROLLUPT:
000D14  1  1B 5B 33 3B  	.byte	$1B,'[','3',';','2','2','r',$1B,'[','3',';','1','H',$1B,'M',$1B,'[','r','$'
000D18  1  32 32 72 1B  
000D1C  1  5B 33 3B 31  
000D27  1               
000D27  1               ;__SCROLLDOWN___________________________________________________________________________________________________________________
000D27  1               ;
000D27  1               ; 	SCROLL DOWN ONE LINE
000D27  1               ;
000D27  1               ;
000D27  1               ;
000D27  1               ;________________________________________________________________________________________________________________________________
000D27  1               ;
000D27  1               SCROLLDOWN:
000D27  1  A9 76        	LDA	#<SCROLLDOWNT
000D29  1  A0 0D        	LDY	#>SCROLLDOWNT
000D2B  1  A2 09        	LDX	#9			;
000D2D  1  20 03 01     	JSR	PEM			;
000D30  1               
000D30  1               
000D30  1  A5 0B        	LDA	CSRPOSX
000D32  1  48           	PHA
000D33  1  A5 0C        	LDA	CSRPOSY
000D35  1  48           	PHA
000D36  1  A5 0D        	LDA	EDTPOS
000D38  1  48           	PHA
000D39  1  A5 0E        	LDA	EDTPOS+1
000D3B  1  48           	PHA
000D3C  1               
000D3C  1               
000D3C  1  A9 50               	LDA	#MAXCOL
000D3E  1  38                  	SEC
000D3F  1  E5 0B               	SBC	CSRPOSX
000D41  1  AA           	TAX
000D42  1  CA           	DEX
000D43  1  F0 08        	BEQ	SCROLLDOWN1A
000D45  1               SCROLLDOWN1:
000D45  1  20 C6 0D     	JSR	INCEDTPOS
000D48  1  CA           	DEX
000D49  1  E0 00        	CPX	#$00
000D4B  1  D0 F8        	BNE	SCROLLDOWN1
000D4D  1               SCROLLDOWN1A:
000D4D  1  A2 00        	LDX	#$00
000D4F  1  86 0B        	STX	CSRPOSX
000D51  1  20 F6 0F     	JSR	GOCSR
000D54  1               
000D54  1  A0 00        	LDY	#$00
000D56  1  A2 50        	LDX	#MAXCOL
000D58  1               SCROLLDOWN2:
000D58  1  20 C6 0D     	JSR	INCEDTPOS
000D5B  1  B1 0D        	LDA	(EDTPOS),Y
000D5D  1  20 4B 10     	JSR	TOCONSOLE
000D60  1  CA           	DEX
000D61  1  E0 00        	CPX	#$00
000D63  1  D0 F3        	BNE	SCROLLDOWN2
000D65  1               
000D65  1  68           	PLA
000D66  1  85 0E        	STA	EDTPOS+1
000D68  1  68           	PLA
000D69  1  85 0D        	STA	EDTPOS
000D6B  1  68           	PLA
000D6C  1  85 0C        	STA	CSRPOSY
000D6E  1  68           	PLA
000D6F  1  85 0B        	STA	CSRPOSX
000D71  1  C6 0C        	DEC	CSRPOSY
000D73  1               
000D73  1  4C 8A 0D     	JMP	CHKPOS
000D76  1               
000D76  1               SCROLLDOWNT:
000D76  1  1B 5B 33 3B  	.byte	$1B,'[','3',';','2','2','r',$1B,'[','2','2',';','1','H',$1B,'D',$1B,'[','r','$'
000D7A  1  32 32 72 1B  
000D7E  1  5B 32 32 3B  
000D8A  1               
000D8A  1               
000D8A  1               
000D8A  1               ;__CHKPOS________________________________________________________________________________________________________________________
000D8A  1               ;
000D8A  1               ; 	ENSURE THAT THE CURSOR IS ON A VALID EDITING POSITION
000D8A  1               ;	IF NOT, FIND ONE!
000D8A  1               ;
000D8A  1               ;________________________________________________________________________________________________________________________________
000D8A  1               ;
000D8A  1               CHKPOS:
000D8A  1  A0 00        	LDY	#$00
000D8C  1  B1 0D        	LDA	(EDTPOS),Y
000D8E  1  C9 00        	CMP	#$00
000D90  1  D0 31        	BNE	CHKPOS2
000D92  1               
000D92  1  A5 0E        	LDA	EDTPOS+1		; CHECK HIGH BYTE, IF NOT EQUAL
000D94  1  C9 17        	CMP	#>BUFFER	; NO WAY WE ARE AT START OF BUFFER
000D96  1  D0 07        	BNE	CHKPOS1			; SO GO ON
000D98  1  A5 0D        	LDA	EDTPOS			; CHECK LOW BYTE
000D9A  1  C9 00        	CMP	#$00			; IF WE ARE NOT AT TOP
000D9C  1  B0 01        	BCS	CHKPOS1			; SCROLL
000D9E  1  60           	RTS        			; IF NOT, DO NOTHING
000D9F  1               CHKPOS1:
000D9F  1  20 CD 0D     	JSR	DECEDTPOS		; DEC THE EDIT POSITION
000DA2  1  C6 0B        	DEC	CSRPOSX			; DEC THE CURSOR POSITION
000DA4  1  A5 0B        	LDA	CSRPOSX			; ARE WE PAST THE START OF THE ROW?
000DA6  1  C9 FF        	CMP	#$FF
000DA8  1  F0 03        	BEQ	CHKPOS1A		; YES, GO UP ONE LINE
000DAA  1  4C 8A 0D     	JMP	CHKPOS			; NO, LOOP
000DAD  1               
000DAD  1               CHKPOS1A:
000DAD  1  A9 4F        	LDA	#MAXCOL-1		; LOAD X AT MAXCOL
000DAF  1  85 0B        	STA	CSRPOSX
000DB1  1  C6 0C        	DEC	CSRPOSY
000DB3  1  A5 0C        	LDA	CSRPOSY
000DB5  1  C9 FF        	CMP	#$FF
000DB7  1  D0 07        	BNE	CHKPOS1B
000DB9  1  A9 00        	LDA	#$00
000DBB  1  85 0C        	STA	CSRPOSY
000DBD  1  4C A8 0C     	JMP	SCROLLUP
000DC0  1               
000DC0  1               CHKPOS1B:
000DC0  1  4C 8A 0D     	JMP	CHKPOS
000DC3  1               CHKPOS2:
000DC3  1  4C F6 0F     	JMP	GOCSR
000DC6  1               
000DC6  1               
000DC6  1               
000DC6  1               ;__INCEDTPOS_____________________________________________________________________________________________________________________
000DC6  1               ;
000DC6  1               ; 	INCREMENT THE EDTPOS POINTER
000DC6  1               ;
000DC6  1               ;________________________________________________________________________________________________________________________________
000DC6  1               ;
000DC6  1               
000DC6  1               INCEDTPOS:
000DC6  1  E6 0D        	INC	EDTPOS
000DC8  1  D0 02        	BNE	INCEDTPOS1
000DCA  1  E6 0E        	INC	EDTPOS+1
000DCC  1               INCEDTPOS1:
000DCC  1  60           	RTS
000DCD  1               
000DCD  1               ;__DECEDTPOS_____________________________________________________________________________________________________________________
000DCD  1               ;
000DCD  1               ; 	DECREMENT THE EDTPOS POINTER
000DCD  1               ;
000DCD  1               ;________________________________________________________________________________________________________________________________
000DCD  1               ;
000DCD  1               DECEDTPOS:
000DCD  1  C6 0D        	DEC	EDTPOS
000DCF  1  A5 0D        	LDA	EDTPOS
000DD1  1  C9 FF        	CMP	#$FF
000DD3  1  D0 02        	BNE	DECEDTPOS1
000DD5  1  C6 0E        	DEC	EDTPOS+1
000DD7  1               DECEDTPOS1:
000DD7  1  60           	RTS
000DD8  1               
000DD8  1               
000DD8  1               
000DD8  1               
000DD8  1               ;__PAGEDOWN_______________________________________________________________________________________________________________________
000DD8  1               ;
000DD8  1               ; 	PERFORM PAGE DOWN FUNCTION
000DD8  1               ;
000DD8  1               ;
000DD8  1               ;________________________________________________________________________________________________________________________________
000DD8  1               ;
000DD8  1               PAGEDOWN:
000DD8  1  A5 0D        	LDA	EDTPOS			;
000DDA  1  D0 09        	BNE	PAGEDOWNA		; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000DDC  1  A5 0E        	LDA	EDTPOS+1		; BUFFER.
000DDE  1  C9 17        	CMP	#>BUFFER	;
000DE0  1  D0 03        	BNE	PAGEDOWNA		;
000DE2  1  4C F3 0D     	JMP 	PAGEDOWN1		;
000DE5  1               PAGEDOWNA:
000DE5  1  A5 0B        	LDA	CSRPOSX
000DE7  1  C9 00        	CMP	#$00
000DE9  1  F0 08        	BEQ	PAGEDOWN1
000DEB  1  20 CD 0D     	JSR	DECEDTPOS
000DEE  1  C6 0B        	DEC	CSRPOSX
000DF0  1  4C D8 0D     	JMP	PAGEDOWN
000DF3  1               
000DF3  1               PAGEDOWN1:
000DF3  1  A2 64        	LDX	#$64
000DF5  1               PAGEDOWN2:
000DF5  1  A0 10        	LDY	#$10
000DF7  1               PAGEDOWN2A:
000DF7  1  20 C6 0D     	JSR	INCEDTPOS
000DFA  1               
000DFA  1  A5 0E        	LDA 	EDTPOS+1		; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000DFC  1  C9 B8        	CMP 	#>Ram_top	; are we at the end of RAM?
000DFE  1  D0 03        	BNE	PAGEDOWN2B		;
000E00  1  4C 0D 0E     	JMP	PAGEDOWN2C		;
000E03  1               PAGEDOWN2B:
000E03  1  88           	DEY
000E04  1  C0 00        	CPY	#$00
000E06  1  D0 EF        	BNE	PAGEDOWN2A
000E08  1  CA           	DEX
000E09  1  E0 00        	CPX	#$00
000E0B  1  D0 E8        	BNE	PAGEDOWN2
000E0D  1               PAGEDOWN2C:
000E0D  1  A5 0D        	LDA	EDTPOS
000E0F  1  48           	PHA
000E10  1  A5 0E        	LDA	EDTPOS+1
000E12  1  48           	PHA
000E13  1  20 7F 0E     	JSR 	PAINTSCREEN1
000E16  1  68           	PLA
000E17  1  85 0E        	STA	EDTPOS+1
000E19  1  68           	PLA
000E1A  1  85 0D        	STA	EDTPOS
000E1C  1  A9 00        	LDA	#$00
000E1E  1  85 0B        	STA	CSRPOSX
000E20  1  85 0C        	STA	CSRPOSY
000E22  1  4C F6 0F     	JMP	GOCSR
000E25  1               
000E25  1               
000E25  1               
000E25  1               
000E25  1               
000E25  1               ;__PAGEUP________________________________________________________________________________________________________________________
000E25  1               ;
000E25  1               ; 	PERFORM PAGE UP FUNCTION
000E25  1               ;
000E25  1               ;
000E25  1               ;________________________________________________________________________________________________________________________________
000E25  1               ;
000E25  1               PAGEUP:
000E25  1  A5 0D        	LDA	EDTPOS		;
000E27  1  D0 07        	BNE	PAGEUPA		; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E29  1  A5 0E        	LDA	EDTPOS+1	; BUFFER.
000E2B  1  C9 17        	CMP	#>BUFFER	;
000E2D  1  D0 01        	BNE	PAGEUPA		;
000E2F  1  60           	RTS
000E30  1               PAGEUPA:
000E30  1  A5 0B        	LDA	CSRPOSX
000E32  1  C9 00        	CMP	#$00
000E34  1  F0 08        	BEQ	PAGEUP1
000E36  1  20 CD 0D     	JSR	DECEDTPOS
000E39  1  C6 0B        	DEC	CSRPOSX
000E3B  1  4C 25 0E     	JMP	PAGEUP
000E3E  1               
000E3E  1               PAGEUP1:
000E3E  1  A2 64        	LDX	#$64
000E40  1               PAGEUP2:
000E40  1  A0 10        	LDY	#$10
000E42  1               PAGEUP2A:
000E42  1  20 CD 0D     	JSR	DECEDTPOS
000E45  1               
000E45  1  A5 0D        	LDA	EDTPOS			;
000E47  1  D0 09        	BNE	PAGEUP2B		; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E49  1  A5 0E        	LDA	EDTPOS+1		; BUFFER.
000E4B  1  C9 17        	CMP	#>BUFFER	;
000E4D  1  D0 03        	BNE	PAGEUP2B		;
000E4F  1  4C 5C 0E     	JMP	PAGEUP2C		;
000E52  1               PAGEUP2B:
000E52  1  88           	DEY
000E53  1  C0 00        	CPY	#$00
000E55  1  D0 EB        	BNE	PAGEUP2A
000E57  1  CA           	DEX
000E58  1  E0 00        	CPX	#$00
000E5A  1  D0 E4        	BNE	PAGEUP2
000E5C  1               PAGEUP2C:
000E5C  1  A5 0D        	LDA	EDTPOS
000E5E  1  48           	PHA
000E5F  1  A5 0E        	LDA	EDTPOS+1
000E61  1  48           	PHA
000E62  1  20 7F 0E     	JSR 	PAINTSCREEN1
000E65  1  68           	PLA
000E66  1  85 0E        	STA	EDTPOS+1
000E68  1  68           	PLA
000E69  1  85 0D        	STA	EDTPOS
000E6B  1  A9 00        	LDA	#$00
000E6D  1  85 0B        	STA	CSRPOSX
000E6F  1  85 0C        	STA	CSRPOSY
000E71  1  4C F6 0F     	JMP	GOCSR
000E74  1               
000E74  1               
000E74  1               ;__PAINTSCREEN___________________________________________________________________________________________________________________
000E74  1               ;
000E74  1               ; 	PAINT THE INITIAL EDIT SCREEN
000E74  1               ;
000E74  1               ;
000E74  1               ;
000E74  1               ;________________________________________________________________________________________________________________________________
000E74  1               ;
000E74  1               PAINTSCREEN:
000E74  1  20 E8 0F     	JSR	CLEARSCREEN
000E77  1               
000E77  1               PAINTSCREEN0:
000E77  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
000E79  1  85 0D        	STA	EDTPOS			; STORE DEST BUFFER
000E7B  1  A9 17        	LDA	#>BUFFER	;
000E7D  1  85 0E        	STA	EDTPOS+1		; STORE DEST BUFFER
000E7F  1               
000E7F  1               PAINTSCREEN1:
000E7F  1  A9 00        	LDA	#$00
000E81  1  85 0B        	STA	CSRPOSX
000E83  1  85 0C        	STA 	CSRPOSY
000E85  1  20 F6 0F     	JSR	GOCSR
000E88  1               
000E88  1               
000E88  1               PAINTSCREEN_LOOP:
000E88  1  A0 00        	LDY	#$00
000E8A  1  B1 0D        	LDA	(EDTPOS),Y
000E8C  1  20 4B 10     	JSR	TOCONSOLE
000E8F  1               
000E8F  1  E6 0D        	INC	EDTPOS
000E91  1  D0 02        	BNE	PAINTSCREEN_LOOPA
000E93  1  E6 0E        	INC	EDTPOS+1
000E95  1               
000E95  1               PAINTSCREEN_LOOPA:
000E95  1  A5 0C        	LDA	CSRPOSY
000E97  1  C9 14        	CMP	#LASTROW
000E99  1  D0 ED        	BNE	PAINTSCREEN_LOOP
000E9B  1               
000E9B  1  A9 00        	LDA	#$00
000E9D  1  85 0B        	STA	CSRPOSX
000E9F  1  85 0C        	STA 	CSRPOSY
000EA1  1  20 F6 0F     	JSR	GOCSR
000EA4  1               
000EA4  1  A0 00        	LDY	#$00
000EA6  1               
000EA6  1               PAINTSCREEN_LOOPB:
000EA6  1  B9 07 01     	LDA	DFLFCB,Y
000EA9  1  99 27 0F     	STA	SCREENFORMAT1,Y
000EAC  1  C8           	INY
000EAD  1  C0 08        	CPY	#8
000EAF  1  D0 F5        	BNE	PAINTSCREEN_LOOPB
000EB1  1  A9 2E        	LDA	#'.'
000EB3  1  C8           	INY
000EB4  1  99 27 0F     	STA	SCREENFORMAT1,Y
000EB7  1  B9 07 01     	LDA	DFLFCB,Y
000EBA  1  C8           	INY
000EBB  1  99 27 0F     	STA	SCREENFORMAT1,Y
000EBE  1  B9 07 01     	LDA	DFLFCB,Y
000EC1  1  C8           	INY
000EC2  1  99 27 0F     	STA	SCREENFORMAT1,Y
000EC5  1  B9 07 01     	LDA	DFLFCB,Y
000EC8  1  C8           	INY
000EC9  1  99 27 0F     	STA	SCREENFORMAT1,Y
000ECC  1               
000ECC  1               
000ECC  1               
000ECC  1               
000ECC  1  A9 DE        	LDA	#<SCREENFORMAT
000ECE  1  A0 0E        	LDY	#>SCREENFORMAT
000ED0  1  A2 09        	LDX	#9			;
000ED2  1  20 03 01     	JSR	PEM			;
000ED5  1  A9 27        	LDA	#<SCREENFORMAT1
000ED7  1  A0 0F        	LDY	#>SCREENFORMAT1
000ED9  1  A2 09        	LDX	#9			;
000EDB  1  4C 03 01     	JMP	PEM			;
000EDE  1               
000EDE  1               
000EDE  1               SCREENFORMAT:
000EDE  1  1B 5B 30 30  	.byte	$1B,'[','0','0',';','0','0','H'
000EE2  1  3B 30 30 48  
000EE6  1  1B 5B 37 6D  	.byte	$1B,'[','7','m'
000EEA  1  44 4F 53 2F  	.byte	"DOS/65 SCREEN EDITOR"
000EEE  1  36 35 20 53  
000EF2  1  43 52 45 45  
000EFE  1  20 20 20 20  	.byte	"                    "
000F02  1  20 20 20 20  
000F06  1  20 20 20 20  
000F12  1  20 20 20 20  	.byte	"                    ",'$'
000F16  1  20 20 20 20  
000F1A  1  20 20 20 20  
000F27  1               SCREENFORMAT1:
000F27  1  20 20 20 20  	.byte	"                     "
000F2B  1  20 20 20 20  
000F2F  1  20 20 20 20  
000F3C  1  5F 5F 5F 5F  	.byte	"____________________"
000F40  1  5F 5F 5F 5F  
000F44  1  5F 5F 5F 5F  
000F50  1  5F 5F 5F 5F  	.byte	"____________________"
000F54  1  5F 5F 5F 5F  
000F58  1  5F 5F 5F 5F  
000F64  1  5F 5F 5F 5F  	.byte	"____________________"
000F68  1  5F 5F 5F 5F  
000F6C  1  5F 5F 5F 5F  
000F78  1  5F 5F 5F 5F  	.byte	"____________________"
000F7C  1  5F 5F 5F 5F  
000F80  1  5F 5F 5F 5F  
000F8C  1  1B 5B 32 33  	.byte	$1B,'[','2','3',';','0','0','H'
000F90  1  3B 30 30 48  
000F94  1  20 20 46 33  	.byte	"  F3=QUIT  F4=MODE  F7=SAVE "
000F98  1  3D 51 55 49  
000F9C  1  54 20 20 46  
000FB0  1  20 46 38 3D  	.byte	" F8=SAVE AS  F12=TRUNC.     "
000FB4  1  53 41 56 45  
000FB8  1  20 41 53 20  
000FCC  1  20 20 20 20  	.byte	"     OM                "
000FD0  1  20 4F 4D 20  
000FD4  1  20 20 20 20  
000FE3  1  1B 5B 30 6D  	.byte	$1B,'[','0','m','$'
000FE7  1  24           
000FE8  1               
000FE8  1               
000FE8  1               
000FE8  1               ;__CLEARSCREEN___________________________________________________________________________________________________________________
000FE8  1               ;
000FE8  1               ; 	CLEAR THE SCREEN
000FE8  1               ;
000FE8  1               ;
000FE8  1               ;
000FE8  1               ;________________________________________________________________________________________________________________________________
000FE8  1               ;
000FE8  1               CLEARSCREEN:
000FE8  1  A9 F1        	LDA	#<CLEARSCREENT
000FEA  1  A0 0F        	LDY	#>CLEARSCREENT
000FEC  1  A2 09        	LDX	#9			;
000FEE  1  4C 03 01     	JMP	PEM			;
000FF1  1               CLEARSCREENT:
000FF1  1  1B 5B 32 4A  	.byte	$1B,'[','2','J','$'
000FF5  1  24           
000FF6  1               
000FF6  1               
000FF6  1               ;__GOCSR_________________________________________________________________________________________________________________________
000FF6  1               ;
000FF6  1               ; 	PLACE THE PHYSICAL CURSOR ON TO CSRPOSY AND CSRPOSX
000FF6  1               ;
000FF6  1               ;
000FF6  1               ;
000FF6  1               ;________________________________________________________________________________________________________________________________
000FF6  1               ;
000FF6  1               GOCSR:
000FF6  1  48           	PHA
000FF7  1  98           	TYA
000FF8  1  48           	PHA
000FF9  1  8A           	TXA
000FFA  1  48           	PHA
000FFB  1  A4 0C        	LDY	CSRPOSY
000FFD  1  B9 AC 15     	LDA	DECIMAL1+3,Y
001000  1  29 0F        	AND	#$0F
001002  1  18           	CLC
001003  1  69 30        	ADC	#'0'
001005  1  8D 45 10     	STA	GOCSRT+3
001008  1  B9 AC 15     	LDA	DECIMAL1+3,Y
00100B  1  6A           	ROR	A
00100C  1  6A           	ROR	A
00100D  1  6A           	ROR	A
00100E  1  6A           	ROR	A
00100F  1  29 0F        	AND	#$0F
001011  1  18           	CLC
001012  1  69 30        	ADC	#'0'
001014  1  8D 44 10     	STA	GOCSRT+2
001017  1               
001017  1  A4 0B        	LDY	CSRPOSX
001019  1  B9 AA 15     	LDA	DECIMAL1+1,Y
00101C  1  29 0F        	AND	#$0F
00101E  1  18           	CLC
00101F  1  69 30        	ADC	#'0'
001021  1  8D 48 10     	STA	GOCSRT+6
001024  1  B9 AA 15     	LDA	DECIMAL1+1,Y
001027  1  6A           	ROR	A
001028  1  6A           	ROR	A
001029  1  6A           	ROR	A
00102A  1  6A           	ROR	A
00102B  1  29 0F        	AND	#$0F
00102D  1  18           	CLC
00102E  1  69 30        	ADC	#'0'
001030  1  8D 47 10     	STA	GOCSRT+5
001033  1  A9 42        	LDA	#<GOCSRT
001035  1  A0 10        	LDY	#>GOCSRT
001037  1  A2 09        	LDX	#9			;
001039  1  20 03 01     	JSR	PEM			;
00103C  1  68           	PLA
00103D  1  AA           	TAX
00103E  1  68           	PLA
00103F  1  A8           	TAY
001040  1  68           	PLA
001041  1  60           	RTS
001042  1               GOCSRT:
001042  1  1B 5B 30 30  	.byte	$1B,'[','0','0',';','0','0','H','$'
001046  1  3B 30 30 48  
00104A  1  24           
00104B  1               
00104B  1               ;__TOCONSOLE_____________________________________________________________________________________________________________________
00104B  1               ;
00104B  1               ; 	TRANSLATE BUFFER TO CONSOLE
00104B  1               ;	A: CHAR TO OUTPUT
00104B  1               ;
00104B  1               ;
00104B  1               ;________________________________________________________________________________________________________________________________
00104B  1               ;
00104B  1               TOCONSOLE:
00104B  1  85 08        	STA	TEMP
00104D  1  8A           	TXA
00104E  1  48           	PHA
00104F  1  98           	TYA
001050  1  48           	PHA
001051  1  A5 08        	LDA	TEMP
001053  1  C9 0D        	CMP	#$0D			;  IS CHAR A <CR>?
001055  1  D0 0C        	BNE	TOCONSOLE1		;  NO, CONTINUE
001057  1  A9 84        	LDA	#<PRINTCR
001059  1  A0 10        	LDY	#>PRINTCR
00105B  1  A2 09        	LDX	#9			;
00105D  1  20 03 01     	JSR	PEM			;
001060  1  4C 6E 10     	JMP	TOCONSOLE1B		;
001063  1               TOCONSOLE1:
001063  1  C9 00        	CMP	#$00			; IS NULL?
001065  1  D0 02        	BNE	TOCONSOLE1A		;  NO, CONTINUE
001067  1  A9 20        	LDA	#32			; CHANGE NULL TO SPACE
001069  1               TOCONSOLE1A:
001069  1  A2 02        	LDX	#2			;  OUTPUT THE CHAR TO THE CONSOLE
00106B  1  20 03 01     	JSR	PEM			;
00106E  1               TOCONSOLE1B:
00106E  1  E6 0B        	INC	CSRPOSX			;  MOVE THE CURSOR
001070  1  A5 0B        	LDA	CSRPOSX			;  ARE WE AT THE END OF THE LINE?
001072  1  C9 50        	CMP	#MAXCOL			;
001074  1  D0 09        	BNE	TOCONSOLE2		;  NO, EXIT
001076  1               
001076  1  A9 00        	LDA	#$00			; MOVE CRSR TO START OF LINE
001078  1  85 0B        	STA	CSRPOSX			;
00107A  1  E6 0C        	INC	CSRPOSY			; ADVANCE TO NEXT ROW
00107C  1  20 F6 0F     	JSR	GOCSR			; MOVE CRSR
00107F  1               TOCONSOLE2:
00107F  1  68           	PLA
001080  1  A8           	TAY
001081  1  68           	PLA
001082  1  AA           	TAX
001083  1  60           	RTS				; DONE
001084  1               
001084  1               PRINTCR:
001084  1  1B 5B 37 6D  	.byte	$1B,'[','7','m','<',$1B,'[','0','m','$'
001088  1  3C 1B 5B 30  
00108C  1  6D 24        
00108E  1               
00108E  1               
00108E  1               ;__READKB________________________________________________________________________________________________________________________
00108E  1               ;
00108E  1               ; 	READ THE KEYBOARD
00108E  1               ;	A: DATA
00108E  1               ;	Y: COMMAND
00108E  1               ;		0 IS REGULAR CHAR
00108E  1               ;		1 IS FUNCTION KEY
00108E  1               ;			00=CRSR UP
00108E  1               ;			01=CRSR DN
00108E  1               ;			02=CRSR LEFT
00108E  1               ;			03=CRSR RIGHT
00108E  1               ;			04=PG DN
00108E  1               ;			05=PG UP
00108E  1               ;			08=BACKSPACE
00108E  1               ;			$30=CR
00108E  1               ;			$11-$24= FUNCTION KEYS
00108E  1               ;		$FF IS NULL OP
00108E  1               ;________________________________________________________________________________________________________________________________
00108E  1               ;
00108E  1               READKB:
00108E  1  20 50 11     	JSR	READKB_XON
001091  1               
001091  1  A9 00        	LDA 	#$00		;
001093  1  A0 FF        	LDY 	#$FF		;
001095  1               
001095  1  A2 06        	LDX	#6		;
001097  1  20 03 01     	JSR	PEM		;
00109A  1               
00109A  1  C9 7F        	CMP	#127		;
00109C  1  F0 29        	BEQ	READKB_DEL	;
00109E  1               
00109E  1  C9 20        	CMP	#32		;
0010A0  1  B0 17        	BCS	READKB_CHAR	;
0010A2  1               
0010A2  1  C9 1B        	CMP	#$1B		;
0010A4  1  F0 31        	BEQ	READKB_ESC	;
0010A6  1               
0010A6  1  C9 0D        	CMP	#$0D		;
0010A8  1  F0 07        	BEQ	READKB_CR	;
0010AA  1               
0010AA  1  C9 08        	CMP	#$08		;
0010AC  1  F0 11        	BEQ	READKB_BS	;
0010AE  1               
0010AE  1  4C CF 10     	JMP	READKB_ERR	;
0010B1  1               
0010B1  1               READKB_CR:
0010B1  1  20 56 11     	JSR 	READKB_XOFF
0010B4  1  A0 01        	LDY	#01
0010B6  1  A9 30        	LDA	#$30
0010B8  1  60           	RTS
0010B9  1               
0010B9  1               READKB_CHAR:
0010B9  1  20 56 11     	JSR 	READKB_XOFF
0010BC  1  A0 00        	LDY	#00
0010BE  1  60           	RTS
0010BF  1               
0010BF  1               READKB_BS:
0010BF  1  20 56 11     	JSR 	READKB_XOFF
0010C2  1  A0 01        	LDY	#01
0010C4  1  A9 08        	LDA	#08
0010C6  1  60           	RTS
0010C7  1               
0010C7  1               READKB_DEL:
0010C7  1  20 56 11     	JSR 	READKB_XOFF
0010CA  1  A0 01        	LDY	#01
0010CC  1  A9 7F        	LDA	#127
0010CE  1  60           	RTS
0010CF  1               
0010CF  1               READKB_ERR:
0010CF  1  20 56 11     	JSR 	READKB_XOFF
0010D2  1  A0 FF        	LDY	#$FF
0010D4  1  A9 00        	LDA	#$00
0010D6  1  60           	RTS
0010D7  1               
0010D7  1               READKB_ESC:
0010D7  1  A2 06        	LDX	#6		;
0010D9  1  20 03 01     	JSR	PEM		;
0010DC  1               
0010DC  1  C9 5B        	CMP	#'['
0010DE  1  D0 EF        	BNE	READKB_ERR
0010E0  1               
0010E0  1  A2 06        	LDX	#6		;
0010E2  1  20 03 01     	JSR	PEM		;
0010E5  1               
0010E5  1  48           	PHA
0010E6  1  29 F0        	AND	#$F0
0010E8  1  AA           	TAX
0010E9  1  68           	PLA
0010EA  1  E0 30        	CPX	#$30
0010EC  1  D0 2C        	BNE	READKB_NOTFKEY
0010EE  1  29 0F        	AND	#$0F
0010F0  1  85 08        	STA 	TEMP
0010F2  1  A2 06        	LDX	#6		;
0010F4  1  20 03 01     	JSR	PEM		;
0010F7  1  C9 7E        	CMP	#'~'
0010F9  1  D0 05        	BNE	READKB_FKEY1
0010FB  1  A9 00        	LDA	#$00
0010FD  1  4C 11 11     	JMP	READKB_FKEY2
001100  1               READKB_FKEY1:
001100  1  48           	PHA
001101  1               
001101  1  A2 06        	LDX	#6		;
001103  1  20 03 01     	JSR	PEM		;
001106  1  06 08        	ASL	TEMP
001108  1  06 08        	ASL	TEMP
00110A  1  06 08        	ASL	TEMP
00110C  1  06 08        	ASL	TEMP
00110E  1               
00110E  1  68           	PLA
00110F  1  29 0F        	AND	#$0F
001111  1               READKB_FKEY2:
001111  1  18           	CLC
001112  1  65 08        	ADC	TEMP
001114  1  A0 01        	LDY	#01
001116  1  20 56 11     	JSR 	READKB_XOFF
001119  1               
001119  1  60           	RTS
00111A  1               
00111A  1               
00111A  1               READKB_NOTFKEY:
00111A  1  C9 41        	CMP	#'A'
00111C  1  D0 08        	BNE	READKB_NOTUP
00111E  1  A0 01        	LDY	#01
001120  1  A9 00        	LDA	#00
001122  1  20 56 11     	JSR 	READKB_XOFF
001125  1  60           	RTS
001126  1               
001126  1               READKB_NOTUP:
001126  1  C9 42        	CMP	#'B'
001128  1  D0 08        	BNE	READKB_NOTDN
00112A  1  A0 01        	LDY	#01
00112C  1  A9 01        	LDA	#01
00112E  1  20 56 11     	JSR 	READKB_XOFF
001131  1  60           	RTS
001132  1               READKB_NOTDN:
001132  1  C9 44        	CMP	#'D'
001134  1  D0 08        	BNE	READKB_NOTLEFT
001136  1  A0 01        	LDY	#01
001138  1  A9 02        	LDA	#02
00113A  1  20 56 11     	JSR 	READKB_XOFF
00113D  1  60           	RTS
00113E  1               READKB_NOTLEFT:
00113E  1  C9 43        	CMP	#'C'
001140  1  D0 08        	BNE	READKB_NOTRIGHT
001142  1  A0 01        	LDY	#01
001144  1  A9 03        	LDA	#03
001146  1  20 56 11     	JSR 	READKB_XOFF
001149  1  60           	RTS
00114A  1               READKB_NOTRIGHT:
00114A  1  20 56 11     	JSR 	READKB_XOFF
00114D  1  4C CF 10     	JMP	READKB_ERR
001150  1               
001150  1               READKB_XON:
001150  1  48           	PHA
001151  1  A9 11        	LDA	#17
001153  1  4C 59 11     	JMP	READKB_XOFF1
001156  1               READKB_XOFF:
001156  1  48           	PHA
001157  1  A9 13        	LDA	#19
001159  1               READKB_XOFF1:
001159  1  A2 02        	LDX	#2			;  OUTPUT THE CHAR TO THE CONSOLE
00115B  1  20 03 01     	JSR	PEM			;
00115E  1  68           	PLA
00115F  1  60           	RTS
001160  1               
001160  1               ;__CLEARBUFFER___________________________________________________________________________________________________________________
001160  1               ;
001160  1               ; 	CLEAR THE EDIT BUFFER
001160  1               ;
001160  1               ;
001160  1               ;
001160  1               ;________________________________________________________________________________________________________________________________
001160  1               ;
001160  1               CLEARBUFFER:
001160  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
001162  1  85 0D        	STA	EDTPOS			;
001164  1  A9 17        	LDA	#>BUFFER	;
001166  1  85 0E        	STA	EDTPOS+1		;
001168  1  A0 00        	LDY	#$00			;
00116A  1               
00116A  1               CLEARBUFFER1:
00116A  1  A9 00        	LDA	#00
00116C  1  91 0D        	STA	(EDTPOS),Y
00116E  1  C8           	INY
00116F  1  D0 F9        	BNE	CLEARBUFFER1
001171  1  E6 0E        	INC	EDTPOS+1
001173  1  A5 0E        	LDA	EDTPOS+1
001175  1  C9 B8        	CMP	#>Ram_top	; are we at the end of RAM?
001177  1  D0 F1        	BNE	CLEARBUFFER1
001179  1               
001179  1  60           	RTS
00117A  1               
00117A  1               
00117A  1               ;__DOS65LOAD_____________________________________________________________________________________________________________________
00117A  1               ;
00117A  1               ; 	LOAD A DOS/65 FILE INTO THE EDIT BUFFER
00117A  1               ;		FILE IS LOADED INTO 80 COLUMN LINES TO SIMPLIFY SCROLLING
00117A  1               ;
00117A  1               ;
00117A  1               ;________________________________________________________________________________________________________________________________
00117A  1               ;
00117A  1               DOS65LOAD:
00117A  1  A9 00        	LDA	#0			; clear
00117C  1  8D 27 01     	STA	DFLFCB+32		; record number
00117F  1  A9 07        	LDA	#<DFLFCB		; Open File
001181  1  A0 01        	LDY	#>DFLFCB	;
001183  1  A2 0F        	LDX	#15			;
001185  1  20 03 01     	JSR	PEM			;
001188  1  C9 FF        	CMP	#$FF			; error?, if NOT, continue
00118A  1  D0 22        	BNE	DOS65LOAD_1		;
00118C  1               
00118C  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
00118E  1  85 09        	STA	FCBPTR			; STORE DEST BUFFER IN FCBPTR
001190  1  A9 17        	LDA	#>BUFFER	;
001192  1  85 0A        	STA	FCBPTR+1		; STORE DEST BUFFER IN FCBPTR
001194  1  A5 09        	LDA	FCBPTR			;
001196  1  85 12        	STA	CURRENTLEN		;
001198  1  A5 0A        	LDA	FCBPTR+1		;
00119A  1  85 13        	STA	CURRENTLEN+1		;
00119C  1  A9 0D        	LDA	#13
00119E  1  20 32 12     	JSR 	DOS65LOAD_STOREBT
0011A1  1  60           	RTS				; OPEN EDITOR, BLANK FILE
0011A2  1               
0011A2  1               DOS65LOAD_ERR:
0011A2  1  A9 59        	LDA	#<FILEERROR2		; NO, ERROR OUT
0011A4  1  A0 15        	LDY	#>FILEERROR2
0011A6  1  A2 09        	LDX	#9			; Print error message
0011A8  1  20 03 01     	JSR	PEM			;
0011AB  1  4C 00 01     	JMP	BOOT			; WARM BOOT DOS/65
0011AE  1               DOS65LOAD_1:
0011AE  1  A9 00        	LDA	#0			; clear
0011B0  1  8D 27 01     	STA	DFLFCB+32		; record number
0011B3  1  85 12        	STA	CURRENTLEN		; LENGTH COUNTER
0011B5  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
0011B7  1  85 09        	STA	FCBPTR			; STORE DEST BUFFER IN FCBPTR
0011B9  1  A9 17        	LDA	#>BUFFER	;
0011BB  1  85 0A        	STA	FCBPTR+1		; STORE DEST BUFFER IN FCBPTR
0011BD  1               
0011BD  1  A9 0D        	LDA	#<FCBBUFFER		; SETUP BUFFER
0011BF  1  85 0F        	STA	TMPPOS			;
0011C1  1  A0 16        	LDY	#>FCBBUFFER
0011C3  1  84 10        	STY	TMPPOS+1		;
0011C5  1  A2 1A        	LDX	#26			; Setup Buffer
0011C7  1  20 03 01     	JSR	PEM
0011CA  1               
0011CA  1               DOS65LOAD_2:
0011CA  1  A9 07        	LDA	#<DFLFCB		; READ record buffer from disk file
0011CC  1  A0 01        	LDY	#>DFLFCB	;
0011CE  1  A2 14        	LDX	#20			;
0011D0  1  20 03 01     	JSR	PEM			;
0011D3  1  C9 00        	CMP	#$00			; is error or EOF
0011D5  1  F0 07        	BEQ	DOS65LOAD_3		;
0011D7  1  C9 01        	CMP	#$01			; EOF?
0011D9  1  F0 40        	BEQ	DOS65LOAD_EOF		; YES, END
0011DB  1  4C A2 11     	JMP	DOS65LOAD_ERR		; ERROR, do error handling
0011DE  1               DOS65LOAD_3:
0011DE  1  A2 00        	LDX	#$00			; CLEAR COUNTERS
0011E0  1  A0 00        	LDY	#$00			;
0011E2  1               DOS65LOAD_3A:
0011E2  1  B1 0F        	LDA	(TMPPOS),Y		; LOAD BYTE FROM BUFFER
0011E4  1  C8           	INY				; INC BUFFER COUNTER
0011E5  1  C9 1A        	CMP	#$1A			; IF EOF, SIGNAL END
0011E7  1  F0 37        	BEQ	DOS65LOAD_4		;
0011E9  1  C9 0D        	CMP	#$0D			; IF CR PLACE IT IN BUFFER AND PAD WITH SPACES TO MAXCOL
0011EB  1  F0 12        	BEQ	DOS65LOAD_3D		;
0011ED  1  C9 20        	CMP	#32			; IF UNPRINTABLE, DO NOT PLACE IN BUFFER
0011EF  1  90 07        	BCC	DOS65LOAD_3C		;
0011F1  1  C9 7F        	CMP	#127			;
0011F3  1  B0 03        	BCS	DOS65LOAD_3C		;
0011F5  1  20 32 12     	JSR	DOS65LOAD_STOREBT	; STORE THE BYTE IN THE BUFFER
0011F8  1               DOS65LOAD_3C:
0011F8  1  C0 80        	CPY	#$80			; ARE WE AT THE END OF THE SOURCE BUFFER?
0011FA  1  D0 E6        	BNE	DOS65LOAD_3A		; NO, LOOP
0011FC  1               
0011FC  1  4C CA 11     	JMP	DOS65LOAD_2		; KEEP GOING!
0011FF  1               
0011FF  1               DOS65LOAD_3D:				; IN ORDER TO MAKE SCROLLING EASIER <CR> LINES NEED PADDED TO MAXCOL
0011FF  1  20 32 12     	JSR	DOS65LOAD_STOREBT	; STORE THE <CR> BYTE
001202  1               DOS65LOAD_3D1:
001202  1  A5 12        	LDA	CURRENTLEN		;
001204  1  C9 50        	CMP	#MAXCOL			;
001206  1  F0 0C        	BEQ	DOS65LOAD_3D2		;
001208  1  A9 00        	LDA	#$00			;
00120A  1  81 09        	STA	(FCBPTR,X)		; PLACE CHAR IN BUFFER
00120C  1  E6 12        	INC	CURRENTLEN		; INC THE LENGTH COUNTER
00120E  1  20 40 12     	JSR	DOS65LOAD_STOREBT1	; INC THE BUFFER POINTER
001211  1  4C 02 12     	JMP	DOS65LOAD_3D1		;
001214  1               DOS65LOAD_3D2:
001214  1  A9 00        	LDA	#$00			;
001216  1  85 12        	STA	CURRENTLEN		;
001218  1  4C F8 11     	JMP	DOS65LOAD_3C		;
00121B  1               DOS65LOAD_EOF:
00121B  1  A9 0D        	LDA	#13
00121D  1  20 32 12     	JSR DOS65LOAD_STOREBT
001220  1               
001220  1               DOS65LOAD_4:
001220  1  A9 07        	LDA	#<DFLFCB		; CLOSE FILE
001222  1  A0 01        	LDY	#>DFLFCB	;
001224  1  A2 10        	LDX	#16			;
001226  1  20 03 01     	JSR	PEM			;
001229  1  A5 09        	LDA	FCBPTR			;
00122B  1  85 12        	STA	CURRENTLEN		;
00122D  1  A5 0A        	LDA	FCBPTR+1		;
00122F  1  85 13        	STA	CURRENTLEN+1		;
001231  1  60           	RTS
001232  1               
001232  1               
001232  1               DOS65LOAD_STOREBT:
001232  1  81 09        	STA	(FCBPTR,X)		; PLACE CHAR IN BUFFER
001234  1  E6 12        	INC	CURRENTLEN		; INC THE LENGTH COUNTER
001236  1  A5 12        	LDA	CURRENTLEN		;
001238  1  C9 50        	CMP	#MAXCOL			; WRAP THE COUNTER ON MAXCOL
00123A  1  D0 04        	BNE	DOS65LOAD_STOREBT1	;
00123C  1  A9 00        	LDA	#$00			;
00123E  1  85 12        	STA	CURRENTLEN		;
001240  1               DOS65LOAD_STOREBT1:
001240  1  E6 09        	INC	FCBPTR			; add to base counter
001242  1  D0 08        	BNE	DOS65LOAD_STOREBT2
001244  1  E6 0A        	INC	FCBPTR+1		; yes, carry, inc high byte
001246  1  A5 0A        	LDA	FCBPTR+1		;
001248  1  C9 B8        	CMP	#>Ram_top	; are we at the end of RAM?
00124A  1  F0 01        	BEQ	DOS65LOAD_STOREBTE	; YES, STOP.
00124C  1               DOS65LOAD_STOREBT2:
00124C  1  60           	RTS
00124D  1               DOS65LOAD_STOREBTE:
00124D  1  20 20 12     	JSR	DOS65LOAD_4		; CLOSE FILE
001250  1  A9 82        	LDA	#<FILEERROR3 		; NO, ERROR OUT
001252  1  A0 15        	LDY	#>FILEERROR3
001254  1  A2 09        	LDX	#9			; Print error message
001256  1  20 03 01     	JSR	PEM			;
001259  1  4C 00 01     	JMP	BOOT			; WARM BOOT DOS/65
00125C  1               
00125C  1               
00125C  1               ;__DOS65SAVEAS_____________________________________________________________________________________________________________________
00125C  1               ;
00125C  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER TO A NEW FILE NAME
00125C  1               ;
00125C  1               ;
00125C  1               ;
00125C  1               ;________________________________________________________________________________________________________________________________
00125C  1               ;
00125C  1               DOS65SAVEAS:
00125C  1  20 E8 0F     	JSR	CLEARSCREEN
00125F  1               
00125F  1  A9 9C        	LDA	#<SAVESCREENFORMAT
001261  1  A0 12        	LDY	#>SAVESCREENFORMAT
001263  1  A2 09        	LDX	#9			;
001265  1  20 03 01     	JSR	PEM			;
001268  1  A9 E5        	LDA	#<SAVESCREENFORMAT1
00126A  1  A0 12        	LDY	#>SAVESCREENFORMAT1
00126C  1  A2 09        	LDX	#9			;
00126E  1  20 03 01     	JSR	PEM			;
001271  1               DOS65SAVEAS1:
001271  1  A9 A5        	LDA	#<SAVESCREENFORMAT2
001273  1  A0 13        	LDY	#>SAVESCREENFORMAT2
001275  1  A2 09        	LDX	#9			;
001277  1  20 03 01     	JSR	PEM			;
00127A  1               
00127A  1  A2 0D        	LDX	#13
00127C  1  A9 20        	LDA	#' '
00127E  1               DOS65SAVEAS2:
00127E  1  8D EA 13     	STA	FNBUFFER
001281  1  CA           	DEX
001282  1  E0 00        	CPX	#$00
001284  1  D0 F8        	BNE	DOS65SAVEAS2
001286  1  A9 EA        	LDA	#<FNBUFFER
001288  1  A0 13        	LDY	#>FNBUFFER
00128A  1  A2 0A        	LDX	#10			;
00128C  1  20 03 01     	JSR	PEM			;
00128F  1               
00128F  1  20 CE 14     	JSR	DOS65FCBPREP
001292  1  C9 FF        	CMP	#$FF
001294  1  F0 DB        	BEQ	DOS65SAVEAS1
001296  1               
001296  1  20 FD 13     	JSR	DOS65SAVE
001299  1  4C 74 0E     	JMP	PAINTSCREEN
00129C  1               
00129C  1               SAVESCREENFORMAT:
00129C  1  1B 5B 30 30  	.byte	$1B,'[','0','0',';','0','0','H'
0012A0  1  3B 30 30 48  
0012A4  1  1B 5B 37 6D  	.byte	$1B,'[','7','m'
0012A8  1  44 4F 53 2F  	.byte	"DOS/65 SCREEN EDITOR"
0012AC  1  36 35 20 53  
0012B0  1  43 52 45 45  
0012BC  1  20 20 20 20  	.byte	"                    "
0012C0  1  20 20 20 20  
0012C4  1  20 20 20 20  
0012D0  1  20 20 20 20  	.byte	"                    ",'$'
0012D4  1  20 20 20 20  
0012D8  1  20 20 20 20  
0012E5  1               
0012E5  1               SAVESCREENFORMAT1:
0012E5  1  20 20 20 20  	.byte	"                    "
0012E9  1  20 20 20 20  
0012ED  1  20 20 20 20  
0012F9  1  5F 5F 5F 5F  	.byte	"____________________"
0012FD  1  5F 5F 5F 5F  
001301  1  5F 5F 5F 5F  
00130D  1  5F 5F 5F 5F  	.byte	"____________________"
001311  1  5F 5F 5F 5F  
001315  1  5F 5F 5F 5F  
001321  1  5F 5F 5F 5F  	.byte	"____________________"
001325  1  5F 5F 5F 5F  
001329  1  5F 5F 5F 5F  
001335  1  5F 5F 5F 5F  	.byte	"____________________"
001339  1  5F 5F 5F 5F  
00133D  1  5F 5F 5F 5F  
001349  1  1B 5B 32 33  	.byte	$1B,'[','2','3',';','0','0','H'
00134D  1  3B 30 30 48  
001351  1  20 20 20 20  	.byte	"                            "
001355  1  20 20 20 20  
001359  1  20 20 20 20  
00136D  1  20 20 20 20  	.byte	"                            "
001371  1  20 20 20 20  
001375  1  20 20 20 20  
001389  1  20 20 20 20  	.byte	"     OM                "
00138D  1  20 4F 4D 20  
001391  1  20 20 20 20  
0013A0  1  1B 5B 30 6D  	.byte	$1B,'[','0','m','$'
0013A4  1  24           
0013A5  1               SAVESCREENFORMAT2:
0013A5  1  1B 5B 31 31  	.byte	$1B,'[','1','1',';','1','0','H'
0013A9  1  3B 31 30 48  
0013AD  1  20 20 20 20  	.byte	"                                   "
0013B1  1  20 20 20 20  
0013B5  1  20 20 20 20  
0013D0  1  1B 5B 31 30  	.byte	$1B,'[','1','0',';','0','0','H'
0013D4  1  3B 30 30 48  
0013D8  1  20 20 4E 45  	.byte	"  NEW FILE NAME: $"
0013DC  1  57 20 46 49  
0013E0  1  4C 45 20 4E  
0013EA  1               
0013EA  1               FNBUFFER:
0013EA  1  0F 20 20 20  	.byte	15,"                  "
0013EE  1  20 20 20 20  
0013F2  1  20 20 20 20  
0013FD  1               
0013FD  1               
0013FD  1               ;__DOS65SAVE_____________________________________________________________________________________________________________________
0013FD  1               ;
0013FD  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER
0013FD  1               ;
0013FD  1               ;
0013FD  1               ;
0013FD  1               ;________________________________________________________________________________________________________________________________
0013FD  1               ;
0013FD  1               DOS65SAVE:
0013FD  1  A9 00        	LDA	#0			; clear
0013FF  1  8D 27 01     	STA	DFLFCB+32		; record number
001402  1  A9 07        	LDA	#<DFLFCB		; Open File
001404  1  A0 01        	LDY	#>DFLFCB	;
001406  1  A2 13        	LDX	#19			;
001408  1  20 03 01     	JSR	PEM			;
00140B  1               
00140B  1  A9 00        	LDA	#0			; clear
00140D  1  8D 27 01     	STA	DFLFCB+32		; record number
001410  1  A9 07        	LDA	#<DFLFCB		; ATTEMPT TO CREATE File
001412  1  A0 01        	LDY	#>DFLFCB	;
001414  1  A2 16        	LDX	#22			;
001416  1  20 03 01     	JSR	PEM			;
001419  1  C9 FF        	CMP	#$FF			; error?, if NOT, continue
00141B  1  D0 0A        	BNE	DOS65SAVE_1		;
00141D  1               
00141D  1               DOS65SAVE_ERR:
00141D  1  A9 4D        	LDA	#<FILEERROR2A		; NO, ERROR OUT
00141F  1  A0 15        	LDY	#>FILEERROR2A
001421  1  A2 09        	LDX	#9			; Print error message
001423  1  20 03 01     	JSR	PEM			;
001426  1  60           	RTS				; RETURN
001427  1               DOS65SAVE_1:
001427  1  A9 00        	LDA	#0			; clear
001429  1  8D 27 01     	STA	DFLFCB+32		; record number
00142C  1  A9 00        	LDA	#<BUFFER		; SETUP BUFFER
00142E  1  85 09        	STA	FCBPTR			; STORE SRC BUFFER IN FCBPTR
001430  1  A9 17        	LDA	#>BUFFER	;
001432  1  85 0A        	STA	FCBPTR+1		; STORE SRC BUFFER IN FCBPTR
001434  1               
001434  1  A9 0D        	LDA	#<FCBBUFFER		; SETUP BUFFER
001436  1  85 0F        	STA	TMPPOS			;
001438  1  A0 16        	LDY	#>FCBBUFFER
00143A  1  84 10        	STY	TMPPOS+1		;
00143C  1  A2 1A        	LDX	#26			; Setup Buffer
00143E  1  20 03 01     	JSR	PEM
001441  1               
001441  1  A2 00        	LDX	#$00			;
001443  1  86 11        	STX	TEMP1			;
001445  1               DOS65SAVE_2:
001445  1  A5 13        	LDA	CURRENTLEN+1		; AT END PAGE?
001447  1  C5 0A        	CMP	FCBPTR+1		;
001449  1  D0 0D        	BNE	DOS65SAVE_2B		;
00144B  1  A5 09        	LDA	FCBPTR			;
00144D  1  C5 12        	CMP	CURRENTLEN		;
00144F  1  90 07        	BCC	DOS65SAVE_2B		; IF WE ARE NOT PAST THE END, PROCEED AS USUAL
001451  1  F0 05        	BEQ	DOS65SAVE_2B		;
001453  1  A9 1A        	LDA	#$1A			; WE ARE AT END SO PAD WITH EOF
001455  1  4C 6A 14     	JMP	DOS65SAVE_2C		;
001458  1               
001458  1               DOS65SAVE_2B:
001458  1  A0 00        	LDY	#$00
00145A  1  B1 09        	LDA 	(FCBPTR),Y		; GET NEXT BUFFER BYTE
00145C  1  E6 09        	INC	FCBPTR			; INC 16 BIT BUFFER POINTER
00145E  1  D0 02        	BNE	*+4			;
001460  1  E6 0A        	INC 	FCBPTR+1		;
001462  1  C9 00        	CMP	#$00			; IS NULL?
001464  1  F0 DF        	BEQ	DOS65SAVE_2		; YES SKIP
001466  1  C9 0A        	CMP	#10			; IS LF?
001468  1  F0 DB        	BEQ	DOS65SAVE_2		; YES SKIP
00146A  1               
00146A  1               DOS65SAVE_2C:
00146A  1  A4 11        	LDY	TEMP1			;
00146C  1  91 0F        	STA	(TMPPOS),Y		; NO STORE IN BUFFER
00146E  1  E6 11        	INC	TEMP1			; INC BUFFER POINTER
001470  1  C9 0D        	CMP	#13			; IF NOT CR
001472  1  D0 03        	BNE	*+5			; CONTINUE
001474  1  20 A7 14     	JSR	DOS65SAVE_LF		; OTHERWISE INSERT LF
001477  1               
001477  1  A6 11        	LDX	TEMP1			;
001479  1  E0 80        	CPX	#$80			; PAST END?
00147B  1  D0 C8        	BNE	DOS65SAVE_2		; NO LOOP TILL BUFFER IS FULL
00147D  1               
00147D  1               DOS65SAVE_2D:
00147D  1  A9 07        	LDA	#<DFLFCB		; WRITE record buffer from disk file
00147F  1  A0 01        	LDY	#>DFLFCB	;
001481  1  A2 15        	LDX	#21			;
001483  1  20 03 01     	JSR	PEM			;
001486  1  C9 00        	CMP	#$00			; is SUCCESSFUL?
001488  1  F0 03        	BEQ	*+5			;
00148A  1  4C 1D 14     	JMP	DOS65SAVE_ERR		; ERROR, do error handling
00148D  1               
00148D  1               
00148D  1  A5 0A        	LDA	FCBPTR+1		;
00148F  1  C5 13        	CMP	CURRENTLEN+1		; AT END?
001491  1  90 03        	BCC	DOS65SAVE_3		;
001493  1  4C 9D 14     	JMP	DOS65SAVE_4		; CLOSE FILE
001496  1               
001496  1               DOS65SAVE_3:
001496  1  A2 00        	LDX	#$00			;
001498  1  86 11        	STX	TEMP1			;
00149A  1  4C 45 14     	JMP	DOS65SAVE_2		; SAVE NEXT SECTOR
00149D  1               
00149D  1               DOS65SAVE_4:
00149D  1  A9 07        	LDA	#<DFLFCB		; CLOSE FILE
00149F  1  A0 01        	LDY	#>DFLFCB	;
0014A1  1  A2 10        	LDX	#16			;
0014A3  1  20 03 01     	JSR	PEM			;
0014A6  1  60           	RTS
0014A7  1               
0014A7  1               
0014A7  1               DOS65SAVE_LF:
0014A7  1               
0014A7  1  A6 11        	LDX	TEMP1			;
0014A9  1  E0 80        	CPX	#$80			; PAST END?
0014AB  1  D0 03        	BNE	*+5			; NO
0014AD  1  20 B9 14     	JSR	DOS65SAVE_LF1		;
0014B0  1               
0014B0  1  A4 11        	LDY	TEMP1			; WRITE LF
0014B2  1  A9 0A        	LDA	#10			;
0014B4  1  91 0F        	STA	(TMPPOS),Y		; NO STORE IN BUFFER
0014B6  1  E6 11        	INC	TEMP1			; INC BUFFER POINTER
0014B8  1  60           	RTS
0014B9  1               
0014B9  1               DOS65SAVE_LF1:
0014B9  1  A9 07        	LDA	#<DFLFCB		; WRITE record buffer from disk file
0014BB  1  A0 01        	LDY	#>DFLFCB	;
0014BD  1  A2 15        	LDX	#21			;
0014BF  1  20 03 01     	JSR	PEM			;
0014C2  1  C9 00        	CMP	#$00			; is SUCCESSFUL?
0014C4  1  F0 03        	BEQ	*+5			;
0014C6  1  4C 1D 14     	JMP	DOS65SAVE_ERR		; ERROR, do error handling
0014C9  1  A2 00        	LDX	#$00			;
0014CB  1  86 11        	STX	TEMP1			;
0014CD  1  60           	RTS
0014CE  1               
0014CE  1               DOS65FCBPREP:
0014CE  1  AD ED 13     	LDA	FNBUFFER+3		; GET ":"
0014D1  1  C9 3A        	CMP	#':'			;
0014D3  1  F0 0C        	BEQ	DOS65FCBPREP_1		; YES, IT WAS A DRIVE, CONTINUE
0014D5  1  A9 22        	LDA	#<FILEERROR1		; NO, ERROR OUT
0014D7  1  A0 15        	LDY	#>FILEERROR1
0014D9  1  A2 09        	LDX	#9
0014DB  1  20 03 01     	JSR	PEM
0014DE  1  A9 FF        	LDA	#$FF
0014E0  1  60           	RTS
0014E1  1               DOS65FCBPREP_1:
0014E1  1  AD EC 13     	LDA	FNBUFFER+2		; GET DRIVE LETTER
0014E4  1  38           	SEC				;
0014E5  1  E9 40        	SBC	#64			; PARSE DRIVE NUMBER
0014E7  1  8D 07 01     	STA	DFLFCB+0		; STORE IT IN FCB
0014EA  1               
0014EA  1  A0 01        	LDY	#$01			; POINT Y TO FCB FILE NAME
0014EC  1  A9 20        	LDA	#$20			; LOAD SPACE CHAR INTO A
0014EE  1               DOS65FCBPREP_1A:			; BLANK OUT FCB
0014EE  1  99 07 01     	STA	DFLFCB,Y		;
0014F1  1  C8           	INY				;
0014F2  1  C0 09        	CPY	#$09			; IS DONE
0014F4  1  D0 F8        	BNE	DOS65FCBPREP_1A		; NO, LOOP
0014F6  1  A0 01        	LDY	#$01			; POINT Y TO FCB FILE NAME
0014F8  1  A2 00        	LDX	#$00			;
0014FA  1               DOS65FCBPREP_2:				; COPY FILE NAME PARAMETER INTO FCB
0014FA  1  BD EE 13      	LDA	FNBUFFER+4,X		;
0014FD  1  E8            	INX				;
0014FE  1  C9 2E        	CMP	#'.'			;
001500  1  F0 0B        	BEQ	DOS65FCBPREP_3		;
001502  1  99 07 01     	STA	DFLFCB,Y		;
001505  1  C8           	INY				;
001506  1  C0 09        	CPY	#$09			;
001508  1  F0 03        	BEQ	DOS65FCBPREP_3		;
00150A  1  4C FA 14     	JMP	DOS65FCBPREP_2		;
00150D  1               DOS65FCBPREP_3:				;
00150D  1  BD EE 13      	LDA	FNBUFFER+4,X		;
001510  1  8D 10 01     	STA	DFLFCB+9		;
001513  1  BD EF 13      	LDA	FNBUFFER+5,X		;
001516  1  8D 11 01     	STA	DFLFCB+10		;
001519  1  BD F0 13      	LDA	FNBUFFER+6,X		;
00151C  1  8D 12 01     	STA	DFLFCB+11		;
00151F  1  A9 00        	LDA	#$00			;
001521  1  60           	RTS				;
001522  1               
001522  1               
001522  1               FILEERROR1:
001522  1  1B 5B 31 31  		.byte	$1B,'[','1','1',';','1','0','H'
001526  1  3B 31 30 48  
00152A  1  2A 2A 20 4E  		.byte	"** NO DRIVE SPECIFIED, TRY AGAIN"
00152E  1  4F 20 44 52  
001532  1  49 56 45 20  
00154A  1  0D 0A 24     		.byte	$0D,$0A,'$'
00154D  1               FILEERROR2A:
00154D  1  1B 5B 30 31  		.byte	$1B,'[','0','1',';','1','0','H'
001551  1  3B 31 30 48  
001555  1  1B 5B 37 6D  		.byte	$1B,'[','7','m'
001559  1  2A 2A 20 44  FILEERROR2:	.byte	"** DOS/65 ERROR, OPERATION ABORTED"
00155D  1  4F 53 2F 36  
001561  1  35 20 45 52  
00157B  1  1B 5B 30 6D  		.byte	$1B,'[','0','m'
00157F  1  0D 0A 24     		.byte	$0D,$0A,'$'
001582  1  2A 2A 20 46  FILEERROR3:	.byte	"** FILE TOO LARGE, OPERATION ABORTED"
001586  1  49 4C 45 20  
00158A  1  54 4F 4F 20  
0015A6  1  0D 0A 24     		.byte	$0D,$0A,'$'
0015A9  1  00 01 02 03  DECIMAL1:	.byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
0015AD  1  04 05 06 07  
0015B1  1  08 09        
0015B3  1  10 11 12 13  		.byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19
0015B7  1  14 15 16 17  
0015BB  1  18 19        
0015BD  1  20 21 22 23  		.byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29
0015C1  1  24 25 26 27  
0015C5  1  28 29        
0015C7  1  30 31 32 33  		.byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
0015CB  1  34 35 36 37  
0015CF  1  38 39        
0015D1  1  40 41 42 43  		.byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49
0015D5  1  44 45 46 47  
0015D9  1  48 49        
0015DB  1  50 51 52 53  		.byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59
0015DF  1  54 55 56 57  
0015E3  1  58 59        
0015E5  1  60 61 62 63  		.byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69
0015E9  1  64 65 66 67  
0015ED  1  68 69        
0015EF  1  70 71 72 73  		.byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79
0015F3  1  74 75 76 77  
0015F7  1  78 79        
0015F9  1  80 81 82 83  		.byte     $80,$81,$82,$83,$84,$85,$86,$87,$88,$89
0015FD  1  84 85 86 87  
001601  1  88 89        
001603  1  90 91 92 93  		.byte     $90,$91,$92,$93,$94,$95,$96,$97,$98,$99
001607  1  94 95 96 97  
00160B  1  98 99        
00160D  1               FCBBUFFER:
00160D  1  xx xx xx xx  		.res 	$80
001611  1  xx xx xx xx  
001615  1  xx xx xx xx  
00168D  1  xx xx xx xx  		.align 256
001691  1  xx xx xx xx  
001695  1  xx xx xx xx  
001700  1  00           BUFFER:		.byte 00			; start of user RAM (set as needed, should be page aligned)
001701  1               Ram_top		= $B800				; end of user RAM+1 (set as needed, should be page aligned)
001701  1               
001701  1               	.END
