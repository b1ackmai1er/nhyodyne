ca65 V2.18 - Ubuntu 2.19-1
Main file   : hi.asm
Current file: hi.asm

000000r 1               ;__HI___________________________________________________________
000000r 1               ;
000000r 1               ; This is a quick program that can be uploaded to the MBC from
000000r 1               ; Z80 mode.  It will print a "Hi" to the UART then return control
000000r 1               ; to the Z80.  It does not require the stack to be available and
000000r 1               ; is pretty much the simplest code imaginable. :)
000000r 1               ;
000000r 1               ; This requires the SBC is secondary to a Z80.
000000r 1               ; hi.hex file can be loaded from the monitor. Ensure that jumpers J1 and J4
000000r 1               ; are set for 2&3, the 6502 toggle IO address is set for $FF and
000000r 1               ; the 65C02 board is set for IOPage 03.
000000r 1               ; remember that bit A15 is inverted on the board so the dip switch is set to $83.
000000r 1               ;
000000r 1               ; To run from the MBC Z80 monitor
000000r 1               ;
000000r 1               ; first set the MPCL to allow RAM in the low bank
000000r 1               ; >O 7C 80
000000r 1               ; >O 78 80
000000r 1               ;
000000r 1               ; then load the .HEX file.
000000r 1               ; >L
000000r 1               ;
000000r 1               ;
000000r 1               ; Finally transfer control to the 65C02 by reading the toggle register
000000r 1               ; >I FF
000000r 1               ;
000000r 1               ; The '02 should reset run this program and return to the Z80 monitor
000000r 1               ;
000000r 1               ; From CP/M, you can simply execute the hi.com program.
000000r 1               ;_______________________________________________________________
000000r 1               
000000r 1               ; UART 16C550 SERIAL -- Assumes IO is in page $03 -- DIP Switch settings $83
000000r 1               UART0       	=    	$0368           ; DATA IN/OUT
000000r 1               UART1       	=    	$0369           ; CHECK RX
000000r 1               UART2       	=    	$036A           ; INTERRUPTS
000000r 1               UART3       	=    	$036B           ; LINE CONTROL
000000r 1               UART4       	=    	$036C           ; MODEM CONTROL
000000r 1               UART5          	=    	$036D           ; LINE STATUS
000000r 1               UART6          	=    	$036E           ; MODEM STATUS
000000r 1               UART7	       	=    	$036F           ; SCRATCH REG.
000000r 1               
000000r 1               ; this is Z80 code that is used to be able to run this as a .COM file.  It is truncated
000000r 1               ; when the various .HEX files are generated
000000r 1               ;
000000r 1                               .segment "LOADER"
000000r 1  F3           		.BYTE 		$F3 			;DI - DISABLE INTERRUPTS
000001r 1  01 00 10     		.BYTE 		$01,$00,$10    		;LD	BC,$1000 -BYTES TO MOVE
000004r 1  11 00 70     		.BYTE 		$11,$00,$70    		;LD	DE,$7000 -DESTINATION ADDRESS (6502 IS !A15)
000007r 1  21 20 01     		.BYTE 		$21,$20,$01	    	;LD	HL,$0120 -SOURCE ADDRESS
00000Ar 1  ED B0        		.BYTE 		$ED,$B0       		;LDIR  		 -COPY RAM
00000Cr 1  DB FF        		.BYTE		$DB,$FF       		;IN 	A,$FF    -ENABLE 6502
00000Er 1  0E 00        		.BYTE		$0E,$00       		;LD	C,00H    -CP/M SYSTEM RESET CALL
000010r 1  CD 05 00     		.BYTE		$CD,$05,$00		;CALL	0005H	 -RETURN TO PROMPT
000013r 1               ;
000013r 1               ;
000013r 1               ;
000013r 1               
000013r 1                               .segment "TROM"
000000r 1               
000000r 1               ;__COLD_START___________________________________________________
000000r 1               ;
000000r 1               ; PERFORM SYSTEM COLD INIT
000000r 1               ;
000000r 1               ;_______________________________________________________________
000000r 1               COLD_START:
000000r 1               
000000r 1               TX_BUSYLP2a:
000000r 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
000003r 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
000005r 1  C9 00        		CMP     #$00
000007r 1  F0 F7        		BEQ	TX_BUSYLP2a		; IF NOT REPEAT
000009r 1  A9 0A        		LDA     #10
00000Br 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
00000Er 1               
00000Er 1               TX_BUSYLP3a:
00000Er 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
000011r 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
000013r 1  C9 00        		CMP     #$00
000015r 1  F0 F7        		BEQ	TX_BUSYLP3a		; IF NOT REPEAT
000017r 1  A9 0D        		LDA     #13
000019r 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
00001Cr 1               
00001Cr 1               TX_BUSYLP:
00001Cr 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
00001Fr 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
000021r 1  C9 00        		CMP     #$00
000023r 1  F0 F7        		BEQ	TX_BUSYLP		; IF NOT REPEAT
000025r 1  A9 48        		LDA     #'H'
000027r 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
00002Ar 1               TX_BUSYLP1:
00002Ar 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
00002Dr 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
00002Fr 1  C9 00        		CMP     #$00
000031r 1  F0 F7        		BEQ	TX_BUSYLP1		; IF NOT REPEAT
000033r 1  A9 69        		LDA     #'i'
000035r 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
000038r 1               
000038r 1               TX_BUSYLP2:
000038r 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
00003Br 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
00003Dr 1  C9 00        		CMP     #$00
00003Fr 1  F0 F7        		BEQ	TX_BUSYLP2		; IF NOT REPEAT
000041r 1  A9 0A        		LDA     #10
000043r 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
000046r 1               
000046r 1               TX_BUSYLP3:
000046r 1  AD 6D 03     		LDA	UART5			; READ LINE STATUS REGISTER
000049r 1  29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
00004Br 1  C9 00        		CMP     #$00
00004Dr 1  F0 F7        		BEQ	TX_BUSYLP3		; IF NOT REPEAT
00004Fr 1  A9 0D        		LDA     #13
000051r 1  8D 68 03     		STA	UART0			; THEN WRITE THE CHAR TO UART
000054r 1               
000054r 1               
000054r 1  AD FF 03     		LDA 	$03FF			; Ping the register to go back to Z80
000057r 1               
000057r 1               
000057r 1                                .segment "VECTORS"
000000r 1               	; $FFFA
000000r 1  rr rr        NMIVECTOR:      .WORD   COLD_START		;
000002r 1  rr rr        RSTVECTOR:      .WORD   COLD_START		;
000004r 1  rr rr        INTVECTOR: 	.WORD   COLD_START		;
000006r 1               
000006r 1               ENDOFIMAGE:
000006r 1               	.END
