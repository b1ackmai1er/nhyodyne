ca65 V2.18 - Ubuntu 2.19-1
Main file   : lowmon.asm
Current file: lowmon.asm

000000r 1               
000000r 1               ;__LOWMON__________________________________________________________________________________________
000000r 1               ; This is a simple monitor program that can loaded into low ram
000000r 1               ; for debugging.
000000r 1               ;
000000r 1               ; It assumes that the 65C02 board is set for IOPage 03.
000000r 1               ; remember that bit A15 is inverted on the board so the dip switch is set to $83.
000000r 1               ;
000000r 1               ;
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; DATA CONSTANTS
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;REGISTER		IO PORT		; FUNCTION
000000r 1               IRQVECTOR       = $35           ; VECTOR FOR USER IRQ RTN
000000r 1               NMIVECTOR       = $37           ; VECTOR FOR USER IRQ RTN
000000r 1               STRPTR          = $3B           ;
000000r 1               INBUFFER        = $0200         ;
000000r 1               
000000r 1               ; UART 16C550 SERIAL -- Assumes IO is in page $03 -- DIP Switch settings $83
000000r 1               UART0           = $0368         ; DATA IN/OUT
000000r 1               UART1           = $0369         ; CHECK RX
000000r 1               UART2           = $036A         ; INTERRUPTS
000000r 1               UART3           = $036B         ; LINE CONTROL
000000r 1               UART4           = $036C         ; MODEM CONTROL
000000r 1               UART5           = $036D         ; LINE STATUS
000000r 1               UART6           = $036E         ; MODEM STATUS
000000r 1               UART7           = $036F         ; SCRATCH REG.
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .PC02
000000r 1                       .ORG    $1000
001000  1               
001000  1               
001000  1  A9 D0                LDA     #<STARTUP       ; OUTPUT STARTUP STRING
001002  1  85 3B                STA     STRPTR          ;
001004  1  A9 19                LDA     #>STARTUP       ;
001006  1  85 3C                STA     STRPTR+1        ;
001008  1  20 14 10             JSR     OUTSTR          ;
00100B  1               
00100B  1  A9 00                LDA     #$00            ;
00100D  1  8D 00 02             STA     INBUFFER        ; MAKE SURE INPUT BUFFER IS EMPTY
001010  1               ;
001010  1  4C 57 10             JMP     STRT            ; START THE MONITOR
001013  1               
001013  1               
001013  1               Z80:
001013  1  60                   RTS
001014  1               
001014  1               ;__OUTSTR______________________________________________________
001014  1               ;
001014  1               ; OUTPUT THE STRING POINTED TO BY OUTSTR TO THE SCREEN
001014  1               ;
001014  1               ;______________________________________________________________
001014  1               OUTSTR:
001014  1  A0 00                LDY     #$00            ; LOAD $00 INTO Y
001016  1               OUTSTRLP:
001016  1  B1 3B                LDA     (STRPTR),Y      ; LOAD NEXT CHAR FROM STRING INTO ACC
001018  1  C9 00                CMP     #$00            ; IS NULL?
00101A  1  F0 0C                BEQ     ENDOUTSTR       ; YES, END PRINT OUT
00101C  1  20 C1 19             JSR     OUTCH           ; PRINT CHAR IN ACC
00101F  1  E6 3B                INC     STRPTR
001021  1  D0 F3                BNE     OUTSTRLP
001023  1  E6 3C                INC     STRPTR+1
001025  1  4C 16 10             JMP     OUTSTRLP        ; DO NEXT CHAR
001028  1               ENDOUTSTR:
001028  1  60                   RTS                     ; RETURN
001029  1               
001029  1               
001029  1                       .INCLUDE "supermon.asm"
001029  2               ; ********************************
001029  2               ; * SUPERMON+ 64 JIM BUTTERFIELD *
001029  2               ; * V1.2   AUGUST 20 1985        *
001029  2               ; ********************************
001029  2               
001029  2               ; Reformatted and annotated in late 2016/early 2017 by J.B. Langston.
001029  2               ; Modified for Nhyodyne 3/12/2023 D. Werner
001029  2               ;
001029  2               ; Mr. Butterfield . . you inspired many of us, thank you.
001029  2               ;
001029  2               ; -----------------------------------------------------------------------------
001029  2               ; temporary pointers
001029  2               TMP0            = $C1           ; used to return input, often holds end address
001029  2               TMP2            = $C3           ; usually holds start address
001029  2               
001029  2               ; these 7 locations are used to store the registers when
001029  2               ; entering the monitor and restore them when exiting.
001029  2               
001029  2               PCH             = $B0           ; program counter high byte
001029  2               PCL             = $B1           ; program counter low byte
001029  2               SR              = $B2           ; status register
001029  2               ACC             = $B3           ; accumulator
001029  2               XR              = $B4           ; X register
001029  2               YR              = $B5           ; Y register
001029  2               SP              = $B6           ; stack pointer
001029  2               STORE           = $B7           ; 2-byte temp storage
001029  2               CHRPNT          = $B9           ; current position in input buffer
001029  2               SAVY            = $BA           ; temp storage, often to save Y register
001029  2               U9F             = $BB           ; index into assembler work buffer
001029  2               CKSM            = $BC           ; S19 loader checksum store
001029  2               LOADADR         = $BD           ; S19 load address
001029  2               LOADWRK         = $BF           ; S19 load work
001029  2               
001029  2               ;-----------------------------------------------------------------------------
001029  2               ; variables
001029  2               ACMD            = $C5           ; addressing command
001029  2               LENGTH          = $C6           ; length of operand
001029  2               MNEMW           = $C7           ; 3 letter mnemonic buffer
001029  2               SAVX            = $CA           ; 1 byte temp storage, often to save X register
001029  2               OPCODE          = $CB           ; current opcode for assembler/disassembler
001029  2               UPFLG           = $CC           ; flag: count up (bit 7 clear) or down (bit 7 set)
001029  2               DIGCNT          = $CB           ; digit count
001029  2               INDIG           = $CC           ; numeric value of single digit
001029  2               NUMBIT          = $CD           ; numeric base of input
001029  2               STASH           = $CE           ; 2-byte temp storage
001029  2               U0AA0           = $D0           ; 10 byte work buffer
001029  2               U0AAE           = $D0+10        ; end of 10 byte work buffer
001029  2               STAGE           = $DA           ; 30 byte staging buffer for filename, search, etc.
001029  2               ESTAGE          = $DA+30        ; end of 30 byte staging buffer for filename, search, etc.
001029  2               INBUFF          = $0200
001029  2               CHROUT          = OUTCH
001029  2               
001029  2               
001029  2               ; -----------------------------------------------------------------------------
001029  2               ; BRK handler
001029  2               BRKROUTINE:
001029  2               BREAK:
001029  2  A2 05                LDX     #$05            ; pull registers off the stack
00102B  2               BSTACK:
00102B  2  68                   PLA                     ; order: Y,X,A,SR,PCL,PCH
00102C  2  95 B0                STA     PCH,X           ; store in memory
00102E  2  CA                   DEX
00102F  2  10 FA                BPL     BSTACK
001031  2  D8                   CLD                     ; disable bcd mode
001032  2  BA                   TSX                     ; store stack pointer in memory
001033  2  86 B6                STX     SP
001035  2  58                   CLI                     ; enable interupts
001036  2               
001036  2               ; -----------------------------------------------------------------------------
001036  2               ; display registers [R]
001036  2               DSPLYR:
001036  2  A0 00                LDY     #MSG2-MSGBAS    ; display headers
001038  2  20 95 17             JSR     SNDCLR
00103B  2  A9 3B                LDA     #$3B            ; prefix registers with "; " to allow editing
00103D  2  20 C1 19             JSR     CHROUT
001040  2  A9 20                LDA     #$20
001042  2  20 C1 19             JSR     CHROUT
001045  2  A5 B0                LDA     PCH             ; print 2-byte program counter
001047  2  20 2F 16             JSR     WRTWO
00104A  2  A0 01                LDY     #1              ; start 1 byte after PC high byte
00104C  2               DISJ:
00104C  2  B9 B0 00             LDA     PCH,Y           ; loop through rest of the registers
00104F  2  20 0B 16             JSR     WRBYTE          ; print 1-byte register value
001052  2  C8                   INY
001053  2  C0 07                CPY     #7              ; there are a total of 5 registers to print
001055  2  90 F5                BCC     DISJ
001057  2               
001057  2               ; -----------------------------------------------------------------------------
001057  2               ; main loop
001057  2               STRT:
001057  2  20 16 16             JSR     CRLF            ; new line
00105A  2  A2 00                LDX     #0              ; point at start of input buffer
00105C  2  86 B9                STX     CHRPNT
00105E  2               SMOVE:
00105E  2  20 A6 19             JSR     IOF_CONINW      ; CHRIN kernal call to input a character
001061  2               
001061  2  C9 08                CMP     #$08            ; IS BACKSPACE?
001063  2  D0 1A                BNE     :+              ; NO, SKUP BACKSPACE RTN
001065  2  E0 00                CPX     #$00            ; IS INDEX =0 ?
001067  2  F0 F5                BEQ     SMOVE           ; YES, SKIP BACKSPACE
001069  2  20 C1 19             JSR     OUTCH           ; BACK UP CURSOR
00106C  2  A9 20                LDA     #$20
00106E  2  20 C1 19             JSR     OUTCH           ; SPACE ON SCREEN
001071  2  A9 08                LDA     #$08
001073  2  20 C1 19             JSR     OUTCH           ; BACK UP CURSOR
001076  2               
001076  2  A9 00                LDA     #0
001078  2  9D 00 02             STA     INBUFF,X        ; store in input buffer
00107B  2  CA                   DEX
00107C  2  4C 5E 10             JMP     SMOVE
00107F  2               :
00107F  2  20 C1 19             JSR     OUTCH           ; OUTPUT CHAR TO SCREEN
001082  2               
001082  2  9D 00 02             STA     INBUFF,X        ; store in input buffer
001085  2  E8                   INX
001086  2  E0 00                CPX     #00             ; error if buffer is full
001088  2  F0 1C                BEQ     ERROR
00108A  2  C9 0D                CMP     #$0D            ; keep reading until CR
00108C  2  D0 D0                BNE     SMOVE
00108E  2  A9 00                LDA     #0              ; null-terminate input buffer
001090  2  9D FF 01             STA     INBUFF-1,X      ; (replacing the CR)
001093  2               ST1:
001093  2  20 54 16             JSR     GETCHR          ; get a character from the buffer
001096  2  F0 BF                BEQ     STRT            ; start over if buffer is empty
001098  2  C9 20                CMP     #$20            ; skip leading spaces
00109A  2  F0 F7                BEQ     ST1
00109C  2               S0:
00109C  2  A2 14                LDX     #KEYTOP-KEYW    ; loop through valid command characters
00109E  2               S1:
00109E  2  DD 54 19             CMP     KEYW,X          ; see if input character matches
0010A1  2  F0 0B                BEQ     S2              ; command matched, dispatch it
0010A3  2  CA                   DEX                     ; no match, check next command
0010A4  2  10 F8                BPL     S1              ; keep trying until we've checked them all
0010A6  2                                               ; then fall through to error handler
0010A6  2               
0010A6  2               ; -----------------------------------------------------------------------------
0010A6  2               ; handle error
0010A6  2               ERROR:
0010A6  2  A0 1E                LDY     #MSG3-MSGBAS    ; display "?" to indicate error and go to new line
0010A8  2  20 A8 17             JSR     SNDMSG
0010AB  2  4C 57 10             JMP     STRT            ; back to main loop
0010AE  2               
0010AE  2               ; -----------------------------------------------------------------------------
0010AE  2               ; dispatch command
0010AE  2               S2:
0010AE  2  E0 0F                CPX     #$0F            ; next 4 commands are base conversions
0010B0  2  B0 0E                BCS     CNVLNK          ;   which are handled by the same subroutine
0010B2  2  8A                   TXA                     ; remaining commands dispatch through vector table
0010B3  2  0A                   ASL     A               ; multiply index of command by 2
0010B4  2  AA                   TAX                     ;   since table contains 2-byte addresses
0010B5  2  BD 69 19             LDA     KADDR+1,X       ; push address from vector table onto stack
0010B8  2  48                   PHA                     ;   so that the RTS from GETPAR will jump there
0010B9  2  BD 68 19             LDA     KADDR,X
0010BC  2  48                   PHA
0010BD  2  4C 4A 15             JMP     GETPAR          ; get the first parameter for the command
0010C0  2               CNVLNK:
0010C0  2  4C E9 16             JMP     CONVRT          ; handle base conversion
0010C3  2               
0010C3  2               ; -----------------------------------------------------------------------------
0010C3  2               ; exit monitor [X]
0010C3  2               EXIT:
0010C3  2  4C 13 10             JMP     Z80             ; jump to warm-start vector to reinitialize BASIC
0010C6  2               
0010C6  2               ; -----------------------------------------------------------------------------
0010C6  2               ; display memory [M]
0010C6  2               DSPLYM:
0010C6  2  B0 08                BCS     DSPM11          ; start from previous end addr if no address given
0010C8  2  20 6A 16             JSR     COPY12          ; save start address in TMP2
0010CB  2  20 4A 15             JSR     GETPAR          ; get end address in TMP0
0010CE  2  90 06                BCC     DSMNEW          ; did user specify one?
0010D0  2               DSPM11:
0010D0  2  A9 0B                LDA     #$0B            ; if not, show 12 lines by default
0010D2  2  85 C1                STA     TMP0
0010D4  2  D0 0E                BNE     DSPBYT          ; always true, but BNE uses 1 byte less than JMP
0010D6  2               DSMNEW:
0010D6  2  20 73 16             JSR     SUB12           ; end addr given, calc bytes between start and end
0010D9  2  90 1E                BCC     MERROR          ; error if start is after end
0010DB  2  A2 03                LDX     #3              ; divide by 8 (shift right 3 times)
0010DD  2               DSPM01:
0010DD  2  46 C2                LSR     TMP0+1
0010DF  2  66 C1                ROR     TMP0
0010E1  2  CA                   DEX
0010E2  2  D0 F9                BNE     DSPM01
0010E4  2               DSPBYT:
0010E4  2  20 B6 17             JSR     STOP            ; check for stop key
0010E7  2  F0 0D                BEQ     DSPMX           ; exit early if pressed
0010E9  2  20 5D 11             JSR     DISPMEM         ; display 1 line containing 8 bytes
0010EC  2  A9 08                LDA     #8              ; increase start address by 8 bytes
0010EE  2  20 A3 16             JSR     BUMPAD2
0010F1  2  20 81 16             JSR     SUBA1           ; decrement line counter
0010F4  2  B0 EE                BCS     DSPBYT          ; show another line until it's < 0
0010F6  2               DSPMX:
0010F6  2  4C 57 10             JMP     STRT            ; back to main loop
0010F9  2               MERROR:
0010F9  2  4C A6 10             JMP     ERROR           ; handle error
0010FC  2               
0010FC  2               ; -----------------------------------------------------------------------------
0010FC  2               ; alter registers [;]
0010FC  2               ALTR:
0010FC  2  20 BB 16             JSR     COPY1P          ; store first parameter in PC
0010FF  2  A0 00                LDY     #0              ; init counter
001101  2               ALTR1:
001101  2  20 4A 15             JSR     GETPAR          ; get value for next register
001104  2  B0 0A                BCS     ALTRX           ; exit early if no more values given
001106  2  A5 C1                LDA     TMP0            ; store in memory, offset from SR
001108  2  99 B2 00             STA     SR,Y            ; these locations will be transferred to the
00110B  2  C8                   INY                     ;   actual registers before exiting the monitor
00110C  2  C0 05                CPY     #$05            ; have we updated all 5 yet?
00110E  2  90 F1                BCC     ALTR1           ; if not, get next
001110  2               ALTRX:
001110  2  4C 57 10             JMP     STRT            ; back to main loop
001113  2               
001113  2               ; -----------------------------------------------------------------------------
001113  2               ; alter memory [>]
001113  2               ALTM:
001113  2  B0 13                BCS     ALTMX           ; exit if no parameter provided
001115  2  20 6A 16             JSR     COPY12          ; copy parameter to start address
001118  2  A0 00                LDY     #0
00111A  2               ALTM1:
00111A  2  20 4A 15             JSR     GETPAR          ; get value for next byte of memory
00111D  2  B0 09                BCS     ALTMX           ; if none given, exit early
00111F  2  A5 C1                LDA     TMP0            ; poke value into memory at start address + Y
001121  2  91 C3                STA     (TMP2),Y
001123  2  C8                   INY                     ; next byte
001124  2  C0 08                CPY     #8              ; have we read 8 bytes yet?
001126  2  90 F2                BCC     ALTM1           ; if not, read the next one
001128  2               ALTMX:
001128  2  A9 91                LDA     #$91            ; move cursor up
00112A  2  20 C1 19             JSR     CHROUT
00112D  2  20 5D 11             JSR     DISPMEM         ; re-display line to make ascii match hex
001130  2  4C 57 10             JMP     STRT            ; back to main loop
001133  2               
001133  2               ; -----------------------------------------------------------------------------
001133  2               ; goto (run) [G]
001133  2               GOTO:
001133  2  A6 B6                LDX     SP              ; load stack pointer from memory
001135  2  9A                   TXS                     ; save in SP register
001136  2               GOTO2:
001136  2  20 BB 16             JSR     COPY1P          ; copy provided address to PC
001139  2  78                   SEI                     ; disable interrupts
00113A  2  A5 B0                LDA     PCH             ; push PC high byte on stack
00113C  2  48                   PHA
00113D  2  A5 B1                LDA     PCL             ; push PC low byte on stack
00113F  2  48                   PHA
001140  2  A5 B2                LDA     SR              ; push status byte on stack
001142  2  48                   PHA
001143  2  A5 B3                LDA     ACC             ; load accumulator from memory
001145  2  A6 B4                LDX     XR              ; load X from memory
001147  2  A4 B5                LDY     YR              ; load Y from memory
001149  2  40                   RTI                     ; return from interrupt (pops PC and SR)
00114A  2               
00114A  2               ; jump to subroutine [J]
00114A  2               JSUB:
00114A  2  A6 B6                LDX     SP              ; load stack pointer from memory
00114C  2  9A                   TXS                     ; save value in SP register
00114D  2  20 36 11             JSR     GOTO2           ; same as goto command
001150  2  84 B5                STY     YR              ; save Y to memory
001152  2  86 B4                STX     XR              ; save X to memory
001154  2  85 B3                STA     ACC             ; save accumulator to memory
001156  2  08                   PHP                     ; push processor status on stack
001157  2  68                   PLA                     ; pull processor status into A
001158  2  85 B2                STA     SR              ; save processor status to memory
00115A  2  4C 36 10             JMP     DSPLYR          ; display registers
00115D  2               
00115D  2               ; -----------------------------------------------------------------------------
00115D  2               ; display 8 bytes of memory
00115D  2               DISPMEM:
00115D  2  20 16 16             JSR     CRLF            ; new line
001160  2  A9 3E                LDA     #'>'            ; prefix > so memory can be edited in place
001162  2  20 C1 19             JSR     CHROUT
001165  2  20 01 16             JSR     SHOWAD          ; show address of first byte on line
001168  2  A0 00                LDY     #0
00116A  2  F0 03                BEQ     DMEMGO          ; SHOWAD already printed a space after the address
00116C  2               DMEMLP:
00116C  2  20 0E 16             JSR     SPACE           ; print space between bytes
00116F  2               DMEMGO:
00116F  2  B1 C3                LDA     (TMP2),Y        ; load byte from start address + Y
001171  2  20 2F 16             JSR     WRTWO           ; output hex digits for byte
001174  2  C8                   INY                     ; next byte
001175  2  C0 08                CPY     #8              ; have we output 8 bytes yet?
001177  2  90 F3                BCC     DMEMLP          ; if not, output next byte
001179  2  A0 26                LDY     #MSG5-MSGBAS    ; if so, output : and turn on reverse video
00117B  2  20 A8 17             JSR     SNDMSG          ;   before displaying ascii representation
00117E  2  A0 00                LDY     #0              ; back to first byte in line
001180  2               DCHAR:
001180  2  B1 C3                LDA     (TMP2),Y        ; load byte at start address + Y
001182  2  AA                   TAX                     ; stash in X
001183  2  29 BF                AND     #$BF            ; clear 6th bit
001185  2  C9 22                CMP     #$22            ; is it a quote (")?
001187  2  F0 08                BEQ     DDOT            ; if so, print . instead
001189  2  8A                   TXA                     ; if not, restore character
00118A  2  29 7F                AND     #$7F            ; clear top bit
00118C  2  C9 20                CMP     #$20            ; is it a printable character (>= $20)?
00118E  2  8A                   TXA                     ; restore character
00118F  2  B0 02                BCS     DCHROK          ; if printable, output character
001191  2               DDOT:
001191  2  A9 2E                LDA     #$2E            ; if not, output '.' instaed
001193  2               DCHROK:
001193  2  20 C1 19             JSR     CHROUT
001196  2  C8                   INY                     ; next byte
001197  2  C0 08                CPY     #8              ; have we output 8 bytes yet?
001199  2  90 E5                BCC     DCHAR           ; if not, output next byte
00119B  2  60                   RTS
00119C  2               
00119C  2               ; -----------------------------------------------------------------------------
00119C  2               ; compare memory [C]
00119C  2               COMPAR:
00119C  2  A9 00                LDA     #0              ; bit 7 clear signals compare
00119E  2  2C                   .BYTE   $2C             ; absolute BIT opcode consumes next word (LDA #$80)
00119F  2               
00119F  2               ; transfer memory [T]
00119F  2               TRANS:
00119F  2  A9 80                LDA     #$80            ; bit 7 set signals transfer
0011A1  2  85 BA                STA     SAVY            ; save compare/transfer flag in SAVY
0011A3  2  A9 00                LDA     #0              ; assume we're counting up (bit 7 clear)
0011A5  2  85 CC                STA     UPFLG           ; save direction flag
0011A7  2  20 C6 16             JSR     GETDIF          ; get two addresses and calculate difference
0011AA  2                                               ;   TMP2 = source start
0011AA  2                                               ;   STASH = source end
0011AA  2                                               ;   STORE = length
0011AA  2  B0 05                BCS     TERROR          ; carry set indicates error
0011AC  2  20 4A 15             JSR     GETPAR          ; get destination address in TMP0
0011AF  2  90 03                BCC     TOKAY           ; carry set indicates error
0011B1  2               TERROR:
0011B1  2  4C A6 10             JMP     ERROR           ; handle error
0011B4  2               TOKAY:
0011B4  2  24 BA                BIT     SAVY            ; transfer or compare?
0011B6  2  10 23                BPL     COMPAR1         ; high bit clear indicates compare
0011B8  2  A5 C3                LDA     TMP2            ; if it's a transfer, we must take steps
0011BA  2  C5 C1                CMP     TMP0            ;   to avoid overwriting the source bytes before
0011BC  2  A5 C4                LDA     TMP2+1          ;   they have been transferred
0011BE  2  E5 C2                SBC     TMP0+1          ; compare source (TMP2) to destination (TMP0)
0011C0  2  B0 19                BCS     COMPAR1         ; and count up if source is before than desitnation
0011C2  2  A5 B7                LDA     STORE           ; otherwise, start at end and count down...
0011C4  2  65 C1                ADC     TMP0            ; add length (STORE) to desintation (TMP0)
0011C6  2  85 C1                STA     TMP0            ; to calculate end of destination
0011C8  2  A5 B8                LDA     STORE+1
0011CA  2  65 C2                ADC     TMP0+1
0011CC  2  85 C2                STA     TMP0+1
0011CE  2  A2 01                LDX     #1              ; change source pointer from beginning to end
0011D0  2               TDOWN:
0011D0  2  B5 CE                LDA     STASH,X         ; TMP2 = source end (STASH)
0011D2  2  95 C3                STA     TMP2,X
0011D4  2  CA                   DEX
0011D5  2  10 F9                BPL     TDOWN
0011D7  2  A9 80                LDA     #$80            ; high bit set in UPFLG means count down
0011D9  2  85 CC                STA     UPFLG
0011DB  2               COMPAR1:
0011DB  2  20 16 16             JSR     CRLF            ; new line
0011DE  2  A0 00                LDY     #0              ; no offset from pointer
0011E0  2               TCLOOP:
0011E0  2  20 B6 17             JSR     STOP            ; check for stop key
0011E3  2  F0 2F                BEQ     TEXIT           ; exit if pressed
0011E5  2  B1 C3                LDA     (TMP2),Y        ; load byte from source
0011E7  2  24 BA                BIT     SAVY            ; transfer or compare?
0011E9  2  10 02                BPL     COMPAR2         ; skip store if comparing
0011EB  2  91 C1                STA     (TMP0),Y        ; otherwise, store in destination
0011ED  2               COMPAR2:
0011ED  2  D1 C1                CMP     (TMP0),Y        ; compare to destination
0011EF  2  F0 03                BEQ     TMVAD           ; don't show address if equal
0011F1  2  20 01 16             JSR     SHOWAD          ; show address
0011F4  2               TMVAD:
0011F4  2  24 CC                BIT     UPFLG           ; counting up or down?
0011F6  2  30 0B                BMI     TDECAD          ; high bit set means we're counting down
0011F8  2  E6 C1                INC     TMP0            ; increment destination low byte
0011FA  2  D0 10                BNE     TINCOK
0011FC  2  E6 C2                INC     TMP0+1          ; carry to high byte if necessary
0011FE  2  D0 0C                BNE     TINCOK
001200  2  4C A6 10             JMP     ERROR           ; error if high byte overflowed
001203  2               TDECAD:
001203  2  20 81 16             JSR     SUBA1           ; decrement destination (TMP0)
001206  2  20 AD 16             JSR     SUB21           ; decrement source (TMP2)
001209  2  4C 0F 12             JMP     TMOR
00120C  2               TINCOK:
00120C  2  20 A1 16             JSR     ADDA2           ; increment source (TMP2)
00120F  2               TMOR:
00120F  2  20 93 16             JSR     SUB13           ; decrement length
001212  2  B0 CC                BCS     TCLOOP          ; loop until length is 0
001214  2               TEXIT:
001214  2  4C 57 10             JMP     STRT            ; back to main loop
001217  2               
001217  2               ; -----------------------------------------------------------------------------
001217  2               ; hunt memory [H]
001217  2               HUNT:
001217  2  20 C6 16             JSR     GETDIF          ; get start (TMP2) and end (TMP0) of haystack
00121A  2  B0 57                BCS     HERROR          ; carry indicates error
00121C  2  A0 00                LDY     #0
00121E  2  20 54 16             JSR     GETCHR          ; get a single character
001221  2  C9 27                CMP     #39             ; is it a single quote?
001223  2  D0 16                BNE     NOSTRH          ; if not, input needle as hex bytes
001225  2  20 54 16             JSR     GETCHR          ; if so, input needle as string
001228  2  C9 00                CMP     #0
00122A  2  F0 47                BEQ     HERROR          ; error if needle isn't at least one byte
00122C  2               HPAR:
00122C  2  99 DA 00             STA     STAGE,Y         ; save char in staging area
00122F  2  C8                   INY
001230  2  20 54 16             JSR     GETCHR          ; get another char
001233  2  F0 18                BEQ     HTGO            ; if it's null start searching
001235  2  C0 1E                CPY     #ESTAGE-STAGE   ; have we filled up the needle staging area?
001237  2  D0 F3                BNE     HPAR            ; if not, get another character
001239  2  F0 12                BEQ     HTGO            ; if so, start searching
00123B  2               NOSTRH:
00123B  2  20 48 15             JSR     RDPAR           ; read hex bytes if string not indicated
00123E  2               HLP:
00123E  2  A5 C1                LDA     TMP0            ; save last read byte in staging area
001240  2  99 DA 00             STA     STAGE,Y
001243  2  C8                   INY                     ; get another hex byte
001244  2  20 4A 15             JSR     GETPAR
001247  2  B0 04                BCS     HTGO            ; if there is none, start searching
001249  2  C0 1E                CPY     #ESTAGE-STAGE   ; have we filled up the needle staging area?
00124B  2  D0 F1                BNE     HLP             ; if not, get another byte
00124D  2               HTGO:
00124D  2  84 BA                STY     SAVY            ; save length of needle
00124F  2  20 16 16             JSR     CRLF            ; new line
001252  2               HSCAN:
001252  2  A0 00                LDY     #0
001254  2               HLP3:
001254  2  B1 C3                LDA     (TMP2),Y        ; get first byte in haystack
001256  2  D9 DA 00             CMP     STAGE,Y         ; compare it to first byte of needle
001259  2  D0 08                BNE     HNOFT           ; if it doesn't match, we haven't found anything
00125B  2  C8                   INY                     ; if it does, check the next byte
00125C  2  C4 BA                CPY     SAVY            ; have we reached the end of the needle?
00125E  2  D0 F4                BNE     HLP3            ; if not, keep comparing bytes
001260  2  20 01 16             JSR     SHOWAD          ; match found, show address
001263  2               HNOFT:
001263  2  20 B6 17             JSR     STOP            ; no match, check for stop key
001266  2  F0 08                BEQ     HEXIT           ; exit prematurely if pressed
001268  2  20 A1 16             JSR     ADDA2           ; increment haystack pointer
00126B  2  20 93 16             JSR     SUB13           ; decrement haystack length
00126E  2  B0 E2                BCS     HSCAN           ; still more haystack? keep searching
001270  2               HEXIT:
001270  2  4C 57 10             JMP     STRT            ; back to main loop
001273  2               HERROR:
001273  2  4C A6 10             JMP     ERROR           ; handle error
001276  2               
001276  2               
001276  2               ; -----------------------------------------------------------------------------
001276  2               ; fill memory [F]
001276  2               FILL:
001276  2  20 C6 16             JSR     GETDIF          ; start in TMP2, end in STASH, length in STORE
001279  2  B0 53                BCS     AERROR          ; carry set indicates error
00127B  2  20 4A 15             JSR     GETPAR          ; get value to fill in TMP0
00127E  2  B0 4E                BCS     AERROR          ; carry set indicates error
001280  2  20 54 16             JSR     GETCHR          ; any more characters triggers an error
001283  2  D0 49                BNE     AERROR
001285  2  A0 00                LDY     #0              ; no offset
001287  2               FILLP:
001287  2  A5 C1                LDA     TMP0            ; load value to fill in accumulator
001289  2  91 C3                STA     (TMP2),Y        ; store fill value in current address
00128B  2  20 B6 17             JSR     STOP            ; check for stop key
00128E  2  F0 08                BEQ     FSTART          ; if pressed, back to main loop
001290  2  20 A1 16             JSR     ADDA2           ; increment address
001293  2  20 93 16             JSR     SUB13           ; decrement length
001296  2  B0 EF                BCS     FILLP           ; keep going until length reaches 0
001298  2               FSTART:
001298  2  4C 57 10             JMP     STRT            ; back to main loop
00129B  2               
00129B  2               ; -----------------------------------------------------------------------------
00129B  2               ; assemble [A.]
00129B  2               
00129B  2               ; read in mnemonic
00129B  2               ASSEM:
00129B  2  B0 31                BCS     AERROR          ; error if no address given
00129D  2  20 6A 16             JSR     COPY12          ; copy address to TMP2
0012A0  2               AGET1:
0012A0  2  A2 00                LDX     #0
0012A2  2  86 D1                STX     U0AA0+1         ; clear byte that mnemonic gets shifted into
0012A4  2  86 CB                STX     DIGCNT          ; clear digit count
0012A6  2               AGET2:
0012A6  2  20 54 16             JSR     GETCHR          ; get a char
0012A9  2  D0 04                BNE     ALMOR           ; proceed if the character isn't null
0012AB  2  E0 00                CPX     #0              ; it's null, have read a mnemonic yet?
0012AD  2  F0 E9                BEQ     FSTART          ; if not, silently go back to main loop
0012AF  2               ALMOR:
0012AF  2  C9 20                CMP     #$20            ; skip leading spaces
0012B1  2  F0 ED                BEQ     AGET1
0012B3  2  95 C7                STA     MNEMW,X         ; put character in mnemonic buffer
0012B5  2  E8                   INX
0012B6  2  E0 03                CPX     #3              ; have we read 3 characters yet?
0012B8  2  D0 EC                BNE     AGET2           ; if not, get next character
0012BA  2               
0012BA  2               ; compress mnemonic into two bytes
0012BA  2               ASQEEZ:
0012BA  2  CA                   DEX                     ; move to previous char
0012BB  2  30 14                BMI     AOPRND          ; if we're done with mnemonic, look for operand
0012BD  2  B5 C7                LDA     MNEMW,X         ; get current character
0012BF  2  38                   SEC                     ; pack 3-letter mnemonic into 2 bytes (15 bits)
0012C0  2  E9 3F                SBC     #$3F            ; subtract $3F from ascii code so A-Z = 2 to 27
0012C2  2  A0 05                LDY     #$05            ; letters now fit in 5 bits; shift them out
0012C4  2               ASHIFT:
0012C4  2  4A                   LSR     A               ;   into the first two bytes of the inst buffer
0012C5  2  66 D1                ROR     U0AA0+1         ; catch the low bit from accumulator in right byte
0012C7  2  66 D0                ROR     U0AA0           ; catch the low bit from right byte in left byte
0012C9  2  88                   DEY                     ; count down bits
0012CA  2  D0 F8                BNE     ASHIFT          ; keep looping until we reach zero
0012CC  2  F0 EC                BEQ     ASQEEZ          ; unconditional branch to handle next char
0012CE  2               AERROR:
0012CE  2  4C A6 10             JMP     ERROR           ; handle error
0012D1  2               
0012D1  2               ; parse operand
0012D1  2               AOPRND:
0012D1  2  A2 02                LDX     #2              ; mnemonic is in first two bytes so start at third
0012D3  2               ASCAN:
0012D3  2  A5 CB                LDA     DIGCNT          ; did we find address digits last time?
0012D5  2  D0 28                BNE     AFORM1          ; if so, look for mode chars
0012D7  2  20 6F 15             JSR     RDVAL           ; otherwise, look for an address
0012DA  2  F0 21                BEQ     AFORM0          ; we didn't find an address, look for characters
0012DC  2  B0 F0                BCS     AERROR          ; carry flag indicates error
0012DE  2  A9 24                LDA     #'$'
0012E0  2  95 D0                STA     U0AA0,X         ; prefix addresses with $
0012E2  2  E8                   INX                     ; next position in buffer
0012E3  2  A0 04                LDY     #4              ; non-zero page addresses are 4 hex digits
0012E5  2  A5 CD                LDA     NUMBIT          ; check numeric base in which address was given
0012E7  2  C9 08                CMP     #8              ; for addresses given in octal or binary
0012E9  2  90 04                BCC     AADDR           ;   use only the high byte to determine page
0012EB  2  C4 CB                CPY     DIGCNT          ; for decimal or hex, force non-zero page addressing
0012ED  2  F0 06                BEQ     AFILL0          ;   if address was given with four digits or more
0012EF  2               AADDR:
0012EF  2  A5 C2                LDA     TMP0+1          ; check whether high byte of address is zero
0012F1  2  D0 02                BNE     AFILL0          ; non-zero high byte means we're not in zero page
0012F3  2  A0 02                LDY     #2              ; if it's in zero page, addr is 2 hex digits
0012F5  2               AFILL0:
0012F5  2  A9 30                LDA     #$30            ; use 0 as placeholder for each hex digit in addr
0012F7  2               AFIL0L:
0012F7  2  95 D0                STA     U0AA0,X         ; put placeholder in assembly buffer
0012F9  2  E8                   INX                     ; move to next byte in buffer
0012FA  2  88                   DEY                     ; decrement number of remaining digits
0012FB  2  D0 FA                BNE     AFIL0L          ; loop until all digits have been placed
0012FD  2               AFORM0:
0012FD  2  C6 B9                DEC     CHRPNT          ; non-numeric input; back 1 char to see what it was
0012FF  2               AFORM1:
0012FF  2  20 54 16             JSR     GETCHR          ; get next character
001302  2  F0 0D                BEQ     AESCAN          ; if there is none, we're finished scanning
001304  2  C9 20                CMP     #$20            ; skip spaces
001306  2  F0 CB                BEQ     ASCAN
001308  2  95 D0                STA     U0AA0,X         ; store character in assembly buffer
00130A  2  E8                   INX                     ; move to next byte in buffer
00130B  2  E0 0A                CPX     #U0AAE-U0AA0    ; is instruction buffer full?
00130D  2  90 C4                BCC     ASCAN           ; if not, keep scanning
00130F  2  B0 BD                BCS     AERROR          ; error if buffer is full
001311  2               
001311  2               ; find matching opcode
001311  2               AESCAN:
001311  2  86 B7                STX     STORE           ; save number of bytes in assembly buffer
001313  2  A2 00                LDX     #0              ; start at opcode $00 and check every one until
001315  2  86 CB                STX     OPCODE          ;   we find one that matches our criteria
001317  2               ATRYOP:
001317  2  A2 00                LDX     #0
001319  2  86 BB                STX     U9F             ; reset index into work buffer
00131B  2  A5 CB                LDA     OPCODE
00131D  2  20 E0 14             JSR     INSTXX          ; look up instruction format for current opcode
001320  2  A6 C5                LDX     ACMD            ; save addressing command for later
001322  2  86 B8                STX     STORE+1
001324  2  AA                   TAX                     ; use current opcode as index
001325  2  BD 10 19             LDA     MNEMR,X         ; check right byte of compressed mnemonic
001328  2  20 16 14             JSR     CHEKOP
00132B  2  BD D0 18             LDA     MNEML,X         ; check left byte of compressed mnemonic
00132E  2  20 16 14             JSR     CHEKOP
001331  2  A2 06                LDX     #6              ; 6 possible characters to check against operand
001333  2               TRYIT:
001333  2  E0 03                CPX     #3              ; are we on character 3?
001335  2  D0 12                BNE     TRYMOD          ; if not, check operand characters
001337  2  A4 C6                LDY     LENGTH          ; otherwise, check number of bytes in operand
001339  2  F0 0E                BEQ     TRYMOD          ; if zero, check operand characters
00133B  2               TRYAD:
00133B  2  A5 C5                LDA     ACMD            ; otherwise, look for an address
00133D  2  C9 E8                CMP     #$E8            ; special case for relative addressing mode
00133F  2                                               ;   since it's specified with 4 digits in assembly
00133F  2                                               ;   but encoded with only 1 byte in object code
00133F  2  A9 30                LDA     #$30            ; '0' is the digit placeholder we're looking for
001341  2  B0 1D                BCS     TRY4B           ; ACMD >= $E8 indicates relative addressing
001343  2  20 13 14             JSR     CHEK2B          ; ACMD < $E8 indicates normal addressing
001346  2  88                   DEY                     ; consume byte
001347  2  D0 F2                BNE     TRYAD           ; check for 2 more digits if not zero-page
001349  2               TRYMOD:
001349  2  06 C5                ASL     ACMD            ; shift a bit out of the addressing command
00134B  2  90 0E                BCC     UB4DF           ; if it's zero, skip checking current character
00134D  2  BD C3 18             LDA     CHAR1-1,X
001350  2  20 16 14             JSR     CHEKOP          ; otherwise first character against operand
001353  2  BD C9 18             LDA     CHAR2-1,X       ; get second character to check
001356  2  F0 03                BEQ     UB4DF           ; if it's zero, skip checking it
001358  2  20 16 14             JSR     CHEKOP          ; otherwise check it against hte operand
00135B  2               UB4DF:
00135B  2  CA                   DEX                     ; move to next character
00135C  2  D0 D5                BNE     TRYIT           ; repeat tests
00135E  2  F0 06                BEQ     TRYBRAN
001360  2               TRY4B:
001360  2  20 13 14             JSR     CHEK2B          ; check for 4 digit address placeholder
001363  2  20 13 14             JSR     CHEK2B          ;   by checking for 2 digits twice
001366  2               TRYBRAN:
001366  2  A5 B7                LDA     STORE           ; get number of bytes in assembly buffer
001368  2  C5 BB                CMP     U9F             ; more bytes left to check?
00136A  2  F0 03                BEQ     ABRAN           ; if not, we've found a match; build instruction
00136C  2  4C 20 14             JMP     BUMPOP          ; if so, this opcode doesn't match; try the next
00136F  2               
00136F  2               ; convert branches to relative address
00136F  2               ABRAN:
00136F  2  A4 C6                LDY     LENGTH          ; get number of bytes in operand
001371  2  F0 33                BEQ     A1BYTE          ; if none, just output the opcode
001373  2  A5 B8                LDA     STORE+1         ; otherwise check the address format
001375  2  C9 9D                CMP     #$9D            ; is it a relative branch?
001377  2  D0 25                BNE     OBJPUT          ; if not, skip relative branch calculation
001379  2  A5 C1                LDA     TMP0            ; calculate the difference between the current
00137B  2  E5 C3                SBC     TMP2            ;   address and the branch target (low byte)
00137D  2  AA                   TAX                     ; save it in X
00137E  2  A5 C2                LDA     TMP0+1          ; borrow from the high byte if necessary
001380  2  E5 C4                SBC     TMP2+1
001382  2  90 0B                BCC     ABBACK          ; if result is negative, we're branching back
001384  2  F0 03                BEQ     :++             ; high bytes must be equal when branching forward
001386  2               :
001386  2  4C 10 14             JMP     SERROR
001389  2               :
001389  2  E0 82                CPX     #$82            ; difference between low bytes must be < 130
00138B  2  B0 F9                BCS     :--             ; error if the address is too far away
00138D  2  90 08                BCC     ABRANX
00138F  2               ABBACK:
00138F  2  A8                   TAY                     ; when branching backward high byte of target must
001390  2  C8                   INY                     ;   be 1 less than high byte of current address
001391  2  D0 7D                BNE     SERROR          ; if not, it's too far away
001393  2  E0 82                CPX     #$82            ; difference between low bytes must be < 130
001395  2  90 79                BCC     SERROR          ; if not, it's too far away
001397  2               ABRANX:
001397  2  CA                   DEX                     ; adjust branch target relative to the
001398  2  CA                   DEX                     ;   instruction following this one
001399  2  8A                   TXA
00139A  2  A4 C6                LDY     LENGTH          ; load length of operand
00139C  2  D0 03                BNE     OBJP2           ; don't use the absolute address
00139E  2               
00139E  2               ; assemble machine code
00139E  2               OBJPUT:
00139E  2  B9 C0 00             LDA     TMP0-1,Y        ; get the operand
0013A1  2               OBJP2:
0013A1  2  91 C3                STA     (TMP2),Y        ; store it after the opcode
0013A3  2  88                   DEY
0013A4  2  D0 F8                BNE     OBJPUT          ; copy the other byte of operand if there is one
0013A6  2               A1BYTE:
0013A6  2  A5 CB                LDA     OPCODE          ; put opcode into instruction
0013A8  2  91 C3                STA     (TMP2),Y
0013AA  2  A9 0D                LDA     #$0D            ; cr
0013AC  2  20 C1 19             JSR     CHROUT
0013AF  2  A0 2E                LDY     #MSG7-MSGBAS    ; "A " prefix
0013B1  2  20 95 17             JSR     SNDCLR          ; clear line
0013B4  2  A9 41                LDA     #'A'
0013B6  2  20 C1 19             JSR     CHROUT
0013B9  2  A9 20                LDA     #' '
0013BB  2  20 C1 19             JSR     CHROUT
0013BE  2  20 68 14             JSR     DISLIN          ; disassemble the instruction we just assembled
0013C1  2  E6 C6                INC     LENGTH          ; instruction length = operand length + 1 byte
0013C3  2  A5 C6                LDA     LENGTH          ;   for the opcode
0013C5  2  20 A3 16             JSR     BUMPAD2         ; increment address by length of instruction
0013C8  2                                               ; setup for the next assemble command
0013C8  2  20 16 16             JSR     CRLF
0013CB  2  A9 41                LDA     #'A'            ; stuff keyboard buffer with next assemble command:
0013CD  2  8D 00 02             STA     INBUFF
0013D0  2  20 C1 19             JSR     OUTCH
0013D3  2  A9 20                LDA     #' '            ;   after the previously assembled instruction
0013D5  2  8D 01 02             STA     INBUFF+1
0013D8  2  20 C1 19             JSR     OUTCH
0013DB  2  A5 C4                LDA     TMP2+1          ; convert high byte of next address to hex
0013DD  2  20 3D 16             JSR     ASCTWO
0013E0  2  8D 02 02             STA     INBUFF+2        ; put it in the keyboard buffer
0013E3  2  20 C1 19             JSR     OUTCH
0013E6  2  8E 03 02             STX     INBUFF+3
0013E9  2  8A                   TXA
0013EA  2  20 C1 19             JSR     OUTCH
0013ED  2  A5 C3                LDA     TMP2            ; convert low byte of next address to hex
0013EF  2  20 3D 16             JSR     ASCTWO
0013F2  2  8D 04 02             STA     INBUFF+4        ; put it in the keyboard buffer
0013F5  2  20 C1 19             JSR     OUTCH
0013F8  2  8E 05 02             STX     INBUFF+5
0013FB  2  8A                   TXA
0013FC  2  20 C1 19             JSR     OUTCH
0013FF  2  A9 20                LDA     #' '            ;   after the previously assembled instruction
001401  2  8D 06 02             STA     INBUFF+6
001404  2  20 C1 19             JSR     OUTCH
001407  2  A2 07                LDX     #7              ; set number of chars in keyboard buffer
001409  2  A9 00                LDA     #$00
00140B  2  85 B9                STA     CHRPNT
00140D  2  4C 5E 10             JMP     SMOVE           ; back to main loop
001410  2               SERROR:
001410  2  4C A6 10             JMP     ERROR           ; handle error
001413  2               
001413  2               ; check characters in operand
001413  2               CHEK2B:
001413  2  20 16 14             JSR     CHEKOP          ; check two bytes against value in accumulator
001416  2               CHEKOP:
001416  2  86 CA                STX     SAVX            ; stash X
001418  2  A6 BB                LDX     U9F             ; get current index into work buffer
00141A  2  D5 D0                CMP     U0AA0,X         ; check whether this opcode matches the buffer
00141C  2  F0 09                BEQ     OPOK            ;   matching so far, check the next criteria
00141E  2  68                   PLA                     ; didn't match, so throw away return address
00141F  2  68                   PLA                     ;   on the stack because we're starting over
001420  2               BUMPOP:
001420  2  E6 CB                INC     OPCODE          ; check the next opcode
001422  2  F0 EC                BEQ     SERROR          ; error if we tried every opcode and none fit
001424  2  4C 17 13             JMP     ATRYOP          ; start over with new opcode
001427  2               OPOK:
001427  2  E6 BB                INC     U9F             ; opcode matches so far; check the next criteria
001429  2  A6 CA                LDX     SAVX            ; restore X
00142B  2  60                   RTS
00142C  2               
00142C  2               ; -----------------------------------------------------------------------------
00142C  2               ; disassemble [D]
00142C  2               DISASS:
00142C  2  B0 08                BCS     DIS0AD          ; if no address was given, start from last address
00142E  2  20 6A 16             JSR     COPY12          ; copy start address to TMP2
001431  2  20 4A 15             JSR     GETPAR          ; get end address in TMP0
001434  2  90 06                BCC     DIS2AD          ; if one was given, skip default
001436  2               DIS0AD:
001436  2  A9 14                LDA     #$14            ; disassemble 14 bytes by default
001438  2  85 C1                STA     TMP0            ; store length in TMP0
00143A  2  D0 05                BNE     DISGO           ; skip length calculation
00143C  2               DIS2AD:
00143C  2  20 73 16             JSR     SUB12           ; calculate number of bytes between start and end
00143F  2  90 1C                BCC     DERROR          ; error if end address is before start address
001441  2               DISGO:
001441  2  20 8F 17             JSR     CLINE           ; clear the current line
001444  2  20 B6 17             JSR     STOP            ; check for stop key
001447  2  F0 11                BEQ     DISEXIT         ; exit early if pressed
001449  2  20 60 14             JSR     DSOUT1          ; output disassembly prefix ". "
00144C  2  E6 C6                INC     LENGTH
00144E  2  A5 C6                LDA     LENGTH          ; add length of last instruction to start address
001450  2  20 A3 16             JSR     BUMPAD2
001453  2  A5 C6                LDA     LENGTH          ; subtract length of last inst from end address
001455  2  20 83 16             JSR     SUBA2
001458  2  B0 E7                BCS     DISGO
00145A  2               DISEXIT:
00145A  2  4C 57 10             JMP     STRT            ; back to mainloop
00145D  2               DERROR:
00145D  2  4C A6 10             JMP     ERROR
001460  2               
001460  2               DSOUT1:
001460  2  A9 2E                LDA     #'.'            ; output ". " prefix to allow edit and reassemble
001462  2  20 C1 19             JSR     CHROUT
001465  2  20 0E 16             JSR     SPACE
001468  2               
001468  2               DISLIN:
001468  2  20 01 16             JSR     SHOWAD          ; show the address of the instruction
00146B  2  20 0E 16             JSR     SPACE           ; insert a space
00146E  2  A0 00                LDY     #0              ; no offset
001470  2  B1 C3                LDA     (TMP2),Y        ; load operand of current instruction
001472  2  20 E0 14             JSR     INSTXX          ; get mnemonic and addressing mode for opcode
001475  2  48                   PHA                     ; save index into mnemonic table
001476  2  A6 C6                LDX     LENGTH          ; get length of operand
001478  2  E8                   INX                     ; add 1 byte for opcode
001479  2               DSBYT:
001479  2  CA                   DEX                     ; decrement index
00147A  2  10 0C                BPL     DSHEX           ; show hex for byte being disassembled
00147C  2  84 BA                STY     SAVY            ; save index
00147E  2  A0 30                LDY     #MSG8-MSGBAS    ; skip 3 spaces
001480  2  20 A8 17             JSR     SNDMSG
001483  2  A4 BA                LDY     SAVY            ; restore index
001485  2  4C 8D 14             JMP     NXBYT
001488  2               DSHEX:
001488  2  B1 C3                LDA     (TMP2),Y        ; show hex for byte
00148A  2  20 0B 16             JSR     WRBYTE
00148D  2               
00148D  2               NXBYT:
00148D  2  C8                   INY                     ; next byte
00148E  2  C0 03                CPY     #3              ; have we output 3 bytes yet?
001490  2  90 E7                BCC     DSBYT           ; if not, loop
001492  2  68                   PLA                     ; restore index into mnemonic table
001493  2  A2 03                LDX     #3              ; 3 letters in mnemonic
001495  2  20 26 15             JSR     PROPXX          ; print mnemonic
001498  2  A2 06                LDX     #6              ; 6 possible address mode character combos
00149A  2               PRADR1:
00149A  2  E0 03                CPX     #3              ; have we checked the third combo yet?
00149C  2  D0 14                BNE     PRADR3          ; if so, output the leading characters
00149E  2  A4 C6                LDY     LENGTH          ; get the length of the operand
0014A0  2  F0 10                BEQ     PRADR3          ; if it's zero, there's no operand to print
0014A2  2               PRADR2:
0014A2  2  A5 C5                LDA     ACMD            ; otherwise, get the addressing mode
0014A4  2  C9 E8                CMP     #$E8            ; check for relative addressing
0014A6  2  08                   PHP                     ; save result of check
0014A7  2  B1 C3                LDA     (TMP2),Y        ; get the operand
0014A9  2  28                   PLP                     ; restore result of check
0014AA  2  B0 1C                BCS     RELAD           ; handle a relative address
0014AC  2  20 2F 16             JSR     WRTWO           ; output digits from address
0014AF  2  88                   DEY
0014B0  2  D0 F0                BNE     PRADR2          ; repeat for next byte of operand, if there is one
0014B2  2               PRADR3:
0014B2  2  06 C5                ASL     ACMD            ; check whether addr mode uses the current char
0014B4  2  90 0E                BCC     PRADR4          ; if not, skip it
0014B6  2  BD C3 18             LDA     CHAR1-1,X       ; look up the first char in the table
0014B9  2  20 C1 19             JSR     CHROUT          ; print first char
0014BC  2  BD C9 18             LDA     CHAR2-1,X       ; look up the second char in the table
0014BF  2  F0 03                BEQ     PRADR4          ; if there's no second character, skip it
0014C1  2  20 C1 19             JSR     CHROUT          ; print second char
0014C4  2               PRADR4:
0014C4  2  CA                   DEX                     ; next potential address mode character
0014C5  2  D0 D3                BNE     PRADR1          ; loop if we haven't checked them all yet
0014C7  2  60                   RTS                     ; back to caller
0014C8  2               RELAD:
0014C8  2  20 D4 14             JSR     UB64D           ; calculate absolute address from relative
0014CB  2  18                   CLC
0014CC  2  69 01                ADC     #1              ; adjust address relative to next instruction
0014CE  2  D0 01                BNE     RELEND          ; don't increment high byte unless we overflowed
0014D0  2  E8                   INX                     ; increment high byte
0014D1  2               RELEND:
0014D1  2  4C 05 16             JMP     WRADDR          ; print address
0014D4  2               
0014D4  2               UB64D:
0014D4  2  A6 C4                LDX     TMP2+1          ; get high byte of current address
0014D6  2  A8                   TAY                     ; is relative address positive or negative?
0014D7  2  10 01                BPL     RELC2           ; if positive, leave high byte alone
0014D9  2  CA                   DEX                     ; if negative, decrement high byte
0014DA  2               RELC2:
0014DA  2  65 C3                ADC     TMP2            ; add relative address to low byte
0014DC  2  90 01                BCC     RELC3           ; if there's no carry, we're done
0014DE  2  E8                   INX                     ; if there's a carry, increment the high byte
0014DF  2               RELC3:
0014DF  2  60                   RTS
0014E0  2               
0014E0  2               ; -----------------------------------------------------------------------------
0014E0  2               ; get opcode mode and length
0014E0  2               
0014E0  2               ; Note: the labels are different, but the code of this subroutine is almost
0014E0  2               ; identical to the INSDS2 subroutine of the Apple Mini-Assembler on page 78 of
0014E0  2               ; the Apple II Red Book. I'm not sure exactly where this code originated
0014E0  2               ; (MOS or Apple) but it's clear that this part of Supermon64 and the
0014E0  2               ; Mini-Asssembler share a common heritage.  The comments showing the way the
0014E0  2               ; opcodes are transformed into indexes for the mnemonic lookup table come
0014E0  2               ; from the Mini-Assembler source.
0014E0  2               
0014E0  2               INSTXX:
0014E0  2  A8                   TAY                     ; stash opcode in accumulator in Y for later
0014E1  2  4A                   LSR     A               ; is opcode even or odd?
0014E2  2  90 0B                BCC     IEVEN
0014E4  2  4A                   LSR     A
0014E5  2  B0 17                BCS     ERR             ; invalid opcodes XXXXXX11
0014E7  2  C9 22                CMP     #$22
0014E9  2  F0 13                BEQ     ERR             ; invalid opcode 10001001
0014EB  2  29 07                AND     #$07            ; mask bits to 10000XXX
0014ED  2  09 80                ORA     #$80
0014EF  2               IEVEN:
0014EF  2  4A                   LSR     A               ; LSB determines whether to use left/right nybble
0014F0  2  AA                   TAX                     ; get format index using remaining high bytes
0014F1  2  BD 72 18             LDA     MODE,X
0014F4  2  B0 04                BCS     RTMODE          ; look at left or right nybble based on carry bit
0014F6  2  4A                   LSR     A               ; if carry = 0, use left nybble
0014F7  2  4A                   LSR     A
0014F8  2  4A                   LSR     A
0014F9  2  4A                   LSR     A
0014FA  2               RTMODE:
0014FA  2  29 0F                AND     #$0F            ; if carry = 1, use right nybble
0014FC  2  D0 04                BNE     GETFMT
0014FE  2               ERR:
0014FE  2  A0 80                LDY     #$80            ; substitute 10000000 for invalid opcodes
001500  2  A9 00                LDA     #0
001502  2               GETFMT:
001502  2  AA                   TAX
001503  2  BD B6 18             LDA     MODE2,X         ; lookup operand format using selected nybble
001506  2  85 C5                STA     ACMD            ; save for later use
001508  2  29 03                AND     #$03            ; lower 2 bits indicate number of bytes in operand
00150A  2  85 C6                STA     LENGTH
00150C  2  98                   TYA                     ; restore original opcode
00150D  2  29 8F                AND     #$8F            ; mask bits to X000XXXX
00150F  2  AA                   TAX                     ; save it
001510  2  98                   TYA                     ; restore original opcode
001511  2  A0 03                LDY     #3
001513  2  E0 8A                CPX     #$8A            ; check if opcode = 1XXX1010
001515  2  F0 0B                BEQ     GTFM4
001517  2               GTFM2:
001517  2  4A                   LSR     A               ; transform opcode into index for mnemonic table
001518  2  90 08                BCC     GTFM4
00151A  2  4A                   LSR     A               ; opcodes transformed as follows:
00151B  2               GTFM3:
00151B  2  4A                   LSR     A               ; 1XXX1010->00101XXX
00151C  2  09 20                ORA     #$20            ; XXXYYY01->00111XXX
00151E  2  88                   DEY                     ; XXXYYY10->00111XXX
00151F  2  D0 FA                BNE     GTFM3           ; XXXYY100->00110XXX
001521  2  C8                   INY                     ; XXXXX000->000XXXXX
001522  2               GTFM4:
001522  2  88                   DEY
001523  2  D0 F2                BNE     GTFM2
001525  2  60                   RTS
001526  2               
001526  2               ; -----------------------------------------------------------------------------
001526  2               ; extract and print packed mnemonics
001526  2               PROPXX:
001526  2  A8                   TAY                     ; use index in accumulator to look up mnemonic
001527  2  B9 D0 18             LDA     MNEML,Y         ;   and place a temporary copy in STORE
00152A  2  85 B7                STA     STORE
00152C  2  B9 10 19             LDA     MNEMR,Y
00152F  2  85 B8                STA     STORE+1
001531  2               PRMN1:
001531  2  A9 00                LDA     #0              ; clear accumulator
001533  2  A0 05                LDY     #$05            ; shift 5 times
001535  2               PRMN2:
001535  2  06 B8                ASL     STORE+1         ; shift right byte
001537  2  26 B7                ROL     STORE           ; rotate bits from right byte into left byte
001539  2  2A                   ROL     A               ; rotate bits from left byte into accumulator
00153A  2  88                   DEY                     ; next bit
00153B  2  D0 F8                BNE     PRMN2           ; loop until all bits shifted
00153D  2  69 3F                ADC     #$3F            ; calculate ascii code for letter by adding to '?'
00153F  2  20 C1 19             JSR     CHROUT          ; output letter
001542  2  CA                   DEX                     ; next letter
001543  2  D0 EC                BNE     PRMN1           ; loop until all 3 letters are output
001545  2  4C 0E 16             JMP     SPACE           ; output space
001548  2               
001548  2               ; -----------------------------------------------------------------------------
001548  2               ; read parameters
001548  2               RDPAR:
001548  2  C6 B9                DEC     CHRPNT          ; back up one char
00154A  2               GETPAR:
00154A  2  20 6F 15             JSR     RDVAL           ; read the value
00154D  2  B0 15                BCS     GTERR           ; carry set indicates error
00154F  2  20 52 16             JSR     GOTCHR          ; check previous character
001552  2  D0 08                BNE     CKTERM          ; if it's not null, check if it's a valid separator
001554  2  C6 B9                DEC     CHRPNT          ; back up one char
001556  2  A5 CB                LDA     DIGCNT          ; get number of digits read
001558  2  D0 11                BNE     GETGOT          ; found some digits
00155A  2  F0 0D                BEQ     GTNIL           ; didn't find any digits
00155C  2               CKTERM:
00155C  2  C9 20                CMP     #$20            ; space or comma are valid separators
00155E  2  F0 0B                BEQ     GETGOT          ; anything else is an error
001560  2  C9 2C                CMP     #','
001562  2  F0 07                BEQ     GETGOT
001564  2               GTERR:
001564  2  68                   PLA                     ; encountered error
001565  2  68                   PLA                     ; get rid of command vector pushed on stack
001566  2  4C A6 10             JMP     ERROR           ; handle error
001569  2               GTNIL:
001569  2  38                   SEC                     ; set carry to indicate no parameter found
00156A  2  24                   .BYTE   $24             ; BIT ZP opcode consumes next byte (CLC)
00156B  2               GETGOT:
00156B  2  18                   CLC                     ; clear carry to indicate paremeter returned
00156C  2  A5 CB                LDA     DIGCNT          ; return number of digits in A
00156E  2  60                   RTS                     ; return to address pushed from vector table
00156F  2               
00156F  2               ; -----------------------------------------------------------------------------
00156F  2               ; read a value in the specified base
00156F  2               RDVAL:
00156F  2  A9 00                LDA     #0              ; clear temp
001571  2  85 C1                STA     TMP0
001573  2  85 C2                STA     TMP0+1
001575  2  85 CB                STA     DIGCNT          ; clear digit counter
001577  2  8A                   TXA                     ; save X and Y
001578  2  48                   PHA
001579  2  98                   TYA
00157A  2  48                   PHA
00157B  2               RDVMOR:
00157B  2  20 54 16             JSR     GETCHR          ; get next character from input buffer
00157E  2  F0 1C                BEQ     RDNILK          ; null at end of buffer
001580  2  C9 20                CMP     #$20            ; skip spaces
001582  2  F0 F7                BEQ     RDVMOR
001584  2  A2 03                LDX     #3              ; check numeric base [$+&%]
001586  2               GNMODE:
001586  2  DD 64 19             CMP     HIKEY,X
001589  2  F0 06                BEQ     GOTMOD          ; got a match, set up base
00158B  2  CA                   DEX
00158C  2  10 F8                BPL     GNMODE          ; check next base
00158E  2  E8                   INX                     ; default to hex
00158F  2  C6 B9                DEC     CHRPNT          ; back up one character
001591  2               GOTMOD:
001591  2  BC 86 19             LDY     MODTAB,X        ; get base value
001594  2  BD 8A 19             LDA     LENTAB,X        ; get bits per digit
001597  2  85 CD                STA     NUMBIT          ; store bits per digit
001599  2               NUDIG:
001599  2  20 54 16             JSR     GETCHR          ; get next char in A
00159C  2               RDNILK:
00159C  2  F0 59                BEQ     RDNIL           ; end of number if no more characters
00159E  2  38                   SEC
00159F  2  E9 30                SBC     #$30            ; subtract ascii value of 0 to get numeric value
0015A1  2  90 54                BCC     RDNIL           ; end of number if character was less than 0
0015A3  2  C9 0A                CMP     #$0A
0015A5  2  90 06                BCC     DIGMOR          ; not a hex digit if less than A
0015A7  2  E9 07                SBC     #$07            ; 7 chars between ascii 9 and A, so subtract 7
0015A9  2  C9 10                CMP     #$10            ; end of number if char is greater than F
0015AB  2  B0 4A                BCS     RDNIL
0015AD  2               DIGMOR:
0015AD  2  85 CC                STA     INDIG           ; store the digit
0015AF  2  C4 CC                CPY     INDIG           ; compare base with the digit
0015B1  2  90 42                BCC     RDERR           ; error if the digit >= the base
0015B3  2  F0 40                BEQ     RDERR
0015B5  2  E6 CB                INC     DIGCNT          ; increment the number of digits
0015B7  2  C0 0A                CPY     #10
0015B9  2  D0 09                BNE     NODECM          ; skip the next part if not using base 10
0015BB  2  A2 01                LDX     #1
0015BD  2               DECLP1:
0015BD  2  B5 C1                LDA     TMP0,X          ; stash the previous 16-bit value for later use
0015BF  2  95 CE                STA     STASH,X
0015C1  2  CA                   DEX
0015C2  2  10 F9                BPL     DECLP1
0015C4  2               NODECM:
0015C4  2  A6 CD                LDX     NUMBIT          ; number of bits to shift
0015C6  2               TIMES2:
0015C6  2  06 C1                ASL     TMP0            ; shift 16-bit value by specified number of bits
0015C8  2  26 C2                ROL     TMP0+1
0015CA  2  B0 29                BCS     RDERR           ; error if we overflowed 16 bits
0015CC  2  CA                   DEX
0015CD  2  D0 F7                BNE     TIMES2          ; shift remaining bits
0015CF  2  C0 0A                CPY     #10
0015D1  2  D0 14                BNE     NODEC2          ; skip the next part if not using base 10
0015D3  2  06 CE                ASL     STASH           ; shift the previous 16-bit value one bit left
0015D5  2  26 CF                ROL     STASH+1
0015D7  2  B0 1C                BCS     RDERR           ; error if we overflowed 16 bits
0015D9  2  A5 CE                LDA     STASH           ; add shifted previous value to current value
0015DB  2  65 C1                ADC     TMP0
0015DD  2  85 C1                STA     TMP0
0015DF  2  A5 CF                LDA     STASH+1
0015E1  2  65 C2                ADC     TMP0+1
0015E3  2  85 C2                STA     TMP0+1
0015E5  2  B0 0E                BCS     RDERR           ; error if we overflowed 16 bits
0015E7  2               NODEC2:
0015E7  2  18                   CLC
0015E8  2  A5 CC                LDA     INDIG           ; load current digit
0015EA  2  65 C1                ADC     TMP0            ; add current digit to low byte
0015EC  2  85 C1                STA     TMP0            ; and store result back in low byte
0015EE  2  8A                   TXA                     ; A=0
0015EF  2  65 C2                ADC     TMP0+1          ; add carry to high byte
0015F1  2  85 C2                STA     TMP0+1          ; and store result back in high byte
0015F3  2  90 A4                BCC     NUDIG           ; get next digit if we didn't overflow
0015F5  2               RDERR:
0015F5  2  38                   SEC                     ; set carry to indicate error
0015F6  2  24                   .BYTE   $24             ; BIT ZP opcode consumes next byte (CLC)
0015F7  2               RDNIL:
0015F7  2  18                   CLC                     ; clear carry to indicate success
0015F8  2  84 CD                STY     NUMBIT          ; save base of number
0015FA  2  68                   PLA                     ; restore X and Y
0015FB  2  A8                   TAY
0015FC  2  68                   PLA
0015FD  2  AA                   TAX
0015FE  2  A5 CB                LDA     DIGCNT          ; return number of digits in A
001600  2  60                   RTS
001601  2               
001601  2               ; -----------------------------------------------------------------------------
001601  2               ; print address
001601  2               SHOWAD:
001601  2  A5 C3                LDA     TMP2
001603  2  A6 C4                LDX     TMP2+1
001605  2               
001605  2               WRADDR:
001605  2  48                   PHA                     ; save low byte
001606  2  8A                   TXA                     ; put high byte in A
001607  2  20 2F 16             JSR     WRTWO           ; output high byte
00160A  2  68                   PLA                     ; restore low byte
00160B  2               
00160B  2               WRBYTE:
00160B  2  20 2F 16             JSR     WRTWO           ; output byte in A
00160E  2               
00160E  2               SPACE:
00160E  2  A9 20                LDA     #$20            ; output space
001610  2  D0 0F                BNE     FLIP
001612  2               
001612  2               CHOUT:
001612  2  C9 0D                CMP     #$0D            ; output char with special handling of CR
001614  2  D0 0B                BNE     FLIP
001616  2               CRLF:
001616  2  A9 0D                LDA     #$0D            ; load CR in A
001618  2  24 13                BIT     $13             ; check default channel
00161A  2  10 05                BPL     FLIP            ; if high bit is clear output CR only
00161C  2  20 C1 19             JSR     CHROUT          ; otherwise output CR+LF
00161F  2  A9 0A                LDA     #$0A            ; output LF
001621  2               FLIP:
001621  2  4C C1 19             JMP     CHROUT
001624  2               
001624  2               FRESH:
001624  2  20 16 16             JSR     CRLF            ; output CR
001627  2  A9 20                LDA     #$20            ; load space in A
001629  2  20 C1 19             JSR     CHROUT
00162C  2  4C 98 17             JMP     SNCLR
00162F  2               
00162F  2               ; -----------------------------------------------------------------------------
00162F  2               ; output two hex digits for byte
00162F  2               WRTWO:
00162F  2  86 CA                STX     SAVX            ; save X
001631  2  20 3D 16             JSR     ASCTWO          ; get hex chars for byte in X (lower) and A (upper)
001634  2  20 C1 19             JSR     CHROUT          ; output upper nybble
001637  2  8A                   TXA                     ; transfer lower to A
001638  2  A6 CA                LDX     SAVX            ; restore X
00163A  2  4C C1 19             JMP     CHROUT          ; output lower nybble
00163D  2               
00163D  2               ; -----------------------------------------------------------------------------
00163D  2               ; convert byte in A to hex digits
00163D  2               ASCTWO:
00163D  2  48                   PHA                     ; save byte
00163E  2  20 47 16             JSR     ASCII           ; do low nybble
001641  2  AA                   TAX                     ; save in X
001642  2  68                   PLA                     ; restore byte
001643  2  4A                   LSR     A               ; shift upper nybble down
001644  2  4A                   LSR     A
001645  2  4A                   LSR     A
001646  2  4A                   LSR     A
001647  2               
001647  2               ; convert low nybble in A to hex digit
001647  2               ASCII:
001647  2  29 0F                AND     #$0F            ; clear upper nibble
001649  2  C9 0A                CMP     #$0A            ; if less than A, skip next step
00164B  2  90 02                BCC     ASC1
00164D  2  69 06                ADC     #6              ; skip ascii chars between 9 and A
00164F  2               ASC1:
00164F  2  69 30                ADC     #$30            ; add ascii char 0 to value
001651  2  60                   RTS
001652  2               
001652  2               ; -----------------------------------------------------------------------------
001652  2               ; get prev char from input buffer
001652  2               GOTCHR:
001652  2  C6 B9                DEC     CHRPNT
001654  2               
001654  2               ; get next char from input buffer
001654  2               GETCHR:
001654  2  86 CA                STX     SAVX
001656  2  A6 B9                LDX     CHRPNT          ; get pointer to next char
001658  2  BD 00 02             LDA     INBUFF,X        ; load next char in A
00165B  2  F0 06                BEQ     NOCHAR          ; null, :, or ? signal end of buffer
00165D  2  C9 3A                CMP     #':'
00165F  2  F0 02                BEQ     NOCHAR
001661  2  C9 3F                CMP     #'?'
001663  2               NOCHAR:
001663  2  08                   PHP
001664  2  E6 B9                INC     CHRPNT          ; next char
001666  2  A6 CA                LDX     SAVX
001668  2  28                   PLP                     ; Z flag will signal last character
001669  2  60                   RTS
00166A  2               
00166A  2               ; -----------------------------------------------------------------------------
00166A  2               ; copy TMP0 to TMP2
00166A  2               COPY12:
00166A  2  A5 C1                LDA     TMP0            ; low byte
00166C  2  85 C3                STA     TMP2
00166E  2  A5 C2                LDA     TMP0+1          ; high byte
001670  2  85 C4                STA     TMP2+1
001672  2  60                   RTS
001673  2               
001673  2               ; -----------------------------------------------------------------------------
001673  2               ; subtract TMP2 from TMP0
001673  2               SUB12:
001673  2  38                   SEC
001674  2  A5 C1                LDA     TMP0            ; subtract low byte
001676  2  E5 C3                SBC     TMP2
001678  2  85 C1                STA     TMP0
00167A  2  A5 C2                LDA     TMP0+1
00167C  2  E5 C4                SBC     TMP2+1          ; subtract high byte
00167E  2  85 C2                STA     TMP0+1
001680  2  60                   RTS
001681  2               
001681  2               ; -----------------------------------------------------------------------------
001681  2               ; subtract from TMP0
001681  2               SUBA1:
001681  2  A9 01                LDA     #1              ; shortcut to decrement by 1
001683  2               SUBA2:
001683  2  85 CA                STA     SAVX            ; subtrahend in accumulator
001685  2  38                   SEC
001686  2  A5 C1                LDA     TMP0            ; minuend in low byte
001688  2  E5 CA                SBC     SAVX
00168A  2  85 C1                STA     TMP0
00168C  2  A5 C2                LDA     TMP0+1          ; borrow from high byte
00168E  2  E9 00                SBC     #0
001690  2  85 C2                STA     TMP0+1
001692  2  60                   RTS
001693  2               
001693  2               ; -----------------------------------------------------------------------------
001693  2               ; subtract 1 from STORE
001693  2               SUB13:
001693  2  38                   SEC
001694  2  A5 B7                LDA     STORE
001696  2  E9 01                SBC     #1              ; decrement low byte
001698  2  85 B7                STA     STORE
00169A  2  A5 B8                LDA     STORE+1
00169C  2  E9 00                SBC     #0              ; borrow from high byte
00169E  2  85 B8                STA     STORE+1
0016A0  2  60                   RTS
0016A1  2               
0016A1  2               ; -----------------------------------------------------------------------------
0016A1  2               ; add to TMP2
0016A1  2               ADDA2:
0016A1  2  A9 01                LDA     #1              ; shortcut to increment by 1
0016A3  2               BUMPAD2:
0016A3  2  18                   CLC
0016A4  2  65 C3                ADC     TMP2            ; add value in accumulator to low byte
0016A6  2  85 C3                STA     TMP2
0016A8  2  90 02                BCC     BUMPEX
0016AA  2  E6 C4                INC     TMP2+1          ; carry to high byte
0016AC  2               BUMPEX:
0016AC  2  60                   RTS
0016AD  2               
0016AD  2               ; -----------------------------------------------------------------------------
0016AD  2               ; subtract 1 from TMP2
0016AD  2               SUB21:
0016AD  2  38                   SEC
0016AE  2  A5 C3                LDA     TMP2            ; decrement low byte
0016B0  2  E9 01                SBC     #1
0016B2  2  85 C3                STA     TMP2
0016B4  2  A5 C4                LDA     TMP2+1          ; borrow from high byte
0016B6  2  E9 00                SBC     #0
0016B8  2  85 C4                STA     TMP2+1
0016BA  2  60                   RTS
0016BB  2               
0016BB  2               ; -----------------------------------------------------------------------------
0016BB  2               ; copy TMP0 to PC
0016BB  2               COPY1P:
0016BB  2  B0 08                BCS     CPY1PX          ; do nothing if parameter is empty
0016BD  2  A5 C1                LDA     TMP0            ; copy low byte
0016BF  2  A4 C2                LDY     TMP0+1          ; copy high byte
0016C1  2  85 B1                STA     PCL
0016C3  2  84 B0                STY     PCH
0016C5  2               CPY1PX:
0016C5  2  60                   RTS
0016C6  2               
0016C6  2               ; -----------------------------------------------------------------------------
0016C6  2               ; get start/end addresses and calc difference
0016C6  2               GETDIF:
0016C6  2  B0 1F                BCS     GDIFX           ; exit with error if no parameter given
0016C8  2  20 6A 16             JSR     COPY12          ; save start address in TMP2
0016CB  2  20 4A 15             JSR     GETPAR          ; get end address in TMP0
0016CE  2  B0 17                BCS     GDIFX           ; exit with error if no parameter given
0016D0  2  A5 C1                LDA     TMP0            ; save end address in STASH
0016D2  2  85 CE                STA     STASH
0016D4  2  A5 C2                LDA     TMP0+1
0016D6  2  85 CF                STA     STASH+1
0016D8  2  20 73 16             JSR     SUB12           ; subtract start address from end address
0016DB  2  A5 C1                LDA     TMP0
0016DD  2  85 B7                STA     STORE           ; save difference in STORE
0016DF  2  A5 C2                LDA     TMP0+1
0016E1  2  85 B8                STA     STORE+1
0016E3  2  90 02                BCC     GDIFX           ; error if start address is after end address
0016E5  2  18                   CLC                     ; clear carry to indicate success
0016E6  2  24                   .BYTE   $24             ; BIT ZP opcode consumes next byte (SEC)
0016E7  2               GDIFX:
0016E7  2  38                   SEC                     ; set carry to indicate error
0016E8  2  60                   RTS
0016E9  2               
0016E9  2               ; -----------------------------------------------------------------------------
0016E9  2               ; convert base [$+&%]
0016E9  2               CONVRT:
0016E9  2  20 48 15             JSR     RDPAR           ; read a parameter
0016EC  2  20 24 16             JSR     FRESH           ; next line and clear
0016EF  2  A9 24                LDA     #'$'            ; output $ sigil for hex
0016F1  2  20 C1 19             JSR     CHROUT
0016F4  2  A5 C1                LDA     TMP0            ; load the 16-bit value entered
0016F6  2  A6 C2                LDX     TMP0+1
0016F8  2  20 05 16             JSR     WRADDR          ; print it in 4 hex digits
0016FB  2  20 24 16             JSR     FRESH
0016FE  2  A9 2B                LDA     #'+'            ; output + sigil for decimal
001700  2  20 C1 19             JSR     CHROUT
001703  2  20 34 17             JSR     CVTDEC          ; convert to BCD using hardware mode
001706  2  A9 00                LDA     #0              ; clear digit counter
001708  2  A2 06                LDX     #6              ; max digits + 1
00170A  2  A0 03                LDY     #3              ; bits per digit - 1
00170C  2  20 67 17             JSR     NMPRNT          ; print result without leading zeros
00170F  2  20 24 16             JSR     FRESH           ; next line and clear
001712  2  A9 26                LDA     #'&'            ; print & sigil for octal
001714  2  20 C1 19             JSR     CHROUT
001717  2  A9 00                LDA     #0              ; clear digit counter
001719  2  A2 08                LDX     #8              ; max digits + 1
00171B  2  A0 02                LDY     #2              ; bits per digit - 1
00171D  2  20 59 17             JSR     PRINUM          ; output number
001720  2  20 24 16             JSR     FRESH           ; next line and clear
001723  2  A9 25                LDA     #'%'            ; print % sigil for binary
001725  2  20 C1 19             JSR     CHROUT
001728  2  A9 00                LDA     #0              ; clear digit counter
00172A  2  A2 18                LDX     #$18            ; max digits + 1
00172C  2  A0 00                LDY     #0              ; bits per digit - 1
00172E  2  20 59 17             JSR     PRINUM          ; output number
001731  2  4C 57 10             JMP     STRT            ; back to mainloop
001734  2               
001734  2               ; -----------------------------------------------------------------------------
001734  2               ; convert binary to BCD
001734  2               
001734  2               CVTDEC:
001734  2  20 6A 16             JSR     COPY12          ; copy value from TMP0 to TMP2
001737  2  A9 00                LDA     #0
001739  2  A2 02                LDX     #2              ; clear 3 bytes in work buffer
00173B  2               DECML1:
00173B  2  95 D0                STA     U0AA0,X
00173D  2  CA                   DEX
00173E  2  10 FB                BPL     DECML1
001740  2  A0 10                LDY     #16             ; 16 bits in input
001742  2  08                   PHP                     ; save status register
001743  2  78                   SEI                     ; make sure no interrupts occur with BCD enabled
001744  2  F8                   SED
001745  2               DECML2:
001745  2  06 C3                ASL     TMP2            ; rotate bytes out of input low byte
001747  2  26 C4                ROL     TMP2+1          ; .. into high byte and carry bit
001749  2  A2 02                LDX     #2              ; process 3 bytes
00174B  2               DECDBL:
00174B  2  B5 D0                LDA     U0AA0,X         ; load current value of byte
00174D  2  75 D0                ADC     U0AA0,X         ; add it to itself plus the carry bit
00174F  2  95 D0                STA     U0AA0,X         ; store it back in the same location
001751  2  CA                   DEX                     ; decrement byte counter
001752  2  10 F7                BPL     DECDBL          ; loop until all bytes processed
001754  2  88                   DEY                     ; decrement bit counter
001755  2  D0 EE                BNE     DECML2          ; loop until all bits processed
001757  2  28                   PLP                     ; restore processor status
001758  2  60                   RTS
001759  2               
001759  2               ; load the input value and fall through to print it
001759  2               PRINUM:
001759  2  48                   PHA                     ; save accumulator
00175A  2  A5 C1                LDA     TMP0            ; copy input low byte to work buffer
00175C  2  85 D2                STA     U0AA0+2
00175E  2  A5 C2                LDA     TMP0+1          ; copy input high byte to work buffer
001760  2  85 D1                STA     U0AA0+1
001762  2  A9 00                LDA     #0              ; clear overflow byte in work buffer
001764  2  85 D0                STA     U0AA0
001766  2  68                   PLA                     ; restore accumulator
001767  2               
001767  2               ; print number in specified base without leading zeros
001767  2               NMPRNT:
001767  2  85 CB                STA     DIGCNT          ; number of digits in accumulator
001769  2  84 CD                STY     NUMBIT          ; bits per digit passed in Y register
00176B  2               DIGOUT:
00176B  2  A4 CD                LDY     NUMBIT          ; get bits to process
00176D  2  A9 00                LDA     #0              ; clear accumulator
00176F  2               ROLBIT:
00176F  2  06 D2                ASL     U0AA0+2         ; shift bits out of low byte
001771  2  26 D1                ROL     U0AA0+1         ; ... into high byte
001773  2  26 D0                ROL     U0AA0           ; ... into overflow byte
001775  2  2A                   ROL     A               ; ... into accumulator
001776  2  88                   DEY                     ; decrement bit counter
001777  2  10 F6                BPL     ROLBIT          ; loop until all bits processed
001779  2  A8                   TAY                     ; check whether accumulator is 0
00177A  2  D0 08                BNE     NZERO           ; if not, print it
00177C  2  E0 01                CPX     #1              ; have we output the max number of digits?
00177E  2  F0 04                BEQ     NZERO           ; if not, print it
001780  2  A4 CB                LDY     DIGCNT          ; how many digits have we output?
001782  2  F0 07                BEQ     ZERSUP          ; skip output if digit is 0
001784  2               NZERO:
001784  2  E6 CB                INC     DIGCNT          ; increment digit counter
001786  2  09 30                ORA     #$30            ; add numeric value to ascii '0' to get ascii char
001788  2  20 C1 19             JSR     CHROUT          ; output character
00178B  2               ZERSUP:
00178B  2  CA                   DEX                     ; decrement number of leading zeros
00178C  2  D0 DD                BNE     DIGOUT          ; next digit
00178E  2  60                   RTS
00178F  2               
00178F  2               
00178F  2               ; -----------------------------------------------------------------------------
00178F  2               ; print and clear routines
00178F  2               CLINE:
00178F  2  20 16 16             JSR     CRLF
001792  2  4C 98 17             JMP     SNCLR           ; clear line
001795  2               SNDCLR:
001795  2  20 A8 17             JSR     SNDMSG
001798  2               SNCLR:
001798  2  A0 28                LDY     #$28            ; loop 40 times
00179A  2               SNCLP:
00179A  2  A9 20                LDA     #$20            ; output space character
00179C  2  20 C1 19             JSR     CHROUT
00179F  2  88                   DEY
0017A0  2  D0 F8                BNE     SNCLP
0017A2  2  A9 0D                LDA     #13             ; output CR
0017A4  2  20 C1 19             JSR     CHROUT          ; send CR
0017A7  2  60                   RTS
0017A8  2               
0017A8  2               ; -----------------------------------------------------------------------------
0017A8  2               ; display message from table
0017A8  2               SNDMSG:
0017A8  2  B9 3F 18             LDA     MSGBAS,Y        ; Y contains offset in msg table
0017AB  2  08                   PHP
0017AC  2  29 7F                AND     #$7F            ; strip high bit before output
0017AE  2  20 12 16             JSR     CHOUT
0017B1  2  C8                   INY
0017B2  2  28                   PLP
0017B3  2  10 F3                BPL     SNDMSG          ; loop until high bit is set
0017B5  2  60                   RTS
0017B6  2               
0017B6  2               ; -----------------------------------------------------------------------------
0017B6  2               ; check for stop key
0017B6  2               STOP:
0017B6  2  20 B3 19             JSR     IOF_CONIN
0017B9  2  C9 03                CMP     #$03
0017BB  2  F0 03                BEQ     :+
0017BD  2  A9 FF                LDA     #$FF
0017BF  2  60                   RTS
0017C0  2               :
0017C0  2  A9 00                LDA     #$00
0017C2  2  60                   RTS
0017C3  2               
0017C3  2               ; -----------------------------------------------------------------------------
0017C3  2               ; LOAD A MOTOROLA FORMATTED HEX FILE
0017C3  2               LOAD:
0017C3  2  20 A6 19             JSR     IOF_CONINW      ;
0017C6  2  C9 53                CMP     #'S'            ;
0017C8  2  D0 F9                BNE     LOAD            ; FIRST CHAR NOT (S)
0017CA  2  20 A6 19             JSR     IOF_CONINW      ; READ CHAR
0017CD  2  C9 39                CMP     #'9'            ;
0017CF  2  F0 33                BEQ     LOAD21          ;
0017D1  2  C9 31                CMP     #'1'            ;
0017D3  2  D0 EE                BNE     LOAD            ; SECOND CHAR NOT (1)
0017D5  2  A9 00                LDA     #$00            ;
0017D7  2  85 BC                STA     CKSM            ; ZERO CHECKSUM
0017D9  2  20 07 18             JSR     GETBYTE         ; READ BYTE
0017DC  2  E9 01                SBC     #$01            ;
0017DE  2  85 CB                STA     DIGCNT          ; BYTE COUNT
0017E0  2  20 34 18             JSR     BADDR           ; BUILD ADDRESS
0017E3  2  A0 00                LDY     #$00            ;
0017E5  2               LOAD11:
0017E5  2  20 07 18             JSR     GETBYTE         ;
0017E8  2  C6 CB                DEC     DIGCNT          ;
0017EA  2  F0 0F                BEQ     LOAD15          ; ZERO BYTE COUNT
0017EC  2  91 BD                STA     (LOADADR),Y     ; STORE DATA
0017EE  2  E6 BD                INC     LOADADR         ; INCREMENT LOWBYTE
0017F0  2  A5 BD                LDA     LOADADR
0017F2  2  C9 00                CMP     #$00
0017F4  2  D0 EF                BNE     LOAD11          ; NOT ZERO?, LOOP
0017F6  2  E6 BE                INC     LOADADR+1       ; ZERO, INC HIGH BYTE
0017F8  2  4C E5 17             JMP     LOAD11          ;
0017FB  2               
0017FB  2               LOAD15:
0017FB  2  E6 BC                INC     CKSM            ;
0017FD  2  F0 C4                BEQ     LOAD            ;
0017FF  2               LOAD19:
0017FF  2  A9 3F                LDA     #'?'            ;
001801  2  20 C1 19             JSR     OUTCH           ;
001804  2               LOAD21:
001804  2  4C 57 10             JMP     STRT            ; back to main loop
001807  2               GETBYTE:
001807  2  20 1F 18             JSR     INHEX           ; GET HEX CHAR
00180A  2  0A                   ASL                     ;
00180B  2  0A                   ASL                     ;
00180C  2  0A                   ASL                     ;
00180D  2  0A                   ASL                     ;
00180E  2  85 BF                STA     LOADWRK         ;
001810  2  20 1F 18             JSR     INHEX           ;
001813  2  29 0F                AND     #$0F            ; MASK TO 4 BITS
001815  2  05 BF                ORA     LOADWRK         ;
001817  2  48                   PHA                     ;
001818  2  18                   CLC                     ;
001819  2  65 BC                ADC     CKSM            ;
00181B  2  85 BC                STA     CKSM            ;
00181D  2  68                   PLA                     ;
00181E  2  60                   RTS                     ;
00181F  2               ; INPUT HEX CHAR
00181F  2               INHEX:
00181F  2  20 A6 19             JSR     IOF_CONINW      ;
001822  2  48                   PHA                     ;
001823  2  20 C1 19             JSR     OUTCH           ;
001826  2  68                   PLA                     ;
001827  2  C9 3A                CMP     #$3A            ; LESS THAN 9?
001829  2  B0 02                BCS     INHEX_BIG       ; NO, SKIP NEXT
00182B  2  E9 2F                SBC     #$2F            ; CONVERT 0-9
00182D  2               INHEX_BIG:
00182D  2  C9 41                CMP     #$41            ; A OR MORE?
00182F  2  90 02                BCC     INHEX_SMALL     ; NO, SKIP NEXT
001831  2  E9 37                SBC     #$37            ; CONVERT A-F
001833  2               INHEX_SMALL:
001833  2  60                   RTS                     ;
001834  2               ; BUILD ADDRESS
001834  2               BADDR:
001834  2  20 07 18             JSR     GETBYTE         ; READ 2 FRAMES
001837  2  85 BE                STA     LOADADR+1       ;
001839  2  20 07 18             JSR     GETBYTE         ;
00183C  2  85 BD                STA     LOADADR         ;
00183E  2  60                   RTS
00183F  2               
00183F  2               
00183F  2               ; -----------------------------------------------------------------------------
00183F  2               ; message table; last character has high bit set
00183F  2               MSGBAS:
00183F  2               
00183F  2               MSG2:
00183F  2  0D                   .BYTE   $0D             ; header for registers
001840  2  20 20 20 50          .BYTE   "   PC  SR AC XR YR SP   V1.2"
001844  2  43 20 20 53  
001848  2  52 20 41 43  
00185C  2  8D                   .BYTE   $0D+$80
00185D  2               MSG3:
00185D  2  1D BF                .BYTE   $1D,$3F+$80     ; syntax error: move right, display "?"
00185F  2               MSG4:
00185F  2  2E 2E 53 59          .BYTE   "..SYS"         ; SYS call to enter monitor
001863  2  53           
001864  2  A0                   .BYTE   $20+$80
001865  2               MSG5:
001865  2  3A 92                .BYTE   $3A,$12+$80     ; ":" then RVS ON for memory ASCII dump
001867  2               MSG6:
001867  2  20 45 52 52          .BYTE   " ERRO"         ; I/O error: display " ERROR"
00186B  2  4F           
00186C  2  D2                   .BYTE   'R'+$80
00186D  2               MSG7:
00186D  2  41 A0                .BYTE   $41,$20+$80     ; assemble next instruction: "A " + addr
00186F  2               MSG8:
00186F  2  20 20                .BYTE   "  "            ; pad non-existent byte: skip 3 spaces
001871  2  A0                   .BYTE   $20+$80
001872  2               
001872  2               ; -----------------------------------------------------------------------------
001872  2               ; addressing mode table - nybbles provide index into MODE2 table
001872  2               ; for opcodes XXXXXXY0, use XXXXXX as index into table
001872  2               ; for opcodes WWWXXY01  use $40 + XX as index into table
001872  2               ; use right nybble if Y=0; use left nybble if Y=1
001872  2               
001872  2               MODE:
001872  2  40 02 45 03          .BYTE   $40,$02,$45,$03 ; even opcodes
001876  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
00187A  2  30 22 45 33          .BYTE   $30,$22,$45,$33
00187E  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
001882  2  40 02 45 33          .BYTE   $40,$02,$45,$33
001886  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
00188A  2  40 02 45 B3          .BYTE   $40,$02,$45,$B3
00188E  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
001892  2  00 22 44 33          .BYTE   $00,$22,$44,$33
001896  2  D0 8C 44 00          .BYTE   $D0,$8C,$44,$00
00189A  2  11 22 44 33          .BYTE   $11,$22,$44,$33
00189E  2  D0 8C 44 9A          .BYTE   $D0,$8C,$44,$9A
0018A2  2  10 22 44 33          .BYTE   $10,$22,$44,$33
0018A6  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
0018AA  2  10 22 44 33          .BYTE   $10,$22,$44,$33
0018AE  2  D0 08 40 09          .BYTE   $D0,$08,$40,$09
0018B2  2  62 13 78 A9          .BYTE   $62,$13,$78,$A9 ; opcodes ending in 01
0018B6  2               
0018B6  2               ; addressing mode format definitions indexed by nybbles from MODE table
0018B6  2               
0018B6  2               ; left 6 bits define which characters appear in the assembly operand
0018B6  2               ; left 3 bits are before the address; next 3 bits are after
0018B6  2               
0018B6  2               ; right-most 2 bits define length of binary operand
0018B6  2               
0018B6  2               ; index               654 321
0018B6  2               ; 1st character       $(# ,),
0018B6  2               ; 2nd character        $$ X Y    length  format      idx mode
0018B6  2               MODE2:
0018B6  2  00                   .BYTE   $00             ; 000 000    00                  0   error
0018B7  2  21                   .BYTE   $21             ; 001 000    01      #$00        1   immediate
0018B8  2  81                   .BYTE   $81             ; 100 000    01      $00         2   zero-page
0018B9  2  82                   .BYTE   $82             ; 100 000    10      $0000       3   absolute
0018BA  2  00                   .BYTE   $00             ; 000 000    00                  4   implied
0018BB  2  00                   .BYTE   $00             ; 000 000    00                  5   accumulator
0018BC  2  59                   .BYTE   $59             ; 010 110    01      ($00,X)     6   indirect,X
0018BD  2  4D                   .BYTE   $4D             ; 010 011    01      ($00),Y     7   indirect,Y
0018BE  2  91                   .BYTE   $91             ; 100 100    01      $00,X       8   zero-page,X
0018BF  2  92                   .BYTE   $92             ; 100 100    10      $0000,X     9   absolute,X
0018C0  2  86                   .BYTE   $86             ; 100 001    10      $0000,Y     A   absolute,Y
0018C1  2  4A                   .BYTE   $4A             ; 010 010    10      ($0000)     B   indirect
0018C2  2  85                   .BYTE   $85             ; 100 001    01      $00,Y       C   zero-page,Y
0018C3  2  9D                   .BYTE   $9D             ; 100 111    01      $0000*      D   relative
0018C4  2               
0018C4  2               ; * relative is special-cased so format bits don't match
0018C4  2               
0018C4  2               
0018C4  2               ; character lookup tables for the format definitions in MODE2
0018C4  2               
0018C4  2               CHAR1:
0018C4  2  2C 29 2C             .BYTE   $2C,$29,$2C     ; ","  ")"  ","
0018C7  2  23 28 24             .BYTE   $23,$28,$24     ; "#"  "("  "$"
0018CA  2               
0018CA  2               CHAR2:
0018CA  2  59 00 58             .BYTE   $59,$00,$58     ; "Y"   0   "X"
0018CD  2  24 24 00             .BYTE   $24,$24,$00     ; "$"  "$"   0
0018D0  2               
0018D0  2               ; -----------------------------------------------------------------------------
0018D0  2               ; 3-letter mnemonics packed into two bytes (5 bits per letter)
0018D0  2               
0018D0  2               ; left 8 bits
0018D0  2               ; XXXXX000 opcodes
0018D0  2               MNEML:
0018D0  2  1C 8A 1C 23          .BYTE   $1C,$8A,$1C,$23 ; BRK PHP BPL CLC
0018D4  2  5D 8B 1B A1          .BYTE   $5D,$8B,$1B,$A1 ; JSR PLP BMI SEC
0018D8  2  9D 8A 1D 23          .BYTE   $9D,$8A,$1D,$23 ; RTI PHA BVC CLI
0018DC  2  9D 8B 1D A1          .BYTE   $9D,$8B,$1D,$A1 ; RTS PLA BVS SEI
0018E0  2  00 29 19 AE          .BYTE   $00,$29,$19,$AE ; ??? DEY BCC TYA
0018E4  2  69 A8 19 23          .BYTE   $69,$A8,$19,$23 ; LDY TAY BCS CLV
0018E8  2  24 53 1B 23          .BYTE   $24,$53,$1B,$23 ; CPY INY BNE CLD
0018EC  2  24 53 19 A1          .BYTE   $24,$53,$19,$A1 ; CPX INX BEQ SED
0018F0  2               ; XXXYY100 opcodes
0018F0  2  00 1A 5B 5B          .BYTE   $00,$1A,$5B,$5B ; ??? BIT JMP JMP
0018F4  2  A5 69 24 24          .BYTE   $A5,$69,$24,$24 ; STY LDY CPY CPX
0018F8  2               ; 1XXX1010 opcodes
0018F8  2  AE AE A8 AD          .BYTE   $AE,$AE,$A8,$AD ; TXA TXS TAX TSX
0018FC  2  29 00 7C 00          .BYTE   $29,$00,$7C,$00 ; DEX ??? NOP ???
001900  2               ; XXXYYY10 opcodes
001900  2  15 9C 6D 9C          .BYTE   $15,$9C,$6D,$9C ; ASL ROL LSR ROR
001904  2  A5 69 29 53          .BYTE   $A5,$69,$29,$53 ; STX LDX DEC INC
001908  2               ; XXXYYY01 opcodes
001908  2  84 13 34 11          .BYTE   $84,$13,$34,$11 ; ORA AND EOR ADC
00190C  2  A5 69 23 A0          .BYTE   $A5,$69,$23,$A0 ; STA LDA CMP SBC
001910  2               
001910  2               ; right 7 bits, left justified
001910  2               ; XXXXX000 opcodes
001910  2               MNEMR:
001910  2  D8 62 5A 48          .BYTE   $D8,$62,$5A,$48 ; BRK PHP BPL CLC
001914  2  26 62 94 88          .BYTE   $26,$62,$94,$88 ; JSR PLP BMI SEC
001918  2  54 44 C8 54          .BYTE   $54,$44,$C8,$54 ; RTI PHA BVC CLI
00191C  2  68 44 E8 94          .BYTE   $68,$44,$E8,$94 ; RTS PLA BVS SEI
001920  2  00 B4 08 84          .BYTE   $00,$B4,$08,$84 ; ??? DEY BCC TYA
001924  2  74 B4 28 6E          .BYTE   $74,$B4,$28,$6E ; LDY TAY BCS CLV
001928  2  74 F4 CC 4A          .BYTE   $74,$F4,$CC,$4A ; CPY INY BNE CLD
00192C  2  72 F2 A4 8A          .BYTE   $72,$F2,$A4,$8A ; CPX INX BEQ SED
001930  2               ; XXXYY100 opcodes
001930  2  00 AA A2 A2          .BYTE   $00,$AA,$A2,$A2 ; ??? BIT JMP JMP
001934  2  74 74 74 72          .BYTE   $74,$74,$74,$72 ; STY LDY CPY CPX
001938  2               ; 1XXX1010 opcodes
001938  2  44 68 B2 32          .BYTE   $44,$68,$B2,$32 ; TXA TXS TAX TSX
00193C  2  B2 00 22 00          .BYTE   $B2,$00,$22,$00 ; DEX ??? NOP ???
001940  2               ; XXXYYY10 opcodes
001940  2  1A 1A 26 26          .BYTE   $1A,$1A,$26,$26 ; ASL ROL LSR ROR
001944  2  72 72 88 C8          .BYTE   $72,$72,$88,$C8 ; STX LDX DEC INC
001948  2               ; XXXYYY01 opcodes
001948  2  C4 CA 26 48          .BYTE   $C4,$CA,$26,$48 ; ORA AND EOR ADC
00194C  2  44 44 A2 C8          .BYTE   $44,$44,$A2,$C8 ; STA LDA CMP SBC
001950  2  0D 20 20 20          .BYTE   $0D,$20,$20,$20
001954  2               
001954  2               ; -----------------------------------------------------------------------------
001954  2               ; single-character commands
001954  2               KEYW:
001954  2  41 43 44 46          .BYTE   "ACDFGHJLMRTX@.>;"
001958  2  47 48 4A 4C  
00195C  2  4D 52 54 58  
001964  2               HIKEY:
001964  2  24 2B 26 25          .BYTE   "$+&%"
001968  2               KEYTOP:
001968  2               
001968  2               
001968  2               ; vectors corresponding to commands above
001968  2               KADDR:
001968  2  9A 12 9B 11          .WORD   ASSEM-1,COMPAR-1,DISASS-1,FILL-1
00196C  2  2B 14 75 12  
001970  2  32 11 16 12          .WORD   GOTO-1,HUNT-1,JSUB-1,LOAD-1
001974  2  49 11 C2 17  
001978  2  C5 10 35 10          .WORD   DSPLYM-1,DSPLYR-1,TRANS-1,EXIT-1
00197C  2  9E 11 C2 10  
001980  2  9A 12 12 11          .WORD   ASSEM-1,ALTM-1,ALTR-1
001984  2  FB 10        
001986  2               
001986  2               ; -----------------------------------------------------------------------------
001986  2               MODTAB:
001986  2  10 0A 08 02          .BYTE   $10,$0A,$08,02  ; modulo number systems
00198A  2               LENTAB:
00198A  2  04 03 03 01          .BYTE   $04,$03,$03,$01 ; bits per digit
00198E  2               
00198E  1               
00198E  1               ;__________________________________________________________________________________________________________
00198E  1               ;
00198E  1               ;  AT SOME POINT, REPLACE THIS WITH 6502HBIOS CALLS
00198E  1               ;
00198E  1               
00198E  1               INIT_SERIAL:
00198E  1  A9 80                LDA     #$80            ;
001990  1  8D 6B 03             STA     UART3           ; SET DLAB FLAG
001993  1  A9 0C                LDA     #12             ; SET TO 12 = 9600 BAUD
001995  1  8D 68 03             STA     UART0           ; save baud rate
001998  1  A9 00                LDA     #00             ;
00199A  1  8D 69 03             STA     UART1           ;
00199D  1  A9 03                LDA     #03             ;
00199F  1  8D 6B 03             STA     UART3           ; SET 8 BIT DATA, 1 STOPBIT
0019A2  1  8D 6C 03             STA     UART4           ;
0019A5  1  60                   RTS
0019A6  1               
0019A6  1               
0019A6  1               IOF_CONINW:                     ;
0019A6  1               SERIAL_INCHW1:
0019A6  1  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0019A9  1  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
0019AB  1  C9 00                CMP     #$00
0019AD  1  F0 F7                BEQ     SERIAL_INCHW1   ; LOOP UNTIL DATA IS READY
0019AF  1  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
0019B2  1               
0019B2  1  60                   RTS
0019B3  1               
0019B3  1               IOF_CONIN:                      ;
0019B3  1  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0019B6  1  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
0019B8  1  F0 04                BEQ     SERIAL_INCH1    ; NO CHAR FOUND
0019BA  1  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
0019BD  1  60                   RTS
0019BE  1               SERIAL_INCH1:                   ;
0019BE  1  A9 00                LDA     #$00
0019C0  1  60                   RTS                     ;
0019C1  1               
0019C1  1               OUTCH:  ;
0019C1  1  48                   PHA                     ; STORE A
0019C2  1               TX_BUSYLP:
0019C2  1  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
0019C5  1  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
0019C7  1  C9 00                CMP     #$00
0019C9  1  F0 F7                BEQ     TX_BUSYLP       ; IF NOT REPEAT
0019CB  1  68                   PLA                     ; RESTORE ACC
0019CC  1  8D 68 03             STA     UART0           ; THEN WRITE THE CHAR TO UART
0019CF  1  60                   RTS
0019D0  1               
0019D0  1               
0019D0  1               ; START BANNER
0019D0  1               STARTUP:
0019D0  1  0D 0A                .BYTE   $0D,$0A
0019D2  1               
0019D2  1  20 20 4E 68          .BYTE   "  Nhyodyne",$0D,$0A
0019D6  1  79 6F 64 79  
0019DA  1  6E 65 0D 0A  
0019DE  1  20 20 20 5F          .BYTE   "   __ _____  _____ ___ ___ ",$0D,$0A
0019E2  1  5F 20 5F 5F  
0019E6  1  5F 5F 5F 20  
0019FB  1  20 20 2F 20          .BYTE   "  / /| ____|/ ____/ _ \__ \ ",$0D,$0A
0019FF  1  2F 7C 20 5F  
001A03  1  5F 5F 5F 7C  
001A19  1  20 2F 20 2F          .BYTE   " / /_| |__ | |   | | | | ) | ",$0D,$0A
001A1D  1  5F 7C 20 7C  
001A21  1  5F 5F 20 7C  
001A38  1  7C 20 27 5F          .BYTE   "| '_ \___ \| |   | | | |/ / ",$0D,$0A
001A3C  1  20 5C 5F 5F  
001A40  1  5F 20 5C 7C  
001A56  1  7C 20 28 5F          .BYTE   "| (_) |__) | |___| |_| / /_ ",$0D,$0A
001A5A  1  29 20 7C 5F  
001A5E  1  5F 29 20 7C  
001A74  1  20 5C 5F 5F          .BYTE   " \___/____/ \_____\___/____| ",$0D,$0A
001A78  1  5F 2F 5F 5F  
001A7C  1  5F 5F 2F 20  
001A93  1  2A 20 4C 6F          .BYTE   "* Low Memory ($1000-$2000) SuperMON 65c02 ",$0D,$0A,$00
001A97  1  77 20 4D 65  
001A9B  1  6D 6F 72 79  
001AC0  1               
001AC0  1                       .END
