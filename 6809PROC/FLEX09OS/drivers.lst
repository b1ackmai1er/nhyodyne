                      (      drivers.asm):00001                         NAM     DRIVERS
                      (      drivers.asm):00002                         PAG
                      (      drivers.asm):00003                         PRAGMA CD
                      (      drivers.asm):00004         
     0000             (      drivers.asm):00005         USEDSKYNG   EQU     0
                      (      drivers.asm):00006         
                      (      drivers.asm):00007         
                      (      drivers.asm):00008         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00009         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00010         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00011         ;
                      (      drivers.asm):00012         ;  Harware Addresses
                      (      drivers.asm):00013         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00014         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00015         UART0           equ     $FE68           ; DATA IN/OUT
     FE69             (      drivers.asm):00016         UART1           equ     $FE69           ; CHECK RX
     FE6A             (      drivers.asm):00017         UART2           equ     $FE6A           ; INTERRUPTS
     FE6B             (      drivers.asm):00018         UART3           equ     $FE6B           ; LINE CONTROL
     FE6C             (      drivers.asm):00019         UART4           equ     $FE6C           ; MODEM CONTROL
     FE6D             (      drivers.asm):00020         UART5           equ     $FE6D           ; LINE STATUS
     FE6E             (      drivers.asm):00021         UART6           equ     $FE6E           ; MODEM STATUS
     FE6F             (      drivers.asm):00022         UART7           equ     $FE6F           ; SCRATCH REG.
                      (      drivers.asm):00023         
                      (      drivers.asm):00024         
     CE7B             (      drivers.asm):00025         PDATA1          EQU     $CE7B
                      (      drivers.asm):00026         
                      (      drivers.asm):00027         * ASCII CODE EQUATES
                      (      drivers.asm):00028         
     0000             (      drivers.asm):00029         NUL     EQU     $00
     0004             (      drivers.asm):00030         EOT     EQU     $04
                      (      drivers.asm):00031         
                      (      drivers.asm):00032         
     CD00             (      drivers.asm):00033         FINIT       EQU     $CD00      ; GO INITIALIZE
     CD03             (      drivers.asm):00034         ENTRY       EQU     $CD03      ; WARM ENTRY POINT
     CD06             (      drivers.asm):00035         DOS3        EQU     $CD06      ; RE-ENTER DOS
     CD15             (      drivers.asm):00036         GETCHR      EQU     $CD15      ; GET CHARACTER
     CD18             (      drivers.asm):00037         PUTCHR      EQU     $CD18      ; PUT CHARACTER
     CD1B             (      drivers.asm):00038         INBUF       EQU     $CD1B      ; INPUT TO BUFFER
     CD1E             (      drivers.asm):00039         PSTRNG      EQU     $CD1E      ;  PRINT STRING
     CD21             (      drivers.asm):00040         CLASS       EQU     $CD21      ; CLASSIFY CHARACTER
     CD24             (      drivers.asm):00041         PCRLF       EQU     $CD24      ; PRINT CR AND LF
     CD27             (      drivers.asm):00042         NXTCH       EQU     $CD27      ; NEXT BUFFER CHAR
     CD2A             (      drivers.asm):00043         RESTIO      EQU     $CD2A      ; RESTORE IO VECTORS
     CD2D             (      drivers.asm):00044         GETFIL      EQU     $CD2D      ; GET FILE SPEC
     CD30             (      drivers.asm):00045         LOAD        EQU     $CD30      ; FILE LOADER
     CD33             (      drivers.asm):00046         SETEXT      EQU     $CD33      ; SET NAME EXTENSION
     CD36             (      drivers.asm):00047         ADDBX       EQU     $CD36      ; ADD B TO X
     CD39             (      drivers.asm):00048         OUTDEC      EQU     $CD39      ; OUTPUT DECIMAL
     CD3C             (      drivers.asm):00049         OUTHEX      EQU     $CD3C      ; OUT HEX CHARACTER
     CD3F             (      drivers.asm):00050         RPTERR      EQU     $CD3F      ; REPORT ERROR
     CD42             (      drivers.asm):00051         GETHEX      EQU     $CD42      ; GET HEX NUMBER
     CD45             (      drivers.asm):00052         OUTADR      EQU     $CD45      ; OUT HEX ADDRESS
     CD48             (      drivers.asm):00053         INDEC       EQU     $CD48      ; GET DECIMAL NUMBER
     CD4B             (      drivers.asm):00054         DOCMD       EQU     $CD4B      ; DO COMMAND LINE
                      (      drivers.asm):00055         
                      (      drivers.asm):00056         
                      (      drivers.asm):00057         ;
                      (      drivers.asm):00058         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (      drivers.asm):00059         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00060                         ORG     $D3E1       ; TABLE STARTS AT $D3E1
                      (      drivers.asm):00061         
D3E1 DE8E             (      drivers.asm):00062         LD3E1           FDB     ADDDEV      ; add an IRQ handler to table
D3E3 DE9A             (      drivers.asm):00063                         FDB     DELDEV      ; delete an IRQ handler from table
                      (      drivers.asm):00064         
D3E5 DE6D             (      drivers.asm):00065                         FDB     INCHNE      ; INPUT CHARACTER W/O ECHO
D3E7 DE7A             (      drivers.asm):00066                         FDB     IHNDLR      ; IRQ INTERRUPT HANDLER
D3E9 D3FD             (      drivers.asm):00067                         FDB     SWIVEC      ; SWI3 VECTOR LOCATION
D3EB D3FD             (      drivers.asm):00068                         FDB     IRQVEC      ; IRQ VECTOR LOCATION
D3ED DE3E             (      drivers.asm):00069                         FDB     TMOFF       ; TIMER OFF ROUTINE
D3EF DE3E             (      drivers.asm):00070                         FDB     TMON        ; TIMER ON ROUTINE
D3F1 DE3E             (      drivers.asm):00071                         FDB     TMINT       ; TIMER INITIALIZATION
D3F3 DE33             (      drivers.asm):00072                         FDB     MONITR      ; MONITOR ENTRY ADDRESS
D3F5 DE3F             (      drivers.asm):00073                         FDB     TINIT       ; TERMINAL INITIALIZATION
D3F7 DE5D             (      drivers.asm):00074                         FDB     STAT        ; CHECK TERMINAL STATUS
D3F9 DE4C             (      drivers.asm):00075                         FDB     VOUTCH      ; OUTPUT CHARACTER
D3FB DE43             (      drivers.asm):00076                         FDB     VINCH       ; INPUT CHARACTER W/ ECHO
                      (      drivers.asm):00077         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00078         ;   Default ISRs.  Will be changed by OS Setup
D3FD                  (      drivers.asm):00079         SWIVEC:
D3FD                  (      drivers.asm):00080         IRQVEC:
D3FD 3B               (      drivers.asm):00081 [6+?]                   rti
                      (      drivers.asm):00082         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00083         ;
                      (      drivers.asm):00084         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00085         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00086                         ORG     $DE00
                      (      drivers.asm):00087         
DE00 7EDEBB           (      drivers.asm):00088 [4]     DREAD           JMP     >READ       * DE00    READ      Read a single sector
DE03 7EDEEF           (      drivers.asm):00089 [4]     DWRITE          JMP     >WRITE      * DE03    WRITE     Write a single sector
DE06 7EDF11           (      drivers.asm):00090 [4]     DVERFY          JMP     >VERIFY     * DE06    VERIFY    Verify last sector written
DE09 7EDF65           (      drivers.asm):00091 [4]     DRESTOR         JMP     >RESTORE    * DE09    RESTORE   Restore head to track #0
DE0C 7EDF84           (      drivers.asm):00092 [4]     DDRIVE          JMP     >DRIVE      * DE0C    DRIVE     Select the specified drive
DE0F 7EDFCE           (      drivers.asm):00093 [4]     DCHECK          JMP     >CHKRDY     * DE0F    CHKRDY    Check for drive ready
DE12 7EDFD9           (      drivers.asm):00094 [4]     DQUICK          JMP     >QUICK      * DE12    QUICK     Quick check for drive ready
DE15 7EDF4B           (      drivers.asm):00095 [4]     DINIT           JMP     >INIT       * DE15    INIT      Driver initialize (cold start)
DE18 7EDF58           (      drivers.asm):00096 [4]     DWARM           JMP     >WARM       * DE18    WARM      Driver initialize (warm start)
DE1B 7EDF2E           (      drivers.asm):00097 [4]     DSEEK           JMP     >SEEK       * DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00098         
                      (      drivers.asm):00099         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00100         ; Temp Storage Area
                      (      drivers.asm):00101         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00102         
                      (      drivers.asm):00103         
DE1E 00               (      drivers.asm):00104         CURDRV          FCB     $00
DE1F 00               (      drivers.asm):00105         CURDRVTYP       FCB     $00
DE20 00               (      drivers.asm):00106         CURDRVADDRESS   FCB     $00
DE21 0000             (      drivers.asm):00107         CURDRVSLICE     FDB     $0000
                      (      drivers.asm):00108         
DE23 02020202         (      drivers.asm):00109         DRVTYPES        FCB     $02,$02,$02,$02
                      (      drivers.asm):00110                         ;   $00 - INVALID
                      (      drivers.asm):00111                         ;   $01 - Floppy
                      (      drivers.asm):00112                         ;   $02 - IDE
DE27 00000000         (      drivers.asm):00113         DRVADDRESS      FCB     $00,$00,$00,$00
DE2B 0000000000000000 (      drivers.asm):00114         DRVSLICE        FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00115         
                      (      drivers.asm):00116         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00117         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00118         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00119         
                      (      drivers.asm):00120         
                      (      drivers.asm):00121         
                      (      drivers.asm):00122         
                      (      drivers.asm):00123         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00124         ;
                      (      drivers.asm):00125         ;       Monitor entry routine
                      (      drivers.asm):00126         ;_____________________________________________________________________________________________________
DE33 860A             (      drivers.asm):00127 [2]     MONITR          LDA     #$A
DE35 8D15             (      drivers.asm):00128 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00129 [2]                     LDA     #$D
DE39 8D11             (      drivers.asm):00130 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00131 [4]                     JMP     $FC0B               LOCATION OF MONITOR
                      (      drivers.asm):00132         
                      (      drivers.asm):00133         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00134         ;
                      (      drivers.asm):00135         ;       Timer Drivers
                      (      drivers.asm):00136         ;
                      (      drivers.asm):00137         ;       Timers not supported
                      (      drivers.asm):00138         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00139         TMOFF       ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00140         TMON        ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00141         TMINT       ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00142 [5]                     RTS
                      (      drivers.asm):00143         
                      (      drivers.asm):00144         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00145         ;
                      (      drivers.asm):00146         ;       Console Drivers
                      (      drivers.asm):00147         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00148         ;       Terminal init routine
DE3F 3402             (      drivers.asm):00149 [5+1]   TINIT           PSHS    A
                      (      drivers.asm):00150                         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00151                         ;       LDA             #$80            ;
                      (      drivers.asm):00152                         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00153                             ;   LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00154                             ;   STA             UART0           ; save baud rate
                      (      drivers.asm):00155                             ;   LDA             #00                     ;
                      (      drivers.asm):00156                             ;   STA             UART1           ;
                      (      drivers.asm):00157                             ;   LDA             #03                     ;
                      (      drivers.asm):00158                             ;   STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00159                             ;   STA             UART4           ;
DE41 3582             (      drivers.asm):00160 [5+3]                   PULS    PC,A
                      (      drivers.asm):00161         
                      (      drivers.asm):00162         
                      (      drivers.asm):00163         ;       Terminal input routine
                      (      drivers.asm):00164         
DE43 7DDEB9           (      drivers.asm):00165 [7]     VINCH           TST     >TAPPTR         ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00166 [3]                     BEQ     TREDIR          ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00167 [7+5]                   JSR     [TAPPTR]        ; redirect to alternate routine
                      (      drivers.asm):00168         
                      (      drivers.asm):00169         ;       Terminal output routine
                      (      drivers.asm):00170         
DE4C 3402             (      drivers.asm):00171 [5+1]   VOUTCH          PSHS    a
                      (      drivers.asm):00172         !
DE4E B6FE6D           (      drivers.asm):00173 [5]                             LDA             UART5                   ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00174 [2]                             ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00175 [2]                             CMPA    #$00
DE55 27F7             (      drivers.asm):00176 [3]                             BEQ             <                       ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00177 [5+1]                   PULS    A
DE59 B7FE68           (      drivers.asm):00178 [5]                             STA             UART0                   ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00179 [5]                     RTS
                      (      drivers.asm):00180         
                      (      drivers.asm):00181         
                      (      drivers.asm):00182         ;       Terminal status check routine
                      (      drivers.asm):00183         
DE5D 3402             (      drivers.asm):00184 [5+1]   STAT:           PSHS    A
DE5F B6FE6D           (      drivers.asm):00185 [5]                     LDA         UART5                       ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00186 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00187 [2]                             CMPA    #$00
DE66 3582             (      drivers.asm):00188 [5+3]                           PULS    PC,A
                      (      drivers.asm):00189         
                      (      drivers.asm):00190         
                      (      drivers.asm):00191         ;       Monitor terminal input character with echo
                      (      drivers.asm):00192         
DE68 BDDE6D           (      drivers.asm):00193 [8]     TREDIR          JSR     INCHNE
DE6B 20DF             (      drivers.asm):00194 [3]                     BRA     VOUTCH
                      (      drivers.asm):00195         
                      (      drivers.asm):00196         
                      (      drivers.asm):00197         ;       Monitor terminal input character without echo
                      (      drivers.asm):00198         
DE6D                  (      drivers.asm):00199         INCHNE
DE6D B6FE6D           (      drivers.asm):00200 [5]                             LDA         UART5                       ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00201 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00202 [2]                             CMPA    #$00
DE74 27F7             (      drivers.asm):00203 [3]                             BEQ         INCHNE              ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00204 [5]                             LDA         UART0                       ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00205 [5]                             RTS
                      (      drivers.asm):00206         
                      (      drivers.asm):00207         
                      (      drivers.asm):00208         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00209         ;
                      (      drivers.asm):00210         ;       Interupt handler
                      (      drivers.asm):00211         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00212         IHNDLR          ;leau    <IRQLL-4,pc         get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00213                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00214                         fcb     IRQLL-*-5
DE7D EE44             (      drivers.asm):00215 [5+1]   CHKNXT          ldu     4,u                 get a link
DE7F 270C             (      drivers.asm):00216 [3]                     beq     IHDONE              end of list
                      (      drivers.asm):00217         
DE81 A6D4             (      drivers.asm):00218 [4+3]                   lda     [,u]                get status from device
DE83 A546             (      drivers.asm):00219 [4+1]                   bita    6,u                 did it interrupt?
DE85 27F6             (      drivers.asm):00220 [3]                     beq     CHKNXT              no - check next
                      (      drivers.asm):00221         
DE87 10AEC4           (      drivers.asm):00222 [6+0]                   ldy     ,u                  yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00223 [3+4]                   jmp     [2,u]               go to device ISR
                      (      drivers.asm):00224         
DE8D 3B               (      drivers.asm):00225 [6+?]   IHDONE          rti                         return from interrupt
                      (      drivers.asm):00226         
                      (      drivers.asm):00227         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00228         ;       add a device to IRQ handler table
                      (      drivers.asm):00229         ;_____________________________________________________________________________________________________
DE8E 3470             (      drivers.asm):00230 [5+6]   ADDDEV          pshs    x,y,u
DE90 8D14             (      drivers.asm):00231 [7]                     bsr     SRCHLST             find link in chain
DE92 2704             (      drivers.asm):00232 [3]                     beq     DEVARE              already exists - exit
DE94 EF04             (      drivers.asm):00233 [5+1]                   stu     4,x                 set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00234 [5+1]                   stx     4,y                 link this one into prev blk
DE98 35F0             (      drivers.asm):00235 [5+8]   DEVARE          puls    pc,X,Y,U
                      (      drivers.asm):00236         
                      (      drivers.asm):00237         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00238         ;       delete a device from IRQ handler table
                      (      drivers.asm):00239         ;_____________________________________________________________________________________________________
DE9A 3470             (      drivers.asm):00240 [5+6]   DELDEV          pshs    x,y,u
DE9C 8D08             (      drivers.asm):00241 [7]                     bsr     SRCHLST             find link in chain
DE9E 2604             (      drivers.asm):00242 [3]                     bne     NODEV               not found - exit
DEA0 AE04             (      drivers.asm):00243 [5+1]                   ldx     4,x                 get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00244 [5+1]                   stx     4,u                 set in prev block
DEA4 35F0             (      drivers.asm):00245 [5+8]   NODEV           puls    pc,X,Y,U
                      (      drivers.asm):00246         
                      (      drivers.asm):00247         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00248         ;       search a linked list
                      (      drivers.asm):00249         ;
                      (      drivers.asm):00250         ;               entry: X = address of ISR control block
                      (      drivers.asm):00251         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00252         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00253         ;
                      (      drivers.asm):00254         ;               format of ISR control block:
                      (      drivers.asm):00255         ;
                      (      drivers.asm):00256         ;                       offset  description
                      (      drivers.asm):00257         ;                         0     address of I/O device
                      (      drivers.asm):00258         ;                         2     address of ISR
                      (      drivers.asm):00259         ;                         4     link to next ISR control block
                      (      drivers.asm):00260         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00261         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00262         SRCHLST         ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00263                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00264                         fcb     IRQLL-*-5
DEA9 31C4             (      drivers.asm):00265 [4+0]   SRCHLP          leay    ,u
DEAB AC44             (      drivers.asm):00266 [6+1]                   cmpx    4,u                 X = link?
DEAD 2706             (      drivers.asm):00267 [3]                     beq     FNDENT              yes - return pointer in U
                      (      drivers.asm):00268         
DEAF EE44             (      drivers.asm):00269 [5+1]                   ldu     4,u                 no - get link in U
DEB1 26F6             (      drivers.asm):00270 [3]                     bne     SRCHLP              not end of chain - loop
DEB3 1CFB             (      drivers.asm):00271 [3]                     andcc   #$FB                clear Z flag in CC
                      (      drivers.asm):00272         
DEB5 39               (      drivers.asm):00273 [5]     FNDENT          rts                         return - not found
                      (      drivers.asm):00274         
                      (      drivers.asm):00275         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00276         
                      (      drivers.asm):00277         
DEB6 0000             (      drivers.asm):00278         IRQLL           fdb     0                   pointer to first entry in the table
DEB8 01               (      drivers.asm):00279                         fcb     1
                      (      drivers.asm):00280         
DEB9 0000             (      drivers.asm):00281         TAPPTR          fdb     0                   no terminal input redirection
                      (      drivers.asm):00282         
                      (      drivers.asm):00283         
                      (      drivers.asm):00284         
                      (      drivers.asm):00285         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00286         ;
                      (      drivers.asm):00287         ;       Disk Driver Dispatchers
                      (      drivers.asm):00288         ;
                      (      drivers.asm):00289         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00290         ;       driver for the device
                      (      drivers.asm):00291         ;
                      (      drivers.asm):00292         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00293         
                      (      drivers.asm):00294         
                      (      drivers.asm):00295         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00296         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00297         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00298         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00299         ;
                      (      drivers.asm):00300         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00301         ;                   (A) = Track Number
                      (      drivers.asm):00302         ;                   (B) = Sector Number
                      (      drivers.asm):00303         ;
                      (      drivers.asm):00304         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00305         ;                   (A) May be destroyed
                      (      drivers.asm):00306         ;                   (B) = Error condition
                      (      drivers.asm):00307         ;                   (Z) = 1 if no error
                      (      drivers.asm):00308         ;                       = 0 if an error
                      (      drivers.asm):00309         ;_____________________________________________________________________________________________________
DEBB 3402             (      drivers.asm):00310 [5+1]   READ            PSHS     A
                      (      drivers.asm):00311         
DEBD 3402             (      drivers.asm):00312 [5+1]           PSHS    A
DEBF 8652             (      drivers.asm):00313 [2]             LDA     #'R
DEC1 BDDE4C           (      drivers.asm):00314 [8]             JSR     VOUTCH
DEC4 3502             (      drivers.asm):00315 [5+1]           PULS    A
                      (      drivers.asm):00316         
DEC6 B6DE1F           (      drivers.asm):00317 [5]                     LDA     CURDRVTYP
DEC9 8101             (      drivers.asm):00318 [2]                     CMPA    #$01
DECB 2709             (      drivers.asm):00319 [3]                     BEQ     READFLOPPY
DECD 8102             (      drivers.asm):00320 [2]                     CMPA    #$02
DECF 2710             (      drivers.asm):00321 [3]                     BEQ     READIDE
DED1 C61F             (      drivers.asm):00322 [2]     READERR:        LDB     #$1F
DED3 57               (      drivers.asm):00323 [2]                     ASRB
DED4 3582             (      drivers.asm):00324 [5+3]                   PULS    PC,A
DED6                  (      drivers.asm):00325         READFLOPPY:
DED6 3402             (      drivers.asm):00326 [5+1]           PSHS    A
DED8 8646             (      drivers.asm):00327 [2]             LDA     #'F
DEDA BDDE4C           (      drivers.asm):00328 [8]             JSR     VOUTCH
DEDD 3502             (      drivers.asm):00329 [5+1]           PULS    A
                      (      drivers.asm):00330         
DEDF 20F0             (      drivers.asm):00331 [3]                     BRA     READERR
DEE1                  (      drivers.asm):00332         READIDE:
                      (      drivers.asm):00333         
DEE1 3402             (      drivers.asm):00334 [5+1]           PSHS    A
DEE3 8652             (      drivers.asm):00335 [2]             LDA     #'R
DEE5 BDDE4C           (      drivers.asm):00336 [8]             JSR     VOUTCH
DEE8 3502             (      drivers.asm):00337 [5+1]           PULS    A
                      (      drivers.asm):00338         
DEEA 3502             (      drivers.asm):00339 [5+1]                   PULS    A
DEEC 7EE0E2           (      drivers.asm):00340 [4]                     JMP     IDE_READ_SECTOR
                      (      drivers.asm):00341         
                      (      drivers.asm):00342         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00343         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00344         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00345         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00346         ;           in length.
                      (      drivers.asm):00347         ;
                      (      drivers.asm):00348         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00349         ;                         to be written to disk
                      (      drivers.asm):00350         ;                   (A) = Track Number
                      (      drivers.asm):00351         ;                   (B) = Sector Number
                      (      drivers.asm):00352         ;
                      (      drivers.asm):00353         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00354         ;                   (A) May be destroyed
                      (      drivers.asm):00355         ;                   (B) = Error condition
                      (      drivers.asm):00356         ;                   (Z) = 1 if no error
                      (      drivers.asm):00357         ;                       = 0 if an error
                      (      drivers.asm):00358         ;_____________________________________________________________________________________________________
DEEF 3402             (      drivers.asm):00359 [5+1]   WRITE           PSHS     A
                      (      drivers.asm):00360         
DEF1 3402             (      drivers.asm):00361 [5+1]           PSHS    A
DEF3 8657             (      drivers.asm):00362 [2]             LDA     #'W
DEF5 BDDE4C           (      drivers.asm):00363 [8]             JSR     VOUTCH
DEF8 3502             (      drivers.asm):00364 [5+1]           PULS    A
                      (      drivers.asm):00365         
DEFA B6DE1F           (      drivers.asm):00366 [5]                     LDA     CURDRVTYP
DEFD 8101             (      drivers.asm):00367 [2]                     CMPA    #$01
DEFF 2709             (      drivers.asm):00368 [3]                     BEQ     WRITEFLOPPY
DF01 8102             (      drivers.asm):00369 [2]                     CMPA    #$02
DF03 2707             (      drivers.asm):00370 [3]                     BEQ     WRITEIDE
DF05 C61F             (      drivers.asm):00371 [2]     WRITEERR:       LDB     #$1F
DF07 57               (      drivers.asm):00372 [2]                     ASRB
DF08 3582             (      drivers.asm):00373 [5+3]                   PULS    PC,A
DF0A                  (      drivers.asm):00374         WRITEFLOPPY:
DF0A 20F9             (      drivers.asm):00375 [3]                     BRA     WRITEERR
DF0C                  (      drivers.asm):00376         WRITEIDE:
DF0C 3502             (      drivers.asm):00377 [5+1]                   PULS    A
DF0E 7EE156           (      drivers.asm):00378 [4]                     JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00379         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00380         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00381         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00382         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00383         ;           single sector operation.
                      (      drivers.asm):00384         ;
                      (      drivers.asm):00385         ;           ENTRY - No entry parameters
                      (      drivers.asm):00386         ;
                      (      drivers.asm):00387         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00388         ;                   (A) May be destroyed
                      (      drivers.asm):00389         ;                   (B) = Error condition
                      (      drivers.asm):00390         ;                   (Z) = 1 if no error
                      (      drivers.asm):00391         ;                       = 0 if an error
                      (      drivers.asm):00392         ;_____________________________________________________________________________________________________
DF11                  (      drivers.asm):00393         VERIFY
DF11 3402             (      drivers.asm):00394 [5+1]           PSHS    A
DF13 8656             (      drivers.asm):00395 [2]             LDA     #'V
DF15 BDDE4C           (      drivers.asm):00396 [8]             JSR     VOUTCH
DF18 3502             (      drivers.asm):00397 [5+1]           PULS    A
                      (      drivers.asm):00398         
DF1A B6DE1F           (      drivers.asm):00399 [5]                     LDA     CURDRVTYP
DF1D 8101             (      drivers.asm):00400 [2]                     CMPA    #$01
DF1F 2708             (      drivers.asm):00401 [3]                     BEQ     VERIFYFLOPPY
DF21 8102             (      drivers.asm):00402 [2]                     CMPA    #$02
DF23 2706             (      drivers.asm):00403 [3]                     BEQ     VERIFYIDE
DF25 C61F             (      drivers.asm):00404 [2]     VERIFYERR:      LDB     #$1F
DF27 57               (      drivers.asm):00405 [2]                     ASRB
DF28 39               (      drivers.asm):00406 [5]                     RTS
DF29                  (      drivers.asm):00407         VERIFYFLOPPY:
DF29 20FA             (      drivers.asm):00408 [3]                     BRA     VERIFYERR
DF2B                  (      drivers.asm):00409         VERIFYIDE:
DF2B C600             (      drivers.asm):00410 [2]                     LDB     #$00
DF2D 39               (      drivers.asm):00411 [5]                     RTS
                      (      drivers.asm):00412         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00413         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00414         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00415         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00416         ;
                      (      drivers.asm):00417         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00418         ;                   (B) = Sector Number
                      (      drivers.asm):00419         ;
                      (      drivers.asm):00420         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00421         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00422         ;                   (B) = Error condition
                      (      drivers.asm):00423         ;                   (Z) = 1 if no error
                      (      drivers.asm):00424         ;                       = 0 if an error
                      (      drivers.asm):00425         ;_____________________________________________________________________________________________________
DF2E                  (      drivers.asm):00426         SEEK
DF2E 3402             (      drivers.asm):00427 [5+1]           PSHS    A
DF30 8653             (      drivers.asm):00428 [2]             LDA     #'S
DF32 BDDE4C           (      drivers.asm):00429 [8]             JSR     VOUTCH
DF35 3502             (      drivers.asm):00430 [5+1]           PULS    A
DF37 B6DE1F           (      drivers.asm):00431 [5]                     LDA     CURDRVTYP
DF3A 8101             (      drivers.asm):00432 [2]                     CMPA    #$01
DF3C 2708             (      drivers.asm):00433 [3]                     BEQ     SEEKFLOPPY
DF3E 8102             (      drivers.asm):00434 [2]                     CMPA    #$02
DF40 2706             (      drivers.asm):00435 [3]                     BEQ     SEEKIDE
DF42 C61F             (      drivers.asm):00436 [2]     SEEKERR:        LDB     #$1F
DF44 57               (      drivers.asm):00437 [2]                     ASRB
DF45 39               (      drivers.asm):00438 [5]                     RTS
DF46                  (      drivers.asm):00439         SEEKFLOPPY:
DF46 20FA             (      drivers.asm):00440 [3]                     BRA     SEEKERR
DF48                  (      drivers.asm):00441         SEEKIDE:
DF48 C600             (      drivers.asm):00442 [2]                     LDB     #$00
DF4A 39               (      drivers.asm):00443 [5]                     RTS
                      (      drivers.asm):00444         
                      (      drivers.asm):00445         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00446         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00447         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00448         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00449         ;           can be done here.
                      (      drivers.asm):00450         ;
                      (      drivers.asm):00451         ;           ENTRY - No parameters
                      (      drivers.asm):00452         ;
                      (      drivers.asm):00453         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00454         ;_____________________________________________________________________________________________________
DF4B                  (      drivers.asm):00455         INIT
DF4B 3402             (      drivers.asm):00456 [5+1]           PSHS    A
DF4D 8649             (      drivers.asm):00457 [2]             LDA     #'I
DF4F BDDE4C           (      drivers.asm):00458 [8]             JSR     VOUTCH
DF52 3502             (      drivers.asm):00459 [5+1]           PULS    A
DF54 BDDFE9           (      drivers.asm):00460 [8]                     JSR     PPIDE_INIT
DF57 39               (      drivers.asm):00461 [5]                     RTS
                      (      drivers.asm):00462         
                      (      drivers.asm):00463         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00464         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00465         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00466         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00467         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00468         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00469         ;           reset such that the controller would not function properly
                      (      drivers.asm):00470         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00471         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00472         ;
                      (      drivers.asm):00473         ;           ENTRY - No parameters
                      (      drivers.asm):00474         ;
                      (      drivers.asm):00475         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00476         ;_____________________________________________________________________________________________________
DF58                  (      drivers.asm):00477         WARM
DF58 3402             (      drivers.asm):00478 [5+1]           PSHS    A
DF5A 8677             (      drivers.asm):00479 [2]             LDA     #'w
DF5C BDDE4C           (      drivers.asm):00480 [8]             JSR     VOUTCH
DF5F 3502             (      drivers.asm):00481 [5+1]           PULS    A
DF61 BDE1AE           (      drivers.asm):00482 [8]                     JSR     PPIDE_RESET
DF64 39               (      drivers.asm):00483 [5]                     RTS
                      (      drivers.asm):00484         
                      (      drivers.asm):00485         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00486         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00487         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00488         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00489         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00490         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00491         ;           operation.
                      (      drivers.asm):00492         ;
                      (      drivers.asm):00493         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00494         ;
                      (      drivers.asm):00495         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00496         ;                   (A) May be destroyed
                      (      drivers.asm):00497         ;                   (B) = Error condition
                      (      drivers.asm):00498         ;                   (Z) = 1 if no error
                      (      drivers.asm):00499         ;                       = 0 if an error
                      (      drivers.asm):00500         ;_____________________________________________________________________________________________________
DF65                  (      drivers.asm):00501         RESTORE
DF65 3402             (      drivers.asm):00502 [5+1]           PSHS    A
DF67 8672             (      drivers.asm):00503 [2]             LDA     #'r
DF69 BDDE4C           (      drivers.asm):00504 [8]             JSR     VOUTCH
DF6C 3502             (      drivers.asm):00505 [5+1]           PULS    A
DF6E 8D14             (      drivers.asm):00506 [7]                     BSR     DRIVE
DF70 B6DE1F           (      drivers.asm):00507 [5]                     LDA     CURDRVTYP
DF73 8101             (      drivers.asm):00508 [2]                     CMPA    #$01
DF75 2708             (      drivers.asm):00509 [3]                     BEQ     RESTOREFLOPPY
DF77 8102             (      drivers.asm):00510 [2]                     CMPA    #$02
DF79 2706             (      drivers.asm):00511 [3]                     BEQ     RESTOREIDE
DF7B C61F             (      drivers.asm):00512 [2]     RESTOREERR:     LDB     #$1F
DF7D 57               (      drivers.asm):00513 [2]                     ASRB
DF7E 39               (      drivers.asm):00514 [5]                     RTS
DF7F                  (      drivers.asm):00515         RESTOREFLOPPY:
DF7F 20FA             (      drivers.asm):00516 [3]                     BRA     RESTOREERR
DF81                  (      drivers.asm):00517         RESTOREIDE:
DF81 C600             (      drivers.asm):00518 [2]                     LDB     #$00
DF83 39               (      drivers.asm):00519 [5]                     RTS
                      (      drivers.asm):00520         
                      (      drivers.asm):00521         
                      (      drivers.asm):00522         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00523         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00524         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00525         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00526         ;
                      (      drivers.asm):00527         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00528         ;
                      (      drivers.asm):00529         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00530         ;                   (A) May be destroyed
                      (      drivers.asm):00531         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00532         ;                       = Error condition otherwise
                      (      drivers.asm):00533         ;                   (Z) = 1 if no error
                      (      drivers.asm):00534         ;                       = 0 if an error
                      (      drivers.asm):00535         ;                   (C) = 0 if no error
                      (      drivers.asm):00536         ;                       = 1 if an error
                      (      drivers.asm):00537         ;_____________________________________________________________________________________________________
DF84                  (      drivers.asm):00538         DRIVE:
                      (      drivers.asm):00539         
DF84 3402             (      drivers.asm):00540 [5+1]           PSHS    A
DF86 8644             (      drivers.asm):00541 [2]             LDA     #'D
DF88 BDDE4C           (      drivers.asm):00542 [8]             JSR     VOUTCH
DF8B 3502             (      drivers.asm):00543 [5+1]           PULS    A
                      (      drivers.asm):00544         
DF8D A603             (      drivers.asm):00545 [4+1]                   LDA     3,X             ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF8F 8104             (      drivers.asm):00546 [2]                     CMPA    #4
DF91 2505             (      drivers.asm):00547 [3]                     BCS     DRIVE1
DF93                  (      drivers.asm):00548         DRIVEERR:
DF93 C61F             (      drivers.asm):00549 [2]                     LDB     #$1F
DF95 57               (      drivers.asm):00550 [2]                     ASRB
DF96 3590             (      drivers.asm):00551 [5+4]                   PULS    PC,X
                      (      drivers.asm):00552         
DF98 8EDE23           (      drivers.asm):00553 [3]     DRIVE1          LDX     #DRVTYPES
DF9B 3086             (      drivers.asm):00554 [4+1]                   LEAX    A,X             ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF9D E684             (      drivers.asm):00555 [4+0]                   LDB     ,X
DF9F C101             (      drivers.asm):00556 [2]                     CMPB    #$01            ; IF $01, OK
DFA1 2706             (      drivers.asm):00557 [3]                     BEQ     >
DFA3 C102             (      drivers.asm):00558 [2]                     CMPB    #$02            ; IF $02, OK
DFA5 2702             (      drivers.asm):00559 [3]                     BEQ     >
DFA7 20EA             (      drivers.asm):00560 [3]                     BRA     DRIVEERR
DFA9 F7DE1F           (      drivers.asm):00561 [5]     !               STB     CURDRVTYP
DFAC B7DE1E           (      drivers.asm):00562 [5]                     STA     CURDRV
DFAF 8EDE27           (      drivers.asm):00563 [3]                     LDX     #DRVADDRESS
DFB2 3086             (      drivers.asm):00564 [4+1]                   LEAX    A,X             ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DFB4 E684             (      drivers.asm):00565 [4+0]                   LDB     ,X
DFB6 F7DE20           (      drivers.asm):00566 [5]                     STB     CURDRVADDRESS
DFB9 8EDE2B           (      drivers.asm):00567 [3]                     LDX     #DRVSLICE
DFBC 48               (      drivers.asm):00568 [2]                     LSLA                    ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DFBD 3086             (      drivers.asm):00569 [4+1]                   LEAX    A,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DFBF E684             (      drivers.asm):00570 [4+0]                   LDB     ,X
DFC1 F7DE21           (      drivers.asm):00571 [5]                     STB     CURDRVSLICE
DFC4 3001             (      drivers.asm):00572 [4+1]                   LEAX    1,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DFC6 E684             (      drivers.asm):00573 [4+0]                   LDB     ,X
DFC8 F7DE22           (      drivers.asm):00574 [5]                     STB     CURDRVSLICE+1
DFCB C600             (      drivers.asm):00575 [2]                     LDB     #$00
DFCD 39               (      drivers.asm):00576 [5]                     RTS
                      (      drivers.asm):00577         
                      (      drivers.asm):00578         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00579         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00580         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00581         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00582         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00583         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00584         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00585         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00586         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00587         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00588         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00589         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00590         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00591         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00592         ;
                      (      drivers.asm):00593         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00594         ;
                      (      drivers.asm):00595         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00596         ;                   (A) May be destroyed
                      (      drivers.asm):00597         ;                   (B) = Error condition
                      (      drivers.asm):00598         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00599         ;                       = 0 if not ready
                      (      drivers.asm):00600         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00601         ;                       = 1 if not ready
                      (      drivers.asm):00602         ;_____________________________________________________________________________________________________
DFCE                  (      drivers.asm):00603         CHKRDY
DFCE 3402             (      drivers.asm):00604 [5+1]           PSHS    A
DFD0 8643             (      drivers.asm):00605 [2]             LDA     #'C
DFD2 BDDE4C           (      drivers.asm):00606 [8]             JSR     VOUTCH
DFD5 3502             (      drivers.asm):00607 [5+1]           PULS    A
DFD7 20AB             (      drivers.asm):00608 [3]                     BRA     DRIVE
                      (      drivers.asm):00609         
                      (      drivers.asm):00610         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00611         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00612         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00613         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00614         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00615         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00616         ;_____________________________________________________________________________________________________
DFD9                  (      drivers.asm):00617         QUICK
DFD9 3402             (      drivers.asm):00618 [5+1]           PSHS    A
DFDB 8651             (      drivers.asm):00619 [2]             LDA     #'Q
DFDD BDDE4C           (      drivers.asm):00620 [8]             JSR     VOUTCH
DFE0 3502             (      drivers.asm):00621 [5+1]           PULS    A
DFE2 20A0             (      drivers.asm):00622 [3]                     BRA     DRIVE
                      (      drivers.asm):00623         
                      (      drivers.asm):00624         
                      (      drivers.asm):00625         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00626                         INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       =       $FE60           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         =       PPIDE_PPI+0     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         =       PPIDE_PPI+1     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      =       PPIDE_PPI+2     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       =       PPIDE_PPI+3     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   =       $01             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   =       $02             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   =       $04             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  =       $08             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  =       $10             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   =       $20             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   =       $40             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  =       $80             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA              =       PPIDE_CS0_LINE
     0009             (   flexidedrv.asm):00028         PPIDE_ERR               =       PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   =       PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (   flexidedrv.asm):00030         PPIDE_LBALOW    =       PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (   flexidedrv.asm):00031         PPIDE_LBAMID    =       PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (   flexidedrv.asm):00032         PPIDE_LBAHI             =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (   flexidedrv.asm):00033         PPIDE_DEVICE    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (   flexidedrv.asm):00034         PPIDE_COMMAND   =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (   flexidedrv.asm):00035         PPIDE_STATUS    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (   flexidedrv.asm):00036         PPIDE_CONTROL   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (   flexidedrv.asm):00037         PPIDE_ASTATUS   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL =       $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  =       $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE =       $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  =       $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    =       $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN=     $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP=       $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   =       %10010010       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   =       %10000000       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DFE4 00               (   flexidedrv.asm):00054         PPIDEINDEX:             .BYTE   $00
DFE5 0000             (   flexidedrv.asm):00055         PPIDETIMEOUT:   .BYTE   $00,$00
DFE7 0000             (   flexidedrv.asm):00056         PPIDEWORKVAR:   .BYTE   $00,$00
                      (   flexidedrv.asm):00057         
                      (   flexidedrv.asm):00058         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00059         ;
                      (   flexidedrv.asm):00060         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00061         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00062         ;
DFE9                  (   flexidedrv.asm):00063         PPIDE_INIT:
DFE9 8EE32C           (   flexidedrv.asm):00064 [3]             LDX     #MESSAGE1
DFEC BDCE7B           (   flexidedrv.asm):00065 [8]             JSR     >PDATA1         ; DO PROMPT
DFEF BDCD24           (   flexidedrv.asm):00066 [8]             JSR     >PCRLF         ; AND CRLF
DFF2 BDE0D4           (   flexidedrv.asm):00067 [8]                 JSR     IDE_PPIDETECT       ; TEST FOR PPI HARDWARE
DFF5 261D             (   flexidedrv.asm):00068 [3]             BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00069         ;
DFF7 8EE334           (   flexidedrv.asm):00070 [3]             LDX     #MESSAGE2
DFFA BDCE7B           (   flexidedrv.asm):00071 [8]             JSR     >PDATA1         ; DO PROMPT
DFFD CCFE60           (   flexidedrv.asm):00072 [3]                 LDD     #PPIDE_PPI      ; GET BASE PORT
E000 FDDFE7           (   flexidedrv.asm):00073 [6]                     STD     PPIDEWORKVAR
E003 8EDFE7           (   flexidedrv.asm):00074 [3]                     LDX     #PPIDEWORKVAR
E006 BDCD45           (   flexidedrv.asm):00075 [8]                 JSR     OUTADR                      ; PRINT BASE PORT
                      (   flexidedrv.asm):00076         ;
E009 BDE1AE           (   flexidedrv.asm):00077 [8]                 JSR     PPIDE_RESET         ; RESET THE BUS
E00C BDE03A           (   flexidedrv.asm):00078 [8]                 JSR     PPIDE_PROBE         ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
E00F 2503             (   flexidedrv.asm):00079 [3]                 BCS         IDE_ABORT
E011 7EE01D           (   flexidedrv.asm):00080 [4]                 JMP         IDE_PRINT_INFO
E014                  (   flexidedrv.asm):00081         IDE_ABORT:
E014 8EE33B           (   flexidedrv.asm):00082 [3]             LDX     #MESSAGE3
E017 BDCE7B           (   flexidedrv.asm):00083 [8]             JSR     >PDATA1         ; DO PROMPT
E01A 7EE036           (   flexidedrv.asm):00084 [4]                 JMP         IDE_INITA
E01D                  (   flexidedrv.asm):00085         IDE_PRINT_INFO:
E01D BDCD24           (   flexidedrv.asm):00086 [8]                 JSR     >PCRLF         ; AND CRLF
E020 8EE348           (   flexidedrv.asm):00087 [3]             LDX     #MESSAGE4
E023 BDCE7B           (   flexidedrv.asm):00088 [8]             JSR     >PDATA1         ; DO PROMPT
E026 8600             (   flexidedrv.asm):00089 [2]                 LDA     #$00
E028 BDE085           (   flexidedrv.asm):00090 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
E02B 8EE359           (   flexidedrv.asm):00091 [3]             LDX     #MESSAGE5
E02E BDCE7B           (   flexidedrv.asm):00092 [8]             JSR     >PDATA1         ; DO PROMPT
E031 8601             (   flexidedrv.asm):00093 [2]                 LDA     #$01
E033 BDE085           (   flexidedrv.asm):00094 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
E036                  (   flexidedrv.asm):00095         IDE_INITA:
E036 BDCD24           (   flexidedrv.asm):00096 [8]                 JSR     >PCRLF         ; AND CRLF
E039 39               (   flexidedrv.asm):00097 [5]                 RTS                                 ; DONE
                      (   flexidedrv.asm):00098         ;
                      (   flexidedrv.asm):00099         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00100         ;
                      (   flexidedrv.asm):00101         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00102         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00103         ;
E03A                  (   flexidedrv.asm):00104         PPIDE_PROBE:
                      (   flexidedrv.asm):00105         ;
                      (   flexidedrv.asm):00106                 ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00107                 ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00108                 ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00109                 ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00110                 ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00111                 ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00112                 ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00113                 ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00114         
E03A 8600             (   flexidedrv.asm):00115 [2]             LDA     #$00
E03C B7FE60           (   flexidedrv.asm):00116 [5]             STA     PPIDELO                 ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00117         
E03F BDE1D9           (   flexidedrv.asm):00118 [8]             JSR         IDE_WAIT_NOT_BUSY   ; WAIT FOR BUSY TO CLEAR
E042 253E             (   flexidedrv.asm):00119 [3]             BCS     PPIDE_PROBE_FAIL        ; IF TIMEOUT, REPORT NO IDE PRESENT
E044 860F             (   flexidedrv.asm):00120 [2]             LDA         #PPIDE_STATUS               ; GET STATUS
E046 BDE2C9           (   flexidedrv.asm):00121 [8]             JSR         IDE_READ
E049 1F18             (   flexidedrv.asm):00122 [6]         TFR     X,A
E04B 8440             (   flexidedrv.asm):00123 [2]             ANDA    #%01000000
E04D 8100             (   flexidedrv.asm):00124 [2]             CMPA    #$00
E04F 2731             (   flexidedrv.asm):00125 [3]             BEQ     PPIDE_PROBE_FAIL        ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00126         
                      (   flexidedrv.asm):00127                 ; CHECK SIGNATURE
E051 860A             (   flexidedrv.asm):00128 [2]             LDA         #PPIDE_SEC_CNT
E053 BDE2C9           (   flexidedrv.asm):00129 [8]             JSR         IDE_READ
E056 1F18             (   flexidedrv.asm):00130 [6]         TFR     X,A
E058 8101             (   flexidedrv.asm):00131 [2]             CMPA    #$01
E05A 2626             (   flexidedrv.asm):00132 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E05C 860B             (   flexidedrv.asm):00133 [2]             LDA         #PPIDE_LBALOW
E05E BDE2C9           (   flexidedrv.asm):00134 [8]             JSR         IDE_READ
E061 1F18             (   flexidedrv.asm):00135 [6]         TFR     X,A
E063 8101             (   flexidedrv.asm):00136 [2]             CMPA    #$01
E065 261B             (   flexidedrv.asm):00137 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E067 860C             (   flexidedrv.asm):00138 [2]             LDA         #PPIDE_LBAMID
E069 BDE2C9           (   flexidedrv.asm):00139 [8]             JSR         IDE_READ
E06C 1F18             (   flexidedrv.asm):00140 [6]         TFR     X,A
E06E 8100             (   flexidedrv.asm):00141 [2]             CMPA    #$00
E070 2610             (   flexidedrv.asm):00142 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E072 860D             (   flexidedrv.asm):00143 [2]             LDA         #PPIDE_LBAHI
E074 BDE2C9           (   flexidedrv.asm):00144 [8]             JSR         IDE_READ
E077 1F18             (   flexidedrv.asm):00145 [6]         TFR     X,A
E079 8100             (   flexidedrv.asm):00146 [2]             CMPA    #$00
E07B 2605             (   flexidedrv.asm):00147 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E07D 1CFE             (   flexidedrv.asm):00148 [3]             CLC
E07F 7EE084           (   flexidedrv.asm):00149 [4]             JMP     PPIDE_PROBE_SUCCESS
E082                  (   flexidedrv.asm):00150         PPIDE_PROBE_FAIL:
E082 1A01             (   flexidedrv.asm):00151 [3]             SEC
E084                  (   flexidedrv.asm):00152         PPIDE_PROBE_SUCCESS:
E084 39               (   flexidedrv.asm):00153 [5]             RTS                                     ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00154         
                      (   flexidedrv.asm):00155         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00156         ;*
                      (   flexidedrv.asm):00157         ;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00158         ;*      CARRY SET ON ERROR
                      (   flexidedrv.asm):00159         ;*      A=MST/SLV
                      (   flexidedrv.asm):00160         ;*____________________________________________________________________________________________________
E085                  (   flexidedrv.asm):00161         IDE_READ_INFO:
                      (   flexidedrv.asm):00162                         ; SET DRIVE BIT
E085 8401             (   flexidedrv.asm):00163 [2]                     ANDA    #$01                    ; ONLY WANT THE 1 BIT (MST/SLV)
E087 48               (   flexidedrv.asm):00164 [2]                     ASLA                            ; SHIFT 4
E088 48               (   flexidedrv.asm):00165 [2]                     ASLA                            ;
E089 48               (   flexidedrv.asm):00166 [2]                     ASLA                            ;
E08A 48               (   flexidedrv.asm):00167 [2]                     ASLA                            ;
E08B 8AE0             (   flexidedrv.asm):00168 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E08D 1F89             (   flexidedrv.asm):00169 [6]                     TFR     A,B
E08F 8600             (   flexidedrv.asm):00170 [2]             LDA     #$00
E091 1F01             (   flexidedrv.asm):00171 [6]             TFR     D,X
E093 860E             (   flexidedrv.asm):00172 [2]                     LDA         #PPIDE_DEVICE
E095 BDE2EE           (   flexidedrv.asm):00173 [8]                     JSR         IDE_WRITE
E098 BDE1D9           (   flexidedrv.asm):00174 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E09B 2525             (   flexidedrv.asm):00175 [3]                     BCS         IDE_READ_INFO_ABORT
E09D 860F             (   flexidedrv.asm):00176 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E09F 8E00EC           (   flexidedrv.asm):00177 [3]                     LDX         #PPIDE_CMD_ID
E0A2 BDE2EE           (   flexidedrv.asm):00178 [8]                     JSR         IDE_WRITE           ;ASK THE DRIVE TO READ IT
E0A5 BDE202           (   flexidedrv.asm):00179 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E0A8 2518             (   flexidedrv.asm):00180 [3]                     BCS         IDE_READ_INFO_ABORT
E0AA BDE232           (   flexidedrv.asm):00181 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E0AD 8EE36A           (   flexidedrv.asm):00182 [3]             LDX     #MESSAGE6
E0B0 BDCE7B           (   flexidedrv.asm):00183 [8]             JSR     >PDATA1
E0B3 8EE3ED           (   flexidedrv.asm):00184 [3]                     LDX     #HSTBUF+122
E0B6 BDCD45           (   flexidedrv.asm):00185 [8]                     JSR     OUTADR
E0B9 8EE3EB           (   flexidedrv.asm):00186 [3]                     LDX     #HSTBUF+120
E0BC BDCD45           (   flexidedrv.asm):00187 [8]                     JSR     OUTADR
E0BF 7EE0CE           (   flexidedrv.asm):00188 [4]                     JMP     IDE_READ_INFO_OK
E0C2                  (   flexidedrv.asm):00189         IDE_READ_INFO_ABORT:
E0C2 8EE33B           (   flexidedrv.asm):00190 [3]             LDX     #MESSAGE3
E0C5 BDCE7B           (   flexidedrv.asm):00191 [8]             JSR     >PDATA1         DO PROMPT
E0C8 BDCD24           (   flexidedrv.asm):00192 [8]                     JSR     >PCRLF         AND CRLF
E0CB 1A01             (   flexidedrv.asm):00193 [3]                     SEC
E0CD 39               (   flexidedrv.asm):00194 [5]                     RTS                             ;
E0CE                  (   flexidedrv.asm):00195         IDE_READ_INFO_OK:
E0CE BDCD24           (   flexidedrv.asm):00196 [8]                     JSR     >PCRLF         AND CRLF
E0D1 1CFE             (   flexidedrv.asm):00197 [3]                     CLC
E0D3 39               (   flexidedrv.asm):00198 [5]                     RTS
                      (   flexidedrv.asm):00199         
                      (   flexidedrv.asm):00200         
                      (   flexidedrv.asm):00201         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00202         ;
                      (   flexidedrv.asm):00203         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00204         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00205         ;
E0D4                  (   flexidedrv.asm):00206         IDE_PPIDETECT:
                      (   flexidedrv.asm):00207         ;
                      (   flexidedrv.asm):00208                 ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00209                 ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00210                 ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00211                 ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00212                 ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00213                 ; INTERFERE WITH THE VALUE BEING READ.
E0D4 BDE31E           (   flexidedrv.asm):00214 [8]             JSR         SET_PPI_WR
                      (   flexidedrv.asm):00215         ;
E0D7 8600             (   flexidedrv.asm):00216 [2]             LDA     #$00                    ; VALUE ZERO
E0D9 B7FE60           (   flexidedrv.asm):00217 [5]             STA         PPIDELO                     ; PUSH VALUE TO PORT
E0DC B6FE60           (   flexidedrv.asm):00218 [5]             LDA         PPIDELO                     ; GET PORT VALUE
E0DF 8100             (   flexidedrv.asm):00219 [2]         CMPA    #$00
E0E1 39               (   flexidedrv.asm):00220 [5]             RTS                             ; AND RETURN
                      (   flexidedrv.asm):00221         ;
                      (   flexidedrv.asm):00222         
                      (   flexidedrv.asm):00223         
                      (   flexidedrv.asm):00224         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00225         ;*
                      (   flexidedrv.asm):00226         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00227         ;*
                      (   flexidedrv.asm):00228         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00229         ;                   (A) = Track Number
                      (   flexidedrv.asm):00230         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00231         ;
                      (   flexidedrv.asm):00232         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00233         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00234         ;                   (B) = Error condition
                      (   flexidedrv.asm):00235         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00236         ;                       = 0 if an error
                      (   flexidedrv.asm):00237         ;*____________________________________________________________________________________________________
E0E2                  (   flexidedrv.asm):00238         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00239                 ;       PRTDBG "IDE READ SECTOR$"
E0E2 3420             (   flexidedrv.asm):00240 [5+2]           PSHS    Y
E0E4 3410             (   flexidedrv.asm):00241 [5+2]           PSHS    X
E0E6 1F92             (   flexidedrv.asm):00242 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E0E8 BDE108           (   flexidedrv.asm):00243 [8]                     JSR     IDE_READ_RAW_SECTOR
E0EB 3510             (   flexidedrv.asm):00244 [5+2]           PULS    X
E0ED 2617             (   flexidedrv.asm):00245 [3]             BNE     IDE_READ_SECTOR_ERROR
                      (   flexidedrv.asm):00246         
E0EF 1F28             (   flexidedrv.asm):00247 [6]             TFR     Y,A
E0F1 8401             (   flexidedrv.asm):00248 [2]             ANDA    #$01
E0F3 C600             (   flexidedrv.asm):00249 [2]             LDB     #$00
E0F5 1F02             (   flexidedrv.asm):00250 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E0F7 C600             (   flexidedrv.asm):00251 [2]             LDB     #$00                   ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00252         !
E0F9 A6A9E373         (   flexidedrv.asm):00253 [4+4]           LDA     HSTBUF,Y
E0FD A780             (   flexidedrv.asm):00254 [4+2]           STA     ,X+
E0FF 3121             (   flexidedrv.asm):00255 [5]             INY
E101 5C               (   flexidedrv.asm):00256 [2]             INCB
E102 C100             (   flexidedrv.asm):00257 [2]             CMPB    #$00
E104 26F3             (   flexidedrv.asm):00258 [3]             BNE <
E106                  (   flexidedrv.asm):00259         IDE_READ_SECTOR_ERROR:
E106 35A0             (   flexidedrv.asm):00260 [5+4]           PULS    PC,Y
                      (   flexidedrv.asm):00261         
E108                  (   flexidedrv.asm):00262         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00263                 ;       PRTDBG "IDE READ RAW SECTOR$"
E108 BDE2A5           (   flexidedrv.asm):00264 [8]                     JSR         IDE_CONVERT_SECTOR  ;
E10B B6E372           (   flexidedrv.asm):00265 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E10E B1E36F           (   flexidedrv.asm):00266 [5]                     CMPA    CDEBSEHD                ;
E111 2613             (   flexidedrv.asm):00267 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E113 B6E371           (   flexidedrv.asm):00268 [5]                     LDA         DEBCYLM                     ;
E116 B1E36E           (   flexidedrv.asm):00269 [5]                     CMPA    CDEBCYLM                ;
E119 260B             (   flexidedrv.asm):00270 [3]                     BNE         IDE_READ_SECTOR_DIRTY
E11B B6E370           (   flexidedrv.asm):00271 [5]                     LDA         DEBCYLL                     ;
E11E B1E36D           (   flexidedrv.asm):00272 [5]                     CMPA    CDEBCYLL                ;
E121 2603             (   flexidedrv.asm):00273 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E123 C600             (   flexidedrv.asm):00274 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E125 39               (   flexidedrv.asm):00275 [5]                     RTS
                      (   flexidedrv.asm):00276         
E126                  (   flexidedrv.asm):00277         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00278                 ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E126 BDE1D9           (   flexidedrv.asm):00279 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E129 2528             (   flexidedrv.asm):00280 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E12B                  (   flexidedrv.asm):00281         IDE_READ_SECTOR_DIRTY1:
E12B BDE262           (   flexidedrv.asm):00282 [8]                     JSR         IDE_SETUP_LBA               ;TELL IT WHICH SECTOR WE WANT
E12E 860F             (   flexidedrv.asm):00283 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E130 8E0020           (   flexidedrv.asm):00284 [3]                     LDX         #PPIDE_CMD_READ
E133 BDE2EE           (   flexidedrv.asm):00285 [8]                     JSR         IDE_WRITE                   ;ASK THE DRIVE TO READ IT
E136 BDE202           (   flexidedrv.asm):00286 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E139 2518             (   flexidedrv.asm):00287 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E13B BDE232           (   flexidedrv.asm):00288 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E13E B6E372           (   flexidedrv.asm):00289 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E141 B7E36F           (   flexidedrv.asm):00290 [5]                     STA         CDEBSEHD            ;
E144 B6E370           (   flexidedrv.asm):00291 [5]                     LDA         DEBCYLL                     ;
E147 B7E36D           (   flexidedrv.asm):00292 [5]                     STA         CDEBCYLL            ;
E14A B6E371           (   flexidedrv.asm):00293 [5]                     LDA         DEBCYLM                     ;
E14D B7E36E           (   flexidedrv.asm):00294 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00295         
E150 C600             (   flexidedrv.asm):00296 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E152 39               (   flexidedrv.asm):00297 [5]                     RTS
E153                  (   flexidedrv.asm):00298         IDE_READ_SECTOR_DIRTY_ERROR:
E153 C60F             (   flexidedrv.asm):00299 [2]                     LDB         #$0F                        ; SET ERROR CONDITION
E155 39               (   flexidedrv.asm):00300 [5]                     RTS
                      (   flexidedrv.asm):00301         
                      (   flexidedrv.asm):00302         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00303         ;*
                      (   flexidedrv.asm):00304         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00305         ;*
                      (   flexidedrv.asm):00306         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00307         ;                   (A) = Track Number
                      (   flexidedrv.asm):00308         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00309         ;
                      (   flexidedrv.asm):00310         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00311         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00312         ;                   (B) = Error condition
                      (   flexidedrv.asm):00313         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00314         ;                       = 0 if an error
                      (   flexidedrv.asm):00315         ;*____________________________________________________________________________________________________
E156                  (   flexidedrv.asm):00316         IDE_WRITE_SECTOR:
E156 3420             (   flexidedrv.asm):00317 [5+2]           PSHS    Y
                      (   flexidedrv.asm):00318         
E158 3410             (   flexidedrv.asm):00319 [5+2]           PSHS    X
E15A 1F92             (   flexidedrv.asm):00320 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00321         
                      (   flexidedrv.asm):00322                 ;       PRTDBG "IDE WRITE SECTOR$"
E15C BDE108           (   flexidedrv.asm):00323 [8]                     JSR         IDE_READ_RAW_SECTOR     ; DETERMINE PHYSICAL SECTOR
E15F 2640             (   flexidedrv.asm):00324 [3]             BNE     IDE_WRITE_SECTOR_ERROR
                      (   flexidedrv.asm):00325         
E161 1F28             (   flexidedrv.asm):00326 [6]             TFR     Y,A
E163 8401             (   flexidedrv.asm):00327 [2]             ANDA    #$01
E165 C600             (   flexidedrv.asm):00328 [2]             LDB     #$00
E167 1F02             (   flexidedrv.asm):00329 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E169 C600             (   flexidedrv.asm):00330 [2]             LDB     #$00                   ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00331         !
E16B A680             (   flexidedrv.asm):00332 [4+2]           LDA     ,X+
E16D A7A9E373         (   flexidedrv.asm):00333 [4+4]           STA     HSTBUF,Y
E171 3121             (   flexidedrv.asm):00334 [5]             INY
E173 5C               (   flexidedrv.asm):00335 [2]             INCB
E174 C100             (   flexidedrv.asm):00336 [2]             CMPB    #$00
E176 26F3             (   flexidedrv.asm):00337 [3]             BNE <
                      (   flexidedrv.asm):00338         
E178 BDE1D9           (   flexidedrv.asm):00339 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E17B 2524             (   flexidedrv.asm):00340 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E17D 860F             (   flexidedrv.asm):00341 [2]                     LDA         #PPIDE_COMMAND
E17F 8E0030           (   flexidedrv.asm):00342 [3]                     LDX         #PPIDE_CMD_WRITE
E182 BDE2EE           (   flexidedrv.asm):00343 [8]                     JSR         IDE_WRITE           ;TELL DRIVE TO WRITE A SECTOR
E185 BDE202           (   flexidedrv.asm):00344 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNIT IT WANTS THE DATA
E188 2517             (   flexidedrv.asm):00345 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E18A BDE24A           (   flexidedrv.asm):00346 [8]                     JSR         IDE_WRITE_BUFFER    ;GIVE THE DATA TO THE DRIVE
E18D BDE1D9           (   flexidedrv.asm):00347 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;WAIT UNTIL THE WRITE IS COMPLETE
E190 250F             (   flexidedrv.asm):00348 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E192 86FF             (   flexidedrv.asm):00349 [2]                     LDA         #$FF                        ; STORE CURRENT PARMS
E194 B7E36F           (   flexidedrv.asm):00350 [5]                     STA         CDEBSEHD            ;
E197 B7E36D           (   flexidedrv.asm):00351 [5]                     STA         CDEBCYLL            ;
E19A B7E36E           (   flexidedrv.asm):00352 [5]                     STA         CDEBCYLM            ;
E19D C600             (   flexidedrv.asm):00353 [2]                     LDB         #$00                        ; ZERO ON RETURN = OPERATION OK
E19F 35A0             (   flexidedrv.asm):00354 [5+4]                   PULS    PC,Y
E1A1                  (   flexidedrv.asm):00355         IDE_WRITE_SECTOR_ERROR:
E1A1 C6FF             (   flexidedrv.asm):00356 [2]                     LDB         #$FF                        ; 1 ON RETURN = OPERATION FAIL
E1A3 F7E36F           (   flexidedrv.asm):00357 [5]             STB         CDEBSEHD            ;
E1A6 F7E36D           (   flexidedrv.asm):00358 [5]                     STB         CDEBCYLL            ;
E1A9 F7E36E           (   flexidedrv.asm):00359 [5]                     STB         CDEBCYLM            ;
E1AC 35A0             (   flexidedrv.asm):00360 [5+4]                   PULS    PC,Y
                      (   flexidedrv.asm):00361         
                      (   flexidedrv.asm):00362         ;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00363         ;*
                      (   flexidedrv.asm):00364         ;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00365         ;*
                      (   flexidedrv.asm):00366         ;*____________________________________________________________________________________________________
E1AE                  (   flexidedrv.asm):00367         PPIDE_RESET:
                      (   flexidedrv.asm):00368           ;     PRTDBG "IDE RESET$"
E1AE 8600             (   flexidedrv.asm):00369 [2]                     LDA         #$00
E1B0 B7E372           (   flexidedrv.asm):00370 [5]                     STA         DEBSEHD
E1B3 B7E370           (   flexidedrv.asm):00371 [5]                     STA         DEBCYLL
E1B6 B7E371           (   flexidedrv.asm):00372 [5]                     STA         DEBCYLM
E1B9 86FF             (   flexidedrv.asm):00373 [2]                     LDA         #$FF                        ;
E1BB B7E36F           (   flexidedrv.asm):00374 [5]                     STA         CDEBSEHD            ;
E1BE B7E36D           (   flexidedrv.asm):00375 [5]                     STA         CDEBCYLL            ;
E1C1 B7E36E           (   flexidedrv.asm):00376 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00377         
E1C4 8680             (   flexidedrv.asm):00378 [2]                     LDA         #PPIDE_RST_LINE
E1C6 B7FE62           (   flexidedrv.asm):00379 [5]                     STA         PPIDECNTRL                  ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00380         
E1C9 8E0100           (   flexidedrv.asm):00381 [3]                     LDX         #$0100
                      (   flexidedrv.asm):00382         ;       PRTDBG "IDE RESET DELAY$"
E1CC                  (   flexidedrv.asm):00383         RST_DLY:
E1CC 301F             (   flexidedrv.asm):00384 [5]                     DEX
E1CE 8C0000           (   flexidedrv.asm):00385 [4]                     CPX         #$0000
E1D1 26F9             (   flexidedrv.asm):00386 [3]                     BNE         RST_DLY
E1D3 8600             (   flexidedrv.asm):00387 [2]                     LDA         #$00
E1D5 B7FE62           (   flexidedrv.asm):00388 [5]                     STA         PPIDECNTRL                  ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00389         
                      (   flexidedrv.asm):00390         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00391         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00392                 IF USEDSKYNG = 1
                      (   flexidedrv.asm):00393                         JSR     DSKY_REINIT
                      (   flexidedrv.asm):00394                 ENDC
                      (   flexidedrv.asm):00395         
E1D8 39               (   flexidedrv.asm):00396 [5]                     RTS
                      (   flexidedrv.asm):00397         
                      (   flexidedrv.asm):00398         
                      (   flexidedrv.asm):00399         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00400         ;*
                      (   flexidedrv.asm):00401         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00402         ;*
                      (   flexidedrv.asm):00403         ;*____________________________________________________________________________________________________
E1D9                  (   flexidedrv.asm):00404         IDE_WAIT_NOT_BUSY:
E1D9 3412             (   flexidedrv.asm):00405 [5+3]                   PSHS    X,A
E1DB 8600             (   flexidedrv.asm):00406 [2]                     LDA     #$00
E1DD B7DFE5           (   flexidedrv.asm):00407 [5]                     STA     PPIDETIMEOUT
E1E0 B7DFE6           (   flexidedrv.asm):00408 [5]                     STA     PPIDETIMEOUT+1
E1E3                  (   flexidedrv.asm):00409         IDE_WAIT_NOT_BUSY1:
E1E3 860F             (   flexidedrv.asm):00410 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR RDY BIT TO BE SET
E1E5 BDE2C9           (   flexidedrv.asm):00411 [8]                     JSR         IDE_READ
E1E8 1F18             (   flexidedrv.asm):00412 [6]             TFR     X,A
E1EA 8480             (   flexidedrv.asm):00413 [2]                     ANDA    #$80
E1EC 270F             (   flexidedrv.asm):00414 [3]                     BEQ         IDE_WAIT_NOT_BUSY2
E1EE 7CDFE5           (   flexidedrv.asm):00415 [7]                     INC     PPIDETIMEOUT
E1F1 26F0             (   flexidedrv.asm):00416 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1F3 7CDFE6           (   flexidedrv.asm):00417 [7]                     INC     PPIDETIMEOUT+1
E1F6 26EB             (   flexidedrv.asm):00418 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1F8 1A01             (   flexidedrv.asm):00419 [3]                     SEC
E1FA 7EE1FF           (   flexidedrv.asm):00420 [4]                     JMP         IDE_WAIT_NOT_BUSY3
E1FD                  (   flexidedrv.asm):00421         IDE_WAIT_NOT_BUSY2:
E1FD 1CFE             (   flexidedrv.asm):00422 [3]                     CLC
E1FF                  (   flexidedrv.asm):00423         IDE_WAIT_NOT_BUSY3:
E1FF 3592             (   flexidedrv.asm):00424 [5+5]           PULS    PC,X,A
E201 39               (   flexidedrv.asm):00425 [5]                     RTS
                      (   flexidedrv.asm):00426         
                      (   flexidedrv.asm):00427         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00428         ;*
                      (   flexidedrv.asm):00429         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00430         ;*
                      (   flexidedrv.asm):00431         ;*____________________________________________________________________________________________________
E202                  (   flexidedrv.asm):00432         IDE_WAIT_DRQ:
E202 3432             (   flexidedrv.asm):00433 [5+5]           PSHS    A,X,Y
E204 8600             (   flexidedrv.asm):00434 [2]                     LDA     #$00
E206 B7DFE5           (   flexidedrv.asm):00435 [5]                     STA     PPIDETIMEOUT
E209 B7DFE6           (   flexidedrv.asm):00436 [5]                     STA     PPIDETIMEOUT+1
E20C                  (   flexidedrv.asm):00437         IDE_WAIT_DRQ1:
E20C 860F             (   flexidedrv.asm):00438 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR DRQ BIT TO BE SET
E20E BDE2C9           (   flexidedrv.asm):00439 [8]                     JSR         IDE_READ
E211 1F18             (   flexidedrv.asm):00440 [6]                     TFR     X,A
E213 8488             (   flexidedrv.asm):00441 [2]                     ANDA    #%10001000              ; MASK OFF BUSY(7) AND DRQ(3)
E215 8108             (   flexidedrv.asm):00442 [2]                     CMPA    #%00001000              ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E217 2715             (   flexidedrv.asm):00443 [3]                     BEQ         IDE_WAIT_DRQ2
E219 8401             (   flexidedrv.asm):00444 [2]                     ANDA    #%00000001              ; IS ERROR?
E21B 8101             (   flexidedrv.asm):00445 [2]                     CMPA    #%00000001              ;
E21D 270A             (   flexidedrv.asm):00446 [3]                     BEQ     IDE_WAIT_DRQE
E21F 7CDFE5           (   flexidedrv.asm):00447 [7]                     INC     PPIDETIMEOUT
E222 26E8             (   flexidedrv.asm):00448 [3]                     BNE     IDE_WAIT_DRQ1
E224 7CDFE6           (   flexidedrv.asm):00449 [7]                     INC     PPIDETIMEOUT+1
E227 26E3             (   flexidedrv.asm):00450 [3]                     BNE     IDE_WAIT_DRQ1
E229                  (   flexidedrv.asm):00451         IDE_WAIT_DRQE:
E229 1A01             (   flexidedrv.asm):00452 [3]                     SEC
E22B 7EE230           (   flexidedrv.asm):00453 [4]                     JMP     IDE_WAIT_DRQ3
E22E                  (   flexidedrv.asm):00454         IDE_WAIT_DRQ2:
E22E 1CFE             (   flexidedrv.asm):00455 [3]                     CLC
E230                  (   flexidedrv.asm):00456         IDE_WAIT_DRQ3:
E230 35B2             (   flexidedrv.asm):00457 [5+7]           PULS    PC,A,X,Y
                      (   flexidedrv.asm):00458         
                      (   flexidedrv.asm):00459         
                      (   flexidedrv.asm):00460         
                      (   flexidedrv.asm):00461         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00462         ;*
                      (   flexidedrv.asm):00463         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00464         ;*
                      (   flexidedrv.asm):00465         ;*____________________________________________________________________________________________________
E232                  (   flexidedrv.asm):00466         IDE_READ_BUFFER:
E232 108E0000         (   flexidedrv.asm):00467 [4]                     LDY     #$0000                  ; INDEX
E236                  (   flexidedrv.asm):00468         IDEBUFRD:
E236 8608             (   flexidedrv.asm):00469 [2]                     LDA         #PPIDE_DATA
E238 BDE2CC           (   flexidedrv.asm):00470 [8]                     JSR         IDE_READ_NO_SETUP
E23B AFA9E373         (   flexidedrv.asm):00471 [5+4]                   STX         HSTBUF,Y            ;
E23F 3121             (   flexidedrv.asm):00472 [5]             INY
E241 3121             (   flexidedrv.asm):00473 [5]             INY
E243 108C0200         (   flexidedrv.asm):00474 [5]                     CMPY    #$0200                  ;
E247 26ED             (   flexidedrv.asm):00475 [3]                     BNE         IDEBUFRD            ;
E249 39               (   flexidedrv.asm):00476 [5]                     RTS                             ;
                      (   flexidedrv.asm):00477         
                      (   flexidedrv.asm):00478         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00479         ;*
                      (   flexidedrv.asm):00480         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00481         ;*
                      (   flexidedrv.asm):00482         ;*____________________________________________________________________________________________________
E24A                  (   flexidedrv.asm):00483         IDE_WRITE_BUFFER:
E24A 108E0000         (   flexidedrv.asm):00484 [4]                     LDY     #$0000                  ; INDEX
E24E                  (   flexidedrv.asm):00485         IDEBUFWT:
E24E AEA9E373         (   flexidedrv.asm):00486 [5+4]                   LDX     HSTBUF,Y                ; SECTORS ARE BIG ENDIAN
E252 3121             (   flexidedrv.asm):00487 [5]                     INY                                     ;
E254 3121             (   flexidedrv.asm):00488 [5]                     INY
E256 8608             (   flexidedrv.asm):00489 [2]                     LDA         #PPIDE_DATA
E258 BDE2EE           (   flexidedrv.asm):00490 [8]                     JSR         IDE_WRITE
E25B 108C0200         (   flexidedrv.asm):00491 [5]                     CMPY    #$0200                  ;
E25F 26ED             (   flexidedrv.asm):00492 [3]                     BNE         IDEBUFWT            ;
E261 39               (   flexidedrv.asm):00493 [5]                     RTS                                     ;
                      (   flexidedrv.asm):00494         
                      (   flexidedrv.asm):00495         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00496         ;*
                      (   flexidedrv.asm):00497         ;*  SETUP LBA DATA
                      (   flexidedrv.asm):00498         ;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00499         ;*____________________________________________________________________________________________________
E262                  (   flexidedrv.asm):00500         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00501         ;               PRTDBG "PPIDE SETUP LBA$"
E262 B6DE20           (   flexidedrv.asm):00502 [5]             LDA     CURDRVADDRESS
E265 8401             (   flexidedrv.asm):00503 [2]                     ANDA    #$01                    ; ONLY WANT DRIVE CFG
E267 48               (   flexidedrv.asm):00504 [2]                     ASLA                                ; SHIFT 4
E268 48               (   flexidedrv.asm):00505 [2]                     ASLA                                ;
E269 48               (   flexidedrv.asm):00506 [2]                     ASLA                                ;
E26A 48               (   flexidedrv.asm):00507 [2]                     ASLA                                ;
E26B 8AE0             (   flexidedrv.asm):00508 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E26D 1F89             (   flexidedrv.asm):00509 [6]                     TFR     A,B
E26F 8600             (   flexidedrv.asm):00510 [2]             LDA     #$00
E271 1F01             (   flexidedrv.asm):00511 [6]                     TFR     D,X
E273 860E             (   flexidedrv.asm):00512 [2]                     LDA         #PPIDE_DEVICE
E275 BDE2EE           (   flexidedrv.asm):00513 [8]                     JSR         IDE_WRITE
E278 8600             (   flexidedrv.asm):00514 [2]             LDA     #$00
E27A F6E371           (   flexidedrv.asm):00515 [5]                     LDB     DEBCYLM
E27D 1F01             (   flexidedrv.asm):00516 [6]                     TFR     D,X
E27F 860D             (   flexidedrv.asm):00517 [2]                     LDA         #PPIDE_LBAHI
E281 BDE2EE           (   flexidedrv.asm):00518 [8]                     JSR         IDE_WRITE
E284 8600             (   flexidedrv.asm):00519 [2]             LDA     #$00
E286 F6E370           (   flexidedrv.asm):00520 [5]                     LDB     DEBCYLL                 ;
E289 1F01             (   flexidedrv.asm):00521 [6]                     TFR     D,X
E28B 860C             (   flexidedrv.asm):00522 [2]                     LDA         #PPIDE_LBAMID
E28D BDE2EE           (   flexidedrv.asm):00523 [8]                     JSR         IDE_WRITE
E290 8600             (   flexidedrv.asm):00524 [2]             LDA     #$00
E292 F6E372           (   flexidedrv.asm):00525 [5]                     LDB     DEBSEHD                 ;
E295 1F01             (   flexidedrv.asm):00526 [6]                     TFR     D,X
E297 860B             (   flexidedrv.asm):00527 [2]                     LDA         #PPIDE_LBALOW
E299 BDE2EE           (   flexidedrv.asm):00528 [8]                     JSR         IDE_WRITE
E29C 8E0001           (   flexidedrv.asm):00529 [3]                     LDX         #$0001
E29F 860A             (   flexidedrv.asm):00530 [2]                     LDA         #PPIDE_SEC_CNT
E2A1 BDE2EE           (   flexidedrv.asm):00531 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00532         
E2A4 39               (   flexidedrv.asm):00533 [5]                     RTS
                      (   flexidedrv.asm):00534         
                      (   flexidedrv.asm):00535         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00536         ;
                      (   flexidedrv.asm):00537         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00538         ;
                      (   flexidedrv.asm):00539         ;                   (A) = Track Number
                      (   flexidedrv.asm):00540         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00541         ;________________________________________________________________________________________________________
E2A5                  (   flexidedrv.asm):00542         IDE_CONVERT_SECTOR:
E2A5 54               (   flexidedrv.asm):00543 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E2A6 44               (   flexidedrv.asm):00544 [2]             LSRA                    ;
E2A7 2402             (   flexidedrv.asm):00545 [3]             BCC     >
E2A9 CA80             (   flexidedrv.asm):00546 [2]             ORB     #$80
                      (   flexidedrv.asm):00547         !
E2AB F7E372           (   flexidedrv.asm):00548 [5]                 STB     DEBSEHD                     ; STORE IN SECTOR/HEAD
E2AE B7E370           (   flexidedrv.asm):00549 [5]                 STA     DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00550         
                      (   flexidedrv.asm):00551         ;       ADD SLICE OFFSET
E2B1 FCDE21           (   flexidedrv.asm):00552 [6]                 LDD     CURDRVSLICE
E2B4 54               (   flexidedrv.asm):00553 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E2B5 44               (   flexidedrv.asm):00554 [2]             LSRA                    ;
E2B6 2402             (   flexidedrv.asm):00555 [3]             BCC     >
E2B8 CA80             (   flexidedrv.asm):00556 [2]             ORB     #$80
                      (   flexidedrv.asm):00557         !
E2BA F7E371           (   flexidedrv.asm):00558 [5]             STB         DEBCYLM                     ; STORE IN TRACK (LSB)
E2BD 2408             (   flexidedrv.asm):00559 [3]             BCC     >
E2BF B6E370           (   flexidedrv.asm):00560 [5]                 LDA     DEBCYLL                     ; STORE IN TRACK (LSB)
E2C2 8A80             (   flexidedrv.asm):00561 [2]             ORA     #$80
E2C4 B7E370           (   flexidedrv.asm):00562 [5]             STA         DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00563         !
E2C7 39               (   flexidedrv.asm):00564 [5]             RTS
                      (   flexidedrv.asm):00565         
                      (   flexidedrv.asm):00566         
                      (   flexidedrv.asm):00567         
                      (   flexidedrv.asm):00568           IF USEDSKYNG = 1
                      (   flexidedrv.asm):00569         ;       PRTDBG "DSKY OUTPUT 1$"
                      (   flexidedrv.asm):00570                 LDA     SEKDSK
                      (   flexidedrv.asm):00571                 STA     DSKY_HEXBUF
                      (   flexidedrv.asm):00572                 LDA     DEBCYLM
                      (   flexidedrv.asm):00573                 STA     DSKY_HEXBUF+1
                      (   flexidedrv.asm):00574                 LDA     DEBCYLL
                      (   flexidedrv.asm):00575                 STA     DSKY_HEXBUF+2
                      (   flexidedrv.asm):00576                 LDA     DEBSEHD
                      (   flexidedrv.asm):00577                 STA     DSKY_HEXBUF+3
                      (   flexidedrv.asm):00578                 JSR     DSKY_BIN2SEG
                      (   flexidedrv.asm):00579                 JSR     DSKY_SHOW
                      (   flexidedrv.asm):00580           ENDC
E2C8 39               (   flexidedrv.asm):00581 [5]             RTS
                      (   flexidedrv.asm):00582         
                      (   flexidedrv.asm):00583         
                      (   flexidedrv.asm):00584         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00585         
                      (   flexidedrv.asm):00586         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00587         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00588         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00589         
                      (   flexidedrv.asm):00590                 ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00591                 ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00592                 ;OUTPUT X = WORD READ FROM IDE DRIVE
E2C9                  (   flexidedrv.asm):00593         IDE_READ:
E2C9 BDE310           (   flexidedrv.asm):00594 [8]             JSR         SET_PPI_RD          ; SETUP FOR A READ CYCLE
E2CC                  (   flexidedrv.asm):00595         IDE_READ_NO_SETUP:
E2CC B7FE62           (   flexidedrv.asm):00596 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2CF 8A40             (   flexidedrv.asm):00597 [2]             ORA         #PPIDE_RD_LINE      ; ASSERT RD PIN
E2D1 B7FE62           (   flexidedrv.asm):00598 [5]             STA         PPIDECNTRL
E2D4 3402             (   flexidedrv.asm):00599 [5+1]       PSHS    A
E2D6 F6FE60           (   flexidedrv.asm):00600 [5]             LDB         PPIDELO                     ; READ LOWER BYTE
E2D9 B6FE61           (   flexidedrv.asm):00601 [5]             LDA         PPIDEHI                     ; READ UPPER BYTE
E2DC 1F01             (   flexidedrv.asm):00602 [6]         TFR     D,X
E2DE 3502             (   flexidedrv.asm):00603 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2E0 B7FE62           (   flexidedrv.asm):00604 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2E3 8840             (   flexidedrv.asm):00605 [2]             EORA    #PPIDE_RD_LINE  ; ASSERT RD PIN
E2E5 B7FE62           (   flexidedrv.asm):00606 [5]             STA         PPIDECNTRL
E2E8 8600             (   flexidedrv.asm):00607 [2]             LDA         #$00
E2EA B7FE62           (   flexidedrv.asm):00608 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2ED 39               (   flexidedrv.asm):00609 [5]             RTS
                      (   flexidedrv.asm):00610         
                      (   flexidedrv.asm):00611                 ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00612                 ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00613                 ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00614                 ;
                      (   flexidedrv.asm):00615         
E2EE                  (   flexidedrv.asm):00616         IDE_WRITE:
E2EE BDE31E           (   flexidedrv.asm):00617 [8]             JSR         SET_PPI_WR          ; SETUP FOR A WRITE CYCLE
E2F1 3402             (   flexidedrv.asm):00618 [5+1]       PSHS    A
E2F3 1F10             (   flexidedrv.asm):00619 [6]         TFR     X,D
E2F5 F7FE60           (   flexidedrv.asm):00620 [5]             STB         PPIDELO                     ; WRITE LOWER BYTE
E2F8 B7FE61           (   flexidedrv.asm):00621 [5]             STA         PPIDEHI                     ; WRITE UPPER BYTE
E2FB 3502             (   flexidedrv.asm):00622 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2FD B7FE62           (   flexidedrv.asm):00623 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E300 8A20             (   flexidedrv.asm):00624 [2]             ORA         #PPIDE_WR_LINE              ; ASSERT WRITE PIN
E302 B7FE62           (   flexidedrv.asm):00625 [5]             STA         PPIDECNTRL
E305 8820             (   flexidedrv.asm):00626 [2]             EORA    #PPIDE_WR_LINE          ; DE ASSERT WR PIN
E307 B7FE62           (   flexidedrv.asm):00627 [5]             STA             PPIDECNTRL
E30A 8600             (   flexidedrv.asm):00628 [2]             LDA         #$00
E30C B7FE62           (   flexidedrv.asm):00629 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E30F 39               (   flexidedrv.asm):00630 [5]             RTS
                      (   flexidedrv.asm):00631         
                      (   flexidedrv.asm):00632         
                      (   flexidedrv.asm):00633         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00634         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00635         ;
                      (   flexidedrv.asm):00636         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00637         
E310                  (   flexidedrv.asm):00638         SET_PPI_RD:
E310 3402             (   flexidedrv.asm):00639 [5+1]           PSHS    A
E312 8600             (   flexidedrv.asm):00640 [2]             LDA         #$00
E314 B7FE62           (   flexidedrv.asm):00641 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E317 8692             (   flexidedrv.asm):00642 [2]             LDA     #PPRD_IDE_8255
E319 B7FE63           (   flexidedrv.asm):00643 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, READ MODE
E31C 3582             (   flexidedrv.asm):00644 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00645         
E31E                  (   flexidedrv.asm):00646         SET_PPI_WR:
E31E 3402             (   flexidedrv.asm):00647 [5+1]           PSHS    A
E320 8600             (   flexidedrv.asm):00648 [2]             LDA         #$00
E322 B7FE62           (   flexidedrv.asm):00649 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E325 8680             (   flexidedrv.asm):00650 [2]             LDA     #PPWR_IDE_8255
E327 B7FE63           (   flexidedrv.asm):00651 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, WRITE MODE
E32A 3582             (   flexidedrv.asm):00652 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00653         
E32C 5050494445203A   (   flexidedrv.asm):00654         MESSAGE1    FCC     "PPIDE :"
E333 04               (   flexidedrv.asm):00655                     FCB     EOT
E334 20494F3D3078     (   flexidedrv.asm):00656         MESSAGE2    FCC     " IO=0x"
E33A 04               (   flexidedrv.asm):00657                     FCB     EOT
E33B 204E4F5420505245 (   flexidedrv.asm):00658         MESSAGE3    FCC     " NOT PRESENT"
     53454E54
E347 04               (   flexidedrv.asm):00659                     FCB     EOT
E348 205050494445303A (   flexidedrv.asm):00660         MESSAGE4    FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
E358 04               (   flexidedrv.asm):00661                     FCB     EOT
E359 205050494445313A (   flexidedrv.asm):00662         MESSAGE5    FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
E369 04               (   flexidedrv.asm):00663                     FCB     EOT
E36A 3078             (   flexidedrv.asm):00664         MESSAGE6    FCC     "0x"
E36C 04               (   flexidedrv.asm):00665                     FCB     EOT
                      (   flexidedrv.asm):00666         
                      (   flexidedrv.asm):00667         
                      (   flexidedrv.asm):00668         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E36D 00               (   flexidedrv.asm):00669         CDEBCYLL:       .BYTE 0         ; DEBLOCKED CYLINDER LSB
E36E 00               (   flexidedrv.asm):00670         CDEBCYLM:       .BYTE 0         ; DEBLOCKED CYLINDER MSB
E36F 00               (   flexidedrv.asm):00671         CDEBSEHD:       .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E370 00               (   flexidedrv.asm):00672         DEBCYLL:        .BYTE 0         ; DEBLOCKED CYLINDER LSB
E371 00               (   flexidedrv.asm):00673         DEBCYLM:        .BYTE 0         ; DEBLOCKED CYLINDER MSB
E372 00               (   flexidedrv.asm):00674         DEBSEHD:        .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
                      (      drivers.asm):00627         
                      (      drivers.asm):00628         
                      (      drivers.asm):00629         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00630         
E373                  (      drivers.asm):00631         HSTBUF:         RMB     512
                      (      drivers.asm):00632         
                      (      drivers.asm):00633         
                      (      drivers.asm):00634         
                      (      drivers.asm):00635                         END

Symbol Table:
[ G] ADDBX                            CD36
[ G] ADDDEV                           DE8E
[ G] CDEBCYLL                         E36D
[ G] CDEBCYLM                         E36E
[ G] CDEBSEHD                         E36F
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DFCE
[ G] CLASS                            CD21
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] DCHECK                           DE0F
[ G] DDRIVE                           DE0C
[ G] DEBCYLL                          E370
[ G] DEBCYLM                          E371
[ G] DEBSEHD                          E372
[ G] DELDEV                           DE9A
[ G] DEVARE                           DE98
[ G] DINIT                            DE15
[ G] DOCMD                            CD4B
[ G] DOS3                             CD06
[ G] DQUICK                           DE12
[ G] DREAD                            DE00
[ G] DRESTOR                          DE09
[ G] DRIVE                            DF84
[ G] DRIVE1                           DF98
[ G] DRIVEERR                         DF93
[ G] DRVADDRESS                       DE27
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEEK                            DE1B
[ G] DVERFY                           DE06
[ G] DWARM                            DE18
[ G] DWRITE                           DE03
[ G] ENTRY                            CD03
[ G] EOT                              0004
[ G] FINIT                            CD00
[ G] FNDENT                           DEB5
[ G] GETCHR                           CD15
[ G] GETFIL                           CD2D
[ G] GETHEX                           CD42
[ G] HSTBUF                           E373
[ G] IDE_ABORT                        E014
[ G] IDE_CONVERT_SECTOR               E2A5
[ G] IDE_INITA                        E036
[ G] IDE_PPIDETECT                    E0D4
[ G] IDE_PRINT_INFO                   E01D
[ G] IDE_READ                         E2C9
[ G] IDE_READ_BUFFER                  E232
[ G] IDE_READ_INFO                    E085
[ G] IDE_READ_INFO_ABORT              E0C2
[ G] IDE_READ_INFO_OK                 E0CE
[ G] IDE_READ_NO_SETUP                E2CC
[ G] IDE_READ_RAW_SECTOR              E108
[ G] IDE_READ_SECTOR                  E0E2
[ G] IDE_READ_SECTOR_DIRTY            E126
[ G] IDE_READ_SECTOR_DIRTY1           E12B
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E153
[ G] IDE_READ_SECTOR_ERROR            E106
[ G] IDE_SETUP_LBA                    E262
[ G] IDE_WAIT_DRQ                     E202
[ G] IDE_WAIT_DRQ1                    E20C
[ G] IDE_WAIT_DRQ2                    E22E
[ G] IDE_WAIT_DRQ3                    E230
[ G] IDE_WAIT_DRQE                    E229
[ G] IDE_WAIT_NOT_BUSY                E1D9
[ G] IDE_WAIT_NOT_BUSY1               E1E3
[ G] IDE_WAIT_NOT_BUSY2               E1FD
[ G] IDE_WAIT_NOT_BUSY3               E1FF
[ G] IDE_WRITE                        E2EE
[ G] IDE_WRITE_BUFFER                 E24A
[ G] IDE_WRITE_SECTOR                 E156
[ G] IDE_WRITE_SECTOR_ERROR           E1A1
[ G] IDEBUFRD                         E236
[ G] IDEBUFWT                         E24E
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] INBUF                            CD1B
[ G] INCHNE                           DE6D
[ G] INDEC                            CD48
[ G] INIT                             DF4B
[ G] IRQLL                            DEB6
[ G] IRQVEC                           D3FD
[ G] LD3E1                            D3E1
[ G] LOAD                             CD30
[ G] MESSAGE1                         E32C
[ G] MESSAGE2                         E334
[ G] MESSAGE3                         E33B
[ G] MESSAGE4                         E348
[ G] MESSAGE5                         E359
[ G] MESSAGE6                         E36A
[ G] MONITR                           DE33
[ G] NODEV                            DEA4
[ G] NUL                              0000
[ G] NXTCH                            CD27
[ G] OUTADR                           CD45
[ G] OUTDEC                           CD39
[ G] OUTHEX                           CD3C
[ G] PCRLF                            CD24
[ G] PDATA1                           CE7B
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       DFE9
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      E03A
[ G] PPIDE_PROBE_FAIL                 E082
[ G] PPIDE_PROBE_SUCCESS              E084
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E1AE
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DFE4
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DFE5
[ G] PPIDEWORKVAR                     DFE7
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PSTRNG                           CD1E
[ G] PUTCHR                           CD18
[ G] QUICK                            DFD9
[ G] READ                             DEBB
[ G] READERR                          DED1
[ G] READFLOPPY                       DED6
[ G] READIDE                          DEE1
[ G] RESTIO                           CD2A
[ G] RESTORE                          DF65
[ G] RESTOREERR                       DF7B
[ G] RESTOREFLOPPY                    DF7F
[ G] RESTOREIDE                       DF81
[ G] RPTERR                           CD3F
[ G] RST_DLY                          E1CC
[ G] SEEK                             DF2E
[ G] SEEKERR                          DF42
[ G] SEEKFLOPPY                       DF46
[ G] SEEKIDE                          DF48
[ G] SET_PPI_RD                       E310
[ G] SET_PPI_WR                       E31E
[ G] SETEXT                           CD33
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] STAT                             DE5D
[ G] SWIVEC                           D3FD
[ G] TAPPTR                           DEB9
[ G] TINIT                            DE3F
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TREDIR                           DE68
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] USEDSKYNG                        0000
[ G] VERIFY                           DF11
[ G] VERIFYERR                        DF25
[ G] VERIFYFLOPPY                     DF29
[ G] VERIFYIDE                        DF2B
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] WARM                             DF58
[ G] WRITE                            DEEF
[ G] WRITEERR                         DF05
[ G] WRITEFLOPPY                      DF0A
[ G] WRITEIDE                         DF0C
