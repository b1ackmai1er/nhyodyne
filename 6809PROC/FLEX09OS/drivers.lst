                      (      drivers.asm):00001                         NAM     DRIVERS
                      (      drivers.asm):00002                         PAG
                      (      drivers.asm):00003                         PRAGMA CD
                      (      drivers.asm):00004         
                      (      drivers.asm):00005         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00006         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00007         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00008         ;
                      (      drivers.asm):00009         ;  Harware Addresses
                      (      drivers.asm):00010         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00011         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00012         UART0           equ     $FE68           ; DATA IN/OUT
     FE69             (      drivers.asm):00013         UART1           equ     $FE69           ; CHECK RX
     FE6A             (      drivers.asm):00014         UART2           equ     $FE6A           ; INTERRUPTS
     FE6B             (      drivers.asm):00015         UART3           equ     $FE6B           ; LINE CONTROL
     FE6C             (      drivers.asm):00016         UART4           equ     $FE6C           ; MODEM CONTROL
     FE6D             (      drivers.asm):00017         UART5           equ     $FE6D           ; LINE STATUS
     FE6E             (      drivers.asm):00018         UART6           equ     $FE6E           ; MODEM STATUS
     FE6F             (      drivers.asm):00019         UART7           equ     $FE6F           ; SCRATCH REG.
                      (      drivers.asm):00020         
                      (      drivers.asm):00021         
     CD1E             (      drivers.asm):00022         PSTRNG          EQU     $CD1E
     CD24             (      drivers.asm):00023         PRCRLF          EQU     $CD24
                      (      drivers.asm):00024         
                      (      drivers.asm):00025         ;
                      (      drivers.asm):00026         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (      drivers.asm):00027         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00028                         ORG     $D3E1       * TABLE STARTS AT $D3E1
                      (      drivers.asm):00029         
D3E1 DE8E             (      drivers.asm):00030         LD3E1           FDB     ADDDEV      ; add an IRQ handler to table
D3E3 DE9A             (      drivers.asm):00031                         FDB     DELDEV      ; delete an IRQ handler from table
                      (      drivers.asm):00032         
D3E5 DE6D             (      drivers.asm):00033                         FDB     INCHNE      ; INPUT CHARACTER W/O ECHO
D3E7 DE7A             (      drivers.asm):00034                         FDB     IHNDLR      ; IRQ INTERRUPT HANDLER
D3E9 D3FD             (      drivers.asm):00035                         FDB     SWIVEC      ; SWI3 VECTOR LOCATION
D3EB D3FD             (      drivers.asm):00036                         FDB     IRQVEC      ; IRQ VECTOR LOCATION
D3ED DE3E             (      drivers.asm):00037                         FDB     TMOFF       ; TIMER OFF ROUTINE
D3EF DE3E             (      drivers.asm):00038                         FDB     TMON        ; TIMER ON ROUTINE
D3F1 DE3E             (      drivers.asm):00039                         FDB     TMINT       ; TIMER INITIALIZATION
D3F3 DE33             (      drivers.asm):00040                         FDB     MONITR      ; MONITOR ENTRY ADDRESS
D3F5 DE3F             (      drivers.asm):00041                         FDB     TINIT       ; TERMINAL INITIALIZATION
D3F7 DE5D             (      drivers.asm):00042                         FDB     STAT        ; CHECK TERMINAL STATUS
D3F9 DE4C             (      drivers.asm):00043                         FDB     VOUTCH      ; OUTPUT CHARACTER
D3FB DE43             (      drivers.asm):00044                         FDB     VINCH       ; INPUT CHARACTER W/ ECHO
                      (      drivers.asm):00045         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00046         ;   Default ISRs.  Will be changed by OS Setup
D3FD                  (      drivers.asm):00047         SWIVEC:
D3FD                  (      drivers.asm):00048         IRQVEC:
D3FD 3B               (      drivers.asm):00049 [6+?]                   rti
                      (      drivers.asm):00050         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00051         ;
                      (      drivers.asm):00052         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00053         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00054                         ORG     $DE00
                      (      drivers.asm):00055         
DE00 7EDEBB           (      drivers.asm):00056 [4]     DREAD           JMP     >READ       * DE00    READ      Read a single sector
DE03 7EDED4           (      drivers.asm):00057 [4]     DWRITE          JMP     >WRITE      * DE03    WRITE     Write a single sector
DE06 7EDEED           (      drivers.asm):00058 [4]     DVERFY          JMP     >VERIFY     * DE06    VERIFY    Verify last sector written
DE09 7EDF1D           (      drivers.asm):00059 [4]     DRESTOR         JMP     >RESTORE    * DE09    RESTORE   Restore head to track #0
DE0C 7EDF33           (      drivers.asm):00060 [4]     DDRIVE          JMP     >DRIVE      * DE0C    DRIVE     Select the specified drive
DE0F 7EDF77           (      drivers.asm):00061 [4]     DCHECK          JMP     >CHKRDY     * DE0F    CHKRDY    Check for drive ready
DE12 7EDF8A           (      drivers.asm):00062 [4]     DQUICK          JMP     >QUICK      * DE12    QUICK     Quick check for drive ready
DE15 7EDF15           (      drivers.asm):00063 [4]     DINIT           JMP     >INIT       * DE15    INIT      Driver initialize (cold start)
DE18 7EDF19           (      drivers.asm):00064 [4]     DWARM           JMP     >WARM       * DE18    WARM      Driver initialize (warm start)
DE1B 7EDF01           (      drivers.asm):00065 [4]     DSEEK           JMP     >SEEK       * DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00066         
                      (      drivers.asm):00067         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00068         ; Temp Storage Area
                      (      drivers.asm):00069         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00070         
                      (      drivers.asm):00071         
DE1E 00               (      drivers.asm):00072         CURDRV          FCB     $00
DE1F 00               (      drivers.asm):00073         CURDRVTYP       FCB     $00
DE20 00               (      drivers.asm):00074         CURDRVADDRESS   FCB     $00
DE21 0000             (      drivers.asm):00075         CURDRVSLICE     FDB     $0000
                      (      drivers.asm):00076         
DE23 00000000         (      drivers.asm):00077         DRVTYPES        FCB     $00,$00,$00,$00
                      (      drivers.asm):00078                         ;   $00 - INVALID
                      (      drivers.asm):00079                         ;   $01 - Floppy
                      (      drivers.asm):00080                         ;   $02 - IDE
DE27 00000000         (      drivers.asm):00081         DRVADDRESS      FCB     $00,$00,$00,$00
DE2B 0000000000000000 (      drivers.asm):00082         DRVSLICE        FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00083         
                      (      drivers.asm):00084         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00085         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00086         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00087         
                      (      drivers.asm):00088         
                      (      drivers.asm):00089         
                      (      drivers.asm):00090         
                      (      drivers.asm):00091         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00092         ;
                      (      drivers.asm):00093         ;       Monitor entry routine
                      (      drivers.asm):00094         ;_____________________________________________________________________________________________________
DE33 860A             (      drivers.asm):00095 [2]     MONITR          LDA     #$A
DE35 8D15             (      drivers.asm):00096 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00097 [2]                     LDA     #$D
DE39 8D11             (      drivers.asm):00098 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00099 [4]                     JMP     $FC0B               LOCATION OF MONITOR
                      (      drivers.asm):00100         
                      (      drivers.asm):00101         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00102         ;
                      (      drivers.asm):00103         ;       Timer Drivers
                      (      drivers.asm):00104         ;
                      (      drivers.asm):00105         ;       Timers not supported
                      (      drivers.asm):00106         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00107         TMOFF       ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00108         TMON        ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00109         TMINT       ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00110 [5]                     RTS
                      (      drivers.asm):00111         
                      (      drivers.asm):00112         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00113         ;
                      (      drivers.asm):00114         ;       Console Drivers
                      (      drivers.asm):00115         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00116         ;       Terminal init routine
DE3F 3402             (      drivers.asm):00117 [5+1]   TINIT           PSHS    A
                      (      drivers.asm):00118                         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00119                         ;       LDA             #$80            ;
                      (      drivers.asm):00120                         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00121                             ;   LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00122                             ;   STA             UART0           ; save baud rate
                      (      drivers.asm):00123                             ;   LDA             #00                     ;
                      (      drivers.asm):00124                             ;   STA             UART1           ;
                      (      drivers.asm):00125                             ;   LDA             #03                     ;
                      (      drivers.asm):00126                             ;   STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00127                             ;   STA             UART4           ;
DE41 3582             (      drivers.asm):00128 [5+3]                   PULS    PC,A
                      (      drivers.asm):00129         
                      (      drivers.asm):00130         
                      (      drivers.asm):00131         ;       Terminal input routine
                      (      drivers.asm):00132         
DE43 7DDEB9           (      drivers.asm):00133 [7]     VINCH           TST     >TAPPTR         ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00134 [3]                     BEQ     TREDIR          ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00135 [7+5]                   JSR     [TAPPTR]        ; redirect to alternate routine
                      (      drivers.asm):00136         
                      (      drivers.asm):00137         ;       Terminal output routine
                      (      drivers.asm):00138         
DE4C 3402             (      drivers.asm):00139 [5+1]   VOUTCH          PSHS    a
                      (      drivers.asm):00140         !
DE4E B6FE6D           (      drivers.asm):00141 [5]                             LDA             UART5                   ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00142 [2]                             ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00143 [2]                             CMPA    #$00
DE55 27F7             (      drivers.asm):00144 [3]                             BEQ             <                       ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00145 [5+1]                   PULS    A
DE59 B7FE68           (      drivers.asm):00146 [5]                             STA             UART0                   ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00147 [5]                     RTS
                      (      drivers.asm):00148         
                      (      drivers.asm):00149         
                      (      drivers.asm):00150         ;       Terminal status check routine
                      (      drivers.asm):00151         
DE5D 3402             (      drivers.asm):00152 [5+1]   STAT:           PSHS    A
DE5F B6FE6D           (      drivers.asm):00153 [5]                     LDA         UART5                       ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00154 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00155 [2]                             CMPA    #$00
DE66 3582             (      drivers.asm):00156 [5+3]                           PULS    PC,A
                      (      drivers.asm):00157         
                      (      drivers.asm):00158         
                      (      drivers.asm):00159         ;       Monitor terminal input character with echo
                      (      drivers.asm):00160         
DE68 BDDE6D           (      drivers.asm):00161 [8]     TREDIR          JSR     INCHNE
DE6B 20DF             (      drivers.asm):00162 [3]                     BRA     VOUTCH
                      (      drivers.asm):00163         
                      (      drivers.asm):00164         
                      (      drivers.asm):00165         ;       Monitor terminal input character without echo
                      (      drivers.asm):00166         
DE6D                  (      drivers.asm):00167         INCHNE
DE6D B6FE6D           (      drivers.asm):00168 [5]                             LDA         UART5                       ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00169 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00170 [2]                             CMPA    #$00
DE74 27F7             (      drivers.asm):00171 [3]                             BEQ         INCHNE              ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00172 [5]                             LDA         UART0                       ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00173 [5]                             RTS
                      (      drivers.asm):00174         
                      (      drivers.asm):00175         
                      (      drivers.asm):00176         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00177         ;
                      (      drivers.asm):00178         ;       Interupt handler
                      (      drivers.asm):00179         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00180         IHNDLR          ;leau    <IRQLL-4,pc         get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00181                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00182                         fcb     IRQLL-*-5
DE7D EE44             (      drivers.asm):00183 [5+1]   CHKNXT          ldu     4,u                 get a link
DE7F 270C             (      drivers.asm):00184 [3]                     beq     IHDONE              end of list
                      (      drivers.asm):00185         
DE81 A6D4             (      drivers.asm):00186 [4+3]                   lda     [,u]                get status from device
DE83 A546             (      drivers.asm):00187 [4+1]                   bita    6,u                 did it interrupt?
DE85 27F6             (      drivers.asm):00188 [3]                     beq     CHKNXT              no - check next
                      (      drivers.asm):00189         
DE87 10AEC4           (      drivers.asm):00190 [6+0]                   ldy     ,u                  yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00191 [3+4]                   jmp     [2,u]               go to device ISR
                      (      drivers.asm):00192         
DE8D 3B               (      drivers.asm):00193 [6+?]   IHDONE          rti                         return from interrupt
                      (      drivers.asm):00194         
                      (      drivers.asm):00195         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00196         ;       add a device to IRQ handler table
                      (      drivers.asm):00197         ;_____________________________________________________________________________________________________
DE8E 3470             (      drivers.asm):00198 [5+6]   ADDDEV          pshs    x,y,u
DE90 8D14             (      drivers.asm):00199 [7]                     bsr     SRCHLST             find link in chain
DE92 2704             (      drivers.asm):00200 [3]                     beq     DEVARE              already exists - exit
DE94 EF04             (      drivers.asm):00201 [5+1]                   stu     4,x                 set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00202 [5+1]                   stx     4,y                 link this one into prev blk
DE98 35F0             (      drivers.asm):00203 [5+8]   DEVARE          puls    pc,X,Y,U
                      (      drivers.asm):00204         
                      (      drivers.asm):00205         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00206         ;       delete a device from IRQ handler table
                      (      drivers.asm):00207         ;_____________________________________________________________________________________________________
DE9A 3470             (      drivers.asm):00208 [5+6]   DELDEV          pshs    x,y,u
DE9C 8D08             (      drivers.asm):00209 [7]                     bsr     SRCHLST             find link in chain
DE9E 2604             (      drivers.asm):00210 [3]                     bne     NODEV               not found - exit
DEA0 AE04             (      drivers.asm):00211 [5+1]                   ldx     4,x                 get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00212 [5+1]                   stx     4,u                 set in prev block
DEA4 35F0             (      drivers.asm):00213 [5+8]   NODEV           puls    pc,X,Y,U
                      (      drivers.asm):00214         
                      (      drivers.asm):00215         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00216         ;       search a linked list
                      (      drivers.asm):00217         ;
                      (      drivers.asm):00218         ;               entry: X = address of ISR control block
                      (      drivers.asm):00219         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00220         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00221         ;
                      (      drivers.asm):00222         ;               format of ISR control block:
                      (      drivers.asm):00223         ;
                      (      drivers.asm):00224         ;                       offset  description
                      (      drivers.asm):00225         ;                         0     address of I/O device
                      (      drivers.asm):00226         ;                         2     address of ISR
                      (      drivers.asm):00227         ;                         4     link to next ISR control block
                      (      drivers.asm):00228         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00229         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00230         SRCHLST         ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00231                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00232                         fcb     IRQLL-*-5
DEA9 31C4             (      drivers.asm):00233 [4+0]   SRCHLP          leay    ,u
DEAB AC44             (      drivers.asm):00234 [6+1]                   cmpx    4,u                 X = link?
DEAD 2706             (      drivers.asm):00235 [3]                     beq     FNDENT              yes - return pointer in U
                      (      drivers.asm):00236         
DEAF EE44             (      drivers.asm):00237 [5+1]                   ldu     4,u                 no - get link in U
DEB1 26F6             (      drivers.asm):00238 [3]                     bne     SRCHLP              not end of chain - loop
DEB3 1CFB             (      drivers.asm):00239 [3]                     andcc   #$FB                clear Z flag in CC
                      (      drivers.asm):00240         
DEB5 39               (      drivers.asm):00241 [5]     FNDENT          rts                         return - not found
                      (      drivers.asm):00242         
                      (      drivers.asm):00243         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00244         
                      (      drivers.asm):00245         
DEB6 0000             (      drivers.asm):00246         IRQLL           fdb     0                   pointer to first entry in the table
DEB8 01               (      drivers.asm):00247                         fcb     1
                      (      drivers.asm):00248         
DEB9 0000             (      drivers.asm):00249         TAPPTR          fdb     0                   no terminal input redirection
                      (      drivers.asm):00250         
                      (      drivers.asm):00251         
                      (      drivers.asm):00252         
                      (      drivers.asm):00253         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00254         ;
                      (      drivers.asm):00255         ;       Disk Driver Dispatchers
                      (      drivers.asm):00256         ;
                      (      drivers.asm):00257         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00258         ;       driver for the device
                      (      drivers.asm):00259         ;
                      (      drivers.asm):00260         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00261         
                      (      drivers.asm):00262         
                      (      drivers.asm):00263         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00264         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00265         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00266         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00267         ;
                      (      drivers.asm):00268         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00269         ;                   (A) = Track Number
                      (      drivers.asm):00270         ;                   (B) = Sector Number
                      (      drivers.asm):00271         ;
                      (      drivers.asm):00272         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00273         ;                   (A) May be destroyed
                      (      drivers.asm):00274         ;                   (B) = Error condition
                      (      drivers.asm):00275         ;                   (Z) = 1 if no error
                      (      drivers.asm):00276         ;                       = 0 if an error
                      (      drivers.asm):00277         ;_____________________________________________________________________________________________________
DEBB 3402             (      drivers.asm):00278 [5+1]   READ            PSHS     A
DEBD B6DE1F           (      drivers.asm):00279 [5]                     LDA     CURDRVTYP
DEC0 8101             (      drivers.asm):00280 [2]                     CMPA    #$01
DEC2 2709             (      drivers.asm):00281 [3]                     BEQ     READFLOPPY
DEC4 8102             (      drivers.asm):00282 [2]                     CMPA    #$02
DEC6 2707             (      drivers.asm):00283 [3]                     BEQ     READIDE
DEC8 C61F             (      drivers.asm):00284 [2]     READERR:        LDB     #$1F
DECA 57               (      drivers.asm):00285 [2]                     ASRB
DECB 3582             (      drivers.asm):00286 [5+3]                   PULS    PC,A
DECD                  (      drivers.asm):00287         READFLOPPY:
DECD 20F9             (      drivers.asm):00288 [3]                     BRA     READERR
DECF                  (      drivers.asm):00289         READIDE:
DECF 3502             (      drivers.asm):00290 [5+1]                   PULS    A
DED1 7EE0BA           (      drivers.asm):00291 [4]                     JMP     IDE_READ_SECTOR
                      (      drivers.asm):00292         
                      (      drivers.asm):00293         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00294         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00295         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00296         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00297         ;           in length.
                      (      drivers.asm):00298         ;
                      (      drivers.asm):00299         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00300         ;                         to be written to disk
                      (      drivers.asm):00301         ;                   (A) = Track Number
                      (      drivers.asm):00302         ;                   (B) = Sector Number
                      (      drivers.asm):00303         ;
                      (      drivers.asm):00304         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00305         ;                   (A) May be destroyed
                      (      drivers.asm):00306         ;                   (B) = Error condition
                      (      drivers.asm):00307         ;                   (Z) = 1 if no error
                      (      drivers.asm):00308         ;                       = 0 if an error
                      (      drivers.asm):00309         ;_____________________________________________________________________________________________________
DED4 3402             (      drivers.asm):00310 [5+1]   WRITE           PSHS     A
DED6 B6DE1F           (      drivers.asm):00311 [5]                     LDA     CURDRVTYP
DED9 8101             (      drivers.asm):00312 [2]                     CMPA    #$01
DEDB 2709             (      drivers.asm):00313 [3]                     BEQ     WRITEFLOPPY
DEDD 8102             (      drivers.asm):00314 [2]                     CMPA    #$02
DEDF 2707             (      drivers.asm):00315 [3]                     BEQ     WRITEIDE
DEE1 C61F             (      drivers.asm):00316 [2]     WRITEERR:       LDB     #$1F
DEE3 57               (      drivers.asm):00317 [2]                     ASRB
DEE4 3582             (      drivers.asm):00318 [5+3]                   PULS    PC,A
DEE6                  (      drivers.asm):00319         WRITEFLOPPY:
DEE6 20F9             (      drivers.asm):00320 [3]                     BRA     WRITEERR
DEE8                  (      drivers.asm):00321         WRITEIDE:
DEE8 3502             (      drivers.asm):00322 [5+1]                   PULS    A
DEEA 7EE12E           (      drivers.asm):00323 [4]                     JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00324         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00325         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00326         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00327         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00328         ;           single sector operation.
                      (      drivers.asm):00329         ;
                      (      drivers.asm):00330         ;           ENTRY - No entry parameters
                      (      drivers.asm):00331         ;
                      (      drivers.asm):00332         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00333         ;                   (A) May be destroyed
                      (      drivers.asm):00334         ;                   (B) = Error condition
                      (      drivers.asm):00335         ;                   (Z) = 1 if no error
                      (      drivers.asm):00336         ;                       = 0 if an error
                      (      drivers.asm):00337         ;_____________________________________________________________________________________________________
DEED                  (      drivers.asm):00338         VERIFY
DEED B6DE1F           (      drivers.asm):00339 [5]                     LDA     CURDRVTYP
DEF0 8101             (      drivers.asm):00340 [2]                     CMPA    #$01
DEF2 2708             (      drivers.asm):00341 [3]                     BEQ     VERIFYFLOPPY
DEF4 8102             (      drivers.asm):00342 [2]                     CMPA    #$02
DEF6 2706             (      drivers.asm):00343 [3]                     BEQ     VERIFYIDE
DEF8 C61F             (      drivers.asm):00344 [2]     VERIFYERR:      LDB     #$1F
DEFA 57               (      drivers.asm):00345 [2]                     ASRB
DEFB 39               (      drivers.asm):00346 [5]                     RTS
DEFC                  (      drivers.asm):00347         VERIFYFLOPPY:
DEFC 20FA             (      drivers.asm):00348 [3]                     BRA     VERIFYERR
DEFE                  (      drivers.asm):00349         VERIFYIDE:
DEFE C600             (      drivers.asm):00350 [2]                     LDB     #$00
DF00 39               (      drivers.asm):00351 [5]                     RTS
                      (      drivers.asm):00352         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00353         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00354         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00355         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00356         ;
                      (      drivers.asm):00357         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00358         ;                   (B) = Sector Number
                      (      drivers.asm):00359         ;
                      (      drivers.asm):00360         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00361         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00362         ;                   (B) = Error condition
                      (      drivers.asm):00363         ;                   (Z) = 1 if no error
                      (      drivers.asm):00364         ;                       = 0 if an error
                      (      drivers.asm):00365         ;_____________________________________________________________________________________________________
DF01                  (      drivers.asm):00366         SEEK
DF01 B6DE1F           (      drivers.asm):00367 [5]                     LDA     CURDRVTYP
DF04 8101             (      drivers.asm):00368 [2]                     CMPA    #$01
DF06 2708             (      drivers.asm):00369 [3]                     BEQ     SEEKFLOPPY
DF08 8102             (      drivers.asm):00370 [2]                     CMPA    #$02
DF0A 2706             (      drivers.asm):00371 [3]                     BEQ     SEEKIDE
DF0C C61F             (      drivers.asm):00372 [2]     SEEKERR:        LDB     #$1F
DF0E 57               (      drivers.asm):00373 [2]                     ASRB
DF0F 39               (      drivers.asm):00374 [5]                     RTS
DF10                  (      drivers.asm):00375         SEEKFLOPPY:
DF10 20FA             (      drivers.asm):00376 [3]                     BRA     SEEKERR
DF12                  (      drivers.asm):00377         SEEKIDE:
DF12 C600             (      drivers.asm):00378 [2]                     LDB     #$00
DF14 39               (      drivers.asm):00379 [5]                     RTS
                      (      drivers.asm):00380         
                      (      drivers.asm):00381         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00382         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00383         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00384         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00385         ;           can be done here.
                      (      drivers.asm):00386         ;
                      (      drivers.asm):00387         ;           ENTRY - No parameters
                      (      drivers.asm):00388         ;
                      (      drivers.asm):00389         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00390         ;_____________________________________________________________________________________________________
DF15                  (      drivers.asm):00391         INIT
DF15 BDDFAB           (      drivers.asm):00392 [8]                     JSR     PPIDE_INIT
DF18 39               (      drivers.asm):00393 [5]                     RTS
                      (      drivers.asm):00394         
                      (      drivers.asm):00395         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00396         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00397         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00398         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00399         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00400         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00401         ;           reset such that the controller would not function properly
                      (      drivers.asm):00402         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00403         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00404         ;
                      (      drivers.asm):00405         ;           ENTRY - No parameters
                      (      drivers.asm):00406         ;
                      (      drivers.asm):00407         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00408         ;_____________________________________________________________________________________________________
DF19                  (      drivers.asm):00409         WARM
DF19 BDE186           (      drivers.asm):00410 [8]                     JSR     PPIDE_RESET
DF1C 39               (      drivers.asm):00411 [5]                     RTS
                      (      drivers.asm):00412         
                      (      drivers.asm):00413         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00414         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00415         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00416         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00417         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00418         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00419         ;           operation.
                      (      drivers.asm):00420         ;
                      (      drivers.asm):00421         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00422         ;
                      (      drivers.asm):00423         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00424         ;                   (A) May be destroyed
                      (      drivers.asm):00425         ;                   (B) = Error condition
                      (      drivers.asm):00426         ;                   (Z) = 1 if no error
                      (      drivers.asm):00427         ;                       = 0 if an error
                      (      drivers.asm):00428         ;_____________________________________________________________________________________________________
DF1D 8D14             (      drivers.asm):00429 [7]     RESTORE         BSR     DRIVE
DF1F B6DE1F           (      drivers.asm):00430 [5]                     LDA     CURDRVTYP
DF22 8101             (      drivers.asm):00431 [2]                     CMPA    #$01
DF24 2708             (      drivers.asm):00432 [3]                     BEQ     RESTOREFLOPPY
DF26 8102             (      drivers.asm):00433 [2]                     CMPA    #$02
DF28 2706             (      drivers.asm):00434 [3]                     BEQ     RESTOREIDE
DF2A C61F             (      drivers.asm):00435 [2]     RESTOREERR:     LDB     #$1F
DF2C 57               (      drivers.asm):00436 [2]                     ASRB
DF2D 39               (      drivers.asm):00437 [5]                     RTS
DF2E                  (      drivers.asm):00438         RESTOREFLOPPY:
DF2E 20FA             (      drivers.asm):00439 [3]                     BRA     RESTOREERR
DF30                  (      drivers.asm):00440         RESTOREIDE:
DF30 C600             (      drivers.asm):00441 [2]                     LDB     #$00
DF32 39               (      drivers.asm):00442 [5]                     RTS
                      (      drivers.asm):00443         
                      (      drivers.asm):00444         
                      (      drivers.asm):00445         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00446         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00447         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00448         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00449         ;
                      (      drivers.asm):00450         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00451         ;
                      (      drivers.asm):00452         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00453         ;                   (A) May be destroyed
                      (      drivers.asm):00454         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00455         ;                       = Error condition otherwise
                      (      drivers.asm):00456         ;                   (Z) = 1 if no error
                      (      drivers.asm):00457         ;                       = 0 if an error
                      (      drivers.asm):00458         ;                   (C) = 0 if no error
                      (      drivers.asm):00459         ;                       = 1 if an error
                      (      drivers.asm):00460         ;_____________________________________________________________________________________________________
DF33 3410             (      drivers.asm):00461 [5+2]   DRIVE:          PSHS    X
DF35 A603             (      drivers.asm):00462 [4+1]                   LDA     3,X             ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF37 8104             (      drivers.asm):00463 [2]                     CMPA    #4
DF39 2505             (      drivers.asm):00464 [3]                     BCS     DRIVE1
DF3B                  (      drivers.asm):00465         DRIVEERR:
DF3B C61F             (      drivers.asm):00466 [2]                     LDB     #$1F
DF3D 57               (      drivers.asm):00467 [2]                     ASRB
DF3E 3590             (      drivers.asm):00468 [5+4]                   PULS    PC,X
                      (      drivers.asm):00469         
DF40 8EDE23           (      drivers.asm):00470 [3]     DRIVE1          LDX     #DRVTYPES
DF43 3086             (      drivers.asm):00471 [4+1]                   LEAX    A,X             ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF45 E684             (      drivers.asm):00472 [4+0]                   LDB     ,X
DF47 C101             (      drivers.asm):00473 [2]                     CMPB    #$01            ; IF $01, OK
DF49 2706             (      drivers.asm):00474 [3]                     BEQ     >
DF4B C102             (      drivers.asm):00475 [2]                     CMPB    #$02            ; IF $01, OK
DF4D 2702             (      drivers.asm):00476 [3]                     BEQ     >
DF4F 20EA             (      drivers.asm):00477 [3]                     BRA     DRIVEERR
DF51 F7DE1F           (      drivers.asm):00478 [5]     !               STB     CURDRVTYP
DF54 B7DE1E           (      drivers.asm):00479 [5]                     STA     CURDRV
DF57 8EDE27           (      drivers.asm):00480 [3]                     LDX     #DRVADDRESS
DF5A 3086             (      drivers.asm):00481 [4+1]                   LEAX    A,X             ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DF5C E684             (      drivers.asm):00482 [4+0]                   LDB     ,X
DF5E F7DE20           (      drivers.asm):00483 [5]                     STB     CURDRVADDRESS
DF61 8EDE2B           (      drivers.asm):00484 [3]                     LDX     #DRVSLICE
DF64 48               (      drivers.asm):00485 [2]                     LSLA                    ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DF65 3086             (      drivers.asm):00486 [4+1]                   LEAX    A,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF67 E684             (      drivers.asm):00487 [4+0]                   LDB     ,X
DF69 F7DE21           (      drivers.asm):00488 [5]                     STB     CURDRVSLICE
DF6C 3001             (      drivers.asm):00489 [4+1]                   LEAX    1,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF6E E684             (      drivers.asm):00490 [4+0]                   LDB     ,X
DF70 F7DE22           (      drivers.asm):00491 [5]                     STB     CURDRVSLICE+1
DF73 C600             (      drivers.asm):00492 [2]                     LDB     #$00
DF75 3590             (      drivers.asm):00493 [5+4]                   PULS    PC,X
                      (      drivers.asm):00494         
                      (      drivers.asm):00495         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00496         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00497         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00498         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00499         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00500         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00501         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00502         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00503         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00504         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00505         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00506         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00507         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00508         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00509         ;
                      (      drivers.asm):00510         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00511         ;
                      (      drivers.asm):00512         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00513         ;                   (A) May be destroyed
                      (      drivers.asm):00514         ;                   (B) = Error condition
                      (      drivers.asm):00515         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00516         ;                       = 0 if not ready
                      (      drivers.asm):00517         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00518         ;                       = 1 if not ready
                      (      drivers.asm):00519         ;_____________________________________________________________________________________________________
DF77                  (      drivers.asm):00520         CHKRDY
DF77 A603             (      drivers.asm):00521 [4+1]                   LDA     3,X
DF79 8101             (      drivers.asm):00522 [2]                     CMPA    #$01
DF7B 2708             (      drivers.asm):00523 [3]                     BEQ     CHKRDYFLOPPY
DF7D 8102             (      drivers.asm):00524 [2]                     CMPA    #$02
DF7F 2706             (      drivers.asm):00525 [3]                     BEQ     CHKRDYIDE
DF81 C61F             (      drivers.asm):00526 [2]     CHKRDYERR:      LDB     #$1F
DF83 57               (      drivers.asm):00527 [2]                     ASRB
DF84 39               (      drivers.asm):00528 [5]                     RTS
DF85                  (      drivers.asm):00529         CHKRDYFLOPPY:
DF85 20FA             (      drivers.asm):00530 [3]                     BRA     CHKRDYERR
DF87                  (      drivers.asm):00531         CHKRDYIDE:
DF87 C600             (      drivers.asm):00532 [2]                     LDB     #$00
DF89 39               (      drivers.asm):00533 [5]                     RTS
                      (      drivers.asm):00534         
                      (      drivers.asm):00535         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00536         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00537         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00538         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00539         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00540         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00541         ;_____________________________________________________________________________________________________
DF8A A603             (      drivers.asm):00542 [4+1]   QUICK           LDA     3,X
DF8C 8101             (      drivers.asm):00543 [2]                     CMPA    #$01
DF8E 2708             (      drivers.asm):00544 [3]                     BEQ     QUICKFLOPPY
DF90 8102             (      drivers.asm):00545 [2]                     CMPA    #$02
DF92 2706             (      drivers.asm):00546 [3]                     BEQ     QUICKIDE
DF94 C61F             (      drivers.asm):00547 [2]     QUICKERR:       LDB     #$1F
DF96 57               (      drivers.asm):00548 [2]                     ASRB
DF97 39               (      drivers.asm):00549 [5]                     RTS
DF98                  (      drivers.asm):00550         QUICKFLOPPY:
DF98 20FA             (      drivers.asm):00551 [3]                     BRA     QUICKERR
DF9A                  (      drivers.asm):00552         QUICKIDE:
DF9A C600             (      drivers.asm):00553 [2]                     LDB     #$00
DF9C 39               (      drivers.asm):00554 [5]                     RTS
                      (      drivers.asm):00555         
                      (      drivers.asm):00556         
                      (      drivers.asm):00557         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00558         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00559         
DF9D                  (      drivers.asm):00560         PRTHEXBYTE:
DF9D 3402             (      drivers.asm):00561 [5+1]                   PSHS    A
DF9F BDCFD8           (      drivers.asm):00562 [8]                     JSR     $cfd8       ; OUTHL       OUTPUT IT
DFA2 3502             (      drivers.asm):00563 [5+1]                   PULS    A
DFA4 BDCFDC           (      drivers.asm):00564 [8]                     JSR     $CFDC       ; OUTHR
DFA7 39               (      drivers.asm):00565 [5]                     RTS
                      (      drivers.asm):00566         
                      (      drivers.asm):00567         
                      (      drivers.asm):00568         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00569                         INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       =       $FE60           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         =       PPIDE_PPI+0     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         =       PPIDE_PPI+1     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      =       PPIDE_PPI+2     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       =       PPIDE_PPI+3     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   =       $01             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   =       $02             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   =       $04             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  =       $08             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  =       $10             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   =       $20             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   =       $40             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  =       $80             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA      =       PPIDE_CS0_LINE
     0008             (   flexidedrv.asm):00028         PPIDE_ERR       =       PPIDE_CS0_LINE + PPIDE_A0_LINE
     0008             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   =       PPIDE_CS0_LINE + PPIDE_A1_LINE
     0008             (   flexidedrv.asm):00030         PPIDE_LBALOW    =       PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
     0008             (   flexidedrv.asm):00031         PPIDE_LBAMID    =       PPIDE_CS0_LINE + PPIDE_A2_LINE
     0008             (   flexidedrv.asm):00032         PPIDE_LBAHI     =       PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
     0008             (   flexidedrv.asm):00033         PPIDE_DEVICE    =       PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
     0008             (   flexidedrv.asm):00034         PPIDE_COMMAND   =       PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
     0008             (   flexidedrv.asm):00035         PPIDE_STATUS    =       PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
     0010             (   flexidedrv.asm):00036         PPIDE_CONTROL   =       PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
     0010             (   flexidedrv.asm):00037         PPIDE_ASTATUS   =       PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL =       $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  =       $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE =       $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  =       $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    =       $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN=     $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP=       $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   =       %10010010       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   =       %10000000       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DFA8 00               (   flexidedrv.asm):00054         PPIDEINDEX:     .BYTE   $00
DFA9 0000             (   flexidedrv.asm):00055         PPIDETIMEOUT:   .BYTE   $00,$00
                      (   flexidedrv.asm):00056         
                      (   flexidedrv.asm):00057         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00058         ;
                      (   flexidedrv.asm):00059         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00060         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00061         ;
DFAB                  (   flexidedrv.asm):00062         PPIDE_INIT:
                      (   flexidedrv.asm):00063          ;;       PRTDBG "PPIDE INIT:$"
                      (   flexidedrv.asm):00064         
DFAB 8EE2FE           (   flexidedrv.asm):00065 [3]             LDX     #MESSAGE1
DFAE BDCD1E           (   flexidedrv.asm):00066 [8]             JSR     >PSTRNG         ; DO PROMPT
DFB1 BDCD24           (   flexidedrv.asm):00067 [8]             JSR     >PRCRLF         ; AND CRLF
DFB4 BDE0AC           (   flexidedrv.asm):00068 [8]                 JSR     IDE_PPIDETECT       ; TEST FOR PPI HARDWARE
DFB7 261C             (   flexidedrv.asm):00069 [3]             BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00070         ;
DFB9 8EE307           (   flexidedrv.asm):00071 [3]             LDX     #MESSAGE2
DFBC BDCD1E           (   flexidedrv.asm):00072 [8]             JSR     >PSTRNG         ; DO PROMPT
DFBF CCFE60           (   flexidedrv.asm):00073 [3]                 LDD     #PPIDE_PPI      ; GET BASE PORT
DFC2 BDDF9D           (   flexidedrv.asm):00074 [8]                 JSR     PRTHEXBYTE          ; PRINT BASE PORT
DFC5 1F98             (   flexidedrv.asm):00075 [6]             TFR     B,A
DFC7 BDDF9D           (   flexidedrv.asm):00076 [8]                 JSR     PRTHEXBYTE          ; PRINT BASE PORT
                      (   flexidedrv.asm):00077         ;
DFCA BDE186           (   flexidedrv.asm):00078 [8]                 JSR     PPIDE_RESET         ; RESET THE BUS
DFCD BDDFFB           (   flexidedrv.asm):00079 [8]                 JSR     PPIDE_PROBE         ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
DFD0 2503             (   flexidedrv.asm):00080 [3]                 BCS         IDE_ABORT
DFD2 7EDFDE           (   flexidedrv.asm):00081 [4]                 JMP         IDE_PRINT_INFO
DFD5                  (   flexidedrv.asm):00082         IDE_ABORT:
DFD5 8EE30F           (   flexidedrv.asm):00083 [3]             LDX     #MESSAGE3
DFD8 BDCD1E           (   flexidedrv.asm):00084 [8]             JSR     >PSTRNG         ; DO PROMPT
DFDB 7EDFF7           (   flexidedrv.asm):00085 [4]                 JMP         IDE_INITA
DFDE                  (   flexidedrv.asm):00086         IDE_PRINT_INFO:
DFDE BDCD24           (   flexidedrv.asm):00087 [8]                 JSR     >PRCRLF         ; AND CRLF
DFE1 8EE31D           (   flexidedrv.asm):00088 [3]             LDX     #MESSAGE4
DFE4 BDCD1E           (   flexidedrv.asm):00089 [8]             JSR     >PSTRNG         ; DO PROMPT
DFE7 8600             (   flexidedrv.asm):00090 [2]                 LDA     #$00
DFE9 BDE046           (   flexidedrv.asm):00091 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
DFEC 8EE32F           (   flexidedrv.asm):00092 [3]             LDX     #MESSAGE5
DFEF BDCD1E           (   flexidedrv.asm):00093 [8]             JSR     >PSTRNG         ; DO PROMPT
DFF2 8601             (   flexidedrv.asm):00094 [2]                 LDA     #$01
DFF4 BDE046           (   flexidedrv.asm):00095 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
DFF7                  (   flexidedrv.asm):00096         IDE_INITA:
DFF7 BDCD24           (   flexidedrv.asm):00097 [8]                 JSR     >PRCRLF         ; AND CRLF
DFFA 39               (   flexidedrv.asm):00098 [5]                 RTS                                 ; DONE
                      (   flexidedrv.asm):00099         ;
                      (   flexidedrv.asm):00100         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00101         ;
                      (   flexidedrv.asm):00102         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00103         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00104         ;
DFFB                  (   flexidedrv.asm):00105         PPIDE_PROBE:
                      (   flexidedrv.asm):00106         ;
                      (   flexidedrv.asm):00107                 ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00108                 ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00109                 ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00110                 ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00111                 ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00112                 ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00113                 ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00114                 ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00115         
DFFB 8600             (   flexidedrv.asm):00116 [2]             LDA     #$00
DFFD B7FE60           (   flexidedrv.asm):00117 [5]             STA     PPIDELO                 ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00118         
E000 BDE1B1           (   flexidedrv.asm):00119 [8]             JSR         IDE_WAIT_NOT_BUSY   ; WAIT FOR BUSY TO CLEAR
E003 253E             (   flexidedrv.asm):00120 [3]             BCS     PPIDE_PROBE_FAIL        ; IF TIMEOUT, REPORT NO IDE PRESENT
E005 8608             (   flexidedrv.asm):00121 [2]             LDA         #PPIDE_STATUS               ; GET STATUS
E007 BDE2A8           (   flexidedrv.asm):00122 [8]             JSR         IDE_READ
E00A 1F18             (   flexidedrv.asm):00123 [6]         TFR     X,A
E00C 8440             (   flexidedrv.asm):00124 [2]             ANDA    #%01000000
E00E 8100             (   flexidedrv.asm):00125 [2]             CMPA    #$00
E010 2731             (   flexidedrv.asm):00126 [3]             BEQ     PPIDE_PROBE_FAIL        ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00127         
                      (   flexidedrv.asm):00128                 ; CHECK SIGNATURE
E012 8608             (   flexidedrv.asm):00129 [2]             LDA         #PPIDE_SEC_CNT
E014 BDE2A8           (   flexidedrv.asm):00130 [8]             JSR         IDE_READ
E017 1F18             (   flexidedrv.asm):00131 [6]         TFR     X,A
E019 8101             (   flexidedrv.asm):00132 [2]             CMPA    #$01
E01B 2626             (   flexidedrv.asm):00133 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E01D 8608             (   flexidedrv.asm):00134 [2]             LDA         #PPIDE_LBALOW
E01F BDE2A8           (   flexidedrv.asm):00135 [8]             JSR         IDE_READ
E022 1F18             (   flexidedrv.asm):00136 [6]         TFR     X,A
E024 8101             (   flexidedrv.asm):00137 [2]             CMPA    #$01
E026 261B             (   flexidedrv.asm):00138 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E028 8608             (   flexidedrv.asm):00139 [2]             LDA         #PPIDE_LBAMID
E02A BDE2A8           (   flexidedrv.asm):00140 [8]             JSR         IDE_READ
E02D 1F18             (   flexidedrv.asm):00141 [6]         TFR     X,A
E02F 8100             (   flexidedrv.asm):00142 [2]             CMPA    #$00
E031 2610             (   flexidedrv.asm):00143 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E033 8608             (   flexidedrv.asm):00144 [2]             LDA         #PPIDE_LBAHI
E035 BDE2A8           (   flexidedrv.asm):00145 [8]             JSR         IDE_READ
E038 1F18             (   flexidedrv.asm):00146 [6]         TFR     X,A
E03A 8100             (   flexidedrv.asm):00147 [2]             CMPA    #$00
E03C 2605             (   flexidedrv.asm):00148 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E03E 1CFE             (   flexidedrv.asm):00149 [3]             CLC
E040 7EE045           (   flexidedrv.asm):00150 [4]             JMP     PPIDE_PROBE_SUCCESS
E043                  (   flexidedrv.asm):00151         PPIDE_PROBE_FAIL:
E043 1A01             (   flexidedrv.asm):00152 [3]             SEC
E045                  (   flexidedrv.asm):00153         PPIDE_PROBE_SUCCESS:
E045 39               (   flexidedrv.asm):00154 [5]             RTS                                     ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00155         
                      (   flexidedrv.asm):00156         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00157         ;*
                      (   flexidedrv.asm):00158         ;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00159         ;*      CARRY SET ON ERROR
                      (   flexidedrv.asm):00160         ;*      A=MST/SLV
                      (   flexidedrv.asm):00161         ;*____________________________________________________________________________________________________
E046                  (   flexidedrv.asm):00162         IDE_READ_INFO:
                      (   flexidedrv.asm):00163                 ;       PRTDBG "IDE READ INFORMATION$"
E046 3402             (   flexidedrv.asm):00164 [5+1]           PSHS    A
E048 3402             (   flexidedrv.asm):00165 [5+1]           PSHS    A
                      (   flexidedrv.asm):00166                         ; SET DRIVE BIT
E04A 8401             (   flexidedrv.asm):00167 [2]                     ANDA    #$01                    ; ONLY WANT THE 1 BIT (MST/SLV)
E04C 48               (   flexidedrv.asm):00168 [2]                     ASLA                            ; SHIFT 4
E04D 48               (   flexidedrv.asm):00169 [2]                     ASLA                            ;
E04E 48               (   flexidedrv.asm):00170 [2]                     ASLA                            ;
E04F 48               (   flexidedrv.asm):00171 [2]                     ASLA                            ;
E050 8AE0             (   flexidedrv.asm):00172 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E052 8E0000           (   flexidedrv.asm):00173 [3]             LDX     #$0000
E055 1F81             (   flexidedrv.asm):00174 [6]             TFR     A,X
E057 8608             (   flexidedrv.asm):00175 [2]                     LDA         #PPIDE_DEVICE
E059 BDE2CA           (   flexidedrv.asm):00176 [8]                     JSR         IDE_WRITE
E05C BDE1B1           (   flexidedrv.asm):00177 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E05F 2533             (   flexidedrv.asm):00178 [3]                     BCS         IDE_READ_INFO_ABORT
E061 8608             (   flexidedrv.asm):00179 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E063 8E00EC           (   flexidedrv.asm):00180 [3]                     LDX         #PPIDE_CMD_ID
E066 BDE2CA           (   flexidedrv.asm):00181 [8]                     JSR         IDE_WRITE           ;ASK THE DRIVE TO READ IT
E069 BDE1DA           (   flexidedrv.asm):00182 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E06C 2526             (   flexidedrv.asm):00183 [3]                     BCS         IDE_READ_INFO_ABORT
E06E BDE20A           (   flexidedrv.asm):00184 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E071 8EE341           (   flexidedrv.asm):00185 [3]             LDX     #MESSAGE6
E074 BDCD1E           (   flexidedrv.asm):00186 [8]             JSR     >PSTRNG         DO PROMPT
E077 B6E3C6           (   flexidedrv.asm):00187 [5]                     LDA     HSTBUF+123
E07A BDDF9D           (   flexidedrv.asm):00188 [8]                     JSR     PRTHEXBYTE
E07D B6E3C5           (   flexidedrv.asm):00189 [5]                     LDA     HSTBUF+122
E080 BDDF9D           (   flexidedrv.asm):00190 [8]                     JSR     PRTHEXBYTE
E083 B6E3C4           (   flexidedrv.asm):00191 [5]                     LDA     HSTBUF+121
E086 BDDF9D           (   flexidedrv.asm):00192 [8]                     JSR     PRTHEXBYTE
E089 B6E3C3           (   flexidedrv.asm):00193 [5]                     LDA     HSTBUF+120
E08C BDDF9D           (   flexidedrv.asm):00194 [8]                     JSR     PRTHEXBYTE
E08F 3502             (   flexidedrv.asm):00195 [5+1]                   PULS    A
E091 7EE0A4           (   flexidedrv.asm):00196 [4]                     JMP     IDE_READ_INFO_OK
E094                  (   flexidedrv.asm):00197         IDE_READ_INFO_ABORT:
E094 3502             (   flexidedrv.asm):00198 [5+1]                   PULS    A
E096 8EE30F           (   flexidedrv.asm):00199 [3]             LDX     #MESSAGE3
E099 BDCD1E           (   flexidedrv.asm):00200 [8]             JSR     >PSTRNG         DO PROMPT
E09C BDCD24           (   flexidedrv.asm):00201 [8]                     JSR     >PRCRLF         AND CRLF
E09F 3502             (   flexidedrv.asm):00202 [5+1]                   PULS    A
E0A1 1A01             (   flexidedrv.asm):00203 [3]                     SEC
E0A3 39               (   flexidedrv.asm):00204 [5]                     RTS                             ;
E0A4                  (   flexidedrv.asm):00205         IDE_READ_INFO_OK:
E0A4 BDCD24           (   flexidedrv.asm):00206 [8]                     JSR     >PRCRLF         AND CRLF
E0A7 3502             (   flexidedrv.asm):00207 [5+1]                   PULS    A
E0A9 1CFE             (   flexidedrv.asm):00208 [3]                     CLC
E0AB 39               (   flexidedrv.asm):00209 [5]                     RTS
                      (   flexidedrv.asm):00210         
                      (   flexidedrv.asm):00211         
                      (   flexidedrv.asm):00212         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00213         ;
                      (   flexidedrv.asm):00214         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00215         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00216         ;
E0AC                  (   flexidedrv.asm):00217         IDE_PPIDETECT:
                      (   flexidedrv.asm):00218         ;
                      (   flexidedrv.asm):00219                 ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00220                 ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00221                 ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00222                 ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00223                 ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00224                 ; INTERFERE WITH THE VALUE BEING READ.
E0AC BDE2F5           (   flexidedrv.asm):00225 [8]             JSR         SET_PPI_WR
                      (   flexidedrv.asm):00226         ;
E0AF 8600             (   flexidedrv.asm):00227 [2]             LDA     #$00                    ; VALUE ZERO
E0B1 B7FE60           (   flexidedrv.asm):00228 [5]             STA         PPIDELO                     ; PUSH VALUE TO PORT
E0B4 B6FE60           (   flexidedrv.asm):00229 [5]             LDA         PPIDELO                     ; GET PORT VALUE
E0B7 8100             (   flexidedrv.asm):00230 [2]         CMPA    #$00
E0B9 39               (   flexidedrv.asm):00231 [5]             RTS                             ; AND RETURN
                      (   flexidedrv.asm):00232         ;
                      (   flexidedrv.asm):00233         
                      (   flexidedrv.asm):00234         
                      (   flexidedrv.asm):00235         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00236         ;*
                      (   flexidedrv.asm):00237         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00238         ;*
                      (   flexidedrv.asm):00239         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00240         ;                   (A) = Track Number
                      (   flexidedrv.asm):00241         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00242         ;
                      (   flexidedrv.asm):00243         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00244         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00245         ;                   (B) = Error condition
                      (   flexidedrv.asm):00246         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00247         ;                       = 0 if an error
                      (   flexidedrv.asm):00248         ;*____________________________________________________________________________________________________
E0BA                  (   flexidedrv.asm):00249         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00250                 ;       PRTDBG "IDE READ SECTOR$"
E0BA 3420             (   flexidedrv.asm):00251 [5+2]           PSHS    Y
E0BC 3410             (   flexidedrv.asm):00252 [5+2]           PSHS    X
E0BE 1F92             (   flexidedrv.asm):00253 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E0C0 BDE0E0           (   flexidedrv.asm):00254 [8]                     JSR     IDE_READ_RAW_SECTOR
E0C3 3510             (   flexidedrv.asm):00255 [5+2]           PULS    X
E0C5 2617             (   flexidedrv.asm):00256 [3]             BNE     IDE_READ_SECTOR_ERROR
                      (   flexidedrv.asm):00257         
E0C7 1F28             (   flexidedrv.asm):00258 [6]             TFR     Y,A
E0C9 8401             (   flexidedrv.asm):00259 [2]             ANDA    #$01
E0CB C600             (   flexidedrv.asm):00260 [2]             LDB     #$00
E0CD 1F02             (   flexidedrv.asm):00261 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E0CF C600             (   flexidedrv.asm):00262 [2]             LDB     #$00                   ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00263         !
E0D1 A6A9E34B         (   flexidedrv.asm):00264 [4+4]           LDA     HSTBUF,Y
E0D5 A780             (   flexidedrv.asm):00265 [4+2]           STA     ,X+
E0D7 3121             (   flexidedrv.asm):00266 [5]             INY
E0D9 5C               (   flexidedrv.asm):00267 [2]             INCB
E0DA C100             (   flexidedrv.asm):00268 [2]             CMPB    #$00
E0DC 26F3             (   flexidedrv.asm):00269 [3]             BNE <
E0DE                  (   flexidedrv.asm):00270         IDE_READ_SECTOR_ERROR:
E0DE 35A0             (   flexidedrv.asm):00271 [5+4]           PULS    PC,Y
                      (   flexidedrv.asm):00272         
E0E0                  (   flexidedrv.asm):00273         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00274                 ;       PRTDBG "IDE READ RAW SECTOR$"
E0E0 BDE284           (   flexidedrv.asm):00275 [8]                     JSR         IDE_CONVERT_SECTOR  ;
E0E3 B6E34A           (   flexidedrv.asm):00276 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E0E6 B1E347           (   flexidedrv.asm):00277 [5]                     CMPA    CDEBSEHD                ;
E0E9 2613             (   flexidedrv.asm):00278 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E0EB B6E349           (   flexidedrv.asm):00279 [5]                     LDA         DEBCYLM                     ;
E0EE B1E346           (   flexidedrv.asm):00280 [5]                     CMPA    CDEBCYLM                ;
E0F1 260B             (   flexidedrv.asm):00281 [3]                     BNE         IDE_READ_SECTOR_DIRTY
E0F3 B6E348           (   flexidedrv.asm):00282 [5]                     LDA         DEBCYLL                     ;
E0F6 B1E345           (   flexidedrv.asm):00283 [5]                     CMPA    CDEBCYLL                ;
E0F9 2603             (   flexidedrv.asm):00284 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E0FB C600             (   flexidedrv.asm):00285 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E0FD 39               (   flexidedrv.asm):00286 [5]                     RTS
                      (   flexidedrv.asm):00287         
E0FE                  (   flexidedrv.asm):00288         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00289                 ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E0FE BDE1B1           (   flexidedrv.asm):00290 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E101 2528             (   flexidedrv.asm):00291 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E103                  (   flexidedrv.asm):00292         IDE_READ_SECTOR_DIRTY1:
E103 BDE248           (   flexidedrv.asm):00293 [8]                     JSR         IDE_SETUP_LBA               ;TELL IT WHICH SECTOR WE WANT
E106 8608             (   flexidedrv.asm):00294 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E108 8E0020           (   flexidedrv.asm):00295 [3]                     LDX         #PPIDE_CMD_READ
E10B BDE2CA           (   flexidedrv.asm):00296 [8]                     JSR         IDE_WRITE                   ;ASK THE DRIVE TO READ IT
E10E BDE1DA           (   flexidedrv.asm):00297 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E111 2518             (   flexidedrv.asm):00298 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E113 BDE20A           (   flexidedrv.asm):00299 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E116 B6E34A           (   flexidedrv.asm):00300 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E119 B7E347           (   flexidedrv.asm):00301 [5]                     STA         CDEBSEHD            ;
E11C B6E348           (   flexidedrv.asm):00302 [5]                     LDA         DEBCYLL                     ;
E11F B7E345           (   flexidedrv.asm):00303 [5]                     STA         CDEBCYLL            ;
E122 B6E349           (   flexidedrv.asm):00304 [5]                     LDA         DEBCYLM                     ;
E125 B7E346           (   flexidedrv.asm):00305 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00306         
E128 C600             (   flexidedrv.asm):00307 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E12A 39               (   flexidedrv.asm):00308 [5]                     RTS
E12B                  (   flexidedrv.asm):00309         IDE_READ_SECTOR_DIRTY_ERROR:
E12B C60F             (   flexidedrv.asm):00310 [2]                     LDB         #$0F                        ; SET ERROR CONDITION
E12D 39               (   flexidedrv.asm):00311 [5]                     RTS
                      (   flexidedrv.asm):00312         
                      (   flexidedrv.asm):00313         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00314         ;*
                      (   flexidedrv.asm):00315         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00316         ;*
                      (   flexidedrv.asm):00317         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00318         ;                   (A) = Track Number
                      (   flexidedrv.asm):00319         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00320         ;
                      (   flexidedrv.asm):00321         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00322         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00323         ;                   (B) = Error condition
                      (   flexidedrv.asm):00324         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00325         ;                       = 0 if an error
                      (   flexidedrv.asm):00326         ;*____________________________________________________________________________________________________
E12E                  (   flexidedrv.asm):00327         IDE_WRITE_SECTOR:
E12E 3420             (   flexidedrv.asm):00328 [5+2]           PSHS    Y
                      (   flexidedrv.asm):00329         
E130 3410             (   flexidedrv.asm):00330 [5+2]           PSHS    X
E132 1F92             (   flexidedrv.asm):00331 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00332         
                      (   flexidedrv.asm):00333                 ;       PRTDBG "IDE WRITE SECTOR$"
E134 BDE0E0           (   flexidedrv.asm):00334 [8]                     JSR         IDE_READ_RAW_SECTOR     ; DETERMINE PHYSICAL SECTOR
E137 2640             (   flexidedrv.asm):00335 [3]             BNE     IDE_WRITE_SECTOR_ERROR
                      (   flexidedrv.asm):00336         
E139 1F28             (   flexidedrv.asm):00337 [6]             TFR     Y,A
E13B 8401             (   flexidedrv.asm):00338 [2]             ANDA    #$01
E13D C600             (   flexidedrv.asm):00339 [2]             LDB     #$00
E13F 1F02             (   flexidedrv.asm):00340 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E141 C600             (   flexidedrv.asm):00341 [2]             LDB     #$00                   ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00342         !
E143 A680             (   flexidedrv.asm):00343 [4+2]           LDA     ,X+
E145 A7A9E34B         (   flexidedrv.asm):00344 [4+4]           STA     HSTBUF,Y
E149 3121             (   flexidedrv.asm):00345 [5]             INY
E14B 5C               (   flexidedrv.asm):00346 [2]             INCB
E14C C100             (   flexidedrv.asm):00347 [2]             CMPB    #$00
E14E 26F3             (   flexidedrv.asm):00348 [3]             BNE <
                      (   flexidedrv.asm):00349         
E150 BDE1B1           (   flexidedrv.asm):00350 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E153 2524             (   flexidedrv.asm):00351 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E155 8608             (   flexidedrv.asm):00352 [2]                     LDA         #PPIDE_COMMAND
E157 8E0030           (   flexidedrv.asm):00353 [3]                     LDX         #PPIDE_CMD_WRITE
E15A BDE2CA           (   flexidedrv.asm):00354 [8]                     JSR         IDE_WRITE           ;TELL DRIVE TO WRITE A SECTOR
E15D BDE1DA           (   flexidedrv.asm):00355 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNIT IT WANTS THE DATA
E160 2517             (   flexidedrv.asm):00356 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E162 BDE229           (   flexidedrv.asm):00357 [8]                     JSR         IDE_WRITE_BUFFER    ;GIVE THE DATA TO THE DRIVE
E165 BDE1B1           (   flexidedrv.asm):00358 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;WAIT UNTIL THE WRITE IS COMPLETE
E168 250F             (   flexidedrv.asm):00359 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E16A 86FF             (   flexidedrv.asm):00360 [2]                     LDA         #$FF                        ; STORE CURRENT PARMS
E16C B7E347           (   flexidedrv.asm):00361 [5]                     STA         CDEBSEHD            ;
E16F B7E345           (   flexidedrv.asm):00362 [5]                     STA         CDEBCYLL            ;
E172 B7E346           (   flexidedrv.asm):00363 [5]                     STA         CDEBCYLM            ;
E175 C600             (   flexidedrv.asm):00364 [2]                     LDB         #$00                        ; ZERO ON RETURN = OPERATION OK
E177 35A0             (   flexidedrv.asm):00365 [5+4]                   PULS    PC,Y
E179                  (   flexidedrv.asm):00366         IDE_WRITE_SECTOR_ERROR:
E179 C6FF             (   flexidedrv.asm):00367 [2]                     LDB         #$FF                        ; 1 ON RETURN = OPERATION FAIL
E17B F7E347           (   flexidedrv.asm):00368 [5]             STB         CDEBSEHD            ;
E17E F7E345           (   flexidedrv.asm):00369 [5]                     STB         CDEBCYLL            ;
E181 F7E346           (   flexidedrv.asm):00370 [5]                     STB         CDEBCYLM            ;
E184 35A0             (   flexidedrv.asm):00371 [5+4]                   PULS    PC,Y
                      (   flexidedrv.asm):00372         
                      (   flexidedrv.asm):00373         ;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00374         ;*
                      (   flexidedrv.asm):00375         ;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00376         ;*
                      (   flexidedrv.asm):00377         ;*____________________________________________________________________________________________________
E186                  (   flexidedrv.asm):00378         PPIDE_RESET:
                      (   flexidedrv.asm):00379           ;     PRTDBG "IDE RESET$"
E186 8600             (   flexidedrv.asm):00380 [2]                     LDA         #$00
E188 B7E34A           (   flexidedrv.asm):00381 [5]                     STA         DEBSEHD
E18B B7E348           (   flexidedrv.asm):00382 [5]                     STA         DEBCYLL
E18E B7E349           (   flexidedrv.asm):00383 [5]                     STA         DEBCYLM
E191 86FF             (   flexidedrv.asm):00384 [2]                     LDA         #$FF                        ;
E193 B7E347           (   flexidedrv.asm):00385 [5]                     STA         CDEBSEHD            ;
E196 B7E345           (   flexidedrv.asm):00386 [5]                     STA         CDEBCYLL            ;
E199 B7E346           (   flexidedrv.asm):00387 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00388         
E19C 8680             (   flexidedrv.asm):00389 [2]                     LDA         #PPIDE_RST_LINE
E19E B7FE62           (   flexidedrv.asm):00390 [5]                     STA         PPIDECNTRL                  ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00391         
E1A1 8E0100           (   flexidedrv.asm):00392 [3]                     LDX         #$0100
                      (   flexidedrv.asm):00393         ;       PRTDBG "IDE RESET DELAY$"
E1A4                  (   flexidedrv.asm):00394         RST_DLY:
E1A4 301F             (   flexidedrv.asm):00395 [5]                     DEX
E1A6 8C0000           (   flexidedrv.asm):00396 [4]                     CPX         #$0000
E1A9 26F9             (   flexidedrv.asm):00397 [3]                     BNE         RST_DLY
E1AB 8600             (   flexidedrv.asm):00398 [2]                     LDA         #$00
E1AD B7FE62           (   flexidedrv.asm):00399 [5]                     STA         PPIDECNTRL                  ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00400         
                      (   flexidedrv.asm):00401         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00402         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00403         ;       .IF (USEDSKYNG=1)
                      (   flexidedrv.asm):00404         ;       JSR     DSKY_REINIT
                      (   flexidedrv.asm):00405         ;       .ENDIF
                      (   flexidedrv.asm):00406         
E1B0 39               (   flexidedrv.asm):00407 [5]                     RTS
                      (   flexidedrv.asm):00408         
                      (   flexidedrv.asm):00409         
                      (   flexidedrv.asm):00410         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00411         ;*
                      (   flexidedrv.asm):00412         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00413         ;*
                      (   flexidedrv.asm):00414         ;*____________________________________________________________________________________________________
E1B1                  (   flexidedrv.asm):00415         IDE_WAIT_NOT_BUSY:
E1B1 3412             (   flexidedrv.asm):00416 [5+3]                   PSHS    X,A
E1B3 8600             (   flexidedrv.asm):00417 [2]                     LDA     #$00
E1B5 B7DFA9           (   flexidedrv.asm):00418 [5]                     STA     PPIDETIMEOUT
E1B8 B7DFAA           (   flexidedrv.asm):00419 [5]                     STA     PPIDETIMEOUT+1
E1BB                  (   flexidedrv.asm):00420         IDE_WAIT_NOT_BUSY1:
E1BB 8608             (   flexidedrv.asm):00421 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR RDY BIT TO BE SET
E1BD BDE2A8           (   flexidedrv.asm):00422 [8]                     JSR         IDE_READ
E1C0 1F18             (   flexidedrv.asm):00423 [6]             TFR     X,A
E1C2 8480             (   flexidedrv.asm):00424 [2]                     ANDA    #$80
E1C4 270F             (   flexidedrv.asm):00425 [3]                     BEQ         IDE_WAIT_NOT_BUSY2
E1C6 7CDFA9           (   flexidedrv.asm):00426 [7]                     INC     PPIDETIMEOUT
E1C9 26F0             (   flexidedrv.asm):00427 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1CB 7CDFAA           (   flexidedrv.asm):00428 [7]                     INC     PPIDETIMEOUT+1
E1CE 26EB             (   flexidedrv.asm):00429 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1D0 1A01             (   flexidedrv.asm):00430 [3]                     SEC
E1D2 7EE1D7           (   flexidedrv.asm):00431 [4]                     JMP         IDE_WAIT_NOT_BUSY3
E1D5                  (   flexidedrv.asm):00432         IDE_WAIT_NOT_BUSY2:
E1D5 1CFE             (   flexidedrv.asm):00433 [3]                     CLC
E1D7                  (   flexidedrv.asm):00434         IDE_WAIT_NOT_BUSY3:
E1D7 3592             (   flexidedrv.asm):00435 [5+5]           PULS    PC,X,A
E1D9 39               (   flexidedrv.asm):00436 [5]                     RTS
                      (   flexidedrv.asm):00437         
                      (   flexidedrv.asm):00438         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00439         ;*
                      (   flexidedrv.asm):00440         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00441         ;*
                      (   flexidedrv.asm):00442         ;*____________________________________________________________________________________________________
E1DA                  (   flexidedrv.asm):00443         IDE_WAIT_DRQ:
E1DA 3432             (   flexidedrv.asm):00444 [5+5]           PSHS    A,X,Y
E1DC 8600             (   flexidedrv.asm):00445 [2]                     LDA     #$00
E1DE B7DFA9           (   flexidedrv.asm):00446 [5]                     STA     PPIDETIMEOUT
E1E1 B7DFAA           (   flexidedrv.asm):00447 [5]                     STA     PPIDETIMEOUT+1
E1E4                  (   flexidedrv.asm):00448         IDE_WAIT_DRQ1:
E1E4 8608             (   flexidedrv.asm):00449 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR DRQ BIT TO BE SET
E1E6 BDE2A8           (   flexidedrv.asm):00450 [8]                     JSR         IDE_READ
E1E9 1F18             (   flexidedrv.asm):00451 [6]                     TFR     X,A
E1EB 8488             (   flexidedrv.asm):00452 [2]                     ANDA    #%10001000              ; MASK OFF BUSY(7) AND DRQ(3)
E1ED 8108             (   flexidedrv.asm):00453 [2]                     CMPA    #%00001000              ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E1EF 2715             (   flexidedrv.asm):00454 [3]                     BEQ         IDE_WAIT_DRQ2
E1F1 8401             (   flexidedrv.asm):00455 [2]                     ANDA    #%00000001              ; IS ERROR?
E1F3 8101             (   flexidedrv.asm):00456 [2]                     CMPA    #%00000001              ;
E1F5 270A             (   flexidedrv.asm):00457 [3]                     BEQ     IDE_WAIT_DRQE
E1F7 7CDFA9           (   flexidedrv.asm):00458 [7]                     INC     PPIDETIMEOUT
E1FA 26E8             (   flexidedrv.asm):00459 [3]                     BNE     IDE_WAIT_DRQ1
E1FC 7CDFAA           (   flexidedrv.asm):00460 [7]                     INC     PPIDETIMEOUT+1
E1FF 26E3             (   flexidedrv.asm):00461 [3]                     BNE     IDE_WAIT_DRQ1
E201                  (   flexidedrv.asm):00462         IDE_WAIT_DRQE:
E201 1A01             (   flexidedrv.asm):00463 [3]                     SEC
E203 7EE208           (   flexidedrv.asm):00464 [4]                     JMP     IDE_WAIT_DRQ3
E206                  (   flexidedrv.asm):00465         IDE_WAIT_DRQ2:
E206 1CFE             (   flexidedrv.asm):00466 [3]                     CLC
E208                  (   flexidedrv.asm):00467         IDE_WAIT_DRQ3:
E208 35B2             (   flexidedrv.asm):00468 [5+7]           PULS    PC,A,X,Y
                      (   flexidedrv.asm):00469         
                      (   flexidedrv.asm):00470         
                      (   flexidedrv.asm):00471         
                      (   flexidedrv.asm):00472         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00473         ;*
                      (   flexidedrv.asm):00474         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00475         ;*
                      (   flexidedrv.asm):00476         ;*____________________________________________________________________________________________________
E20A                  (   flexidedrv.asm):00477         IDE_READ_BUFFER:
E20A 108E0000         (   flexidedrv.asm):00478 [4]                     LDY     #$0000                  ; INDEX
E20E                  (   flexidedrv.asm):00479         IDEBUFRD:
E20E 8608             (   flexidedrv.asm):00480 [2]                     LDA         #PPIDE_DATA
E210 BDE2A8           (   flexidedrv.asm):00481 [8]                     JSR         IDE_READ
E213 1F10             (   flexidedrv.asm):00482 [6]                     TFR     X,D
E215 A7A9E34B         (   flexidedrv.asm):00483 [4+4]                   STA         HSTBUF,Y            ;
E219 3121             (   flexidedrv.asm):00484 [5]             INY
E21B E7A9E34B         (   flexidedrv.asm):00485 [4+4]           STB         HSTBUF,Y            ;
E21F 3121             (   flexidedrv.asm):00486 [5]             INY
E221 1F21             (   flexidedrv.asm):00487 [6]             TFR     Y,X
E223 8C0200           (   flexidedrv.asm):00488 [4]                     CPX     #$0200                  ;
E226 26E6             (   flexidedrv.asm):00489 [3]                     BNE         IDEBUFRD            ;
E228 39               (   flexidedrv.asm):00490 [5]                     RTS                             ;
                      (   flexidedrv.asm):00491         
                      (   flexidedrv.asm):00492         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00493         ;*
                      (   flexidedrv.asm):00494         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00495         ;*
                      (   flexidedrv.asm):00496         ;*____________________________________________________________________________________________________
E229                  (   flexidedrv.asm):00497         IDE_WRITE_BUFFER:
E229 108E0000         (   flexidedrv.asm):00498 [4]                     LDY     #$0000                  ; INDEX
E22D                  (   flexidedrv.asm):00499         IDEBUFWT:
E22D A6A9E34B         (   flexidedrv.asm):00500 [4+4]                   LDA     HSTBUF,Y                ; SECTORS ARE BIG ENDIAN
E231 3121             (   flexidedrv.asm):00501 [5]                     INY                                     ;
E233 E6A9E34B         (   flexidedrv.asm):00502 [4+4]                   LDB     HSTBUF,Y                ; SECTORS ARE BIG ENDIAN
E237 3121             (   flexidedrv.asm):00503 [5]                     INY
E239 1F01             (   flexidedrv.asm):00504 [6]             TFR     D,X
E23B 8608             (   flexidedrv.asm):00505 [2]                     LDA         #PPIDE_DATA
E23D BDE2CA           (   flexidedrv.asm):00506 [8]                     JSR         IDE_WRITE
E240 1F21             (   flexidedrv.asm):00507 [6]             TFR     Y,X
E242 8C0200           (   flexidedrv.asm):00508 [4]                     CPX     #$0200                  ;
E245 26E6             (   flexidedrv.asm):00509 [3]                     BNE         IDEBUFWT            ;
E247 39               (   flexidedrv.asm):00510 [5]                     RTS                                     ;
                      (   flexidedrv.asm):00511         
                      (   flexidedrv.asm):00512         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00513         ;*
                      (   flexidedrv.asm):00514         ;*  SETUP LBA DATA
                      (   flexidedrv.asm):00515         ;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00516         ;*____________________________________________________________________________________________________
E248                  (   flexidedrv.asm):00517         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00518         ;               PRTDBG "PPIDE SETUP LBA$"
E248 B6DE20           (   flexidedrv.asm):00519 [5]             LDA     CURDRVADDRESS
E24B 8401             (   flexidedrv.asm):00520 [2]                     ANDA    #$01                    ; ONLY WANT DRIVE CFG
E24D 48               (   flexidedrv.asm):00521 [2]                     ASLA                                ; SHIFT 4
E24E 48               (   flexidedrv.asm):00522 [2]                     ASLA                                ;
E24F 48               (   flexidedrv.asm):00523 [2]                     ASLA                                ;
E250 48               (   flexidedrv.asm):00524 [2]                     ASLA                                ;
E251 8AE0             (   flexidedrv.asm):00525 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
                      (   flexidedrv.asm):00526         
E253 8E0000           (   flexidedrv.asm):00527 [3]             LDX     #$0000
E256 1F81             (   flexidedrv.asm):00528 [6]                     TFR     A,X
E258 8608             (   flexidedrv.asm):00529 [2]                     LDA         #PPIDE_DEVICE
E25A BDE2CA           (   flexidedrv.asm):00530 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00531         
E25D B6E349           (   flexidedrv.asm):00532 [5]                     LDA     DEBCYLM
E260 1F81             (   flexidedrv.asm):00533 [6]                     TFR     A,X
E262 8608             (   flexidedrv.asm):00534 [2]                     LDA         #PPIDE_LBAHI
E264 BDE2CA           (   flexidedrv.asm):00535 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00536         
E267 B6E348           (   flexidedrv.asm):00537 [5]                     LDA     DEBCYLL                 ;
E26A 1F81             (   flexidedrv.asm):00538 [6]                     TFR     A,X
E26C 8608             (   flexidedrv.asm):00539 [2]                     LDA         #PPIDE_LBAMID
E26E BDE2CA           (   flexidedrv.asm):00540 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00541         
E271 B6E34A           (   flexidedrv.asm):00542 [5]                     LDA     DEBSEHD                 ;
E274 1F81             (   flexidedrv.asm):00543 [6]                     TFR     A,X
E276 8608             (   flexidedrv.asm):00544 [2]                     LDA         #PPIDE_LBALOW
E278 BDE2CA           (   flexidedrv.asm):00545 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00546         
E27B 8E0001           (   flexidedrv.asm):00547 [3]                     LDX         #$0001
E27E 8608             (   flexidedrv.asm):00548 [2]                     LDA         #PPIDE_SEC_CNT
E280 BDE2CA           (   flexidedrv.asm):00549 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00550         
E283 39               (   flexidedrv.asm):00551 [5]                     RTS
                      (   flexidedrv.asm):00552         
                      (   flexidedrv.asm):00553         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00554         ;
                      (   flexidedrv.asm):00555         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00556         ;
                      (   flexidedrv.asm):00557         ;                   (A) = Track Number
                      (   flexidedrv.asm):00558         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00559         ;________________________________________________________________________________________________________
E284                  (   flexidedrv.asm):00560         IDE_CONVERT_SECTOR:
E284 54               (   flexidedrv.asm):00561 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E285 44               (   flexidedrv.asm):00562 [2]             LSRA                    ;
E286 2402             (   flexidedrv.asm):00563 [3]             BCC     >
E288 CA80             (   flexidedrv.asm):00564 [2]             ORB     #$80
                      (   flexidedrv.asm):00565         !
E28A F7E34A           (   flexidedrv.asm):00566 [5]                 STB     DEBSEHD                     ; STORE IN SECTOR/HEAD
E28D B7E348           (   flexidedrv.asm):00567 [5]                 STA     DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00568         
                      (   flexidedrv.asm):00569         ;       ADD SLICE OFFSET
E290 FCDE21           (   flexidedrv.asm):00570 [6]                 LDD     CURDRVSLICE
E293 54               (   flexidedrv.asm):00571 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E294 44               (   flexidedrv.asm):00572 [2]             LSRA                    ;
E295 2402             (   flexidedrv.asm):00573 [3]             BCC     >
E297 CA80             (   flexidedrv.asm):00574 [2]             ORB     #$80
                      (   flexidedrv.asm):00575         !
E299 F7E349           (   flexidedrv.asm):00576 [5]             STB         DEBCYLM                     ; STORE IN TRACK (LSB)
E29C 2408             (   flexidedrv.asm):00577 [3]             BCC     >
E29E B6E348           (   flexidedrv.asm):00578 [5]                 LDA     DEBCYLL                     ; STORE IN TRACK (LSB)
E2A1 8A80             (   flexidedrv.asm):00579 [2]             ORA     #$80
E2A3 B7E348           (   flexidedrv.asm):00580 [5]             STA         DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00581         !
E2A6 39               (   flexidedrv.asm):00582 [5]             RTS
                      (   flexidedrv.asm):00583         
                      (   flexidedrv.asm):00584         
                      (   flexidedrv.asm):00585         
                      (   flexidedrv.asm):00586         ;  .IF USEDSKY=1 || USEDSKYNG=1
                      (   flexidedrv.asm):00587         ;       PRTDBG "DSKY OUTPUT 1$"
                      (   flexidedrv.asm):00588         ;       LDA     SEKDSK
                      (   flexidedrv.asm):00589         ;       STA     DSKY_HEXBUF
                      (   flexidedrv.asm):00590         ;       LDA     DEBCYLM
                      (   flexidedrv.asm):00591         ;       STA     DSKY_HEXBUF+1
                      (   flexidedrv.asm):00592         ;       LDA     DEBCYLL
                      (   flexidedrv.asm):00593         ;       STA     DSKY_HEXBUF+2
                      (   flexidedrv.asm):00594         ;       LDA     DEBSEHD
                      (   flexidedrv.asm):00595         ;       STA     DSKY_HEXBUF+3
                      (   flexidedrv.asm):00596         ;       JSR     DSKY_BIN2SEG
                      (   flexidedrv.asm):00597         ;       JSR     DSKY_SHOW
                      (   flexidedrv.asm):00598         ;  .ENDIF
E2A7 39               (   flexidedrv.asm):00599 [5]             RTS
                      (   flexidedrv.asm):00600         
                      (   flexidedrv.asm):00601         
                      (   flexidedrv.asm):00602         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00603         
                      (   flexidedrv.asm):00604         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00605         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00606         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00607         
                      (   flexidedrv.asm):00608                 ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00609                 ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00610                 ;OUTPUT X = WORD READ FROM IDE DRIVE
E2A8                  (   flexidedrv.asm):00611         IDE_READ:
E2A8 BDE2EC           (   flexidedrv.asm):00612 [8]             JSR         SET_PPI_RD          ; SETUP FOR A READ CYCLE
                      (   flexidedrv.asm):00613         
E2AB B7FE62           (   flexidedrv.asm):00614 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2AE 8A40             (   flexidedrv.asm):00615 [2]             ORA         #PPIDE_RD_LINE              ; ASSERT RD PIN
E2B0 B7FE62           (   flexidedrv.asm):00616 [5]             STA         PPIDECNTRL
E2B3 3406             (   flexidedrv.asm):00617 [5+2]           PSHS    A,B
E2B5 F6FE60           (   flexidedrv.asm):00618 [5]             LDB         PPIDELO                     ; READ LOWER BYTE
E2B8 B6FE61           (   flexidedrv.asm):00619 [5]             LDA         PPIDEHI                     ; READ UPPER BYTE
E2BB 1F01             (   flexidedrv.asm):00620 [6]         TFR     D,X
E2BD 3506             (   flexidedrv.asm):00621 [5+2]           PULS    B,A                             ; RESTORE REGISTER VALUE
E2BF 8840             (   flexidedrv.asm):00622 [2]             EORA    #PPIDE_RD_LINE          ; DE-ASSERT RD SIGNAL
E2C1 B7FE62           (   flexidedrv.asm):00623 [5]             STA         PPIDECNTRL
E2C4 8600             (   flexidedrv.asm):00624 [2]             LDA         #$00
E2C6 B7FE62           (   flexidedrv.asm):00625 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2C9 39               (   flexidedrv.asm):00626 [5]             RTS
                      (   flexidedrv.asm):00627         
                      (   flexidedrv.asm):00628                 ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00629                 ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00630                 ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00631                 ;
                      (   flexidedrv.asm):00632         
E2CA                  (   flexidedrv.asm):00633         IDE_WRITE:
E2CA BDE2F5           (   flexidedrv.asm):00634 [8]             JSR         SET_PPI_WR          ; SETUP FOR A WRITE CYCLE
                      (   flexidedrv.asm):00635         
E2CD 3406             (   flexidedrv.asm):00636 [5+2]       PSHS    A,B
E2CF 1F10             (   flexidedrv.asm):00637 [6]         TFR     X,D
E2D1 F7FE60           (   flexidedrv.asm):00638 [5]             STB         PPIDELO                     ; WRITE LOWER BYTE
E2D4 B7FE61           (   flexidedrv.asm):00639 [5]             STA         PPIDEHI                     ; WRITE UPPER BYTE
E2D7 3506             (   flexidedrv.asm):00640 [5+2]           PULS    B,A                             ; RESTORE REGISTER VALUE
                      (   flexidedrv.asm):00641         
E2D9 B7FE62           (   flexidedrv.asm):00642 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
                      (   flexidedrv.asm):00643         
E2DC 8A20             (   flexidedrv.asm):00644 [2]             ORA         #PPIDE_WR_LINE              ; ASSERT WRITE PIN
E2DE B7FE62           (   flexidedrv.asm):00645 [5]             STA         PPIDECNTRL
                      (   flexidedrv.asm):00646         
E2E1 8820             (   flexidedrv.asm):00647 [2]             EORA    #PPIDE_WR_LINE          ; DE ASSERT WR PIN
E2E3 B7FE62           (   flexidedrv.asm):00648 [5]             STA         PPIDECNTRL
                      (   flexidedrv.asm):00649         
E2E6 8600             (   flexidedrv.asm):00650 [2]             LDA         #$00
E2E8 B7FE62           (   flexidedrv.asm):00651 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2EB 39               (   flexidedrv.asm):00652 [5]             RTS
                      (   flexidedrv.asm):00653         
                      (   flexidedrv.asm):00654         
                      (   flexidedrv.asm):00655         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00656         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00657         ;
                      (   flexidedrv.asm):00658         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00659         
E2EC                  (   flexidedrv.asm):00660         SET_PPI_RD:
E2EC 3402             (   flexidedrv.asm):00661 [5+1]           PSHS    A
E2EE 8692             (   flexidedrv.asm):00662 [2]             LDA     #PPRD_IDE_8255
E2F0 B7FE63           (   flexidedrv.asm):00663 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, READ MODE
E2F3 3582             (   flexidedrv.asm):00664 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00665         
E2F5                  (   flexidedrv.asm):00666         SET_PPI_WR:
E2F5 3402             (   flexidedrv.asm):00667 [5+1]           PSHS    A
E2F7 8680             (   flexidedrv.asm):00668 [2]             LDA     #PPWR_IDE_8255
E2F9 B7FE63           (   flexidedrv.asm):00669 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, WRITE MODE
E2FC 3582             (   flexidedrv.asm):00670 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00671         
E2FE 5050494445203A24 (   flexidedrv.asm):00672         MESSAGE1    FCC     "PPIDE :$"
E306 00               (   flexidedrv.asm):00673                     FCB     00
E307 20494F3D305824   (   flexidedrv.asm):00674         MESSAGE2    FCC     " IO=0X$"
E30E 00               (   flexidedrv.asm):00675                     FCB     00
E30F 204E4F5420505245 (   flexidedrv.asm):00676         MESSAGE3    FCC     " NOT PRESENT$"
     53454E5424
E31C 00               (   flexidedrv.asm):00677                     FCB     00
E31D 205050494445303A (   flexidedrv.asm):00678         MESSAGE4    FCC     " PPIDE0: BLOCKS=$"
     20424C4F434B533D
     24
E32E 00               (   flexidedrv.asm):00679                     FCB     00
E32F 205050494445313A (   flexidedrv.asm):00680         MESSAGE5    FCC     " PPIDE1: BLOCKS=$"
     20424C4F434B533D
     24
E340 00               (   flexidedrv.asm):00681                     FCB     00
E341 305824           (   flexidedrv.asm):00682         MESSAGE6    FCC     "0X$"
E344 00               (   flexidedrv.asm):00683                     FCB     00
                      (   flexidedrv.asm):00684         
                      (   flexidedrv.asm):00685         
                      (   flexidedrv.asm):00686         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E345 00               (   flexidedrv.asm):00687         CDEBCYLL:       .BYTE 0         ; DEBLOCKED CYLINDER LSB
E346 00               (   flexidedrv.asm):00688         CDEBCYLM:       .BYTE 0         ; DEBLOCKED CYLINDER MSB
E347 00               (   flexidedrv.asm):00689         CDEBSEHD:       .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E348 00               (   flexidedrv.asm):00690         DEBCYLL:        .BYTE 0         ; DEBLOCKED CYLINDER LSB
E349 00               (   flexidedrv.asm):00691         DEBCYLM:        .BYTE 0         ; DEBLOCKED CYLINDER MSB
E34A 00               (   flexidedrv.asm):00692         DEBSEHD:        .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
                      (      drivers.asm):00570         
                      (      drivers.asm):00571         
                      (      drivers.asm):00572         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00573         
E34B                  (      drivers.asm):00574         HSTBUF:         RMB     512
                      (      drivers.asm):00575         
                      (      drivers.asm):00576         
                      (      drivers.asm):00577         
                      (      drivers.asm):00578                         END

Symbol Table:
[ G] ADDDEV                           DE8E
[ G] CDEBCYLL                         E345
[ G] CDEBCYLM                         E346
[ G] CDEBSEHD                         E347
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DF77
[ G] CHKRDYERR                        DF81
[ G] CHKRDYFLOPPY                     DF85
[ G] CHKRDYIDE                        DF87
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] DCHECK                           DE0F
[ G] DDRIVE                           DE0C
[ G] DEBCYLL                          E348
[ G] DEBCYLM                          E349
[ G] DEBSEHD                          E34A
[ G] DELDEV                           DE9A
[ G] DEVARE                           DE98
[ G] DINIT                            DE15
[ G] DQUICK                           DE12
[ G] DREAD                            DE00
[ G] DRESTOR                          DE09
[ G] DRIVE                            DF33
[ G] DRIVE1                           DF40
[ G] DRIVEERR                         DF3B
[ G] DRVADDRESS                       DE27
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEEK                            DE1B
[ G] DVERFY                           DE06
[ G] DWARM                            DE18
[ G] DWRITE                           DE03
[ G] FNDENT                           DEB5
[ G] HSTBUF                           E34B
[ G] IDE_ABORT                        DFD5
[ G] IDE_CONVERT_SECTOR               E284
[ G] IDE_INITA                        DFF7
[ G] IDE_PPIDETECT                    E0AC
[ G] IDE_PRINT_INFO                   DFDE
[ G] IDE_READ                         E2A8
[ G] IDE_READ_BUFFER                  E20A
[ G] IDE_READ_INFO                    E046
[ G] IDE_READ_INFO_ABORT              E094
[ G] IDE_READ_INFO_OK                 E0A4
[ G] IDE_READ_RAW_SECTOR              E0E0
[ G] IDE_READ_SECTOR                  E0BA
[ G] IDE_READ_SECTOR_DIRTY            E0FE
[ G] IDE_READ_SECTOR_DIRTY1           E103
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E12B
[ G] IDE_READ_SECTOR_ERROR            E0DE
[ G] IDE_SETUP_LBA                    E248
[ G] IDE_WAIT_DRQ                     E1DA
[ G] IDE_WAIT_DRQ1                    E1E4
[ G] IDE_WAIT_DRQ2                    E206
[ G] IDE_WAIT_DRQ3                    E208
[ G] IDE_WAIT_DRQE                    E201
[ G] IDE_WAIT_NOT_BUSY                E1B1
[ G] IDE_WAIT_NOT_BUSY1               E1BB
[ G] IDE_WAIT_NOT_BUSY2               E1D5
[ G] IDE_WAIT_NOT_BUSY3               E1D7
[ G] IDE_WRITE                        E2CA
[ G] IDE_WRITE_BUFFER                 E229
[ G] IDE_WRITE_SECTOR                 E12E
[ G] IDE_WRITE_SECTOR_ERROR           E179
[ G] IDEBUFRD                         E20E
[ G] IDEBUFWT                         E22D
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] INCHNE                           DE6D
[ G] INIT                             DF15
[ G] IRQLL                            DEB6
[ G] IRQVEC                           D3FD
[ G] LD3E1                            D3E1
[ G] MESSAGE1                         E2FE
[ G] MESSAGE2                         E307
[ G] MESSAGE3                         E30F
[ G] MESSAGE4                         E31D
[ G] MESSAGE5                         E32F
[ G] MESSAGE6                         E341
[ G] MONITR                           DE33
[ G] NODEV                            DEA4
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0010
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    0008
[ G] PPIDE_CONTROL                    0010
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     0008
[ G] PPIDE_ERR                        0008
[ G] PPIDE_INIT                       DFAB
[ G] PPIDE_LBAHI                      0008
[ G] PPIDE_LBALOW                     0008
[ G] PPIDE_LBAMID                     0008
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      DFFB
[ G] PPIDE_PROBE_FAIL                 E043
[ G] PPIDE_PROBE_SUCCESS              E045
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E186
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    0008
[ G] PPIDE_STATUS                     0008
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DFA8
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DFA9
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PRCRLF                           CD24
[ G] PRTHEXBYTE                       DF9D
[ G] PSTRNG                           CD1E
[ G] QUICK                            DF8A
[ G] QUICKERR                         DF94
[ G] QUICKFLOPPY                      DF98
[ G] QUICKIDE                         DF9A
[ G] READ                             DEBB
[ G] READERR                          DEC8
[ G] READFLOPPY                       DECD
[ G] READIDE                          DECF
[ G] RESTORE                          DF1D
[ G] RESTOREERR                       DF2A
[ G] RESTOREFLOPPY                    DF2E
[ G] RESTOREIDE                       DF30
[ G] RST_DLY                          E1A4
[ G] SEEK                             DF01
[ G] SEEKERR                          DF0C
[ G] SEEKFLOPPY                       DF10
[ G] SEEKIDE                          DF12
[ G] SET_PPI_RD                       E2EC
[ G] SET_PPI_WR                       E2F5
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] STAT                             DE5D
[ G] SWIVEC                           D3FD
[ G] TAPPTR                           DEB9
[ G] TINIT                            DE3F
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TREDIR                           DE68
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] VERIFY                           DEED
[ G] VERIFYERR                        DEF8
[ G] VERIFYFLOPPY                     DEFC
[ G] VERIFYIDE                        DEFE
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] WARM                             DF19
[ G] WRITE                            DED4
[ G] WRITEERR                         DEE1
[ G] WRITEFLOPPY                      DEE6
[ G] WRITEIDE                         DEE8
