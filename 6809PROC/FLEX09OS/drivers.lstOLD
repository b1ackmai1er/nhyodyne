                      (      drivers.asm):00001                         NAM     DRIVERS
                      (      drivers.asm):00002                         PAG
                      (      drivers.asm):00003                         PRAGMA CD
                      (      drivers.asm):00004         
     0000             (      drivers.asm):00005         USEDSKYNG   EQU     0
                      (      drivers.asm):00006         
                      (      drivers.asm):00007         
                      (      drivers.asm):00008         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00009         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00010         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00011         ;
                      (      drivers.asm):00012         ;  Harware Addresses
                      (      drivers.asm):00013         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00014         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00015         UART0           equ     $FE68           ; DATA IN/OUT
     FE69             (      drivers.asm):00016         UART1           equ     $FE69           ; CHECK RX
     FE6A             (      drivers.asm):00017         UART2           equ     $FE6A           ; INTERRUPTS
     FE6B             (      drivers.asm):00018         UART3           equ     $FE6B           ; LINE CONTROL
     FE6C             (      drivers.asm):00019         UART4           equ     $FE6C           ; MODEM CONTROL
     FE6D             (      drivers.asm):00020         UART5           equ     $FE6D           ; LINE STATUS
     FE6E             (      drivers.asm):00021         UART6           equ     $FE6E           ; MODEM STATUS
     FE6F             (      drivers.asm):00022         UART7           equ     $FE6F           ; SCRATCH REG.
                      (      drivers.asm):00023         
                      (      drivers.asm):00024         
     CD1E             (      drivers.asm):00025         PSTRNG          EQU     $CD1E
     CD24             (      drivers.asm):00026         PRCRLF          EQU     $CD24
     CE7B             (      drivers.asm):00027         PDATA1          EQU     $CE7B
                      (      drivers.asm):00028         * ASCII CODE EQUATES
                      (      drivers.asm):00029         
     0000             (      drivers.asm):00030         NUL     EQU     $00
     0004             (      drivers.asm):00031         EOT     EQU     $04
                      (      drivers.asm):00032         
                      (      drivers.asm):00033         
                      (      drivers.asm):00034         
                      (      drivers.asm):00035         ;
                      (      drivers.asm):00036         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (      drivers.asm):00037         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00038                         ORG     $D3E1       * TABLE STARTS AT $D3E1
                      (      drivers.asm):00039         
D3E1 DE8E             (      drivers.asm):00040         LD3E1           FDB     ADDDEV      ; add an IRQ handler to table
D3E3 DE9A             (      drivers.asm):00041                         FDB     DELDEV      ; delete an IRQ handler from table
                      (      drivers.asm):00042         
D3E5 DE6D             (      drivers.asm):00043                         FDB     INCHNE      ; INPUT CHARACTER W/O ECHO
D3E7 DE7A             (      drivers.asm):00044                         FDB     IHNDLR      ; IRQ INTERRUPT HANDLER
D3E9 D3FD             (      drivers.asm):00045                         FDB     SWIVEC      ; SWI3 VECTOR LOCATION
D3EB D3FD             (      drivers.asm):00046                         FDB     IRQVEC      ; IRQ VECTOR LOCATION
D3ED DE3E             (      drivers.asm):00047                         FDB     TMOFF       ; TIMER OFF ROUTINE
D3EF DE3E             (      drivers.asm):00048                         FDB     TMON        ; TIMER ON ROUTINE
D3F1 DE3E             (      drivers.asm):00049                         FDB     TMINT       ; TIMER INITIALIZATION
D3F3 DE33             (      drivers.asm):00050                         FDB     MONITR      ; MONITOR ENTRY ADDRESS
D3F5 DE3F             (      drivers.asm):00051                         FDB     TINIT       ; TERMINAL INITIALIZATION
D3F7 DE5D             (      drivers.asm):00052                         FDB     STAT        ; CHECK TERMINAL STATUS
D3F9 DE4C             (      drivers.asm):00053                         FDB     VOUTCH      ; OUTPUT CHARACTER
D3FB DE43             (      drivers.asm):00054                         FDB     VINCH       ; INPUT CHARACTER W/ ECHO
                      (      drivers.asm):00055         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00056         ;   Default ISRs.  Will be changed by OS Setup
D3FD                  (      drivers.asm):00057         SWIVEC:
D3FD                  (      drivers.asm):00058         IRQVEC:
D3FD 3B               (      drivers.asm):00059 [6+?]                   rti
                      (      drivers.asm):00060         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00061         ;
                      (      drivers.asm):00062         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00063         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00064                         ORG     $DE00
                      (      drivers.asm):00065         
DE00 7EDEBB           (      drivers.asm):00066 [4]     DREAD           JMP     >READ       * DE00    READ      Read a single sector
DE03 7EDED4           (      drivers.asm):00067 [4]     DWRITE          JMP     >WRITE      * DE03    WRITE     Write a single sector
DE06 7EDEED           (      drivers.asm):00068 [4]     DVERFY          JMP     >VERIFY     * DE06    VERIFY    Verify last sector written
DE09 7EDF1D           (      drivers.asm):00069 [4]     DRESTOR         JMP     >RESTORE    * DE09    RESTORE   Restore head to track #0
DE0C 7EDF33           (      drivers.asm):00070 [4]     DDRIVE          JMP     >DRIVE      * DE0C    DRIVE     Select the specified drive
DE0F 7EDF77           (      drivers.asm):00071 [4]     DCHECK          JMP     >CHKRDY     * DE0F    CHKRDY    Check for drive ready
DE12 7EDF8A           (      drivers.asm):00072 [4]     DQUICK          JMP     >QUICK      * DE12    QUICK     Quick check for drive ready
DE15 7EDF15           (      drivers.asm):00073 [4]     DINIT           JMP     >INIT       * DE15    INIT      Driver initialize (cold start)
DE18 7EDF19           (      drivers.asm):00074 [4]     DWARM           JMP     >WARM       * DE18    WARM      Driver initialize (warm start)
DE1B 7EDF01           (      drivers.asm):00075 [4]     DSEEK           JMP     >SEEK       * DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00076         
                      (      drivers.asm):00077         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00078         ; Temp Storage Area
                      (      drivers.asm):00079         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00080         
                      (      drivers.asm):00081         
DE1E 00               (      drivers.asm):00082         CURDRV          FCB     $00
DE1F 00               (      drivers.asm):00083         CURDRVTYP       FCB     $00
DE20 00               (      drivers.asm):00084         CURDRVADDRESS   FCB     $00
DE21 0000             (      drivers.asm):00085         CURDRVSLICE     FDB     $0000
                      (      drivers.asm):00086         
DE23 00000000         (      drivers.asm):00087         DRVTYPES        FCB     $00,$00,$00,$00
                      (      drivers.asm):00088                         ;   $00 - INVALID
                      (      drivers.asm):00089                         ;   $01 - Floppy
                      (      drivers.asm):00090                         ;   $02 - IDE
DE27 00000000         (      drivers.asm):00091         DRVADDRESS      FCB     $00,$00,$00,$00
DE2B 0000000000000000 (      drivers.asm):00092         DRVSLICE        FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00093         
                      (      drivers.asm):00094         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00095         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00096         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00097         
                      (      drivers.asm):00098         
                      (      drivers.asm):00099         
                      (      drivers.asm):00100         
                      (      drivers.asm):00101         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00102         ;
                      (      drivers.asm):00103         ;       Monitor entry routine
                      (      drivers.asm):00104         ;_____________________________________________________________________________________________________
DE33 860A             (      drivers.asm):00105 [2]     MONITR          LDA     #$A
DE35 8D15             (      drivers.asm):00106 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00107 [2]                     LDA     #$D
DE39 8D11             (      drivers.asm):00108 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00109 [4]                     JMP     $FC0B               LOCATION OF MONITOR
                      (      drivers.asm):00110         
                      (      drivers.asm):00111         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00112         ;
                      (      drivers.asm):00113         ;       Timer Drivers
                      (      drivers.asm):00114         ;
                      (      drivers.asm):00115         ;       Timers not supported
                      (      drivers.asm):00116         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00117         TMOFF       ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00118         TMON        ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00119         TMINT       ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00120 [5]                     RTS
                      (      drivers.asm):00121         
                      (      drivers.asm):00122         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00123         ;
                      (      drivers.asm):00124         ;       Console Drivers
                      (      drivers.asm):00125         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00126         ;       Terminal init routine
DE3F 3402             (      drivers.asm):00127 [5+1]   TINIT           PSHS    A
                      (      drivers.asm):00128                         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00129                         ;       LDA             #$80            ;
                      (      drivers.asm):00130                         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00131                             ;   LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00132                             ;   STA             UART0           ; save baud rate
                      (      drivers.asm):00133                             ;   LDA             #00                     ;
                      (      drivers.asm):00134                             ;   STA             UART1           ;
                      (      drivers.asm):00135                             ;   LDA             #03                     ;
                      (      drivers.asm):00136                             ;   STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00137                             ;   STA             UART4           ;
DE41 3582             (      drivers.asm):00138 [5+3]                   PULS    PC,A
                      (      drivers.asm):00139         
                      (      drivers.asm):00140         
                      (      drivers.asm):00141         ;       Terminal input routine
                      (      drivers.asm):00142         
DE43 7DDEB9           (      drivers.asm):00143 [7]     VINCH           TST     >TAPPTR         ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00144 [3]                     BEQ     TREDIR          ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00145 [7+5]                   JSR     [TAPPTR]        ; redirect to alternate routine
                      (      drivers.asm):00146         
                      (      drivers.asm):00147         ;       Terminal output routine
                      (      drivers.asm):00148         
DE4C 3402             (      drivers.asm):00149 [5+1]   VOUTCH          PSHS    a
                      (      drivers.asm):00150         !
DE4E B6FE6D           (      drivers.asm):00151 [5]                             LDA             UART5                   ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00152 [2]                             ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00153 [2]                             CMPA    #$00
DE55 27F7             (      drivers.asm):00154 [3]                             BEQ             <                       ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00155 [5+1]                   PULS    A
DE59 B7FE68           (      drivers.asm):00156 [5]                             STA             UART0                   ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00157 [5]                     RTS
                      (      drivers.asm):00158         
                      (      drivers.asm):00159         
                      (      drivers.asm):00160         ;       Terminal status check routine
                      (      drivers.asm):00161         
DE5D 3402             (      drivers.asm):00162 [5+1]   STAT:           PSHS    A
DE5F B6FE6D           (      drivers.asm):00163 [5]                     LDA         UART5                       ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00164 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00165 [2]                             CMPA    #$00
DE66 3582             (      drivers.asm):00166 [5+3]                           PULS    PC,A
                      (      drivers.asm):00167         
                      (      drivers.asm):00168         
                      (      drivers.asm):00169         ;       Monitor terminal input character with echo
                      (      drivers.asm):00170         
DE68 BDDE6D           (      drivers.asm):00171 [8]     TREDIR          JSR     INCHNE
DE6B 20DF             (      drivers.asm):00172 [3]                     BRA     VOUTCH
                      (      drivers.asm):00173         
                      (      drivers.asm):00174         
                      (      drivers.asm):00175         ;       Monitor terminal input character without echo
                      (      drivers.asm):00176         
DE6D                  (      drivers.asm):00177         INCHNE
DE6D B6FE6D           (      drivers.asm):00178 [5]                             LDA         UART5                       ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00179 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00180 [2]                             CMPA    #$00
DE74 27F7             (      drivers.asm):00181 [3]                             BEQ         INCHNE              ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00182 [5]                             LDA         UART0                       ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00183 [5]                             RTS
                      (      drivers.asm):00184         
                      (      drivers.asm):00185         
                      (      drivers.asm):00186         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00187         ;
                      (      drivers.asm):00188         ;       Interupt handler
                      (      drivers.asm):00189         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00190         IHNDLR          ;leau    <IRQLL-4,pc         get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00191                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00192                         fcb     IRQLL-*-5
DE7D EE44             (      drivers.asm):00193 [5+1]   CHKNXT          ldu     4,u                 get a link
DE7F 270C             (      drivers.asm):00194 [3]                     beq     IHDONE              end of list
                      (      drivers.asm):00195         
DE81 A6D4             (      drivers.asm):00196 [4+3]                   lda     [,u]                get status from device
DE83 A546             (      drivers.asm):00197 [4+1]                   bita    6,u                 did it interrupt?
DE85 27F6             (      drivers.asm):00198 [3]                     beq     CHKNXT              no - check next
                      (      drivers.asm):00199         
DE87 10AEC4           (      drivers.asm):00200 [6+0]                   ldy     ,u                  yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00201 [3+4]                   jmp     [2,u]               go to device ISR
                      (      drivers.asm):00202         
DE8D 3B               (      drivers.asm):00203 [6+?]   IHDONE          rti                         return from interrupt
                      (      drivers.asm):00204         
                      (      drivers.asm):00205         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00206         ;       add a device to IRQ handler table
                      (      drivers.asm):00207         ;_____________________________________________________________________________________________________
DE8E 3470             (      drivers.asm):00208 [5+6]   ADDDEV          pshs    x,y,u
DE90 8D14             (      drivers.asm):00209 [7]                     bsr     SRCHLST             find link in chain
DE92 2704             (      drivers.asm):00210 [3]                     beq     DEVARE              already exists - exit
DE94 EF04             (      drivers.asm):00211 [5+1]                   stu     4,x                 set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00212 [5+1]                   stx     4,y                 link this one into prev blk
DE98 35F0             (      drivers.asm):00213 [5+8]   DEVARE          puls    pc,X,Y,U
                      (      drivers.asm):00214         
                      (      drivers.asm):00215         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00216         ;       delete a device from IRQ handler table
                      (      drivers.asm):00217         ;_____________________________________________________________________________________________________
DE9A 3470             (      drivers.asm):00218 [5+6]   DELDEV          pshs    x,y,u
DE9C 8D08             (      drivers.asm):00219 [7]                     bsr     SRCHLST             find link in chain
DE9E 2604             (      drivers.asm):00220 [3]                     bne     NODEV               not found - exit
DEA0 AE04             (      drivers.asm):00221 [5+1]                   ldx     4,x                 get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00222 [5+1]                   stx     4,u                 set in prev block
DEA4 35F0             (      drivers.asm):00223 [5+8]   NODEV           puls    pc,X,Y,U
                      (      drivers.asm):00224         
                      (      drivers.asm):00225         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00226         ;       search a linked list
                      (      drivers.asm):00227         ;
                      (      drivers.asm):00228         ;               entry: X = address of ISR control block
                      (      drivers.asm):00229         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00230         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00231         ;
                      (      drivers.asm):00232         ;               format of ISR control block:
                      (      drivers.asm):00233         ;
                      (      drivers.asm):00234         ;                       offset  description
                      (      drivers.asm):00235         ;                         0     address of I/O device
                      (      drivers.asm):00236         ;                         2     address of ISR
                      (      drivers.asm):00237         ;                         4     link to next ISR control block
                      (      drivers.asm):00238         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00239         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00240         SRCHLST         ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00241                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00242                         fcb     IRQLL-*-5
DEA9 31C4             (      drivers.asm):00243 [4+0]   SRCHLP          leay    ,u
DEAB AC44             (      drivers.asm):00244 [6+1]                   cmpx    4,u                 X = link?
DEAD 2706             (      drivers.asm):00245 [3]                     beq     FNDENT              yes - return pointer in U
                      (      drivers.asm):00246         
DEAF EE44             (      drivers.asm):00247 [5+1]                   ldu     4,u                 no - get link in U
DEB1 26F6             (      drivers.asm):00248 [3]                     bne     SRCHLP              not end of chain - loop
DEB3 1CFB             (      drivers.asm):00249 [3]                     andcc   #$FB                clear Z flag in CC
                      (      drivers.asm):00250         
DEB5 39               (      drivers.asm):00251 [5]     FNDENT          rts                         return - not found
                      (      drivers.asm):00252         
                      (      drivers.asm):00253         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00254         
                      (      drivers.asm):00255         
DEB6 0000             (      drivers.asm):00256         IRQLL           fdb     0                   pointer to first entry in the table
DEB8 01               (      drivers.asm):00257                         fcb     1
                      (      drivers.asm):00258         
DEB9 0000             (      drivers.asm):00259         TAPPTR          fdb     0                   no terminal input redirection
                      (      drivers.asm):00260         
                      (      drivers.asm):00261         
                      (      drivers.asm):00262         
                      (      drivers.asm):00263         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00264         ;
                      (      drivers.asm):00265         ;       Disk Driver Dispatchers
                      (      drivers.asm):00266         ;
                      (      drivers.asm):00267         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00268         ;       driver for the device
                      (      drivers.asm):00269         ;
                      (      drivers.asm):00270         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00271         
                      (      drivers.asm):00272         
                      (      drivers.asm):00273         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00274         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00275         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00276         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00277         ;
                      (      drivers.asm):00278         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00279         ;                   (A) = Track Number
                      (      drivers.asm):00280         ;                   (B) = Sector Number
                      (      drivers.asm):00281         ;
                      (      drivers.asm):00282         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00283         ;                   (A) May be destroyed
                      (      drivers.asm):00284         ;                   (B) = Error condition
                      (      drivers.asm):00285         ;                   (Z) = 1 if no error
                      (      drivers.asm):00286         ;                       = 0 if an error
                      (      drivers.asm):00287         ;_____________________________________________________________________________________________________
DEBB 3402             (      drivers.asm):00288 [5+1]   READ            PSHS     A
DEBD B6DE1F           (      drivers.asm):00289 [5]                     LDA     CURDRVTYP
DEC0 8101             (      drivers.asm):00290 [2]                     CMPA    #$01
DEC2 2709             (      drivers.asm):00291 [3]                     BEQ     READFLOPPY
DEC4 8102             (      drivers.asm):00292 [2]                     CMPA    #$02
DEC6 2707             (      drivers.asm):00293 [3]                     BEQ     READIDE
DEC8 C61F             (      drivers.asm):00294 [2]     READERR:        LDB     #$1F
DECA 57               (      drivers.asm):00295 [2]                     ASRB
DECB 3582             (      drivers.asm):00296 [5+3]                   PULS    PC,A
DECD                  (      drivers.asm):00297         READFLOPPY:
DECD 20F9             (      drivers.asm):00298 [3]                     BRA     READERR
DECF                  (      drivers.asm):00299         READIDE:
DECF 3502             (      drivers.asm):00300 [5+1]                   PULS    A
DED1 7EE0CA           (      drivers.asm):00301 [4]                     JMP     IDE_READ_SECTOR
                      (      drivers.asm):00302         
                      (      drivers.asm):00303         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00304         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00305         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00306         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00307         ;           in length.
                      (      drivers.asm):00308         ;
                      (      drivers.asm):00309         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00310         ;                         to be written to disk
                      (      drivers.asm):00311         ;                   (A) = Track Number
                      (      drivers.asm):00312         ;                   (B) = Sector Number
                      (      drivers.asm):00313         ;
                      (      drivers.asm):00314         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00315         ;                   (A) May be destroyed
                      (      drivers.asm):00316         ;                   (B) = Error condition
                      (      drivers.asm):00317         ;                   (Z) = 1 if no error
                      (      drivers.asm):00318         ;                       = 0 if an error
                      (      drivers.asm):00319         ;_____________________________________________________________________________________________________
DED4 3402             (      drivers.asm):00320 [5+1]   WRITE           PSHS     A
DED6 B6DE1F           (      drivers.asm):00321 [5]                     LDA     CURDRVTYP
DED9 8101             (      drivers.asm):00322 [2]                     CMPA    #$01
DEDB 2709             (      drivers.asm):00323 [3]                     BEQ     WRITEFLOPPY
DEDD 8102             (      drivers.asm):00324 [2]                     CMPA    #$02
DEDF 2707             (      drivers.asm):00325 [3]                     BEQ     WRITEIDE
DEE1 C61F             (      drivers.asm):00326 [2]     WRITEERR:       LDB     #$1F
DEE3 57               (      drivers.asm):00327 [2]                     ASRB
DEE4 3582             (      drivers.asm):00328 [5+3]                   PULS    PC,A
DEE6                  (      drivers.asm):00329         WRITEFLOPPY:
DEE6 20F9             (      drivers.asm):00330 [3]                     BRA     WRITEERR
DEE8                  (      drivers.asm):00331         WRITEIDE:
DEE8 3502             (      drivers.asm):00332 [5+1]                   PULS    A
DEEA 7EE13E           (      drivers.asm):00333 [4]                     JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00334         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00335         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00336         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00337         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00338         ;           single sector operation.
                      (      drivers.asm):00339         ;
                      (      drivers.asm):00340         ;           ENTRY - No entry parameters
                      (      drivers.asm):00341         ;
                      (      drivers.asm):00342         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00343         ;                   (A) May be destroyed
                      (      drivers.asm):00344         ;                   (B) = Error condition
                      (      drivers.asm):00345         ;                   (Z) = 1 if no error
                      (      drivers.asm):00346         ;                       = 0 if an error
                      (      drivers.asm):00347         ;_____________________________________________________________________________________________________
DEED                  (      drivers.asm):00348         VERIFY
DEED B6DE1F           (      drivers.asm):00349 [5]                     LDA     CURDRVTYP
DEF0 8101             (      drivers.asm):00350 [2]                     CMPA    #$01
DEF2 2708             (      drivers.asm):00351 [3]                     BEQ     VERIFYFLOPPY
DEF4 8102             (      drivers.asm):00352 [2]                     CMPA    #$02
DEF6 2706             (      drivers.asm):00353 [3]                     BEQ     VERIFYIDE
DEF8 C61F             (      drivers.asm):00354 [2]     VERIFYERR:      LDB     #$1F
DEFA 57               (      drivers.asm):00355 [2]                     ASRB
DEFB 39               (      drivers.asm):00356 [5]                     RTS
DEFC                  (      drivers.asm):00357         VERIFYFLOPPY:
DEFC 20FA             (      drivers.asm):00358 [3]                     BRA     VERIFYERR
DEFE                  (      drivers.asm):00359         VERIFYIDE:
DEFE C600             (      drivers.asm):00360 [2]                     LDB     #$00
DF00 39               (      drivers.asm):00361 [5]                     RTS
                      (      drivers.asm):00362         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00363         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00364         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00365         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00366         ;
                      (      drivers.asm):00367         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00368         ;                   (B) = Sector Number
                      (      drivers.asm):00369         ;
                      (      drivers.asm):00370         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00371         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00372         ;                   (B) = Error condition
                      (      drivers.asm):00373         ;                   (Z) = 1 if no error
                      (      drivers.asm):00374         ;                       = 0 if an error
                      (      drivers.asm):00375         ;_____________________________________________________________________________________________________
DF01                  (      drivers.asm):00376         SEEK
DF01 B6DE1F           (      drivers.asm):00377 [5]                     LDA     CURDRVTYP
DF04 8101             (      drivers.asm):00378 [2]                     CMPA    #$01
DF06 2708             (      drivers.asm):00379 [3]                     BEQ     SEEKFLOPPY
DF08 8102             (      drivers.asm):00380 [2]                     CMPA    #$02
DF0A 2706             (      drivers.asm):00381 [3]                     BEQ     SEEKIDE
DF0C C61F             (      drivers.asm):00382 [2]     SEEKERR:        LDB     #$1F
DF0E 57               (      drivers.asm):00383 [2]                     ASRB
DF0F 39               (      drivers.asm):00384 [5]                     RTS
DF10                  (      drivers.asm):00385         SEEKFLOPPY:
DF10 20FA             (      drivers.asm):00386 [3]                     BRA     SEEKERR
DF12                  (      drivers.asm):00387         SEEKIDE:
DF12 C600             (      drivers.asm):00388 [2]                     LDB     #$00
DF14 39               (      drivers.asm):00389 [5]                     RTS
                      (      drivers.asm):00390         
                      (      drivers.asm):00391         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00392         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00393         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00394         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00395         ;           can be done here.
                      (      drivers.asm):00396         ;
                      (      drivers.asm):00397         ;           ENTRY - No parameters
                      (      drivers.asm):00398         ;
                      (      drivers.asm):00399         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00400         ;_____________________________________________________________________________________________________
DF15                  (      drivers.asm):00401         INIT
DF15 BDDFAB           (      drivers.asm):00402 [8]                     JSR     PPIDE_INIT
DF18 39               (      drivers.asm):00403 [5]                     RTS
                      (      drivers.asm):00404         
                      (      drivers.asm):00405         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00406         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00407         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00408         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00409         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00410         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00411         ;           reset such that the controller would not function properly
                      (      drivers.asm):00412         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00413         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00414         ;
                      (      drivers.asm):00415         ;           ENTRY - No parameters
                      (      drivers.asm):00416         ;
                      (      drivers.asm):00417         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00418         ;_____________________________________________________________________________________________________
DF19                  (      drivers.asm):00419         WARM
DF19 BDE196           (      drivers.asm):00420 [8]                     JSR     PPIDE_RESET
DF1C 39               (      drivers.asm):00421 [5]                     RTS
                      (      drivers.asm):00422         
                      (      drivers.asm):00423         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00424         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00425         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00426         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00427         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00428         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00429         ;           operation.
                      (      drivers.asm):00430         ;
                      (      drivers.asm):00431         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00432         ;
                      (      drivers.asm):00433         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00434         ;                   (A) May be destroyed
                      (      drivers.asm):00435         ;                   (B) = Error condition
                      (      drivers.asm):00436         ;                   (Z) = 1 if no error
                      (      drivers.asm):00437         ;                       = 0 if an error
                      (      drivers.asm):00438         ;_____________________________________________________________________________________________________
DF1D 8D14             (      drivers.asm):00439 [7]     RESTORE         BSR     DRIVE
DF1F B6DE1F           (      drivers.asm):00440 [5]                     LDA     CURDRVTYP
DF22 8101             (      drivers.asm):00441 [2]                     CMPA    #$01
DF24 2708             (      drivers.asm):00442 [3]                     BEQ     RESTOREFLOPPY
DF26 8102             (      drivers.asm):00443 [2]                     CMPA    #$02
DF28 2706             (      drivers.asm):00444 [3]                     BEQ     RESTOREIDE
DF2A C61F             (      drivers.asm):00445 [2]     RESTOREERR:     LDB     #$1F
DF2C 57               (      drivers.asm):00446 [2]                     ASRB
DF2D 39               (      drivers.asm):00447 [5]                     RTS
DF2E                  (      drivers.asm):00448         RESTOREFLOPPY:
DF2E 20FA             (      drivers.asm):00449 [3]                     BRA     RESTOREERR
DF30                  (      drivers.asm):00450         RESTOREIDE:
DF30 C600             (      drivers.asm):00451 [2]                     LDB     #$00
DF32 39               (      drivers.asm):00452 [5]                     RTS
                      (      drivers.asm):00453         
                      (      drivers.asm):00454         
                      (      drivers.asm):00455         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00456         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00457         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00458         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00459         ;
                      (      drivers.asm):00460         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00461         ;
                      (      drivers.asm):00462         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00463         ;                   (A) May be destroyed
                      (      drivers.asm):00464         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00465         ;                       = Error condition otherwise
                      (      drivers.asm):00466         ;                   (Z) = 1 if no error
                      (      drivers.asm):00467         ;                       = 0 if an error
                      (      drivers.asm):00468         ;                   (C) = 0 if no error
                      (      drivers.asm):00469         ;                       = 1 if an error
                      (      drivers.asm):00470         ;_____________________________________________________________________________________________________
DF33 3410             (      drivers.asm):00471 [5+2]   DRIVE:          PSHS    X
DF35 A603             (      drivers.asm):00472 [4+1]                   LDA     3,X             ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF37 8104             (      drivers.asm):00473 [2]                     CMPA    #4
DF39 2505             (      drivers.asm):00474 [3]                     BCS     DRIVE1
DF3B                  (      drivers.asm):00475         DRIVEERR:
DF3B C61F             (      drivers.asm):00476 [2]                     LDB     #$1F
DF3D 57               (      drivers.asm):00477 [2]                     ASRB
DF3E 3590             (      drivers.asm):00478 [5+4]                   PULS    PC,X
                      (      drivers.asm):00479         
DF40 8EDE23           (      drivers.asm):00480 [3]     DRIVE1          LDX     #DRVTYPES
DF43 3086             (      drivers.asm):00481 [4+1]                   LEAX    A,X             ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF45 E684             (      drivers.asm):00482 [4+0]                   LDB     ,X
DF47 C101             (      drivers.asm):00483 [2]                     CMPB    #$01            ; IF $01, OK
DF49 2706             (      drivers.asm):00484 [3]                     BEQ     >
DF4B C102             (      drivers.asm):00485 [2]                     CMPB    #$02            ; IF $01, OK
DF4D 2702             (      drivers.asm):00486 [3]                     BEQ     >
DF4F 20EA             (      drivers.asm):00487 [3]                     BRA     DRIVEERR
DF51 F7DE1F           (      drivers.asm):00488 [5]     !               STB     CURDRVTYP
DF54 B7DE1E           (      drivers.asm):00489 [5]                     STA     CURDRV
DF57 8EDE27           (      drivers.asm):00490 [3]                     LDX     #DRVADDRESS
DF5A 3086             (      drivers.asm):00491 [4+1]                   LEAX    A,X             ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DF5C E684             (      drivers.asm):00492 [4+0]                   LDB     ,X
DF5E F7DE20           (      drivers.asm):00493 [5]                     STB     CURDRVADDRESS
DF61 8EDE2B           (      drivers.asm):00494 [3]                     LDX     #DRVSLICE
DF64 48               (      drivers.asm):00495 [2]                     LSLA                    ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DF65 3086             (      drivers.asm):00496 [4+1]                   LEAX    A,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF67 E684             (      drivers.asm):00497 [4+0]                   LDB     ,X
DF69 F7DE21           (      drivers.asm):00498 [5]                     STB     CURDRVSLICE
DF6C 3001             (      drivers.asm):00499 [4+1]                   LEAX    1,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF6E E684             (      drivers.asm):00500 [4+0]                   LDB     ,X
DF70 F7DE22           (      drivers.asm):00501 [5]                     STB     CURDRVSLICE+1
DF73 C600             (      drivers.asm):00502 [2]                     LDB     #$00
DF75 3590             (      drivers.asm):00503 [5+4]                   PULS    PC,X
                      (      drivers.asm):00504         
                      (      drivers.asm):00505         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00506         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00507         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00508         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00509         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00510         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00511         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00512         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00513         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00514         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00515         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00516         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00517         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00518         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00519         ;
                      (      drivers.asm):00520         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00521         ;
                      (      drivers.asm):00522         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00523         ;                   (A) May be destroyed
                      (      drivers.asm):00524         ;                   (B) = Error condition
                      (      drivers.asm):00525         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00526         ;                       = 0 if not ready
                      (      drivers.asm):00527         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00528         ;                       = 1 if not ready
                      (      drivers.asm):00529         ;_____________________________________________________________________________________________________
DF77                  (      drivers.asm):00530         CHKRDY
DF77 A603             (      drivers.asm):00531 [4+1]                   LDA     3,X
DF79 8101             (      drivers.asm):00532 [2]                     CMPA    #$01
DF7B 2708             (      drivers.asm):00533 [3]                     BEQ     CHKRDYFLOPPY
DF7D 8102             (      drivers.asm):00534 [2]                     CMPA    #$02
DF7F 2706             (      drivers.asm):00535 [3]                     BEQ     CHKRDYIDE
DF81 C61F             (      drivers.asm):00536 [2]     CHKRDYERR:      LDB     #$1F
DF83 57               (      drivers.asm):00537 [2]                     ASRB
DF84 39               (      drivers.asm):00538 [5]                     RTS
DF85                  (      drivers.asm):00539         CHKRDYFLOPPY:
DF85 20FA             (      drivers.asm):00540 [3]                     BRA     CHKRDYERR
DF87                  (      drivers.asm):00541         CHKRDYIDE:
DF87 C600             (      drivers.asm):00542 [2]                     LDB     #$00
DF89 39               (      drivers.asm):00543 [5]                     RTS
                      (      drivers.asm):00544         
                      (      drivers.asm):00545         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00546         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00547         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00548         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00549         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00550         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00551         ;_____________________________________________________________________________________________________
DF8A A603             (      drivers.asm):00552 [4+1]   QUICK           LDA     3,X
DF8C 8101             (      drivers.asm):00553 [2]                     CMPA    #$01
DF8E 2708             (      drivers.asm):00554 [3]                     BEQ     QUICKFLOPPY
DF90 8102             (      drivers.asm):00555 [2]                     CMPA    #$02
DF92 2706             (      drivers.asm):00556 [3]                     BEQ     QUICKIDE
DF94 C61F             (      drivers.asm):00557 [2]     QUICKERR:       LDB     #$1F
DF96 57               (      drivers.asm):00558 [2]                     ASRB
DF97 39               (      drivers.asm):00559 [5]                     RTS
DF98                  (      drivers.asm):00560         QUICKFLOPPY:
DF98 20FA             (      drivers.asm):00561 [3]                     BRA     QUICKERR
DF9A                  (      drivers.asm):00562         QUICKIDE:
DF9A C600             (      drivers.asm):00563 [2]                     LDB     #$00
DF9C 39               (      drivers.asm):00564 [5]                     RTS
                      (      drivers.asm):00565         
                      (      drivers.asm):00566         
                      (      drivers.asm):00567         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00568         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00569         
DF9D                  (      drivers.asm):00570         PRTHEXBYTE:
DF9D 3402             (      drivers.asm):00571 [5+1]                   PSHS    A
DF9F BDCFD8           (      drivers.asm):00572 [8]                     JSR     $cfd8       ; OUTHL       OUTPUT IT
DFA2 3502             (      drivers.asm):00573 [5+1]                   PULS    A
DFA4 BDCFDC           (      drivers.asm):00574 [8]                     JSR     $CFDC       ; OUTHR
DFA7 39               (      drivers.asm):00575 [5]                     RTS
                      (      drivers.asm):00576         
                      (      drivers.asm):00577         
                      (      drivers.asm):00578         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00579                         INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       =       $FE60           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         =       PPIDE_PPI+0     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         =       PPIDE_PPI+1     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      =       PPIDE_PPI+2     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       =       PPIDE_PPI+3     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   =       $01             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   =       $02             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   =       $04             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  =       $08             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  =       $10             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   =       $20             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   =       $40             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  =       $80             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA              =       PPIDE_CS0_LINE
     0009             (   flexidedrv.asm):00028         PPIDE_ERR               =       PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   =       PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (   flexidedrv.asm):00030         PPIDE_LBALOW    =       PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (   flexidedrv.asm):00031         PPIDE_LBAMID    =       PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (   flexidedrv.asm):00032         PPIDE_LBAHI             =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (   flexidedrv.asm):00033         PPIDE_DEVICE    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (   flexidedrv.asm):00034         PPIDE_COMMAND   =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (   flexidedrv.asm):00035         PPIDE_STATUS    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (   flexidedrv.asm):00036         PPIDE_CONTROL   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (   flexidedrv.asm):00037         PPIDE_ASTATUS   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL =       $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  =       $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE =       $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  =       $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    =       $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN=     $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP=       $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   =       %10010010       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   =       %10000000       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DFA8 00               (   flexidedrv.asm):00054         PPIDEINDEX:     .BYTE   $00
DFA9 0000             (   flexidedrv.asm):00055         PPIDETIMEOUT:   .BYTE   $00,$00
                      (   flexidedrv.asm):00056         
                      (   flexidedrv.asm):00057         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00058         ;
                      (   flexidedrv.asm):00059         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00060         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00061         ;
DFAB                  (   flexidedrv.asm):00062         PPIDE_INIT:
DFAB 8EE314           (   flexidedrv.asm):00063 [3]             LDX     #MESSAGE1
DFAE BDCE7B           (   flexidedrv.asm):00064 [8]             JSR     >PDATA1         ; DO PROMPT
DFB1 BDCD24           (   flexidedrv.asm):00065 [8]             JSR     >PRCRLF         ; AND CRLF
                      (   flexidedrv.asm):00066         
DFB4 3402             (   flexidedrv.asm):00067 [5+1]           PSHS    A
DFB6 8641             (   flexidedrv.asm):00068 [2]             LDA     #'A
DFB8 BDDE4C           (   flexidedrv.asm):00069 [8]             JSR     VOUTCH
DFBB 3502             (   flexidedrv.asm):00070 [5+1]           PULS    A
                      (   flexidedrv.asm):00071         
DFBD BDE0BC           (   flexidedrv.asm):00072 [8]                 JSR     IDE_PPIDETECT       ; TEST FOR PPI HARDWARE
DFC0 2625             (   flexidedrv.asm):00073 [3]             BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00074         
DFC2 3402             (   flexidedrv.asm):00075 [5+1]           PSHS    A
DFC4 8642             (   flexidedrv.asm):00076 [2]             LDA     #'B
DFC6 BDDE4C           (   flexidedrv.asm):00077 [8]             JSR     VOUTCH
DFC9 3502             (   flexidedrv.asm):00078 [5+1]           PULS    A
                      (   flexidedrv.asm):00079         
                      (   flexidedrv.asm):00080         ;
DFCB 8EE31C           (   flexidedrv.asm):00081 [3]             LDX     #MESSAGE2
DFCE BDCE7B           (   flexidedrv.asm):00082 [8]             JSR     >PDATA1         ; DO PROMPT
DFD1 CCFE60           (   flexidedrv.asm):00083 [3]                 LDD     #PPIDE_PPI      ; GET BASE PORT
DFD4 BDDF9D           (   flexidedrv.asm):00084 [8]                 JSR     PRTHEXBYTE          ; PRINT BASE PORT
DFD7 1F98             (   flexidedrv.asm):00085 [6]             TFR     B,A
DFD9 BDDF9D           (   flexidedrv.asm):00086 [8]                 JSR     PRTHEXBYTE          ; PRINT BASE PORT
                      (   flexidedrv.asm):00087         ;
DFDC BDE196           (   flexidedrv.asm):00088 [8]                 JSR     PPIDE_RESET         ; RESET THE BUS
DFDF BDE016           (   flexidedrv.asm):00089 [8]                 JSR     PPIDE_PROBE         ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
DFE2 2503             (   flexidedrv.asm):00090 [3]                 BCS         IDE_ABORT
DFE4 7EDFF0           (   flexidedrv.asm):00091 [4]                 JMP         IDE_PRINT_INFO
DFE7                  (   flexidedrv.asm):00092         IDE_ABORT:
DFE7 8EE323           (   flexidedrv.asm):00093 [3]             LDX     #MESSAGE3
DFEA BDCE7B           (   flexidedrv.asm):00094 [8]             JSR     >PDATA1         ; DO PROMPT
DFED 7EE009           (   flexidedrv.asm):00095 [4]                 JMP         IDE_INITA
DFF0                  (   flexidedrv.asm):00096         IDE_PRINT_INFO:
DFF0 BDCD24           (   flexidedrv.asm):00097 [8]                 JSR     >PRCRLF         ; AND CRLF
DFF3 8EE330           (   flexidedrv.asm):00098 [3]             LDX     #MESSAGE4
DFF6 BDCE7B           (   flexidedrv.asm):00099 [8]             JSR     >PDATA1         ; DO PROMPT
DFF9 8600             (   flexidedrv.asm):00100 [2]                 LDA     #$00
DFFB BDE061           (   flexidedrv.asm):00101 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
DFFE 8EE341           (   flexidedrv.asm):00102 [3]             LDX     #MESSAGE5
E001 BDCE7B           (   flexidedrv.asm):00103 [8]             JSR     >PDATA1         ; DO PROMPT
E004 8601             (   flexidedrv.asm):00104 [2]                 LDA     #$01
E006 BDE061           (   flexidedrv.asm):00105 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
E009                  (   flexidedrv.asm):00106         IDE_INITA:
E009 BDCD24           (   flexidedrv.asm):00107 [8]                 JSR     >PRCRLF         ; AND CRLF
                      (   flexidedrv.asm):00108         
E00C 3402             (   flexidedrv.asm):00109 [5+1]           PSHS    A
E00E 8671             (   flexidedrv.asm):00110 [2]             LDA     #'q
E010 BDDE4C           (   flexidedrv.asm):00111 [8]             JSR     VOUTCH
E013 3502             (   flexidedrv.asm):00112 [5+1]           PULS    A
                      (   flexidedrv.asm):00113         
E015 39               (   flexidedrv.asm):00114 [5]                 RTS                                 ; DONE
                      (   flexidedrv.asm):00115         ;
                      (   flexidedrv.asm):00116         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00117         ;
                      (   flexidedrv.asm):00118         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00119         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00120         ;
E016                  (   flexidedrv.asm):00121         PPIDE_PROBE:
                      (   flexidedrv.asm):00122         ;
                      (   flexidedrv.asm):00123                 ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00124                 ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00125                 ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00126                 ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00127                 ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00128                 ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00129                 ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00130                 ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00131         
E016 8600             (   flexidedrv.asm):00132 [2]             LDA     #$00
E018 B7FE60           (   flexidedrv.asm):00133 [5]             STA     PPIDELO                 ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00134         
E01B BDE1C1           (   flexidedrv.asm):00135 [8]             JSR         IDE_WAIT_NOT_BUSY   ; WAIT FOR BUSY TO CLEAR
E01E 253E             (   flexidedrv.asm):00136 [3]             BCS     PPIDE_PROBE_FAIL        ; IF TIMEOUT, REPORT NO IDE PRESENT
E020 860F             (   flexidedrv.asm):00137 [2]             LDA         #PPIDE_STATUS               ; GET STATUS
E022 BDE2B1           (   flexidedrv.asm):00138 [8]             JSR         IDE_READ
E025 1F18             (   flexidedrv.asm):00139 [6]         TFR     X,A
E027 8440             (   flexidedrv.asm):00140 [2]             ANDA    #%01000000
E029 8100             (   flexidedrv.asm):00141 [2]             CMPA    #$00
E02B 2731             (   flexidedrv.asm):00142 [3]             BEQ     PPIDE_PROBE_FAIL        ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00143         
                      (   flexidedrv.asm):00144                 ; CHECK SIGNATURE
E02D 860A             (   flexidedrv.asm):00145 [2]             LDA         #PPIDE_SEC_CNT
E02F BDE2B1           (   flexidedrv.asm):00146 [8]             JSR         IDE_READ
E032 1F18             (   flexidedrv.asm):00147 [6]         TFR     X,A
E034 8101             (   flexidedrv.asm):00148 [2]             CMPA    #$01
E036 2626             (   flexidedrv.asm):00149 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E038 860B             (   flexidedrv.asm):00150 [2]             LDA         #PPIDE_LBALOW
E03A BDE2B1           (   flexidedrv.asm):00151 [8]             JSR         IDE_READ
E03D 1F18             (   flexidedrv.asm):00152 [6]         TFR     X,A
E03F 8101             (   flexidedrv.asm):00153 [2]             CMPA    #$01
E041 261B             (   flexidedrv.asm):00154 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E043 860C             (   flexidedrv.asm):00155 [2]             LDA         #PPIDE_LBAMID
E045 BDE2B1           (   flexidedrv.asm):00156 [8]             JSR         IDE_READ
E048 1F18             (   flexidedrv.asm):00157 [6]         TFR     X,A
E04A 8100             (   flexidedrv.asm):00158 [2]             CMPA    #$00
E04C 2610             (   flexidedrv.asm):00159 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E04E 860D             (   flexidedrv.asm):00160 [2]             LDA         #PPIDE_LBAHI
E050 BDE2B1           (   flexidedrv.asm):00161 [8]             JSR         IDE_READ
E053 1F18             (   flexidedrv.asm):00162 [6]         TFR     X,A
E055 8100             (   flexidedrv.asm):00163 [2]             CMPA    #$00
E057 2605             (   flexidedrv.asm):00164 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E059 1CFE             (   flexidedrv.asm):00165 [3]             CLC
E05B 7EE060           (   flexidedrv.asm):00166 [4]             JMP     PPIDE_PROBE_SUCCESS
E05E                  (   flexidedrv.asm):00167         PPIDE_PROBE_FAIL:
E05E 1A01             (   flexidedrv.asm):00168 [3]             SEC
E060                  (   flexidedrv.asm):00169         PPIDE_PROBE_SUCCESS:
E060 39               (   flexidedrv.asm):00170 [5]             RTS                                     ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00171         
                      (   flexidedrv.asm):00172         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00173         ;*
                      (   flexidedrv.asm):00174         ;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00175         ;*      CARRY SET ON ERROR
                      (   flexidedrv.asm):00176         ;*      A=MST/SLV
                      (   flexidedrv.asm):00177         ;*____________________________________________________________________________________________________
E061                  (   flexidedrv.asm):00178         IDE_READ_INFO:
                      (   flexidedrv.asm):00179                         ; SET DRIVE BIT
E061 8401             (   flexidedrv.asm):00180 [2]                     ANDA    #$01                    ; ONLY WANT THE 1 BIT (MST/SLV)
E063 48               (   flexidedrv.asm):00181 [2]                     ASLA                            ; SHIFT 4
E064 48               (   flexidedrv.asm):00182 [2]                     ASLA                            ;
E065 48               (   flexidedrv.asm):00183 [2]                     ASLA                            ;
E066 48               (   flexidedrv.asm):00184 [2]                     ASLA                            ;
E067 8AE0             (   flexidedrv.asm):00185 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E069 1F89             (   flexidedrv.asm):00186 [6]                     TFR     A,B
E06B 8600             (   flexidedrv.asm):00187 [2]             LDA     #$00
E06D 1F01             (   flexidedrv.asm):00188 [6]             TFR     D,X
E06F 860E             (   flexidedrv.asm):00189 [2]                     LDA         #PPIDE_DEVICE
E071 BDE2D6           (   flexidedrv.asm):00190 [8]                     JSR         IDE_WRITE
E074 BDE1C1           (   flexidedrv.asm):00191 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E077 2531             (   flexidedrv.asm):00192 [3]                     BCS         IDE_READ_INFO_ABORT
E079 860F             (   flexidedrv.asm):00193 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E07B 8E00EC           (   flexidedrv.asm):00194 [3]                     LDX         #PPIDE_CMD_ID
E07E BDE2D6           (   flexidedrv.asm):00195 [8]                     JSR         IDE_WRITE           ;ASK THE DRIVE TO READ IT
E081 BDE1EA           (   flexidedrv.asm):00196 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E084 2524             (   flexidedrv.asm):00197 [3]                     BCS         IDE_READ_INFO_ABORT
E086 BDE21A           (   flexidedrv.asm):00198 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E089 8EE352           (   flexidedrv.asm):00199 [3]             LDX     #MESSAGE6
E08C BDCE7B           (   flexidedrv.asm):00200 [8]             JSR     >PDATA1
E08F B6E3D5           (   flexidedrv.asm):00201 [5]                     LDA     HSTBUF+122
E092 BDDF9D           (   flexidedrv.asm):00202 [8]                     JSR     PRTHEXBYTE
E095 B6E3D6           (   flexidedrv.asm):00203 [5]                     LDA     HSTBUF+123
E098 BDDF9D           (   flexidedrv.asm):00204 [8]                     JSR     PRTHEXBYTE
E09B B6E3D3           (   flexidedrv.asm):00205 [5]                     LDA     HSTBUF+120
E09E BDDF9D           (   flexidedrv.asm):00206 [8]                     JSR     PRTHEXBYTE
E0A1 B6E3D4           (   flexidedrv.asm):00207 [5]                     LDA     HSTBUF+121
E0A4 BDDF9D           (   flexidedrv.asm):00208 [8]                     JSR     PRTHEXBYTE
E0A7 7EE0B6           (   flexidedrv.asm):00209 [4]                     JMP     IDE_READ_INFO_OK
E0AA                  (   flexidedrv.asm):00210         IDE_READ_INFO_ABORT:
E0AA 8EE323           (   flexidedrv.asm):00211 [3]             LDX     #MESSAGE3
E0AD BDCE7B           (   flexidedrv.asm):00212 [8]             JSR     >PDATA1         DO PROMPT
E0B0 BDCD24           (   flexidedrv.asm):00213 [8]                     JSR     >PRCRLF         AND CRLF
E0B3 1A01             (   flexidedrv.asm):00214 [3]                     SEC
E0B5 39               (   flexidedrv.asm):00215 [5]                     RTS                             ;
E0B6                  (   flexidedrv.asm):00216         IDE_READ_INFO_OK:
E0B6 BDCD24           (   flexidedrv.asm):00217 [8]                     JSR     >PRCRLF         AND CRLF
E0B9 1CFE             (   flexidedrv.asm):00218 [3]                     CLC
E0BB 39               (   flexidedrv.asm):00219 [5]                     RTS
                      (   flexidedrv.asm):00220         
                      (   flexidedrv.asm):00221         
                      (   flexidedrv.asm):00222         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00223         ;
                      (   flexidedrv.asm):00224         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00225         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00226         ;
E0BC                  (   flexidedrv.asm):00227         IDE_PPIDETECT:
                      (   flexidedrv.asm):00228         ;
                      (   flexidedrv.asm):00229                 ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00230                 ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00231                 ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00232                 ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00233                 ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00234                 ; INTERFERE WITH THE VALUE BEING READ.
E0BC BDE306           (   flexidedrv.asm):00235 [8]             JSR         SET_PPI_WR
                      (   flexidedrv.asm):00236         ;
E0BF 8600             (   flexidedrv.asm):00237 [2]             LDA     #$00                    ; VALUE ZERO
E0C1 B7FE60           (   flexidedrv.asm):00238 [5]             STA         PPIDELO                     ; PUSH VALUE TO PORT
E0C4 B6FE60           (   flexidedrv.asm):00239 [5]             LDA         PPIDELO                     ; GET PORT VALUE
E0C7 8100             (   flexidedrv.asm):00240 [2]         CMPA    #$00
E0C9 39               (   flexidedrv.asm):00241 [5]             RTS                             ; AND RETURN
                      (   flexidedrv.asm):00242         ;
                      (   flexidedrv.asm):00243         
                      (   flexidedrv.asm):00244         
                      (   flexidedrv.asm):00245         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00246         ;*
                      (   flexidedrv.asm):00247         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00248         ;*
                      (   flexidedrv.asm):00249         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00250         ;                   (A) = Track Number
                      (   flexidedrv.asm):00251         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00252         ;
                      (   flexidedrv.asm):00253         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00254         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00255         ;                   (B) = Error condition
                      (   flexidedrv.asm):00256         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00257         ;                       = 0 if an error
                      (   flexidedrv.asm):00258         ;*____________________________________________________________________________________________________
E0CA                  (   flexidedrv.asm):00259         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00260                 ;       PRTDBG "IDE READ SECTOR$"
E0CA 3420             (   flexidedrv.asm):00261 [5+2]           PSHS    Y
E0CC 3410             (   flexidedrv.asm):00262 [5+2]           PSHS    X
E0CE 1F92             (   flexidedrv.asm):00263 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E0D0 BDE0F0           (   flexidedrv.asm):00264 [8]                     JSR     IDE_READ_RAW_SECTOR
E0D3 3510             (   flexidedrv.asm):00265 [5+2]           PULS    X
E0D5 2617             (   flexidedrv.asm):00266 [3]             BNE     IDE_READ_SECTOR_ERROR
                      (   flexidedrv.asm):00267         
E0D7 1F28             (   flexidedrv.asm):00268 [6]             TFR     Y,A
E0D9 8401             (   flexidedrv.asm):00269 [2]             ANDA    #$01
E0DB C600             (   flexidedrv.asm):00270 [2]             LDB     #$00
E0DD 1F02             (   flexidedrv.asm):00271 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E0DF C600             (   flexidedrv.asm):00272 [2]             LDB     #$00                   ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00273         !
E0E1 A6A9E35B         (   flexidedrv.asm):00274 [4+4]           LDA     HSTBUF,Y
E0E5 A780             (   flexidedrv.asm):00275 [4+2]           STA     ,X+
E0E7 3121             (   flexidedrv.asm):00276 [5]             INY
E0E9 5C               (   flexidedrv.asm):00277 [2]             INCB
E0EA C100             (   flexidedrv.asm):00278 [2]             CMPB    #$00
E0EC 26F3             (   flexidedrv.asm):00279 [3]             BNE <
E0EE                  (   flexidedrv.asm):00280         IDE_READ_SECTOR_ERROR:
E0EE 35A0             (   flexidedrv.asm):00281 [5+4]           PULS    PC,Y
                      (   flexidedrv.asm):00282         
E0F0                  (   flexidedrv.asm):00283         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00284                 ;       PRTDBG "IDE READ RAW SECTOR$"
E0F0 BDE28D           (   flexidedrv.asm):00285 [8]                     JSR         IDE_CONVERT_SECTOR  ;
E0F3 B6E35A           (   flexidedrv.asm):00286 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E0F6 B1E357           (   flexidedrv.asm):00287 [5]                     CMPA    CDEBSEHD                ;
E0F9 2613             (   flexidedrv.asm):00288 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E0FB B6E359           (   flexidedrv.asm):00289 [5]                     LDA         DEBCYLM                     ;
E0FE B1E356           (   flexidedrv.asm):00290 [5]                     CMPA    CDEBCYLM                ;
E101 260B             (   flexidedrv.asm):00291 [3]                     BNE         IDE_READ_SECTOR_DIRTY
E103 B6E358           (   flexidedrv.asm):00292 [5]                     LDA         DEBCYLL                     ;
E106 B1E355           (   flexidedrv.asm):00293 [5]                     CMPA    CDEBCYLL                ;
E109 2603             (   flexidedrv.asm):00294 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E10B C600             (   flexidedrv.asm):00295 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E10D 39               (   flexidedrv.asm):00296 [5]                     RTS
                      (   flexidedrv.asm):00297         
E10E                  (   flexidedrv.asm):00298         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00299                 ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E10E BDE1C1           (   flexidedrv.asm):00300 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E111 2528             (   flexidedrv.asm):00301 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E113                  (   flexidedrv.asm):00302         IDE_READ_SECTOR_DIRTY1:
E113 BDE24A           (   flexidedrv.asm):00303 [8]                     JSR         IDE_SETUP_LBA               ;TELL IT WHICH SECTOR WE WANT
E116 860F             (   flexidedrv.asm):00304 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E118 8E0020           (   flexidedrv.asm):00305 [3]                     LDX         #PPIDE_CMD_READ
E11B BDE2D6           (   flexidedrv.asm):00306 [8]                     JSR         IDE_WRITE                   ;ASK THE DRIVE TO READ IT
E11E BDE1EA           (   flexidedrv.asm):00307 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E121 2518             (   flexidedrv.asm):00308 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E123 BDE21A           (   flexidedrv.asm):00309 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E126 B6E35A           (   flexidedrv.asm):00310 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E129 B7E357           (   flexidedrv.asm):00311 [5]                     STA         CDEBSEHD            ;
E12C B6E358           (   flexidedrv.asm):00312 [5]                     LDA         DEBCYLL                     ;
E12F B7E355           (   flexidedrv.asm):00313 [5]                     STA         CDEBCYLL            ;
E132 B6E359           (   flexidedrv.asm):00314 [5]                     LDA         DEBCYLM                     ;
E135 B7E356           (   flexidedrv.asm):00315 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00316         
E138 C600             (   flexidedrv.asm):00317 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E13A 39               (   flexidedrv.asm):00318 [5]                     RTS
E13B                  (   flexidedrv.asm):00319         IDE_READ_SECTOR_DIRTY_ERROR:
E13B C60F             (   flexidedrv.asm):00320 [2]                     LDB         #$0F                        ; SET ERROR CONDITION
E13D 39               (   flexidedrv.asm):00321 [5]                     RTS
                      (   flexidedrv.asm):00322         
                      (   flexidedrv.asm):00323         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00324         ;*
                      (   flexidedrv.asm):00325         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00326         ;*
                      (   flexidedrv.asm):00327         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00328         ;                   (A) = Track Number
                      (   flexidedrv.asm):00329         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00330         ;
                      (   flexidedrv.asm):00331         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00332         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00333         ;                   (B) = Error condition
                      (   flexidedrv.asm):00334         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00335         ;                       = 0 if an error
                      (   flexidedrv.asm):00336         ;*____________________________________________________________________________________________________
E13E                  (   flexidedrv.asm):00337         IDE_WRITE_SECTOR:
E13E 3420             (   flexidedrv.asm):00338 [5+2]           PSHS    Y
                      (   flexidedrv.asm):00339         
E140 3410             (   flexidedrv.asm):00340 [5+2]           PSHS    X
E142 1F92             (   flexidedrv.asm):00341 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00342         
                      (   flexidedrv.asm):00343                 ;       PRTDBG "IDE WRITE SECTOR$"
E144 BDE0F0           (   flexidedrv.asm):00344 [8]                     JSR         IDE_READ_RAW_SECTOR     ; DETERMINE PHYSICAL SECTOR
E147 2640             (   flexidedrv.asm):00345 [3]             BNE     IDE_WRITE_SECTOR_ERROR
                      (   flexidedrv.asm):00346         
E149 1F28             (   flexidedrv.asm):00347 [6]             TFR     Y,A
E14B 8401             (   flexidedrv.asm):00348 [2]             ANDA    #$01
E14D C600             (   flexidedrv.asm):00349 [2]             LDB     #$00
E14F 1F02             (   flexidedrv.asm):00350 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E151 C600             (   flexidedrv.asm):00351 [2]             LDB     #$00                   ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00352         !
E153 A680             (   flexidedrv.asm):00353 [4+2]           LDA     ,X+
E155 A7A9E35B         (   flexidedrv.asm):00354 [4+4]           STA     HSTBUF,Y
E159 3121             (   flexidedrv.asm):00355 [5]             INY
E15B 5C               (   flexidedrv.asm):00356 [2]             INCB
E15C C100             (   flexidedrv.asm):00357 [2]             CMPB    #$00
E15E 26F3             (   flexidedrv.asm):00358 [3]             BNE <
                      (   flexidedrv.asm):00359         
E160 BDE1C1           (   flexidedrv.asm):00360 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E163 2524             (   flexidedrv.asm):00361 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E165 860F             (   flexidedrv.asm):00362 [2]                     LDA         #PPIDE_COMMAND
E167 8E0030           (   flexidedrv.asm):00363 [3]                     LDX         #PPIDE_CMD_WRITE
E16A BDE2D6           (   flexidedrv.asm):00364 [8]                     JSR         IDE_WRITE           ;TELL DRIVE TO WRITE A SECTOR
E16D BDE1EA           (   flexidedrv.asm):00365 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNIT IT WANTS THE DATA
E170 2517             (   flexidedrv.asm):00366 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E172 BDE232           (   flexidedrv.asm):00367 [8]                     JSR         IDE_WRITE_BUFFER    ;GIVE THE DATA TO THE DRIVE
E175 BDE1C1           (   flexidedrv.asm):00368 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;WAIT UNTIL THE WRITE IS COMPLETE
E178 250F             (   flexidedrv.asm):00369 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E17A 86FF             (   flexidedrv.asm):00370 [2]                     LDA         #$FF                        ; STORE CURRENT PARMS
E17C B7E357           (   flexidedrv.asm):00371 [5]                     STA         CDEBSEHD            ;
E17F B7E355           (   flexidedrv.asm):00372 [5]                     STA         CDEBCYLL            ;
E182 B7E356           (   flexidedrv.asm):00373 [5]                     STA         CDEBCYLM            ;
E185 C600             (   flexidedrv.asm):00374 [2]                     LDB         #$00                        ; ZERO ON RETURN = OPERATION OK
E187 35A0             (   flexidedrv.asm):00375 [5+4]                   PULS    PC,Y
E189                  (   flexidedrv.asm):00376         IDE_WRITE_SECTOR_ERROR:
E189 C6FF             (   flexidedrv.asm):00377 [2]                     LDB         #$FF                        ; 1 ON RETURN = OPERATION FAIL
E18B F7E357           (   flexidedrv.asm):00378 [5]             STB         CDEBSEHD            ;
E18E F7E355           (   flexidedrv.asm):00379 [5]                     STB         CDEBCYLL            ;
E191 F7E356           (   flexidedrv.asm):00380 [5]                     STB         CDEBCYLM            ;
E194 35A0             (   flexidedrv.asm):00381 [5+4]                   PULS    PC,Y
                      (   flexidedrv.asm):00382         
                      (   flexidedrv.asm):00383         ;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00384         ;*
                      (   flexidedrv.asm):00385         ;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00386         ;*
                      (   flexidedrv.asm):00387         ;*____________________________________________________________________________________________________
E196                  (   flexidedrv.asm):00388         PPIDE_RESET:
                      (   flexidedrv.asm):00389           ;     PRTDBG "IDE RESET$"
E196 8600             (   flexidedrv.asm):00390 [2]                     LDA         #$00
E198 B7E35A           (   flexidedrv.asm):00391 [5]                     STA         DEBSEHD
E19B B7E358           (   flexidedrv.asm):00392 [5]                     STA         DEBCYLL
E19E B7E359           (   flexidedrv.asm):00393 [5]                     STA         DEBCYLM
E1A1 86FF             (   flexidedrv.asm):00394 [2]                     LDA         #$FF                        ;
E1A3 B7E357           (   flexidedrv.asm):00395 [5]                     STA         CDEBSEHD            ;
E1A6 B7E355           (   flexidedrv.asm):00396 [5]                     STA         CDEBCYLL            ;
E1A9 B7E356           (   flexidedrv.asm):00397 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00398         
E1AC 8680             (   flexidedrv.asm):00399 [2]                     LDA         #PPIDE_RST_LINE
E1AE B7FE62           (   flexidedrv.asm):00400 [5]                     STA         PPIDECNTRL                  ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00401         
E1B1 8E0100           (   flexidedrv.asm):00402 [3]                     LDX         #$0100
                      (   flexidedrv.asm):00403         ;       PRTDBG "IDE RESET DELAY$"
E1B4                  (   flexidedrv.asm):00404         RST_DLY:
E1B4 301F             (   flexidedrv.asm):00405 [5]                     DEX
E1B6 8C0000           (   flexidedrv.asm):00406 [4]                     CPX         #$0000
E1B9 26F9             (   flexidedrv.asm):00407 [3]                     BNE         RST_DLY
E1BB 8600             (   flexidedrv.asm):00408 [2]                     LDA         #$00
E1BD B7FE62           (   flexidedrv.asm):00409 [5]                     STA         PPIDECNTRL                  ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00410         
                      (   flexidedrv.asm):00411         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00412         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00413                 IF USEDSKYNG = 1
                      (   flexidedrv.asm):00414                         JSR     DSKY_REINIT
                      (   flexidedrv.asm):00415                 ENDC
                      (   flexidedrv.asm):00416         
E1C0 39               (   flexidedrv.asm):00417 [5]                     RTS
                      (   flexidedrv.asm):00418         
                      (   flexidedrv.asm):00419         
                      (   flexidedrv.asm):00420         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00421         ;*
                      (   flexidedrv.asm):00422         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00423         ;*
                      (   flexidedrv.asm):00424         ;*____________________________________________________________________________________________________
E1C1                  (   flexidedrv.asm):00425         IDE_WAIT_NOT_BUSY:
E1C1 3412             (   flexidedrv.asm):00426 [5+3]                   PSHS    X,A
E1C3 8600             (   flexidedrv.asm):00427 [2]                     LDA     #$00
E1C5 B7DFA9           (   flexidedrv.asm):00428 [5]                     STA     PPIDETIMEOUT
E1C8 B7DFAA           (   flexidedrv.asm):00429 [5]                     STA     PPIDETIMEOUT+1
E1CB                  (   flexidedrv.asm):00430         IDE_WAIT_NOT_BUSY1:
E1CB 860F             (   flexidedrv.asm):00431 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR RDY BIT TO BE SET
E1CD BDE2B1           (   flexidedrv.asm):00432 [8]                     JSR         IDE_READ
E1D0 1F18             (   flexidedrv.asm):00433 [6]             TFR     X,A
E1D2 8480             (   flexidedrv.asm):00434 [2]                     ANDA    #$80
E1D4 270F             (   flexidedrv.asm):00435 [3]                     BEQ         IDE_WAIT_NOT_BUSY2
E1D6 7CDFA9           (   flexidedrv.asm):00436 [7]                     INC     PPIDETIMEOUT
E1D9 26F0             (   flexidedrv.asm):00437 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1DB 7CDFAA           (   flexidedrv.asm):00438 [7]                     INC     PPIDETIMEOUT+1
E1DE 26EB             (   flexidedrv.asm):00439 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1E0 1A01             (   flexidedrv.asm):00440 [3]                     SEC
E1E2 7EE1E7           (   flexidedrv.asm):00441 [4]                     JMP         IDE_WAIT_NOT_BUSY3
E1E5                  (   flexidedrv.asm):00442         IDE_WAIT_NOT_BUSY2:
E1E5 1CFE             (   flexidedrv.asm):00443 [3]                     CLC
E1E7                  (   flexidedrv.asm):00444         IDE_WAIT_NOT_BUSY3:
E1E7 3592             (   flexidedrv.asm):00445 [5+5]           PULS    PC,X,A
E1E9 39               (   flexidedrv.asm):00446 [5]                     RTS
                      (   flexidedrv.asm):00447         
                      (   flexidedrv.asm):00448         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00449         ;*
                      (   flexidedrv.asm):00450         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00451         ;*
                      (   flexidedrv.asm):00452         ;*____________________________________________________________________________________________________
E1EA                  (   flexidedrv.asm):00453         IDE_WAIT_DRQ:
E1EA 3432             (   flexidedrv.asm):00454 [5+5]           PSHS    A,X,Y
E1EC 8600             (   flexidedrv.asm):00455 [2]                     LDA     #$00
E1EE B7DFA9           (   flexidedrv.asm):00456 [5]                     STA     PPIDETIMEOUT
E1F1 B7DFAA           (   flexidedrv.asm):00457 [5]                     STA     PPIDETIMEOUT+1
E1F4                  (   flexidedrv.asm):00458         IDE_WAIT_DRQ1:
E1F4 860F             (   flexidedrv.asm):00459 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR DRQ BIT TO BE SET
E1F6 BDE2B1           (   flexidedrv.asm):00460 [8]                     JSR         IDE_READ
E1F9 1F18             (   flexidedrv.asm):00461 [6]                     TFR     X,A
E1FB 8488             (   flexidedrv.asm):00462 [2]                     ANDA    #%10001000              ; MASK OFF BUSY(7) AND DRQ(3)
E1FD 8108             (   flexidedrv.asm):00463 [2]                     CMPA    #%00001000              ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E1FF 2715             (   flexidedrv.asm):00464 [3]                     BEQ         IDE_WAIT_DRQ2
E201 8401             (   flexidedrv.asm):00465 [2]                     ANDA    #%00000001              ; IS ERROR?
E203 8101             (   flexidedrv.asm):00466 [2]                     CMPA    #%00000001              ;
E205 270A             (   flexidedrv.asm):00467 [3]                     BEQ     IDE_WAIT_DRQE
E207 7CDFA9           (   flexidedrv.asm):00468 [7]                     INC     PPIDETIMEOUT
E20A 26E8             (   flexidedrv.asm):00469 [3]                     BNE     IDE_WAIT_DRQ1
E20C 7CDFAA           (   flexidedrv.asm):00470 [7]                     INC     PPIDETIMEOUT+1
E20F 26E3             (   flexidedrv.asm):00471 [3]                     BNE     IDE_WAIT_DRQ1
E211                  (   flexidedrv.asm):00472         IDE_WAIT_DRQE:
E211 1A01             (   flexidedrv.asm):00473 [3]                     SEC
E213 7EE218           (   flexidedrv.asm):00474 [4]                     JMP     IDE_WAIT_DRQ3
E216                  (   flexidedrv.asm):00475         IDE_WAIT_DRQ2:
E216 1CFE             (   flexidedrv.asm):00476 [3]                     CLC
E218                  (   flexidedrv.asm):00477         IDE_WAIT_DRQ3:
E218 35B2             (   flexidedrv.asm):00478 [5+7]           PULS    PC,A,X,Y
                      (   flexidedrv.asm):00479         
                      (   flexidedrv.asm):00480         
                      (   flexidedrv.asm):00481         
                      (   flexidedrv.asm):00482         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00483         ;*
                      (   flexidedrv.asm):00484         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00485         ;*
                      (   flexidedrv.asm):00486         ;*____________________________________________________________________________________________________
E21A                  (   flexidedrv.asm):00487         IDE_READ_BUFFER:
E21A 108E0000         (   flexidedrv.asm):00488 [4]                     LDY     #$0000                  ; INDEX
E21E                  (   flexidedrv.asm):00489         IDEBUFRD:
E21E 8608             (   flexidedrv.asm):00490 [2]                     LDA         #PPIDE_DATA
E220 BDE2B4           (   flexidedrv.asm):00491 [8]                     JSR         IDE_READ_NO_SETUP
E223 AFA9E35B         (   flexidedrv.asm):00492 [5+4]                   STX         HSTBUF,Y            ;
E227 3121             (   flexidedrv.asm):00493 [5]             INY
E229 3121             (   flexidedrv.asm):00494 [5]             INY
E22B 108C0200         (   flexidedrv.asm):00495 [5]                     CMPY    #$0200                  ;
E22F 26ED             (   flexidedrv.asm):00496 [3]                     BNE         IDEBUFRD            ;
E231 39               (   flexidedrv.asm):00497 [5]                     RTS                             ;
                      (   flexidedrv.asm):00498         
                      (   flexidedrv.asm):00499         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00500         ;*
                      (   flexidedrv.asm):00501         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00502         ;*
                      (   flexidedrv.asm):00503         ;*____________________________________________________________________________________________________
E232                  (   flexidedrv.asm):00504         IDE_WRITE_BUFFER:
E232 108E0000         (   flexidedrv.asm):00505 [4]                     LDY     #$0000                  ; INDEX
E236                  (   flexidedrv.asm):00506         IDEBUFWT:
E236 AEA9E35B         (   flexidedrv.asm):00507 [5+4]                   LDX     HSTBUF,Y                ; SECTORS ARE BIG ENDIAN
E23A 3121             (   flexidedrv.asm):00508 [5]                     INY                                     ;
E23C 3121             (   flexidedrv.asm):00509 [5]                     INY
E23E 8608             (   flexidedrv.asm):00510 [2]                     LDA         #PPIDE_DATA
E240 BDE2D6           (   flexidedrv.asm):00511 [8]                     JSR         IDE_WRITE
E243 108C0200         (   flexidedrv.asm):00512 [5]                     CMPY    #$0200                  ;
E247 26ED             (   flexidedrv.asm):00513 [3]                     BNE         IDEBUFWT            ;
E249 39               (   flexidedrv.asm):00514 [5]                     RTS                                     ;
                      (   flexidedrv.asm):00515         
                      (   flexidedrv.asm):00516         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00517         ;*
                      (   flexidedrv.asm):00518         ;*  SETUP LBA DATA
                      (   flexidedrv.asm):00519         ;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00520         ;*____________________________________________________________________________________________________
E24A                  (   flexidedrv.asm):00521         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00522         ;               PRTDBG "PPIDE SETUP LBA$"
E24A B6DE20           (   flexidedrv.asm):00523 [5]             LDA     CURDRVADDRESS
E24D 8401             (   flexidedrv.asm):00524 [2]                     ANDA    #$01                    ; ONLY WANT DRIVE CFG
E24F 48               (   flexidedrv.asm):00525 [2]                     ASLA                                ; SHIFT 4
E250 48               (   flexidedrv.asm):00526 [2]                     ASLA                                ;
E251 48               (   flexidedrv.asm):00527 [2]                     ASLA                                ;
E252 48               (   flexidedrv.asm):00528 [2]                     ASLA                                ;
E253 8AE0             (   flexidedrv.asm):00529 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E255 1F89             (   flexidedrv.asm):00530 [6]                     TFR     A,B
E257 8600             (   flexidedrv.asm):00531 [2]             LDA     #$00
E259 1F01             (   flexidedrv.asm):00532 [6]                     TFR     D,X
E25B 860E             (   flexidedrv.asm):00533 [2]                     LDA         #PPIDE_DEVICE
E25D BDE2D6           (   flexidedrv.asm):00534 [8]                     JSR         IDE_WRITE
E260 8600             (   flexidedrv.asm):00535 [2]             LDA     #$00
E262 F6E359           (   flexidedrv.asm):00536 [5]                     LDB     DEBCYLM
E265 1F01             (   flexidedrv.asm):00537 [6]                     TFR     D,X
E267 860D             (   flexidedrv.asm):00538 [2]                     LDA         #PPIDE_LBAHI
E269 BDE2D6           (   flexidedrv.asm):00539 [8]                     JSR         IDE_WRITE
E26C 8600             (   flexidedrv.asm):00540 [2]             LDA     #$00
E26E F6E358           (   flexidedrv.asm):00541 [5]                     LDB     DEBCYLL                 ;
E271 1F01             (   flexidedrv.asm):00542 [6]                     TFR     D,X
E273 860C             (   flexidedrv.asm):00543 [2]                     LDA         #PPIDE_LBAMID
E275 BDE2D6           (   flexidedrv.asm):00544 [8]                     JSR         IDE_WRITE
E278 8600             (   flexidedrv.asm):00545 [2]             LDA     #$00
E27A F6E35A           (   flexidedrv.asm):00546 [5]                     LDB     DEBSEHD                 ;
E27D 1F01             (   flexidedrv.asm):00547 [6]                     TFR     D,X
E27F 860B             (   flexidedrv.asm):00548 [2]                     LDA         #PPIDE_LBALOW
E281 BDE2D6           (   flexidedrv.asm):00549 [8]                     JSR         IDE_WRITE
E284 8E0001           (   flexidedrv.asm):00550 [3]                     LDX         #$0001
E287 860A             (   flexidedrv.asm):00551 [2]                     LDA         #PPIDE_SEC_CNT
E289 BDE2D6           (   flexidedrv.asm):00552 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00553         
E28C 39               (   flexidedrv.asm):00554 [5]                     RTS
                      (   flexidedrv.asm):00555         
                      (   flexidedrv.asm):00556         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00557         ;
                      (   flexidedrv.asm):00558         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00559         ;
                      (   flexidedrv.asm):00560         ;                   (A) = Track Number
                      (   flexidedrv.asm):00561         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00562         ;________________________________________________________________________________________________________
E28D                  (   flexidedrv.asm):00563         IDE_CONVERT_SECTOR:
E28D 54               (   flexidedrv.asm):00564 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E28E 44               (   flexidedrv.asm):00565 [2]             LSRA                    ;
E28F 2402             (   flexidedrv.asm):00566 [3]             BCC     >
E291 CA80             (   flexidedrv.asm):00567 [2]             ORB     #$80
                      (   flexidedrv.asm):00568         !
E293 F7E35A           (   flexidedrv.asm):00569 [5]                 STB     DEBSEHD                     ; STORE IN SECTOR/HEAD
E296 B7E358           (   flexidedrv.asm):00570 [5]                 STA     DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00571         
                      (   flexidedrv.asm):00572         ;       ADD SLICE OFFSET
E299 FCDE21           (   flexidedrv.asm):00573 [6]                 LDD     CURDRVSLICE
E29C 54               (   flexidedrv.asm):00574 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E29D 44               (   flexidedrv.asm):00575 [2]             LSRA                    ;
E29E 2402             (   flexidedrv.asm):00576 [3]             BCC     >
E2A0 CA80             (   flexidedrv.asm):00577 [2]             ORB     #$80
                      (   flexidedrv.asm):00578         !
E2A2 F7E359           (   flexidedrv.asm):00579 [5]             STB         DEBCYLM                     ; STORE IN TRACK (LSB)
E2A5 2408             (   flexidedrv.asm):00580 [3]             BCC     >
E2A7 B6E358           (   flexidedrv.asm):00581 [5]                 LDA     DEBCYLL                     ; STORE IN TRACK (LSB)
E2AA 8A80             (   flexidedrv.asm):00582 [2]             ORA     #$80
E2AC B7E358           (   flexidedrv.asm):00583 [5]             STA         DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00584         !
E2AF 39               (   flexidedrv.asm):00585 [5]             RTS
                      (   flexidedrv.asm):00586         
                      (   flexidedrv.asm):00587         
                      (   flexidedrv.asm):00588         
                      (   flexidedrv.asm):00589           IF USEDSKYNG = 1
                      (   flexidedrv.asm):00590         ;       PRTDBG "DSKY OUTPUT 1$"
                      (   flexidedrv.asm):00591                 LDA     SEKDSK
                      (   flexidedrv.asm):00592                 STA     DSKY_HEXBUF
                      (   flexidedrv.asm):00593                 LDA     DEBCYLM
                      (   flexidedrv.asm):00594                 STA     DSKY_HEXBUF+1
                      (   flexidedrv.asm):00595                 LDA     DEBCYLL
                      (   flexidedrv.asm):00596                 STA     DSKY_HEXBUF+2
                      (   flexidedrv.asm):00597                 LDA     DEBSEHD
                      (   flexidedrv.asm):00598                 STA     DSKY_HEXBUF+3
                      (   flexidedrv.asm):00599                 JSR     DSKY_BIN2SEG
                      (   flexidedrv.asm):00600                 JSR     DSKY_SHOW
                      (   flexidedrv.asm):00601           ENDC
E2B0 39               (   flexidedrv.asm):00602 [5]             RTS
                      (   flexidedrv.asm):00603         
                      (   flexidedrv.asm):00604         
                      (   flexidedrv.asm):00605         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00606         
                      (   flexidedrv.asm):00607         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00608         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00609         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00610         
                      (   flexidedrv.asm):00611                 ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00612                 ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00613                 ;OUTPUT X = WORD READ FROM IDE DRIVE
E2B1                  (   flexidedrv.asm):00614         IDE_READ:
E2B1 BDE2F8           (   flexidedrv.asm):00615 [8]             JSR         SET_PPI_RD          ; SETUP FOR A READ CYCLE
E2B4                  (   flexidedrv.asm):00616         IDE_READ_NO_SETUP:
E2B4 B7FE62           (   flexidedrv.asm):00617 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2B7 8A40             (   flexidedrv.asm):00618 [2]             ORA         #PPIDE_RD_LINE      ; ASSERT RD PIN
E2B9 B7FE62           (   flexidedrv.asm):00619 [5]             STA         PPIDECNTRL
E2BC 3402             (   flexidedrv.asm):00620 [5+1]       PSHS    A
E2BE F6FE60           (   flexidedrv.asm):00621 [5]             LDB         PPIDELO                     ; READ LOWER BYTE
E2C1 B6FE61           (   flexidedrv.asm):00622 [5]             LDA         PPIDEHI                     ; READ UPPER BYTE
E2C4 1F01             (   flexidedrv.asm):00623 [6]         TFR     D,X
E2C6 3502             (   flexidedrv.asm):00624 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2C8 B7FE62           (   flexidedrv.asm):00625 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2CB 8840             (   flexidedrv.asm):00626 [2]             EORA    #PPIDE_RD_LINE  ; ASSERT RD PIN
E2CD B7FE62           (   flexidedrv.asm):00627 [5]             STA         PPIDECNTRL
E2D0 8600             (   flexidedrv.asm):00628 [2]             LDA         #$00
E2D2 B7FE62           (   flexidedrv.asm):00629 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2D5 39               (   flexidedrv.asm):00630 [5]             RTS
                      (   flexidedrv.asm):00631         
                      (   flexidedrv.asm):00632                 ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00633                 ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00634                 ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00635                 ;
                      (   flexidedrv.asm):00636         
E2D6                  (   flexidedrv.asm):00637         IDE_WRITE:
E2D6 BDE306           (   flexidedrv.asm):00638 [8]             JSR         SET_PPI_WR          ; SETUP FOR A WRITE CYCLE
E2D9 3402             (   flexidedrv.asm):00639 [5+1]       PSHS    A
E2DB 1F10             (   flexidedrv.asm):00640 [6]         TFR     X,D
E2DD F7FE60           (   flexidedrv.asm):00641 [5]             STB         PPIDELO                     ; WRITE LOWER BYTE
E2E0 B7FE61           (   flexidedrv.asm):00642 [5]             STA         PPIDEHI                     ; WRITE UPPER BYTE
E2E3 3502             (   flexidedrv.asm):00643 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2E5 B7FE62           (   flexidedrv.asm):00644 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2E8 8A20             (   flexidedrv.asm):00645 [2]             ORA         #PPIDE_WR_LINE              ; ASSERT WRITE PIN
E2EA B7FE62           (   flexidedrv.asm):00646 [5]             STA         PPIDECNTRL
E2ED 8820             (   flexidedrv.asm):00647 [2]             EORA    #PPIDE_WR_LINE          ; DE ASSERT WR PIN
E2EF B7FE62           (   flexidedrv.asm):00648 [5]             STA             PPIDECNTRL
E2F2 8600             (   flexidedrv.asm):00649 [2]             LDA         #$00
E2F4 B7FE62           (   flexidedrv.asm):00650 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2F7 39               (   flexidedrv.asm):00651 [5]             RTS
                      (   flexidedrv.asm):00652         
                      (   flexidedrv.asm):00653         
                      (   flexidedrv.asm):00654         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00655         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00656         ;
                      (   flexidedrv.asm):00657         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00658         
E2F8                  (   flexidedrv.asm):00659         SET_PPI_RD:
E2F8 3402             (   flexidedrv.asm):00660 [5+1]           PSHS    A
E2FA 8600             (   flexidedrv.asm):00661 [2]             LDA         #$00
E2FC B7FE62           (   flexidedrv.asm):00662 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2FF 8692             (   flexidedrv.asm):00663 [2]             LDA     #PPRD_IDE_8255
E301 B7FE63           (   flexidedrv.asm):00664 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, READ MODE
E304 3582             (   flexidedrv.asm):00665 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00666         
E306                  (   flexidedrv.asm):00667         SET_PPI_WR:
E306 3402             (   flexidedrv.asm):00668 [5+1]           PSHS    A
E308 8600             (   flexidedrv.asm):00669 [2]             LDA         #$00
E30A B7FE62           (   flexidedrv.asm):00670 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E30D 8680             (   flexidedrv.asm):00671 [2]             LDA     #PPWR_IDE_8255
E30F B7FE63           (   flexidedrv.asm):00672 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, WRITE MODE
E312 3582             (   flexidedrv.asm):00673 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00674         
E314 5050494445203A   (   flexidedrv.asm):00675         MESSAGE1    FCC     "PPIDE :"
E31B 04               (   flexidedrv.asm):00676                     FCB     EOT
E31C 20494F3D3078     (   flexidedrv.asm):00677         MESSAGE2    FCC     " IO=0x"
E322 04               (   flexidedrv.asm):00678                     FCB     EOT
E323 204E4F5420505245 (   flexidedrv.asm):00679         MESSAGE3    FCC     " NOT PRESENT"
     53454E54
E32F 04               (   flexidedrv.asm):00680                     FCB     EOT
E330 205050494445303A (   flexidedrv.asm):00681         MESSAGE4    FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
E340 04               (   flexidedrv.asm):00682                     FCB     EOT
E341 205050494445313A (   flexidedrv.asm):00683         MESSAGE5    FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
E351 04               (   flexidedrv.asm):00684                     FCB     EOT
E352 3078             (   flexidedrv.asm):00685         MESSAGE6    FCC     "0x"
E354 04               (   flexidedrv.asm):00686                     FCB     EOT
                      (   flexidedrv.asm):00687         
                      (   flexidedrv.asm):00688         
                      (   flexidedrv.asm):00689         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E355 00               (   flexidedrv.asm):00690         CDEBCYLL:       .BYTE 0         ; DEBLOCKED CYLINDER LSB
E356 00               (   flexidedrv.asm):00691         CDEBCYLM:       .BYTE 0         ; DEBLOCKED CYLINDER MSB
E357 00               (   flexidedrv.asm):00692         CDEBSEHD:       .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E358 00               (   flexidedrv.asm):00693         DEBCYLL:        .BYTE 0         ; DEBLOCKED CYLINDER LSB
E359 00               (   flexidedrv.asm):00694         DEBCYLM:        .BYTE 0         ; DEBLOCKED CYLINDER MSB
E35A 00               (   flexidedrv.asm):00695         DEBSEHD:        .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
                      (      drivers.asm):00580         
                      (      drivers.asm):00581         
                      (      drivers.asm):00582         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00583         
E35B                  (      drivers.asm):00584         HSTBUF:         RMB     512
                      (      drivers.asm):00585         
                      (      drivers.asm):00586         
                      (      drivers.asm):00587         
                      (      drivers.asm):00588                         END

Symbol Table:
[ G] ADDDEV                           DE8E
[ G] CDEBCYLL                         E355
[ G] CDEBCYLM                         E356
[ G] CDEBSEHD                         E357
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DF77
[ G] CHKRDYERR                        DF81
[ G] CHKRDYFLOPPY                     DF85
[ G] CHKRDYIDE                        DF87
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] DCHECK                           DE0F
[ G] DDRIVE                           DE0C
[ G] DEBCYLL                          E358
[ G] DEBCYLM                          E359
[ G] DEBSEHD                          E35A
[ G] DELDEV                           DE9A
[ G] DEVARE                           DE98
[ G] DINIT                            DE15
[ G] DQUICK                           DE12
[ G] DREAD                            DE00
[ G] DRESTOR                          DE09
[ G] DRIVE                            DF33
[ G] DRIVE1                           DF40
[ G] DRIVEERR                         DF3B
[ G] DRVADDRESS                       DE27
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEEK                            DE1B
[ G] DVERFY                           DE06
[ G] DWARM                            DE18
[ G] DWRITE                           DE03
[ G] EOT                              0004
[ G] FNDENT                           DEB5
[ G] HSTBUF                           E35B
[ G] IDE_ABORT                        DFE7
[ G] IDE_CONVERT_SECTOR               E28D
[ G] IDE_INITA                        E009
[ G] IDE_PPIDETECT                    E0BC
[ G] IDE_PRINT_INFO                   DFF0
[ G] IDE_READ                         E2B1
[ G] IDE_READ_BUFFER                  E21A
[ G] IDE_READ_INFO                    E061
[ G] IDE_READ_INFO_ABORT              E0AA
[ G] IDE_READ_INFO_OK                 E0B6
[ G] IDE_READ_NO_SETUP                E2B4
[ G] IDE_READ_RAW_SECTOR              E0F0
[ G] IDE_READ_SECTOR                  E0CA
[ G] IDE_READ_SECTOR_DIRTY            E10E
[ G] IDE_READ_SECTOR_DIRTY1           E113
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E13B
[ G] IDE_READ_SECTOR_ERROR            E0EE
[ G] IDE_SETUP_LBA                    E24A
[ G] IDE_WAIT_DRQ                     E1EA
[ G] IDE_WAIT_DRQ1                    E1F4
[ G] IDE_WAIT_DRQ2                    E216
[ G] IDE_WAIT_DRQ3                    E218
[ G] IDE_WAIT_DRQE                    E211
[ G] IDE_WAIT_NOT_BUSY                E1C1
[ G] IDE_WAIT_NOT_BUSY1               E1CB
[ G] IDE_WAIT_NOT_BUSY2               E1E5
[ G] IDE_WAIT_NOT_BUSY3               E1E7
[ G] IDE_WRITE                        E2D6
[ G] IDE_WRITE_BUFFER                 E232
[ G] IDE_WRITE_SECTOR                 E13E
[ G] IDE_WRITE_SECTOR_ERROR           E189
[ G] IDEBUFRD                         E21E
[ G] IDEBUFWT                         E236
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] INCHNE                           DE6D
[ G] INIT                             DF15
[ G] IRQLL                            DEB6
[ G] IRQVEC                           D3FD
[ G] LD3E1                            D3E1
[ G] MESSAGE1                         E314
[ G] MESSAGE2                         E31C
[ G] MESSAGE3                         E323
[ G] MESSAGE4                         E330
[ G] MESSAGE5                         E341
[ G] MESSAGE6                         E352
[ G] MONITR                           DE33
[ G] NODEV                            DEA4
[ G] NUL                              0000
[ G] PDATA1                           CE7B
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       DFAB
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      E016
[ G] PPIDE_PROBE_FAIL                 E05E
[ G] PPIDE_PROBE_SUCCESS              E060
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E196
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DFA8
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DFA9
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PRCRLF                           CD24
[ G] PRTHEXBYTE                       DF9D
[ G] PSTRNG                           CD1E
[ G] QUICK                            DF8A
[ G] QUICKERR                         DF94
[ G] QUICKFLOPPY                      DF98
[ G] QUICKIDE                         DF9A
[ G] READ                             DEBB
[ G] READERR                          DEC8
[ G] READFLOPPY                       DECD
[ G] READIDE                          DECF
[ G] RESTORE                          DF1D
[ G] RESTOREERR                       DF2A
[ G] RESTOREFLOPPY                    DF2E
[ G] RESTOREIDE                       DF30
[ G] RST_DLY                          E1B4
[ G] SEEK                             DF01
[ G] SEEKERR                          DF0C
[ G] SEEKFLOPPY                       DF10
[ G] SEEKIDE                          DF12
[ G] SET_PPI_RD                       E2F8
[ G] SET_PPI_WR                       E306
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] STAT                             DE5D
[ G] SWIVEC                           D3FD
[ G] TAPPTR                           DEB9
[ G] TINIT                            DE3F
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TREDIR                           DE68
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] USEDSKYNG                        0000
[ G] VERIFY                           DEED
[ G] VERIFYERR                        DEF8
[ G] VERIFYFLOPPY                     DEFC
[ G] VERIFYIDE                        DEFE
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] WARM                             DF19
[ G] WRITE                            DED4
[ G] WRITEERR                         DEE1
[ G] WRITEFLOPPY                      DEE6
[ G] WRITEIDE                         DEE8
