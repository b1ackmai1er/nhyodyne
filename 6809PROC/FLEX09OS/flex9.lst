                      (        flex9.asm):00001                 NAM     flex9.asm
                      (        flex9.asm):00002                 OPT     pag
                      (        flex9.asm):00003                 PAG
                      (        flex9.asm):00004                 PRAGMA CD
                      (        flex9.asm):00005         
                      (        flex9.asm):00006                         include "init.asm"
                      (         init.asm):00001                 NAM     INIT.TXT
                      (         init.asm):00002                 OPT     pag
                      (         init.asm):00003                 PAG
                      (         init.asm):00004                 PRAGMA CD
                      (         init.asm):00005         *************************************************
                      (         init.asm):00006         *                                               *
                      (         init.asm):00007         *       flex 2.9:1 initialization code          *
                      (         init.asm):00008         *                                               *
                      (         init.asm):00009         *************************************************
     C000             (         init.asm):00010         STARTOFFLEX     equ     $C000
     DEFF             (         init.asm):00011         ENDOFFLEX       equ     $DEFF
                      (         init.asm):00012         
                      (         init.asm):00013         ;LNBUFF  equ     $C080
                      (         init.asm):00014         ;STARTR  equ     $C100
                      (         init.asm):00015         
                      (         init.asm):00016         ;SMONTH  equ     $CC0E
                      (         init.asm):00017         ;LNBUFP  equ     $CC14
                      (         init.asm):00018         ;ESCRTN  equ     $CC16
                      (         init.asm):00019         ;PROMPT  equ     $CC4E
                      (         init.asm):00020         
                      (         init.asm):00021         ;COLDST  equ     $CD00
                      (         init.asm):00022         ;WARMST  equ     $CD03
                      (         init.asm):00023         ;RENTER  equ     $CD06
                      (         init.asm):00024         ;INCH    equ     $CD09
                      (         init.asm):00025         ;INCH2   equ     $CD0C
                      (         init.asm):00026         ;OUTCH   equ     $CD0F
                      (         init.asm):00027         ;OUTCH2  equ     $CD12
                      (         init.asm):00028         ;INBUFF  equ     $CD1B
                      (         init.asm):00029         ;PSTRNG  equ     $CD1E
                      (         init.asm):00030         ;PRCRLF  equ     $CD24
                      (         init.asm):00031         ;INDECM  equ     $CD48
                      (         init.asm):00032         ;STAT    equ     $CD4E
                      (         init.asm):00033         
                      (         init.asm):00034         ;ZD0F0   equ     $D0F0
                      (         init.asm):00035         ;ZD0F1   equ     $D0F1
                      (         init.asm):00036         
                      (         init.asm):00037         ;STIME   equ     $D370
                      (         init.asm):00038         
                      (         init.asm):00039         ;IHNDLR  equ     $D3E7
                      (         init.asm):00040         ;TIMOFF  equ     $D3ED
                      (         init.asm):00041         ;TIMON   equ     $D3EF
                      (         init.asm):00042         ;TMINIT  equ     $D3F1
                      (         init.asm):00043         ;TRMINT  equ     $D3F5
                      (         init.asm):00044         ;TRMCHK  equ     $D3F7
                      (         init.asm):00045         ;TIMOUT  equ     $D3F9
                      (         init.asm):00046         ;TIMINE  equ     $D3FB
                      (         init.asm):00047         ;ZD3FD   equ     $D3FD
                      (         init.asm):00048         
                      (         init.asm):00049         ;FMSCAL  equ     $D406
                      (         init.asm):00050         
                      (         init.asm):00051         ;ZDFD0   equ     $DFD0
                      (         init.asm):00052         ;ZDFDC   equ     $DFDC
                      (         init.asm):00053         ;ZDFDD   equ     $DFDD
                      (         init.asm):00054         
                      (         init.asm):00055         ;ZE005   equ     $E005
                      (         init.asm):00056         ;ZE045   equ     $E045
                      (         init.asm):00057         ;ZE085   equ     $E085
                      (         init.asm):00058         ;ZE090   equ     $E090
                      (         init.asm):00059         ;ZE0C5   equ     $E0C5
                      (         init.asm):00060         
                      (         init.asm):00061         ;ZF810   equ     $F810
                      (         init.asm):00062         ;ZFFF0   equ     $FFF0
                      (         init.asm):00063         ;ZFFFC   equ     $FFFC
                      (         init.asm):00064         ;ZFFFD   equ     $FFFD
                      (         init.asm):00065         
                      (         init.asm):00066                 page
                      (         init.asm):00067         
                      (         init.asm):00068         ****************************************************
                      (         init.asm):00069         
                      (         init.asm):00070         
                      (         init.asm):00071         *
                      (         init.asm):00072         * STARTUp rouTINE
                      (         init.asm):00073         * THIS RoutinE INITIALIZES CERTAIN PARAMETERS, GETS
                      (         init.asm):00074         * DATE From uSER, AND EXECUTES A STARTUP.TXT FILE.
                      (         init.asm):00075         
                      (         init.asm):00076                 org     $C400
                      (         init.asm):00077         
C400                  (         init.asm):00078         LOADADDR
C400 2005             (         init.asm):00079 [3]     STAR    bra     STAR0
C402 822E893A81       (         init.asm):00080         Vers    fcb     $82,$2E,$89,$3A,$81
                      (         init.asm):00081         
C407 8639             (         init.asm):00082 [2]     STAR0   lda     #$39            ;SET UP RTS
C409 B7D3FD           (         init.asm):00083 [5]             sta     >TSTSTR          ;disable re-entry to this code
C40C CCCD03           (         init.asm):00084 [3]             ldd     #$CD03          ;setup 'escape routine' address
C40F FDCC16           (         init.asm):00085 [6]             std     >RETRNR         ;ESCRTN
                      (         init.asm):00086                                         ;
                      (         init.asm):00087         ;        ldd     >TRMCHK         ;get address of terminal status check routine
                      (         init.asm):00088         ;        std     >DSTAT+1         ;set in FLEX status check jump
                      (         init.asm):00089         ;                                ;
                      (         init.asm):00090         ;        ldd     >TIMOUT         ;get address of terminal output routine
                      (         init.asm):00091         ;        std     >OUTCH+1        ;set in FLEX out char jump
                      (         init.asm):00092         ;        std     >OUTCH2+1       ;set in FLEX alternate out char jump
                      (         init.asm):00093         ;                                ;
                      (         init.asm):00094         ;        ldd     >TIMINE         ;get address of terminal input routine
                      (         init.asm):00095         ;        std     >INCH+1         ;set in FLEX in char jump
                      (         init.asm):00096         ;        std     >INCH2+1        ;set in FLEX alt in char jump
                      (         init.asm):00097                                ;
C412 BDDE3F           (         init.asm):00098 [8]             jsr     TINIT           ;do terminal init
                      (         init.asm):00099         
C415 8EC4B1           (         init.asm):00100 [3]             ldx     #ZC810          ;point to Flex version signon
C418 BDCE79           (         init.asm):00101 [8]             jsr     >PSTRNG         ;print to terminal
C41B BDCD24           (         init.asm):00102 [8]             jsr     >DPCRLF         ;and CRLF
                      (         init.asm):00103                                        ;
C41E                  (         init.asm):00104         ZC43A   ;ldd     >PPRMPT         ;PROMPT get  current prompt pointer
                      (         init.asm):00105                 ;pshs    b,a             ;save it
                      (         init.asm):00106                 ;ldx     #ZC82E          ;request for date - PROMPT FOR IT
                      (         init.asm):00107                 ;stx     >PPRMPT         ;set new prompt pointer
                      (         init.asm):00108                 ;jsr     >PSTRNG         ;do prompt
                      (         init.asm):00109                 ;jsr     >DINBUF         ;get date
                      (         init.asm):00110                 ;puls    b,a             ;restore prompt pointer
                      (         init.asm):00111                 ;std     >PPRMPT         ;
                      (         init.asm):00112                 ;ldy     #SYSMTH         ;SMONTH point Y reg to date regs
                      (         init.asm):00113                 ;bsr     ZC4A0           ;convert month from ascii
                      (         init.asm):00114                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00115                 ;                        ;
                      (         init.asm):00116                 ;bsr     ZC4A0           ;convert day from ascii
                      (         init.asm):00117                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00118                 ;                        ;
                      (         init.asm):00119                 ;bsr     ZC4A0           ;convert year from ascii
                      (         init.asm):00120                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00121                 ;                        ;
                      (         init.asm):00122                 ;ldy     #STIME          ;point Y reg to system time regs
                      (         init.asm):00123                 ;bsr     ZC4A0           ;
                      (         init.asm):00124                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00125                 ;                        ;
                      (         init.asm):00126                 ;bsr     ZC4A0           ;
                      (         init.asm):00127                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00128                 ;                        ;
                      (         init.asm):00129                 ;bsr     ZC4A0           ;
                      (         init.asm):00130                 ;bcs     ZC43A           ;no good - retry
                      (         init.asm):00131                 ;clr     STIME+3         ;clear tick counter
C41E BDCD24           (         init.asm):00132 [8]             jsr     >DPCRLF         ;do CRLF
                      (         init.asm):00133         
C421 BDDE15           (         init.asm):00134 [8]             jsr     >DINIT          ;init the disk drivers
C424 8EC840           (         init.asm):00135 [3]             ldx     #SYSFCB         ;point to STARTUP.TXT FCB
C427 BDDE0F           (         init.asm):00136 [8]             jsr     >DCHECK         ;do disk check
C42A 8601             (         init.asm):00137 [2]             lda     #$01            ;set for read operation
C42C A784             (         init.asm):00138 [4+0]           sta     ,x              ;
C42E BDD406           (         init.asm):00139 [8]             jsr     >FMS            ;D406
C431 2709             (         init.asm):00140 [3]             beq     ZC47E           ;no error
                      (         init.asm):00141                                         ;
C433 A601             (         init.asm):00142 [4+1]           lda     $01,x           ;
C435 8104             (         init.asm):00143 [2]             cmpa    #$04            ;file not found error?
C437 263B             (         init.asm):00144 [3]             bne     ZC4B2           ;no -
                      (         init.asm):00145                                         ;
C439 7ECD03           (         init.asm):00146 [4]             jmp     >WARMS         ;yes - ignore file
                      (         init.asm):00147                                         ;
C43C 108EC080         (         init.asm):00148 [4]     ZC47E   ldy     #LINBUF         ;init line buffer pointer
C440 10BFCC14         (         init.asm):00149 [7]             sty     >BUFPNT         ;LNBUFP
C444 C680             (         init.asm):00150 [2]             ldb     #$80            ;set byte count to move
                      (         init.asm):00151                                         ;
C446 BDD406           (         init.asm):00152 [8]     ZC488   jsr     >FMS            ;get byte from startup.txt
                      (         init.asm):00153         
C449 2629             (         init.asm):00154 [3]             bne     ZC4B2           ;error
C44B 5A               (         init.asm):00155 [2]             decb                    ;decrement count
C44C 2726             (         init.asm):00156 [3]             beq     ZC4B2           ;done
                      (         init.asm):00157                                         ;
C44E A7A0             (         init.asm):00158 [4+2]           sta     ,y+             ;put character in line buffer
C450 810D             (         init.asm):00159 [2]             cmpa    #$0D            ;see if EOL character
C452 26F2             (         init.asm):00160 [3]             bne     ZC488           ;no - loop
                      (         init.asm):00161                                         ;
C454 8604             (         init.asm):00162 [2]             lda     #$04            ;yes - close file
C456 A784             (         init.asm):00163 [4+0]           sta     ,x              ;
C458 BDD406           (         init.asm):00164 [8]             jsr     >FMS         ;
                      (         init.asm):00165         
C45B 7ECD06           (         init.asm):00166 [4]             jmp     >RENTER         ;re-enter FLEX with command in line buffer
                      (         init.asm):00167                                         ;
                      (         init.asm):00168         *       convert ascii to decimal;
                      (         init.asm):00169                                         ;
C45E BDCD48           (         init.asm):00170 [8]     ZC4A0   jsr     >DINDEC         ;
C461 3410             (         init.asm):00171 [5+2]           pshs    x               ;
C463 250D             (         init.asm):00172 [3]             bcs     ZC4B0           ;
C465 A6A4             (         init.asm):00173 [4+0]           lda     ,y              ;
C467 5D               (         init.asm):00174 [2]             tstb                    ;see if any valid decimal digits entered
C468 1A01             (         init.asm):00175 [3]             orcc    #$01            ;set carry flag for error
C46A 2704             (         init.asm):00176 [3]             beq     ZC4AE           ;no - return error
                      (         init.asm):00177                                         ;
C46C A661             (         init.asm):00178 [4+1]           lda     $01,s           ;yes - get returned byte
C46E 1CFE             (         init.asm):00179 [3]             andcc   #$FE            ;set carry flag = 0 if no error
C470 A7A0             (         init.asm):00180 [4+2]   ZC4AE   sta     ,y+             ;put in callers buffer
C472 3586             (         init.asm):00181 [5+4]   ZC4B0   puls    pc,b,a          ;return
                      (         init.asm):00182         
                      (         init.asm):00183         *       error in startup file - report it
                      (         init.asm):00184         
C474 8EC49E           (         init.asm):00185 [3]     ZC4B2   ldx     #ZC555          ;can't run startup message
                      (         init.asm):00186         
C477 BDCE79           (         init.asm):00187 [8]             jsr     >PSTRNG
                      (         init.asm):00188         
C47A 7ECD03           (         init.asm):00189 [4]             jmp     >WARMS
                      (         init.asm):00190         
                      (         init.asm):00191         *       fix up number of K of memory available message
                      (         init.asm):00192         
C47D 3414             (         init.asm):00193 [5+3]   ZC4BB   pshs    x,b
C47F 8EC4D5           (         init.asm):00194 [3]             ldx     #ZC82B          ;'K' message
C482 8604             (         init.asm):00195 [2]             lda     #$04
C484 2006             (         init.asm):00196 [3]             bra     ZC4CA
                      (         init.asm):00197         
                      (         init.asm):00198         *
                      (         init.asm):00199         
C486 800A             (         init.asm):00200 [2]     ZC4C4   suba    #$0A
C488 A784             (         init.asm):00201 [4+0]           sta     ,x
C48A 8601             (         init.asm):00202 [2]             lda     #$01
                      (         init.asm):00203         
                      (         init.asm):00204         *
                      (         init.asm):00205         
C48C AB82             (         init.asm):00206 [4+2]   ZC4CA   adda    ,-x
C48E 8A30             (         init.asm):00207 [2]             ora     #$30
C490 A784             (         init.asm):00208 [4+0]           sta     ,x
C492 8139             (         init.asm):00209 [2]             cmpa    #$39
C494 22F0             (         init.asm):00210 [3]             bhi     ZC4C4
C496 3594             (         init.asm):00211 [5+5]           puls    pc,x,b
                      (         init.asm):00212         
                      (         init.asm):00213         *       return status that no no RTC is available
                      (         init.asm):00214         *       but mPT does exist
                      (         init.asm):00215         
C498 BDDE3E           (         init.asm):00216 [8]     ZC4D6   jsr     TMINT           ;init timer
C49B 8602             (         init.asm):00217 [2]             lda     #$02            ;set flag for MPT
C49D 39               (         init.asm):00218 [5]             rts
                      (         init.asm):00219         
                      (         init.asm):00220         *       startup file error message
                      (         init.asm):00221         
C49E 43616E2774207275 (         init.asm):00222         ZC555   fcc     "Can't run STARTUP."
     6E20535441525455
     502E
C4B0 04               (         init.asm):00223                 fcb     $04
                      (         init.asm):00224         
                      (         init.asm):00225         *       flex startup signon message
                      (         init.asm):00226         
C4B1                  (         init.asm):00227         ZC810   ;fcb     $1A               ; purpose?
C4B1 464C455820666F72 (         init.asm):00228                 fcc     "FLEX for NHYODYNEM Version 2.9:2 "
     204E48594F44594E
     454D205665727369
     6F6E20322E393A32
     20
C4D2 043438           (         init.asm):00229                 fcb     $04,$34,$38   ; purpose?
                      (         init.asm):00230         
C4D5 34384B2072616D   (         init.asm):00231         ZC82B   fcc     "48K ram"
C4DC 04               (         init.asm):00232                 fcb     $04        ; purpose?
C4DD 04               (         init.asm):00233                 fcb     $04
                      (         init.asm):00234         
                      (         init.asm):00235         *       date prompt
                      (         init.asm):00236         
C4DE 4461746520616E64 (         init.asm):00237         ZC82E   fcc     "Date and TIME (MM/DD/YY HH/MM/SS)? "
     2054494D4520284D
     4D2F44442F595920
     48482F4D4D2F5353
     293F20
C501 04               (         init.asm):00238                 fcb     $04
                      (         init.asm):00239         
                      (         init.asm):00240         ;        org     SYSFCB         ; same data in FLX29CPP
                      (         init.asm):00241         
                      (         init.asm):00242         ;        fcb     $FF
                      (         init.asm):00243         ;        fcb     $00
                      (         init.asm):00244         ;        fcb     $00
                      (         init.asm):00245         ;        fcb     $00
                      (         init.asm):00246         ;        fcc     "startup"
                      (         init.asm):00247         ;        fcb     $00
                      (         init.asm):00248         ;        fcc     "txt"
                      (         init.asm):00249         ;        fcb     $00
                      (         init.asm):00250         
                      (         init.asm):00251         *************************************************
                      (         init.asm):00252         *                                               *
                      (         init.asm):00253         *       flex entry point after boot             *
                      (         init.asm):00254         *                                               *
                      (         init.asm):00255         *         this must start at $C850              *
                      (         init.asm):00256         *       N8VEM doesn't use this!                 *
                      (         init.asm):00257         *************************************************
                      (         init.asm):00258         ;               org $c850
                      (         init.asm):00259         ;COLDSTART
                      (         init.asm):00260         ;SFRES1  orcc    #$50
                      (         init.asm):00261                 ;lds     #LNBUF
                      (         init.asm):00262                 ;ldd     >ZDFDC
                      (         init.asm):00263                 ;ldx     >ZD0F0
                      (         init.asm):00264                 ;pshs    x,b,a
                      (         init.asm):00265                 ;ldx     #$99AA
                      (         init.asm):00266                 ;ldy     #STARTR+256
                      (         init.asm):00267                 ;ldb     #$FF
                      (         init.asm):00268         
                      (         init.asm):00269         ;ZC867   lbsr    ZC91A
                      (         init.asm):00270                 ;stx     >ZD0F0
                      (         init.asm):00271                 ;cmpx    >ZD0F0
                      (         init.asm):00272                 ;bne     ZC888
                      (         init.asm):00273                 ;pshs    b
                      (         init.asm):00274         
                      (         init.asm):00275         ;ZC874   lbsr    ZC91A
                      (         init.asm):00276                 ;stb     >ZD0F1
                      (         init.asm):00277                 ;subb    #$01
                      (         init.asm):00278                 ;bcc     ZC874
                      (         init.asm):00279         
                      (         init.asm):00280                 ;puls    b
                      (         init.asm):00281                 ;lbsr    ZC91A
                      (         init.asm):00282                 ;cmpb    >ZD0F1
                      (         init.asm):00283                 ;beq     ZC889
                      (         init.asm):00284         ;ZC888   clra
                      (         init.asm):00285         
                      (         init.asm):00286         ;ZC889   sta     ,-y
                      (         init.asm):00287                 ;beq     ZC890
                      (         init.asm):00288                 ;lbsr    ZC4BB
                      (         init.asm):00289         
                      (         init.asm):00290         ;ZC890   subb    #$01
                      (         init.asm):00291                 ;bcc     ZC867
                      (         init.asm):00292         
                      (         init.asm):00293                 ;puls    x,b,a
                      (         init.asm):00294                 ;std     >ZFFFC
                      (         init.asm):00295                 ;stx     >ZD0F0
                      (         init.asm):00296                 ;clra
                      (         init.asm):00297                 ;ldx     #STARTR
                      (         init.asm):00298                 ;ldb     >ZDFDC
                      (         init.asm):00299                 ;eorb    #$0F
                      (         init.asm):00300                 ;clr     d,x
                      (         init.asm):00301                 ;ldb     >ZDFDD
                      (         init.asm):00302                 ;eorb    #$0F
                      (         init.asm):00303                 ;clr     d,x
                      (         init.asm):00304                 ;bsr     ZC922
                      (         init.asm):00305                 ;tstb
                      (         init.asm):00306                 ;beq     ZC8B8
                      (         init.asm):00307         
                      (         init.asm):00308         ;ZC8B3   clr     ,y+
                      (         init.asm):00309                 ;decb
                      (         init.asm):00310                 ;bne     ZC8B3
                      (         init.asm):00311         
                      (         init.asm):00312         ;ZC8B8   leay    -$0C,y
                      (         init.asm):00313                 ;ldx     #ZFFF0
                      (         init.asm):00314                 ;ldb     #$10
                      (         init.asm):00315         
                      (         init.asm):00316         ;ZC8BF   lda     ,y+
                      (         init.asm):00317                 ;sta     ,x+
                      (         init.asm):00318                 ;decb
                      (         init.asm):00319                 ;bne     ZC8BF
                      (         init.asm):00320                 ;lda     >MEMEND
                      (         init.asm):00321                 ;asla
                      (         init.asm):00322                 ;asla
                      (         init.asm):00323                 ;asla
                      (         init.asm):00324                 ;asla
                      (         init.asm):00325                 ;clrb
                      (         init.asm):00326                 ;subd    #$0001
                      (         init.asm):00327                 ;std     >MEMEND
                      (         init.asm):00328                 ;lbsr    ZC4D6
                      (         init.asm):00329                 ;ora     >CPUTYP
                      (         init.asm):00330                 ;ldb     >ZDFD0
                      (         init.asm):00331                 ;bitb    #$F0
                      (         init.asm):00332                 ;beq     ZC8E3
                      (         init.asm):00333                 ;ora     #$01
                      (         init.asm):00334         
                      (         init.asm):00335         ;ZC8E3   ldb     >ZE005
                      (         init.asm):00336                 ;beq     ZC8FD
                      (         init.asm):00337                 ;cmpb    #$FF
                      (         init.asm):00338                 ;beq     ZC8FD
                      (         init.asm):00339                 ;cmpb    >ZE0C5
                      (         init.asm):00340                 ;bne     ZC8FD
                      (         init.asm):00341                 ;cmpb    >ZE045
                      (         init.asm):00342                 ;bne     ZC8FD
                      (         init.asm):00343                 ;cmpb    >ZE085
                      (         init.asm):00344                 ;bne     ZC8FD
                      (         init.asm):00345                 ;ora     #$04
                      (         init.asm):00346         
                      (         init.asm):00347         ;ZC8FD   ldx     >$E800
                      (         init.asm):00348                 ;pshs    x
                      (         init.asm):00349                 ;ldx     #$99AA
                      (         init.asm):00350                 ;stx     >$E800
                      (         init.asm):00351                 ;cmpx    >$E800
                      (         init.asm):00352                 ;puls    x
                      (         init.asm):00353                 ;bne     ZC911
                      (         init.asm):00354                 ;ora     #$10
                      (         init.asm):00355         
                      (         init.asm):00356         ;ZC911   stx     >$E800
                      (         init.asm):00357                 ;sta     >CPUTYP
C502 7EC400           (         init.asm):00358 [4]             jmp     >STAR
                      (         init.asm):00359         
                      (         init.asm):00360         *
                      (         init.asm):00361         
                      (         init.asm):00362         ;ZC91A   tfr     b,a
                      (         init.asm):00363                 ;eora    #$0F
                      (         init.asm):00364                 ;sta     >ZFFFD
                      (         init.asm):00365                 ;rts
                      (         init.asm):00366         
                      (         init.asm):00367         ;*
                      (         init.asm):00368         
                      (         init.asm):00369         ;ZC922   ldb     #$0C
                      (         init.asm):00370                 ;ldy     #ZDFD0
                      (         init.asm):00371         ;*       ldx     #STARTR+16
                      (         init.asm):00372                 ;ldx     #STARTR
                      (         init.asm):00373         
                      (         init.asm):00374         ;ZC92B   cmpx    #STARTR+256
                      (         init.asm):00375                 ;beq     ZC93D
                      (         init.asm):00376                 ;lda     ,x+
                      (         init.asm):00377                 ;beq     ZC92B
                      (         init.asm):00378                 ;sta     ,y+
                      (         init.asm):00379                 ;inc     >MEMEND
                      (         init.asm):00380                 ;decb
                      (         init.asm):00381                 ;bne     ZC92B
                      (         init.asm):00382                 ;rts
                      (         init.asm):00383         
                      (         init.asm):00384         ;ZC93D   ldx     #STARTR
                      (         init.asm):00385         
                      (         init.asm):00386         ;ZC940   cmpx    #STARTR+16
                      (         init.asm):00387                 ;beq     ZC951
                      (         init.asm):00388                 ;lda     ,x+
                      (         init.asm):00389                 ;beq     ZC940
                      (         init.asm):00390                 ;sta     ,y+
                      (         init.asm):00391                 ;inc     >MEMEND
                      (         init.asm):00392                 ;decb
                      (         init.asm):00393                 ;bne     ZC940
                      (         init.asm):00394         
C505 39               (         init.asm):00395 [5]     ZC951   rts
                      (        flex9.asm):00007                         include "spooler.asm"
                      (      spooler.asm):00001                 NAM     SPOOLER.TXT
                      (      spooler.asm):00002                 OPT     pag
                      (      spooler.asm):00003         *       LEN     96
                      (      spooler.asm):00004                 PAG
                      (      spooler.asm):00005                 PRAGMA CD
                      (      spooler.asm):00006         
                      (      spooler.asm):00007         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00008         ;
                      (      spooler.asm):00009         ;       FLEX Spooler STUB (No spooler support on Nhyodyne)
                      (      spooler.asm):00010         ;
                      (      spooler.asm):00011         ;       DWERNER 8/14/2022
                      (      spooler.asm):00012         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00013         
                      (      spooler.asm):00014                         ORG $C700               ; JUMP TABLE STARTS AT $C700
                      (      spooler.asm):00015         
C700 393939           (      spooler.asm):00016         PRSPLI          FCB $39,$39,$39         ; REPLACE THE FIRST BYTE
C703 393939           (      spooler.asm):00017         PRSPL2          FCB $39,$39,$39         ; OF EACH ENTRY WITH AN
C706 393939           (      spooler.asm):00018         PRSPL3          FCB $39,$39,$39         ; RTS ($39) AND THE SECOND
C709 393939           (      spooler.asm):00019         PRSPL4          FCB $39,$39,$39         ; TWO BYTES WITH ANYTHING
C70C 393939           (      spooler.asm):00020         PRSPL5          FCB $39,$39,$39
C70F 393939           (      spooler.asm):00021         PRSPL6          FCB $39,$39,$39
                      (      spooler.asm):00022         
                      (      spooler.asm):00023                         ORG $C71B               ; QUEUE COUNT IS AT $C71B
C71B 00               (      spooler.asm):00024         QCNT            FCB 0                   ; FORCE QUEUE COUNT TO ZERO
                      (        flex9.asm):00008                         include "flx29ccp.asm"
                      (     flx29ccp.asm):00001                 OPT PAG
                      (     flx29ccp.asm):00002                 TTL 6809 FILE MANAGEMENT SYSTEM
                      (     flx29ccp.asm):00003                 PAG
                      (     flx29ccp.asm):00004                 PRAGMA CD
                      (     flx29ccp.asm):00005         *
                      (     flx29ccp.asm):00006         * TSC 6809 DISK OPERATING SYSTEM
                      (     flx29ccp.asm):00007         *
                      (     flx29ccp.asm):00008         * COPYRIGHT (C) 1979 BY
                      (     flx29ccp.asm):00009         *
                      (     flx29ccp.asm):00010         * TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29ccp.asm):00011         * PO BOX 2570
                      (     flx29ccp.asm):00012         * WEST LAFAYETTE, INDIANA  47906
                      (     flx29ccp.asm):00013         *
                      (     flx29ccp.asm):00014         
                      (     flx29ccp.asm):00015         *
                      (     flx29ccp.asm):00016         * GLOBAL VARIABLE STARAGE
                      (     flx29ccp.asm):00017         *
                      (     flx29ccp.asm):00018         
     C080             (     flx29ccp.asm):00019         LINBUF  equ     $C080
     D40B             (     flx29ccp.asm):00020         CURFCB  equ     $D40B
                      (     flx29ccp.asm):00021         
                      (     flx29ccp.asm):00022         * ASCII CODE EQUATES
                      (     flx29ccp.asm):00023         
     0000             (     flx29ccp.asm):00024         NUL     equ     $00
     0004             (     flx29ccp.asm):00025         EOT     equ     $04
                      (     flx29ccp.asm):00026         
                      (     flx29ccp.asm):00027         * EXTERNAL LABEL EQUATES
                      (     flx29ccp.asm):00028         
     C07F             (     flx29ccp.asm):00029         STACK   equ     $C07F
     C400             (     flx29ccp.asm):00030         LC400   equ     $C400
     C700             (     flx29ccp.asm):00031         CHPR    equ     $C700
                      (     flx29ccp.asm):00032         
                      (     flx29ccp.asm):00033         
                      (     flx29ccp.asm):00034         
                      (     flx29ccp.asm):00035                 org     $C840
                      (     flx29ccp.asm):00036         
C840                  (     flx29ccp.asm):00037         SYSFCB
C840 FF000000         (     flx29ccp.asm):00038                         fcb     $FF,0,0,0
C844 73746172747570   (     flx29ccp.asm):00039                         fcc     "startup"       ; SYSTEM HANGS WHEN TRYING TO EXECUTE STARTUP.TXT
C84B 00               (     flx29ccp.asm):00040                         fcb             0
C84C 747874           (     flx29ccp.asm):00041                         fcc             "txt"
C84F 00               (     flx29ccp.asm):00042                         fcb             0
                      (     flx29ccp.asm):00043         
                      (     flx29ccp.asm):00044         *************************************************
                      (     flx29ccp.asm):00045         *                                               *
                      (     flx29ccp.asm):00046         *       flex entry point after boot             *
                      (     flx29ccp.asm):00047         *                                               *
                      (     flx29ccp.asm):00048         *         this must start at $C850              *
                      (     flx29ccp.asm):00049         *       N8VEM doesn't use this!                 *
                      (     flx29ccp.asm):00050         *************************************************
                      (     flx29ccp.asm):00051                         org $c850
C850 7EC407           (     flx29ccp.asm):00052 [4]                     jmp         STAR0
                      (     flx29ccp.asm):00053         
     0080             (     flx29ccp.asm):00054         LBL     equ     128         ;LINE BUFFER LENGTH
                      (     flx29ccp.asm):00055         
                      (     flx29ccp.asm):00056                 org     $CC00
                      (     flx29ccp.asm):00057         
CC00 08               (     flx29ccp.asm):00058         TTYBS   fcb     $08         ;$CC00   ;BACK SPACE (^H)
CC01 18               (     flx29ccp.asm):00059         TTYDEL  fcb     $18         ;$CC01   ;DELETE CHARACTER (^X)
CC02 3A               (     flx29ccp.asm):00060         TTYEOL  fcb     $3A         ;$CC02   ;END OF LINE CHAR (:)
                      (     flx29ccp.asm):00061         ;TTYDP   fcb     $00         ;$CC03   ;LINES PER SCREEN
CC03 18               (     flx29ccp.asm):00062         TTYDP   fcb     24         ;$CC03   ;LINES PER SCREEN
                      (     flx29ccp.asm):00063         ;COLCNT  fcb     $00         ;$CC04   ;COLUMNS PER LINE
CC04 50               (     flx29ccp.asm):00064         COLCNT  fcb     80         ;$CC04   ;COLUMNS PER LINE
                      (     flx29ccp.asm):00065         ;TTYNL   fcb     $06         ;$CC05   ;LINE PADDING NULLS
CC05 00               (     flx29ccp.asm):00066         TTYNL   fcb     $00         ;$CC05   ;LINE PADDING NULLS
CC06 00               (     flx29ccp.asm):00067         TTYTB   fcb     $00         ;$CC06   ;TAB CHARACTER
                      (     flx29ccp.asm):00068         ;TTYBE   fcb     $00         ;$CC07   ;BACK SPACE ECHO
CC07 08               (     flx29ccp.asm):00069         TTYBE   fcb     $08         ;$CC07   ;BACK SPACE ECHO
CC08 00               (     flx29ccp.asm):00070         TTYEJ   fcb     $00         ;$CC08   ;EJECT LENGTH
                      (     flx29ccp.asm):00071         ;TTYPS   fcb     $FF         ;$CC09   ;PAUSE CONTROL
CC09 00               (     flx29ccp.asm):00072         TTYPS   fcb     $00         ;$CC09   ;PAUSE CONTROL
CC0A 1B               (     flx29ccp.asm):00073         TTYESC  fcb     $1B         ;$CC0A   ;ESCAPE CHARACTER
CC0B 00               (     flx29ccp.asm):00074         SYSDRV  fcb     $00         ;$CC0B   ;SYSTEM DRIVE
CC0C 01               (     flx29ccp.asm):00075         WRKDRV  fcb     $01         ;$CC0C   ;WORKING DRIVE
CC0D 00               (     flx29ccp.asm):00076         SYSFLG  fcb     $00         ;$CC0D   ;SYSTEM FLAG
CC0E 00               (     flx29ccp.asm):00077         SYSMTH  fcb     $00         ;$CC0E   ;SYSTEM DATE
CC0F 00               (     flx29ccp.asm):00078         SYSDAY  fcb     $00         ;$CC0F   ;
CC10 00               (     flx29ccp.asm):00079         SYSYR   fcb     $00         ;$CC10   ;
CC11 00               (     flx29ccp.asm):00080         LSTTRM  fcb     $00         ;$CC11   ;LAST TERMINATOR
CC12 0000             (     flx29ccp.asm):00081         USRTBL  fdb     $0000       ;$CC12   ;USER COMMAND TABLE
CC14 0000             (     flx29ccp.asm):00082         BUFPNT  fdb     $0000       ;$CC14   ;LINE BUFFER POINTER
CC16 0000             (     flx29ccp.asm):00083         RETRNR  fdb     $0000       ;$CC16   ;ESCAPE RETURN REG
CC18 00               (     flx29ccp.asm):00084         CHAR    fcb     $00         ;$CC18   ;CHARACTER
CC19 00               (     flx29ccp.asm):00085         PRVCHR  fcb     $00         ;$CC19   ;PREVIOUS CHARACTER
CC1A 00               (     flx29ccp.asm):00086         LINE    fcb     $00         ;$CC1A   ;CURRENT LINE NUMBER
CC1B 0000             (     flx29ccp.asm):00087         OFFSET  fdb     $0000       ;$CC1B   ;LOADER ADR OFFSET
CC1D 00               (     flx29ccp.asm):00088         XFR     fcb     $00         ;$CC1D   ;TRANSFER FLAG
CC1E 0000             (     flx29ccp.asm):00089         TADR    fdb     $0000       ;$CC1E   ;TRANSFER ADDRESS
CC20 00               (     flx29ccp.asm):00090         ERRTYP  fcb     $00         ;$CC20   ;ERROR TYPE
CC21 00               (     flx29ccp.asm):00091         SPCLS   fcb     $00         ;$CC21   ;SPECIAL IO FLAG
CC22 00               (     flx29ccp.asm):00092         OUTCHN  fcb     $00         ;$CC22   ;OUTPUT CHANNEL BYTE
CC23 00               (     flx29ccp.asm):00093         INCHNL  fcb     $00         ;$CC23   ;INPUT CHANNEL BYTE
CC24 0000             (     flx29ccp.asm):00094         FILOUT  fdb     $0000       ;$CC24   ;OUTPUT FILE ADDRESS
CC26 0000             (     flx29ccp.asm):00095         FILIN   fdb     $0000       ;$CC26   ;INPUT FILE ADDRESS
CC28 00               (     flx29ccp.asm):00096         CMFLG   fcb     $00         ;$CC28   ;COMMAND FLAG
CC29 00               (     flx29ccp.asm):00097         COLMN   fcb     $00         ;$CC29   ;CURRENT OUTPUT COL.
CC2A 00               (     flx29ccp.asm):00098         TMRFLG  fcb     $00         ;$CC2A   ;TIMER FLAG UNUSED NOW
CC2B 0000             (     flx29ccp.asm):00099         ERRVEC  fdb     $0000       ;$CC2D   ;ERROR NAME VECTOR
CC2D 01               (     flx29ccp.asm):00100         FILEKO  fcb     $01         ;$CC2F   ;FILE INPUT ECHO
CC2E 00               (     flx29ccp.asm):00101         FMSBSY  fcb     $00         ;$CC30   ;FMS IS BUSY FLAG
CC2F 0000             (     flx29ccp.asm):00102         CP      fdb     $0000       ;$CC31   ;
CC31 00               (     flx29ccp.asm):00103         CPUTYP  fcb     $00         ;$CC33   ;
CC32 00               (     flx29ccp.asm):00104         PRCNT   fcb     $00         ;$CC34   ;UNUSED NOW
CC33 000000000000     (     flx29ccp.asm):00105         SPARES  fdb     0,0,0       ;$CC35   ;SPARE BYTES
CC39                  (     flx29ccp.asm):00106         XTEMP   rmb     2           ;$CC3B   ;INDEX TEMP
CC3B                  (     flx29ccp.asm):00107         INDEX   rmb     2           ;$CC3D   ;INDEX TEMP STORAGE
CC3D                  (     flx29ccp.asm):00108         CRSAVE  rmb     2           ;$CC3F   ;INDEX SAVE
CC3F                  (     flx29ccp.asm):00109         DATPNT  rmb     2           ;$CC41   ;DATA POINTER
CC41                  (     flx29ccp.asm):00110         RETADR  rmb     2           ;$CC43   ;RETURN ADDRESS
CC43                  (     flx29ccp.asm):00111         STKSTR  rmb     2           ;$CC45   ;STACK STORAGE
CC45                  (     flx29ccp.asm):00112         IOTEMP  rmb     2           ;$CC47   ;IO TEMP STORE
                      (     flx29ccp.asm):00113         
                      (     flx29ccp.asm):00114         * SET MAPUP TO $FF TO DISABLE MAPPING
                      (     flx29ccp.asm):00115         
CC47 60               (     flx29ccp.asm):00116         MAPUP   fcb     $60         ;$CC49   ;MAP FILENAMES TO UPPER
CC48                  (     flx29ccp.asm):00117         OUTNUM  rmb     1           ;$CC4A   ;0 SUPPRESSION FLAG
CC49                  (     flx29ccp.asm):00118         COUNT   rmb     1           ;$CC4B   ;SPARE COUNT REGISTER
CC4A                  (     flx29ccp.asm):00119         GOTFIL  rmb     1           ;$CC4C   ;FILE INDICATOR
CC4B                  (     flx29ccp.asm):00120         Temp    rmb     1           ;$CC4D   ;TEMPORARY REGISTER
                      (     flx29ccp.asm):00121         
CC4C CCAA             (     flx29ccp.asm):00122         PPRMPT  fdb     PRMPT
                      (     flx29ccp.asm):00123         
CC4E 574841543F       (     flx29ccp.asm):00124         WHATST  fcc     "WHAT?"
CC53 04               (     flx29ccp.asm):00125                         fcb             EOT
CC54 43414E2754205452 (     flx29ccp.asm):00126         NOTRST  fcc     "CAN'T TRANSFER"
     414E53464552
CC62 04               (     flx29ccp.asm):00127                         fcb             EOT
CC63 4E4F5420464F554E (     flx29ccp.asm):00128         NONMST  fcc     "NOT FOUND"
     44
CC6C 04               (     flx29ccp.asm):00129                         fcb             EOT
CC6D 4449534B20455252 (     flx29ccp.asm):00130         DSKERS  fcc     "DISK ERROR #"
     4F522023
CC79 04               (     flx29ccp.asm):00131                         fcb             EOT
CC7A 4452495645204E4F (     flx29ccp.asm):00132         NTRST   fcc     "DRIVE NOT READY"
     54205245414459
CC89 04               (     flx29ccp.asm):00133                         fcb             EOT
CC8A 474554           (     flx29ccp.asm):00134         COMTBL  fcc     "GET"
CC8D 00               (     flx29ccp.asm):00135                         fcb             0
CC8E D219             (     flx29ccp.asm):00136                 fdb     GET
CC90 4D4F4E           (     flx29ccp.asm):00137                 fcc     "MON"
CC93 00               (     flx29ccp.asm):00138                 fcb             0
CC94 D355             (     flx29ccp.asm):00139                 fdb     MEXIT
CC96 00               (     flx29ccp.asm):00140                 fcb     $00
                      (     flx29ccp.asm):00141         
CC97 2710             (     flx29ccp.asm):00142         CONTBL  fdb     10000
CC99 03E8             (     flx29ccp.asm):00143                 fdb     1000
CC9B 0064             (     flx29ccp.asm):00144                 fdb     100
CC9D 000A             (     flx29ccp.asm):00145                 fdb     10
                      (     flx29ccp.asm):00146         
CC9F 6572726F7273     (     flx29ccp.asm):00147         ERNM    fcc     "errors"
CCA5 0000             (     flx29ccp.asm):00148                         fcb     0,0
CCA7 737973           (     flx29ccp.asm):00149                         fcc             "sys"
                      (     flx29ccp.asm):00150         
CCAA 2B2B2B           (     flx29ccp.asm):00151         PRMPT   fcc     "+++"
CCAD 04               (     flx29ccp.asm):00152                         fcb             EOT
                      (     flx29ccp.asm):00153         
                      (     flx29ccp.asm):00154                 org     $CCC0
                      (     flx29ccp.asm):00155         
CCC0 39               (     flx29ccp.asm):00156 [5]     PINIT   rts
                      (     flx29ccp.asm):00157         
                      (     flx29ccp.asm):00158                 org     $CCD8
                      (     flx29ccp.asm):00159         
CCD8 39               (     flx29ccp.asm):00160 [5]     PCHK    rts
                      (     flx29ccp.asm):00161         
                      (     flx29ccp.asm):00162                 org     $CCE4
                      (     flx29ccp.asm):00163         
CCE4 39               (     flx29ccp.asm):00164 [5]     POUT    rts
                      (     flx29ccp.asm):00165         
                      (     flx29ccp.asm):00166                 org     $CCF8
                      (     flx29ccp.asm):00167         
CCF8 01000000         (     flx29ccp.asm):00168         PR0     fcb     $01,$00,$00,$00
CCFC 00000000         (     flx29ccp.asm):00169         PR1     fcb     $00,$00,$00,$00
                      (     flx29ccp.asm):00170         
CD00 7ECD57           (     flx29ccp.asm):00171 [4]     COLDS   jmp     INITI        ;GO INITIALIZE
CD03 7ECD67           (     flx29ccp.asm):00172 [4]     WARMS   jmp     ENTRY       ;WARM ENTRY POINT
CD06 7ECDAB           (     flx29ccp.asm):00173 [4]     RENTER  jmp     DOS3        ;RE-ENTER DOS
CD09 7EDE6D           (     flx29ccp.asm):00174 [4]     INCH    jmp     INCHNE      ;INCHNE           ;INPUT ROUTINE
CD0C 7EDE6D           (     flx29ccp.asm):00175 [4]     INCH2   jmp     INCHNE      ;TERMINAL INPUT
CD0F 7EDE4C           (     flx29ccp.asm):00176 [4]     OUTCH   jmp     VOUTCH      ;VOUTCH           ;OUTPUT CHARACTER
CD12 7EDE4C           (     flx29ccp.asm):00177 [4]     OUTCH2  jmp     VOUTCH           ;TERMINAL OUTPUT
CD15 7ECEF5           (     flx29ccp.asm):00178 [4]     DGETCH  jmp     GETCHR      ;GET CHARACTER
CD18 7ECF3B           (     flx29ccp.asm):00179 [4]     DPUTCH  jmp     PUTCHR      ;PUT CHARACTER
CD1B 7ECE2A           (     flx29ccp.asm):00180 [4]     DINBUF  jmp     INBUF       ;INPUT TO BUFFER
CD1E 7ECE79           (     flx29ccp.asm):00181 [4]     DPSTRN  jmp     PSTRNG      ;PRINT STRING
CD21 7ECFE7           (     flx29ccp.asm):00182 [4]     DCLASS  jmp     CLASS       ;CLASSIFY CHARACTER
CD24 7ECEAF           (     flx29ccp.asm):00183 [4]     DPCRLF  jmp     PCRLF       ;PRINT CR AND LF
CD27 7ED008           (     flx29ccp.asm):00184 [4]     DNEXTC  jmp     NXTCH       ;NEXT BUFFER CHAR
CD2A 7ECDE4           (     flx29ccp.asm):00185 [4]     RSTRIO  jmp     RESTIO      ;RESTORE IO VECTORS
CD2D 7ED030           (     flx29ccp.asm):00186 [4]     DFILSP  jmp     GETFIL      ;GET FILE SPEC
CD30 7ED1AF           (     flx29ccp.asm):00187 [4]     DLOAD   jmp     LOAD        ;FILE LOADER
CD33 7ED0E5           (     flx29ccp.asm):00188 [4]     DSETEX  jmp     SETEXT      ;SET NAME EXTENSION
CD36 7ED353           (     flx29ccp.asm):00189 [4]     DADDBX  jmp     ADDBX       ;ADD B TO X
CD39 7ECF80           (     flx29ccp.asm):00190 [4]     DOUTDE  jmp     OUTDEC      ;OUTPUT DECIMAL
CD3C 7ECFCE           (     flx29ccp.asm):00191 [4]     DOUTHE  jmp     OUTHEX      ;OUT HEX CHARACTER
CD3F 7ED289           (     flx29ccp.asm):00192 [4]     DRPTER  jmp     RPTERR      ;REPORT ERROR
CD42 7ED13C           (     flx29ccp.asm):00193 [4]     DGETHX  jmp     GETHEX      ;GET HEX NUMBER
CD45 7ECFCA           (     flx29ccp.asm):00194 [4]     DOUTAD  jmp     OUTADR      ;OUT HEX ADDRESS
CD48 7ED185           (     flx29ccp.asm):00195 [4]     DINDEC  jmp     INDEC       ;GET DECIMAL NUMBER
CD4B 7ED333           (     flx29ccp.asm):00196 [4]     DDOCMD  jmp     DOCMD       ;DO COMMAND LINE
CD4E 7EDE5D           (     flx29ccp.asm):00197 [4]     DSTAT   jmp     STAT        ;TERMINAL INPUT STATUS
CD51 7ECDFF           (     flx29ccp.asm):00198 [4]     DSPR2   jmp     RTS
CD54 7ECDFF           (     flx29ccp.asm):00199 [4]     DSPR3   jmp     RTS
                      (     flx29ccp.asm):00200         
                      (     flx29ccp.asm):00201         * INIT
                      (     flx29ccp.asm):00202         *
                      (     flx29ccp.asm):00203         * INIT IS THE INITIALIZATION ROUTINE.
                      (     flx29ccp.asm):00204         * ALL SYSTEM VARIABLES ARE SET HERE.
                      (     flx29ccp.asm):00205         
CD57 10CEC07F         (     flx29ccp.asm):00206 [4]     INITI    lds     #STACK      ;SET STACK
CD5B 7FCC11           (     flx29ccp.asm):00207 [7]     INIT1   clr     LSTTRM      ;CLEAR TERM BYTE
CD5E BDD400           (     flx29ccp.asm):00208 [8]             jsr     FMSINT      ;INIT SYSTEM
                      (     flx29ccp.asm):00209         
CD61 7FCC28           (     flx29ccp.asm):00210 [7]             clr     CMFLG       ;CLEAR FLAG
CD64 BDD3FD           (     flx29ccp.asm):00211 [8]             jsr     TSTSTR      ;CHECK FOR STARTUP
                      (     flx29ccp.asm):00212         
                      (     flx29ccp.asm):00213         
                      (     flx29ccp.asm):00214         * ENTRY
                      (     flx29ccp.asm):00215         *
                      (     flx29ccp.asm):00216         * ENTRY IS THE WARM START ENTRY POINT.
                      (     flx29ccp.asm):00217         * THE STACK IS RESET HERE.
                      (     flx29ccp.asm):00218         
CD67 10CEC07F         (     flx29ccp.asm):00219 [4]     ENTRY   lds     #STACK      ;SET STACK
CD6B BDDE18           (     flx29ccp.asm):00220 [8]             jsr     DWARM       ;DO USER WARMSTART ROUTINE
CD6E 8ECD03           (     flx29ccp.asm):00221 [3]             ldx     #WARMS      ;POINT TO WARM START
CD71 BFCC16           (     flx29ccp.asm):00222 [6]             stx     RETRNR      ;SET RETURN REG
CD74 8EC700           (     flx29ccp.asm):00223 [3]             ldx     #CHPR       ;SET SWI3 VECTOR
CD77 AF9FD3E9         (     flx29ccp.asm):00224 [5+5]           stx     [SWIVECP]    ;
CD7B BED3E7           (     flx29ccp.asm):00225 [6]             ldx     IHNDLRP      ;SET IRQ VECTOR
CD7E AF9FD3EB         (     flx29ccp.asm):00226 [5+5]           stx     [IRQVECP]    ;
CD82 8ECCF8           (     flx29ccp.asm):00227 [3]             ldx     #PR0        ;SET PR # 0
CD85 BFCC2F           (     flx29ccp.asm):00228 [6]             stx     CP          ;
CD88 7FCC32           (     flx29ccp.asm):00229 [7]             clr     PRCNT       ;SET STATUS
CD8B 7FCC4A           (     flx29ccp.asm):00230 [7]     ENTRY2  clr     GOTFIL      ;CLEAR FILE DESIG.
CD8E 8D54             (     flx29ccp.asm):00231 [7]             bsr     RESTIO      ;RESTORE IO
                      (     flx29ccp.asm):00232         
                      (     flx29ccp.asm):00233         * DOS
                      (     flx29ccp.asm):00234         *
                      (     flx29ccp.asm):00235         * DOS IS THE MAIN DOS LOOP
                      (     flx29ccp.asm):00236         
CD90 B6CC11           (     flx29ccp.asm):00237 [5]     DOS     lda     LSTTRM      ;CHECK TERMINATOR
CD93 B1CC02           (     flx29ccp.asm):00238 [5]             cmpa    TTYEOL      ;WAS IT EOL?
                      (     flx29ccp.asm):00239         
CD96 2605             (     flx29ccp.asm):00240 [3]             bne     DOS2        ;
CD98 7CCC15           (     flx29ccp.asm):00241 [7]             inc     BUFPNT+1    ;RESET BUFPNT
CD9B 200E             (     flx29ccp.asm):00242 [3]             bra     DOS3        ;
                      (     flx29ccp.asm):00243                                     ;
CD9D 7DCC28           (     flx29ccp.asm):00244 [7]     DOS2    tst     CMFLG       ;TEST FLAG
                      (     flx29ccp.asm):00245         
CDA0 102605A1         (     flx29ccp.asm):00246 [5+?]           lbne    RETRN       ;DO CMD RETURN
CDA4 BDD403           (     flx29ccp.asm):00247 [8]             jsr     FMSCLS      ;CLOSE ALL
                      (     flx29ccp.asm):00248         
CDA7 26B2             (     flx29ccp.asm):00249 [3]             bne     INIT1       ;ERRORS?
CDA9 8D7A             (     flx29ccp.asm):00250 [7]             bsr     PRMTUSR     ;POINT TO PROMPT
                      (     flx29ccp.asm):00251                                     ;
CDAB BDD0CE           (     flx29ccp.asm):00252 [8]     DOS3    jsr     SKPSPC      ;SKIP SPACES
CDAE 810D             (     flx29ccp.asm):00253 [2]             cmpa    #$0D        ;LONE CARRIAGE RET?
CDB0 27EB             (     flx29ccp.asm):00254 [3]             beq     DOS2        ;
                      (     flx29ccp.asm):00255                                     ;
CDB2 8EC840           (     flx29ccp.asm):00256 [3]     DOS4    ldx     #SYSFCB     ;POINT TO SYSTEM FCB
CDB5 7CCC0D           (     flx29ccp.asm):00257 [7]             inc     SYSFLG      ;SET SYSTEM DRIVE
CDB8 BDD030           (     flx29ccp.asm):00258 [8]             jsr     GETFIL      ;GET FILE NAME
CDBB 2516             (     flx29ccp.asm):00259 [3]             bcs     NFERR       ;ERROR?
CDBD 8ECC8A           (     flx29ccp.asm):00260 [3]             ldx     #COMTBL     ;POINT TO TABLE
CDC0 8D3E             (     flx29ccp.asm):00261 [7]             bsr     LKNAM       ;LOOK FOR NAME
CDC2 2709             (     flx29ccp.asm):00262 [3]             beq     DOS6        ;FIND?
                      (     flx29ccp.asm):00263         
CDC4 BECC12           (     flx29ccp.asm):00264 [6]             ldx     USRTBL      ;CHECK USER TABLE
CDC7 2707             (     flx29ccp.asm):00265 [3]             beq     DOS8        ;IS THERE ONE?
                      (     flx29ccp.asm):00266         
CDC9 8D35             (     flx29ccp.asm):00267 [7]             bsr     LKNAM       ;LOOK FOR NAME
CDCB 2603             (     flx29ccp.asm):00268 [3]             bne     DOS8        ;FIND?
                      (     flx29ccp.asm):00269                                     ;
CDCD 6E9801           (     flx29ccp.asm):00270 [3+4]   DOS6    jmp     [1,x]       ;JUMP TO COM ADDRESS
                      (     flx29ccp.asm):00271                                     ;
CDD0 BDD238           (     flx29ccp.asm):00272 [8]     DOS8    jsr     LGO         ;DO LOAD & GO
                      (     flx29ccp.asm):00273                                     ;
                      (     flx29ccp.asm):00274         * NFERR                     ;
                      (     flx29ccp.asm):00275                                     ;
CDD3 8ECC4E           (     flx29ccp.asm):00276 [3]     NFERR   ldx     #WHATST     ;POINT TO STRING
CDD6 8615             (     flx29ccp.asm):00277 [2]             lda     #$15        ;SET ERROR TYPE
CDD8 B7CC20           (     flx29ccp.asm):00278 [5]     NFERR1  sta     ERRTYP      ;
CDDB BDCE79           (     flx29ccp.asm):00279 [8]     NFERR2  jsr     PSTRNG      ;OUTPUT IT
CDDE 7FCC11           (     flx29ccp.asm):00280 [7]     NFERR4  clr     LSTTRM      ;CLEAR TERM
CDE1 7ECD67           (     flx29ccp.asm):00281 [4]             jmp     ENTRY       ;RESTART
                      (     flx29ccp.asm):00282         
                      (     flx29ccp.asm):00283         * RESTIO
                      (     flx29ccp.asm):00284         *
                      (     flx29ccp.asm):00285         * RESTIO RESTORES THE SYSTEM IO JUMP
                      (     flx29ccp.asm):00286         * VECTORS FOR INPUT, OUTPUT, & INIT.
                      (     flx29ccp.asm):00287         
CDE4 BECD13           (     flx29ccp.asm):00288 [6]     RESTIO  ldx     OUTCH2+1    ;SET OUTPUT
CDE7 BFCD10           (     flx29ccp.asm):00289 [6]             stx     OUTCH+1     ;
CDEA BECD0D           (     flx29ccp.asm):00290 [6]             ldx     INCH2+1     ;SET INPUT
CDED BFCD0A           (     flx29ccp.asm):00291 [6]             stx     INCH+1      ;
CDF0 7FCC23           (     flx29ccp.asm):00292 [7]             clr     INCHNL      ;
CDF3 7FCC22           (     flx29ccp.asm):00293 [7]             clr     OUTCHN      ;CLEAR OUT CHAN
CDF6 7FCC21           (     flx29ccp.asm):00294 [7]             clr     SPCLS       ;SET SPECIALS
CDF9 7FCC26           (     flx29ccp.asm):00295 [7]             clr     FILIN       ;CLEAR FILES
CDFC 7FCC24           (     flx29ccp.asm):00296 [7]             clr     FILOUT
CDFF 39               (     flx29ccp.asm):00297 [5]     RTS     rts
                      (     flx29ccp.asm):00298         
                      (     flx29ccp.asm):00299         * LKNAM
                      (     flx29ccp.asm):00300         *
                      (     flx29ccp.asm):00301         * LKNAM looks FOR A COMMAND
                      (     flx29ccp.asm):00302         * NAME In a tABLE
                      (     flx29ccp.asm):00303         *
                      (     flx29ccp.asm):00304         *   ENTRy: x POINTS TO TABLE
                      (     flx29ccp.asm):00305         *   EXIT:  eq IF FOUND
                      (     flx29ccp.asm):00306         *          x+1 POINTS TO ADR
                      (     flx29ccp.asm):00307         
CE00 108EC844         (     flx29ccp.asm):00308 [4]     LKNAM   ldy     #SYSFCB+4   ;SET POINTER
CE04 A6A0             (     flx29ccp.asm):00309 [4+2]   LKNAM3  lda     ,y+        ;GET A NAME CHAR
CE06 815F             (     flx29ccp.asm):00310 [2]             cmpa    #$5F        ;CHECK IF UPPER CASE
CE08 2302             (     flx29ccp.asm):00311 [3]             bls     LKNAM4      ;SKIP IF NOT
CE0A 8020             (     flx29ccp.asm):00312 [2]             suba    #$20        ;MAKE UPPER
                      (     flx29ccp.asm):00313                                     ;
CE0C A180             (     flx29ccp.asm):00314 [4+2]   LKNAM4  cmpa    ,x+        ;CHECK AGAINST TABLE
CE0E 2608             (     flx29ccp.asm):00315 [3]             bne     LKNAM6      ;BRANCH IF NO MATCH
CE10 6D84             (     flx29ccp.asm):00316 [6+0]           tst     ,x         ;CHECK IF END
CE12 26F0             (     flx29ccp.asm):00317 [3]             bne     LKNAM3      ;LOOP IF NOT
                      (     flx29ccp.asm):00318                                     ;
CE14 6DA4             (     flx29ccp.asm):00319 [6+0]           tst     ,y         ;AT END OF NAME
CE16 270C             (     flx29ccp.asm):00320 [3]             beq     LKNAM8      ;GOT COMMAND IF SO
                      (     flx29ccp.asm):00321                                     ;
CE18 6D80             (     flx29ccp.asm):00322 [6+2]   LKNAM6  tst     ,x+        ;END OF WORD?
CE1A 26FC             (     flx29ccp.asm):00323 [3]             bne     LKNAM6      ;LOOP TIL SO
CE1C 3002             (     flx29ccp.asm):00324 [4+1]           leax    2,x         ;BUMP PAST ADDRESS
CE1E 6D84             (     flx29ccp.asm):00325 [6+0]           tst     ,x         ;END OF TABLE?
CE20 26DE             (     flx29ccp.asm):00326 [3]             bne     LKNAM       ;REPEAT IF NOT
CE22 1CFB             (     flx29ccp.asm):00327 [3]             andcc   #$FB        ;CLZ SET NOT EQUAL
CE24 39               (     flx29ccp.asm):00328 [5]     LKNAM8  rts
                      (     flx29ccp.asm):00329         
CE25 BECC4C           (     flx29ccp.asm):00330 [6]     PRMTUSR ldx     PPRMPT
CE28 8D4F             (     flx29ccp.asm):00331 [7]             bsr     PSTRNG
                      (     flx29ccp.asm):00332         
                      (     flx29ccp.asm):00333         * INBUF
                      (     flx29ccp.asm):00334         *
                      (     flx29ccp.asm):00335         * INBUF inputS A LINE INTO THE LINE
                      (     flx29ccp.asm):00336         * BUFFER. delETE AND BACK SPACE
                      (     flx29ccp.asm):00337         * CHARACters ARE CHECKED HERE.
                      (     flx29ccp.asm):00338         *
                      (     flx29ccp.asm):00339         *   ENTRy: noNE
                      (     flx29ccp.asm):00340         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00341         
CE2A 8EC080           (     flx29ccp.asm):00342 [3]     INBUF   ldx     #LINBUF     ;POINT TO BUFFER
CE2D BFCC14           (     flx29ccp.asm):00343 [6]             stx     BUFPNT      ;SET POINTER
CE30 BDCEF5           (     flx29ccp.asm):00344 [8]     INBUF2  jsr     GETCHR      ;GO GET A CHARACTER
CE33 B1CC01           (     flx29ccp.asm):00345 [5]             cmpa    TTYDEL      ;IS IT DELETE?
CE36 27ED             (     flx29ccp.asm):00346 [3]             beq     PRMTUSR     ;
CE38 B1CC00           (     flx29ccp.asm):00347 [5]             cmpa    TTYBS       ;IS IT BACK SPACE?
CE3B 2718             (     flx29ccp.asm):00348 [3]             beq     INBUF6      ;
CE3D 810D             (     flx29ccp.asm):00349 [2]             cmpa    #$0D        ;IS IT CARRIAGE RET?
CE3F 270D             (     flx29ccp.asm):00350 [3]             beq     INBUF4      ;
CE41 810A             (     flx29ccp.asm):00351 [2]             cmpa    #$0A        ;IS IT LF?
CE43 272B             (     flx29ccp.asm):00352 [3]             beq     INBUF7      ;
CE45 811F             (     flx29ccp.asm):00353 [2]             cmpa    #$1F        ;IS IT CONTROL?
CE47 23E7             (     flx29ccp.asm):00354 [3]             bls     INBUF2      ;IGNORE IF SO
CE49 8CC0FF           (     flx29ccp.asm):00355 [4]     INBUF3  cmpx    #LINBUF+LBL-1
CE4C 27E2             (     flx29ccp.asm):00356 [3]             beq     INBUF2
CE4E A780             (     flx29ccp.asm):00357 [4+2]   INBUF4  sta     ,x+        ;PUT CHAR IN BUFFER
CE50 810D             (     flx29ccp.asm):00358 [2]             cmpa    #$0D        ;IS IT RETURN?
CE52 26DC             (     flx29ccp.asm):00359 [3]             bne     INBUF2      ;REPEAT IF NOT
CE54 39               (     flx29ccp.asm):00360 [5]             rts                 ;
                      (     flx29ccp.asm):00361                                     ;
CE55 8CC080           (     flx29ccp.asm):00362 [4]     INBUF6  cmpx    #LINBUF     ;FRONT OF BUFFER?
CE58 27CB             (     flx29ccp.asm):00363 [3]             beq     PRMTUSR     ;
CE5A 301F             (     flx29ccp.asm):00364 [4+1]           leax    -1,x        ;DEC THE POINTER
CE5C B6CC07           (     flx29ccp.asm):00365 [5]             lda     TTYBE       ;GET ECHO CHAR
CE5F 8108             (     flx29ccp.asm):00366 [2]             cmpa    #8          ;IS IT ^H ?
CE61 2608             (     flx29ccp.asm):00367 [3]             bne     INBU65      ;
CE63 8620             (     flx29ccp.asm):00368 [2]             lda     #$20        ;SETUP SPACE
CE65 BDCF60           (     flx29ccp.asm):00369 [8]             jsr     PUTCH6      ;OUTPUT IT
CE68 B6CC07           (     flx29ccp.asm):00370 [5]             lda     TTYBE       ;GET CHAR
CE6B BDCF60           (     flx29ccp.asm):00371 [8]     INBU65  jsr     PUTCH6      ;OUTPUT IT
CE6E 20C0             (     flx29ccp.asm):00372 [3]             bra     INBUF2      ;REPEAT
                      (     flx29ccp.asm):00373                                     ;
CE70 860D             (     flx29ccp.asm):00374 [2]     INBUF7  lda     #$0D        ;OUTPUT CR
CE72 BDCF3B           (     flx29ccp.asm):00375 [8]             jsr     PUTCHR      ;
CE75 8620             (     flx29ccp.asm):00376 [2]             lda     #$20        ;SETUP SPACE
CE77 20D0             (     flx29ccp.asm):00377 [3]             bra     INBUF3
                      (     flx29ccp.asm):00378         
                      (     flx29ccp.asm):00379         * PSTRNG
                      (     flx29ccp.asm):00380         *
                      (     flx29ccp.asm):00381         * PSTRNG prinTS THE STRING POINTED
                      (     flx29ccp.asm):00382         * TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00383         *
                      (     flx29ccp.asm):00384         *   ENTRy: x POINTS TO STRING
                      (     flx29ccp.asm):00385         *   EXIT:  a & X CHANGED
                      (     flx29ccp.asm):00386         
CE79 8D34             (     flx29ccp.asm):00387 [7]     PSTRNG  bsr     PCRLF       ;OUTPUT CR & LF
                      (     flx29ccp.asm):00388         
CE7B A684             (     flx29ccp.asm):00389 [4+0]   PDATA1  lda     ,x         ;GET A CHARACTER
CE7D 8104             (     flx29ccp.asm):00390 [2]             cmpa    #4          ;IS IT TERM?
CE7F 2771             (     flx29ccp.asm):00391 [3]             beq     PCRLF8      ;
CE81 BDCF3B           (     flx29ccp.asm):00392 [8]             jsr     PUTCHR      ;GO PUT CHAR.
CE84 3001             (     flx29ccp.asm):00393 [4+1]           leax    1,x         ;BUMP THE POINTER
CE86 20F3             (     flx29ccp.asm):00394 [3]             bra     PDATA1      ;REPEAT IT
                      (     flx29ccp.asm):00395         
                      (     flx29ccp.asm):00396         * BREAK
                      (     flx29ccp.asm):00397         *
                      (     flx29ccp.asm):00398         * BREAK checkS FOR A CHARACTER ON INPUT CHANNEL,
                      (     flx29ccp.asm):00399         * RETURNs immEDIATELY IF NONE OR NOT ESCAPE.
                      (     flx29ccp.asm):00400         * IF ESCape, WAITS FOR ANOTHER OR FOR RETURN.
                      (     flx29ccp.asm):00401         
CE88 BDCD4E           (     flx29ccp.asm):00402 [8]     BREAK   jsr     DSTAT       ;ANY INPUT CHARACTER?
CE8B 2767             (     flx29ccp.asm):00403 [3]             beq     PCRLF9      ;EXIT IF NOT
                      (     flx29ccp.asm):00404                                     ;
CE8D BDCD09           (     flx29ccp.asm):00405 [8]             jsr     INCH        ;ELSE, GET THE CHARACTER
CE90 847F             (     flx29ccp.asm):00406 [2]             anda    #$7F        ;STRIP UPPER BIT
CE92 B1CC0A           (     flx29ccp.asm):00407 [5]             cmpa    TTYESC      ;AN ESCAPE?
CE95 265D             (     flx29ccp.asm):00408 [3]             bne     PCRLF9      ;EXIT IF NOT
                      (     flx29ccp.asm):00409                                     ;
CE97 7FCC1A           (     flx29ccp.asm):00410 [7]     BREAK1  clr     LINE        ;CLEAR LINE COUNT
CE9A BDCD09           (     flx29ccp.asm):00411 [8]     BREAK2  jsr     INCH        ;WAIT FOR A CHARACTER
CE9D 847F             (     flx29ccp.asm):00412 [2]             anda    #$7F        ;STRIP UPPER BIT
CE9F B1CC0A           (     flx29ccp.asm):00413 [5]             cmpa    TTYESC      ;AN ESCAPE?
CEA2 2750             (     flx29ccp.asm):00414 [3]             beq     PCRLF9      ;CONTINUE IF SO
CEA4 810D             (     flx29ccp.asm):00415 [2]             cmpa    #$0D        ;IS IT A C.R.?
CEA6 26F2             (     flx29ccp.asm):00416 [3]             bne     BREAK2      ;LOOP IF NEITHER
CEA8 7FCC11           (     flx29ccp.asm):00417 [7]             clr     LSTTRM      ;CLEAR TERMINATOR
CEAB 6E9FCC16         (     flx29ccp.asm):00418 [3+5]           jmp     [RETRNR]    ;JUMP TO RETURN REG
                      (     flx29ccp.asm):00419         
                      (     flx29ccp.asm):00420         * PCRLF
                      (     flx29ccp.asm):00421         *
                      (     flx29ccp.asm):00422         * PCRLF outpuTS A CARRIAGE RETURN
                      (     flx29ccp.asm):00423         * AND A line FEED COMBINATION.
                      (     flx29ccp.asm):00424         *
                      (     flx29ccp.asm):00425         *   ENTRY: NONE
                      (     flx29ccp.asm):00426         *   EXIT:  A & B CHANGED
                      (     flx29ccp.asm):00427         
CEAF 7DCC21           (     flx29ccp.asm):00428 [7]     PCRLF   tst     SPCLS       ;TEST SPECIALS
CEB2 2627             (     flx29ccp.asm):00429 [3]             bne     PCRLF2      ;
                      (     flx29ccp.asm):00430                 ;bra     PCRLF2      ;
CEB4 8DD2             (     flx29ccp.asm):00431 [7]             bsr     BREAK       ;CHECK FOR BREAK
CEB6 B6CC03           (     flx29ccp.asm):00432 [5]             lda     TTYDP       ;GET COUNT
CEB9 2720             (     flx29ccp.asm):00433 [3]             beq     PCRLF2      ;IS IT OFF?
                      (     flx29ccp.asm):00434                                     ;
CEBB B1CC1A           (     flx29ccp.asm):00435 [5]             cmpa    LINE        ;CHECK COUNT
CEBE 2218             (     flx29ccp.asm):00436 [3]             bhi     PCRL19      ;
CEC0 7FCC1A           (     flx29ccp.asm):00437 [7]             clr     LINE        ;CLEAR COUNT
CEC3 7DCC09           (     flx29ccp.asm):00438 [7]             tst     TTYPS       ;PAUSE ON?
CEC6 2702             (     flx29ccp.asm):00439 [3]             beq     PCRLF1      ;
CEC8 8DCD             (     flx29ccp.asm):00440 [7]             bsr     BREAK1      ;WAIT FOR ESC
                      (     flx29ccp.asm):00441                                     ;
CECA 3404             (     flx29ccp.asm):00442 [5+1]   PCRLF1  pshs    b           ;SAVE B
CECC F6CC08           (     flx29ccp.asm):00443 [5]             ldb     TTYEJ       ;CHECK COUNT
CECF 2705             (     flx29ccp.asm):00444 [3]             beq     PCRL18      ;
CED1 8D08             (     flx29ccp.asm):00445 [7]     PCRL15  bsr     PCRLF2      ;OUTPUT CR & LF
CED3 5A               (     flx29ccp.asm):00446 [2]             decb                ;DEC THE COUNT
CED4 26FB             (     flx29ccp.asm):00447 [3]             bne     PCRL15      ;
                      (     flx29ccp.asm):00448                                     ;
CED6 3504             (     flx29ccp.asm):00449 [5+1]   PCRL18  puls    b           ;RESTORE B
CED8 7CCC1A           (     flx29ccp.asm):00450 [7]     PCRL19  inc     LINE        ;BUMP LINE COUNT
CEDB 860D             (     flx29ccp.asm):00451 [2]     PCRLF2  lda     #$0D        ;SET UP CR
CEDD 8D5C             (     flx29ccp.asm):00452 [7]             bsr     PUTCHR      ;OUTPUT IT
CEDF 860A             (     flx29ccp.asm):00453 [2]             lda     #$0A        ;SET UP LINE FEED
CEE1 8D58             (     flx29ccp.asm):00454 [7]             bsr     PUTCHR      ;OUTPUT IT
                      (     flx29ccp.asm):00455                 ;rts                                    ; !!!
CEE3 3404             (     flx29ccp.asm):00456 [5+1]           pshs    b           ;SAVE B
CEE5 F6CC05           (     flx29ccp.asm):00457 [5]             ldb     TTYNL       ;CHECK NULLS
CEE8 2706             (     flx29ccp.asm):00458 [3]             beq     PCRLF6      ;
CEEA 4F               (     flx29ccp.asm):00459 [2]     PCRLF4  clra                ;SET UP NULL
CEEB 8D4E             (     flx29ccp.asm):00460 [7]             bsr     PUTCHR      ;OUTPUT IT
CEED 5A               (     flx29ccp.asm):00461 [2]             decb                ;DEC THE COUNT
CEEE 26FA             (     flx29ccp.asm):00462 [3]             bne     PCRLF4      ;REPEAT?
                      (     flx29ccp.asm):00463                                     ;
CEF0 3504             (     flx29ccp.asm):00464 [5+1]   PCRLF6  puls    b           ;RESTORE B
CEF2 1CFE             (     flx29ccp.asm):00465 [3]     PCRLF8  andcc   #$FE        ;CLC  CLEAR ERRORS
CEF4 39               (     flx29ccp.asm):00466 [5]     PCRLF9  rts
                      (     flx29ccp.asm):00467         
                      (     flx29ccp.asm):00468         * GETCHR
                      (     flx29ccp.asm):00469         *
                      (     flx29ccp.asm):00470         * GETCHR gets A CHARACTER FROM EITHER
                      (     flx29ccp.asm):00471         * THE STandarD INPUT OR A FILE.
                      (     flx29ccp.asm):00472         *
                      (     flx29ccp.asm):00473         *   ENTRy: noNE
                      (     flx29ccp.asm):00474         *   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00475         
CEF5 7DCC23           (     flx29ccp.asm):00476 [7]     GETCHR  tst     INCHNL      ;CHECK CHAN
CEF8 261A             (     flx29ccp.asm):00477 [3]             bne     GETCH5      ;
CEFA 7DCC26           (     flx29ccp.asm):00478 [7]             tst     FILIN       ;FILE INPUT?
CEFD 2710             (     flx29ccp.asm):00479 [3]             beq     GETCH4      ;
CEFF 8D1A             (     flx29ccp.asm):00480 [7]             bsr     FILIO       ;DO FILE INPUT
CF01 7DCC2D           (     flx29ccp.asm):00481 [7]             tst     FILEKO      ;ECHO CHARACTER?
CF04 2711             (     flx29ccp.asm):00482 [3]             beq     GETCH6      ;
CF06 7DCC24           (     flx29ccp.asm):00483 [7]             tst     FILOUT      ;OUTPUT FILE?
CF09 270C             (     flx29ccp.asm):00484 [3]             beq     GETCH6      ;
CF0B 8D53             (     flx29ccp.asm):00485 [7]             bsr     PUTCH6      ;ECHO CHARACTER
CF0D 2008             (     flx29ccp.asm):00486 [3]             bra     GETCH6      ;
                      (     flx29ccp.asm):00487                                     ;
CF0F BDCD09           (     flx29ccp.asm):00488 [8]     GETCH4  jsr     INCH        ;GET CHAR
CF12 2003             (     flx29ccp.asm):00489 [3]             bra     GETCH6      ;
                      (     flx29ccp.asm):00490                                     ;
CF14 BDCD0C           (     flx29ccp.asm):00491 [8]     GETCH5  jsr     INCH2       ;TERMINAL INPUT
CF17 7FCC1A           (     flx29ccp.asm):00492 [7]     GETCH6  clr     LINE        ;CLEAR COUNTER
CF1A 39               (     flx29ccp.asm):00493 [5]             rts
                      (     flx29ccp.asm):00494         
                      (     flx29ccp.asm):00495         * FILIO
                      (     flx29ccp.asm):00496         *
                      (     flx29ccp.asm):00497         * FILIO dose A FMS CALL FOR CHARACTER
                      (     flx29ccp.asm):00498         * IO TRAnsfer. CONTROL RETURNED TO
                      (     flx29ccp.asm):00499         * WARM Start UPON ERROR.
                      (     flx29ccp.asm):00500         
CF1B BFCC45           (     flx29ccp.asm):00501 [6]     FILIO   stx     IOTEMP      ;SAVE INDEX
CF1E BECC26           (     flx29ccp.asm):00502 [6]             ldx     FILIN       ;GET INPUT FCB
CF21 2006             (     flx29ccp.asm):00503 [3]             bra     FILIO4      ;
                      (     flx29ccp.asm):00504                                     ;
CF23 BFCC45           (     flx29ccp.asm):00505 [6]     FILIO2  stx     IOTEMP      ;SAVE X
CF26 BECC24           (     flx29ccp.asm):00506 [6]             ldx     FILOUT      ;GET OUTPUT FCB
                      (     flx29ccp.asm):00507                                     ;
CF29 BDD406           (     flx29ccp.asm):00508 [8]     FILIO4  jsr     FMS         ;CALL FMS
CF2C 2604             (     flx29ccp.asm):00509 [3]             bne     FILIO6      ;ERROR?
CF2E BECC45           (     flx29ccp.asm):00510 [6]             ldx     IOTEMP      ;RESTORE INDEX
CF31 39               (     flx29ccp.asm):00511 [5]             rts                 ;
                      (     flx29ccp.asm):00512                                     ;
CF32 7FCC24           (     flx29ccp.asm):00513 [7]     FILIO6  clr     FILOUT      ;CLEAR CHAN
CF35 BDD289           (     flx29ccp.asm):00514 [8]             jsr     RPTERR      ;REPORT ERROR
CF38 7ECD03           (     flx29ccp.asm):00515 [4]             jmp     WARMS       ;DO WARM START
                      (     flx29ccp.asm):00516         
                      (     flx29ccp.asm):00517         * PUTCHR
                      (     flx29ccp.asm):00518         *
                      (     flx29ccp.asm):00519         * PUTCHR writES A CHARACTER TO EITHER
                      (     flx29ccp.asm):00520         * THE STandarD OUTPUT OR TO A FILE.
                      (     flx29ccp.asm):00521         *
                      (     flx29ccp.asm):00522         *   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00523         *   EXIT:  a MAY BE DESTROYED
                      (     flx29ccp.asm):00524         
CF3B 7DCC21           (     flx29ccp.asm):00525 [7]     PUTCHR  tst     SPCLS       ;CHECK SPECIALS
CF3E 2620             (     flx29ccp.asm):00526 [3]             bne     PUTCH6      ;
CF40 811F             (     flx29ccp.asm):00527 [2]             cmpa    #$1F        ;IS IT CONTROL?
CF42 2205             (     flx29ccp.asm):00528 [3]             bhi     PUTCH2      ;
CF44 7FCC29           (     flx29ccp.asm):00529 [7]             clr     COLMN       ;CLEAR COL COUNT
CF47 2017             (     flx29ccp.asm):00530 [3]             bra     PUTCH6      ;JUMP AHEAD
                      (     flx29ccp.asm):00531                                     ;
CF49 7CCC29           (     flx29ccp.asm):00532 [7]     PUTCH2  inc     COLMN       ;BUMP COUNTER
CF4C 3402             (     flx29ccp.asm):00533 [5+1]           pshs    a           ;SAVE CHARACTER
CF4E B6CC04           (     flx29ccp.asm):00534 [5]             lda     COLCNT      ;GET COUNT
CF51 270B             (     flx29ccp.asm):00535 [3]             beq     PUTCH4      ;IS IT 0?
CF53 B1CC29           (     flx29ccp.asm):00536 [5]             cmpa    COLMN       ;ENOUGH?
CF56 2406             (     flx29ccp.asm):00537 [3]             bcc     PUTCH4      ;
CF58 BDCEAF           (     flx29ccp.asm):00538 [8]             jsr     PCRLF       ;OUTPUT CR & LF
CF5B 7CCC29           (     flx29ccp.asm):00539 [7]             inc     COLMN       ;
                      (     flx29ccp.asm):00540                                     ;
CF5E 3502             (     flx29ccp.asm):00541 [5+1]   PUTCH4  puls    a           ;RESTORE CHAR
CF60 3402             (     flx29ccp.asm):00542 [5+1]   PUTCH6  pshs    a           ;
CF62 7DCC22           (     flx29ccp.asm):00543 [7]             tst     OUTCHN      ;TEST CHANNEL
CF65 2613             (     flx29ccp.asm):00544 [3]             bne     PUTCH7      ;
CF67 7DCC24           (     flx29ccp.asm):00545 [7]             tst     FILOUT      ;FILE OUTPUT?
CF6A 2704             (     flx29ccp.asm):00546 [3]             beq     PUTC68      ;
CF6C 8DB5             (     flx29ccp.asm):00547 [7]             bsr     FILIO2      ;DO FMS CALL
CF6E 200D             (     flx29ccp.asm):00548 [3]             bra     PUTC75      ;
                      (     flx29ccp.asm):00549                                     ;
CF70 7DCC26           (     flx29ccp.asm):00550 [7]     PUTC68  tst     FILIN       ;
CF73 2608             (     flx29ccp.asm):00551 [3]             bne     PUTC75      ;FILE INPUT?
CF75 BDCD0F           (     flx29ccp.asm):00552 [8]             jsr     OUTCH       ;OUTPUT IT
CF78 2003             (     flx29ccp.asm):00553 [3]             bra     PUTC75      ;
                      (     flx29ccp.asm):00554                                     ;
CF7A BDCD12           (     flx29ccp.asm):00555 [8]     PUTCH7  jsr     OUTCH2      ;CHAN 2 OUTPUT
CF7D 3502             (     flx29ccp.asm):00556 [5+1]   PUTC75  puls    a           ;RESTORE CHAR
CF7F 39               (     flx29ccp.asm):00557 [5]             rts
                      (     flx29ccp.asm):00558         
                      (     flx29ccp.asm):00559         * OUTDEC
                      (     flx29ccp.asm):00560         *
                      (     flx29ccp.asm):00561         * OUTPUT deciMAL NUMBER POINTED TO
                      (     flx29ccp.asm):00562         * BY X. the nS ENTRY PRINTS LEADING
                      (     flx29ccp.asm):00563         * ZEROES.
                      (     flx29ccp.asm):00564         *
                      (     flx29ccp.asm):00565         *   ENTRy: x POINTS TO NUMBER
                      (     flx29ccp.asm):00566         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00567         
CF80 7FCC48           (     flx29ccp.asm):00568 [7]     OUTDEC  clr     OUTNUM      ;CLEAR FLAG
CF83 F7CC1D           (     flx29ccp.asm):00569 [5]             stb     XFR         ;SET SUP FLAG
CF86 8604             (     flx29ccp.asm):00570 [2]             lda     #4          ;SET COUNTER
CF88 B7D40D           (     flx29ccp.asm):00571 [5]             sta     TEMP        ;SAVE IT
CF8B EC84             (     flx29ccp.asm):00572 [5+0]           ldd     ,x         ;GET VALUE
CF8D 8ECC97           (     flx29ccp.asm):00573 [3]             ldx     #CONTBL     ;POINT TO CONSTANTS
                      (     flx29ccp.asm):00574                                     ;
CF90 8D0B             (     flx29ccp.asm):00575 [7]     OUTDE4  bsr     OUTDIG      ;OUTPUT DIGIT
CF92 3002             (     flx29ccp.asm):00576 [4+1]           leax    2,x         ;BUMP TO NEXT CONST.
CF94 7AD40D           (     flx29ccp.asm):00577 [7]             dec     TEMP        ;DEC THE COUNT
CF97 26F7             (     flx29ccp.asm):00578 [3]             bne     OUTDE4      ;
CF99 1F98             (     flx29ccp.asm):00579 [6]             tfr     b,a         ;GET LS DIGIT
CF9B 203D             (     flx29ccp.asm):00580 [3]             bra     OUTHR       ;OUTPUT IT
                      (     flx29ccp.asm):00581         
                      (     flx29ccp.asm):00582         * OUTDIG
                      (     flx29ccp.asm):00583         *
                      (     flx29ccp.asm):00584         * OUTDIG outpUTS THE DIGITS PLACE
                      (     flx29ccp.asm):00585         * OF THE numbER IN A & B CORRESPONDING
                      (     flx29ccp.asm):00586         * TO THE consTANT POINTED TO BY X.
                      (     flx29ccp.asm):00587         *
                      (     flx29ccp.asm):00588         *   ENTRy: a & B CONTAIN NUMBER
                      (     flx29ccp.asm):00589         *          x POINTS TO CONSTANT
                      (     flx29ccp.asm):00590         *   EXIT:  alL REGISTERS PRESERVED
                      (     flx29ccp.asm):00591         
CF9D 7FCC49           (     flx29ccp.asm):00592 [7]     OUTDIG  clr     COUNT       ;CLEAR COUNTER
CFA0 10A300           (     flx29ccp.asm):00593 [7+1]   OUTDI2  cmpd    0,x         ;COMPARE NUMBER
CFA3 2507             (     flx29ccp.asm):00594 [3]             bcs     OUTDI5      ;
CFA5 A300             (     flx29ccp.asm):00595 [6+1]           subd    0,x         ;SUB VALUE
CFA7 7CCC49           (     flx29ccp.asm):00596 [7]             inc     COUNT       ;BUMP COUNTER
CFAA 20F4             (     flx29ccp.asm):00597 [3]             bra     OUTDI2      ;REPEAT
                      (     flx29ccp.asm):00598                                     ;
CFAC 3402             (     flx29ccp.asm):00599 [5+1]   OUTDI5  pshs    a           ;SAVE A
CFAE B6CC49           (     flx29ccp.asm):00600 [5]             lda     COUNT       ;GET TOTAL
CFB1 2610             (     flx29ccp.asm):00601 [3]             bne     OUTDI6      ;IS IT ZERO?
CFB3 7DCC48           (     flx29ccp.asm):00602 [7]             tst     OUTNUM      ;SUPRESS ZEROES?
CFB6 260B             (     flx29ccp.asm):00603 [3]             bne     OUTDI6      ;NUMBER YET?
CFB8 7DCC1D           (     flx29ccp.asm):00604 [7]             tst     XFR         ;NULL OR SPACE?
CFBB 270B             (     flx29ccp.asm):00605 [3]             beq     OUTDI8      ;
CFBD 8620             (     flx29ccp.asm):00606 [2]             lda     #$20        ;SETUP SPACE
CFBF 8D23             (     flx29ccp.asm):00607 [7]             bsr     OUTHR2      ;OUTPUT IT
CFC1 2005             (     flx29ccp.asm):00608 [3]             bra     OUTDI8
                      (     flx29ccp.asm):00609         
CFC3 7CCC48           (     flx29ccp.asm):00610 [7]     OUTDI6  inc     OUTNUM      ;SHOW NUMBER
CFC6 8D12             (     flx29ccp.asm):00611 [7]             bsr     OUTHR       ;OUTPUT DIGIT
                      (     flx29ccp.asm):00612         
CFC8 3582             (     flx29ccp.asm):00613 [5+3]   OUTDI8  puls    a,pc        ;RESTORE A & RETURN
                      (     flx29ccp.asm):00614         
                      (     flx29ccp.asm):00615         * OUTADR
                      (     flx29ccp.asm):00616         *
                      (     flx29ccp.asm):00617         * OUTPUT four HEX DIGITS POINTED
                      (     flx29ccp.asm):00618         * TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00619         
CFCA 8D02             (     flx29ccp.asm):00620 [7]     OUTADR  bsr     OUTHEX      ;OUT 2 DIGITS
CFCC 3001             (     flx29ccp.asm):00621 [4+1]           leax    1,x         ;BUMP POINTER
                      (     flx29ccp.asm):00622         
                      (     flx29ccp.asm):00623         * OUTHEX
                      (     flx29ccp.asm):00624         *
                      (     flx29ccp.asm):00625         * OUTHEX outpUTS THE BYTE IN HEX
                      (     flx29ccp.asm):00626         * POINTEd to BY X.
                      (     flx29ccp.asm):00627         *
                      (     flx29ccp.asm):00628         *   ENTRy: x POINTS TO BYTE
                      (     flx29ccp.asm):00629         *   EXIT:  b PRESERVED
                      (     flx29ccp.asm):00630         
CFCE A600             (     flx29ccp.asm):00631 [4+1]   OUTHEX  lda     0,x         ;GET MSB
CFD0 8D04             (     flx29ccp.asm):00632 [7]             bsr     OUTHL       ;OUTPUT IT
CFD2 A600             (     flx29ccp.asm):00633 [4+1]           lda     0,x         ;DO LSB
CFD4 2004             (     flx29ccp.asm):00634 [3]             bra     OUTHR       ;OUTPUT IT
                      (     flx29ccp.asm):00635                                     ;
CFD6 44               (     flx29ccp.asm):00636 [2]     OUTHL   lsra                ;GET MSB TO LSB
CFD7 44               (     flx29ccp.asm):00637 [2]             lsra
CFD8 44               (     flx29ccp.asm):00638 [2]             lsra
CFD9 44               (     flx29ccp.asm):00639 [2]             lsra
                      (     flx29ccp.asm):00640         
CFDA 840F             (     flx29ccp.asm):00641 [2]     OUTHR   anda    #$0F        ;MASK OFF MSB
CFDC 8B30             (     flx29ccp.asm):00642 [2]             adda    #$30        ;ADD IN BIAS
CFDE 8139             (     flx29ccp.asm):00643 [2]             cmpa    #$39        ;OVER NUMBERS?
CFE0 2302             (     flx29ccp.asm):00644 [3]             bls     OUTHR2
                      (     flx29ccp.asm):00645         
CFE2 8B07             (     flx29ccp.asm):00646 [2]             adda    #7          ;FINISH BIAS
                      (     flx29ccp.asm):00647         
CFE4 7ECF3B           (     flx29ccp.asm):00648 [4]     OUTHR2  jmp     PUTCHR      ;OUTPUT IT
                      (     flx29ccp.asm):00649         
                      (     flx29ccp.asm):00650         * CLASS
                      (     flx29ccp.asm):00651         *
                      (     flx29ccp.asm):00652         * CLASS will CLASSIFY THE CHARACTER IN A.
                      (     flx29ccp.asm):00653         *
                      (     flx29ccp.asm):00654         *   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00655         *   EXIT:  cs IF NOT 0-9 OR A-Z
                      (     flx29ccp.asm):00656         
CFE7 8130             (     flx29ccp.asm):00657 [2]     CLASS   cmpa    #$30        ;IS IT 0?
CFE9 2514             (     flx29ccp.asm):00658 [3]             bcs     CLASS2      ;REPORT
CFEB 8139             (     flx29ccp.asm):00659 [2]             cmpa    #$39        ;COMPARE TO 9
CFED 2316             (     flx29ccp.asm):00660 [3]             bls     CLASS4      ;IS IT NUMBER?
CFEF 8141             (     flx29ccp.asm):00661 [2]             cmpa    #$41        ;COMPARE TO A
CFF1 250C             (     flx29ccp.asm):00662 [3]             bcs     CLASS2      ;REPORT
CFF3 815A             (     flx29ccp.asm):00663 [2]             cmpa    #$5A        ;COMPARE TO Z
CFF5 230E             (     flx29ccp.asm):00664 [3]             bls     CLASS4      ;IS IT LETTER?
CFF7 8161             (     flx29ccp.asm):00665 [2]             cmpa    #$61        ;CHECK FOR LOWER
CFF9 2504             (     flx29ccp.asm):00666 [3]             bcs     CLASS2      ;REPORT
CFFB 817A             (     flx29ccp.asm):00667 [2]             cmpa    #$7A        ;UPPER LIMIT
CFFD 2306             (     flx29ccp.asm):00668 [3]             bls     CLASS4
                      (     flx29ccp.asm):00669         
CFFF 1A01             (     flx29ccp.asm):00670 [3]     CLASS2  orcc    #1          ;SEC  SET FOR NOT
D001 B7CC11           (     flx29ccp.asm):00671 [5]             sta     LSTTRM
D004 39               (     flx29ccp.asm):00672 [5]             rts
                      (     flx29ccp.asm):00673         
D005 1CFE             (     flx29ccp.asm):00674 [3]     CLASS4  andcc   #$FE        ;CLC  SHOW ALPHANUMERIC
D007 39               (     flx29ccp.asm):00675 [5]             rts
                      (     flx29ccp.asm):00676         
                      (     flx29ccp.asm):00677         * NXTCH
                      (     flx29ccp.asm):00678         *
                      (     flx29ccp.asm):00679         * NXTCH gets THE NEXT CHARACTER FROM
                      (     flx29ccp.asm):00680         * THE LIne buFFER.
                      (     flx29ccp.asm):00681         *
                      (     flx29ccp.asm):00682         *   ENTRy: noNE
                      (     flx29ccp.asm):00683         *   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00684         
D008 3410             (     flx29ccp.asm):00685 [5+2]   NXTCH   pshs    x
D00A BECC14           (     flx29ccp.asm):00686 [6]             ldx     BUFPNT      ;GET POINTER
D00D B6CC18           (     flx29ccp.asm):00687 [5]             lda     CHAR        ;GET OLD CHAR
D010 B7CC19           (     flx29ccp.asm):00688 [5]             sta     PRVCHR      ;SAVE AS PREVIOUS
D013 A680             (     flx29ccp.asm):00689 [4+2]   NXTCH3  lda     ,x+        ;GET THE CHARACTER
D015 B7CC18           (     flx29ccp.asm):00690 [5]             sta     CHAR        ;SAVE CHAR
D018 810D             (     flx29ccp.asm):00691 [2]             cmpa    #$0D        ;IS IT RETURN?
D01A 2710             (     flx29ccp.asm):00692 [3]             beq     NXTCH4      ;
D01C B1CC02           (     flx29ccp.asm):00693 [5]             cmpa    TTYEOL      ;IS IT EOL?
D01F 270B             (     flx29ccp.asm):00694 [3]             beq     NXTCH4      ;
D021 BFCC14           (     flx29ccp.asm):00695 [6]             stx     BUFPNT      ;SAVE NEW POSITION
D024 8120             (     flx29ccp.asm):00696 [2]             cmpa    #$20        ;CHECK FOR SPACE
D026 2604             (     flx29ccp.asm):00697 [3]             bne     NXTCH4      ;
D028 A100             (     flx29ccp.asm):00698 [4+1]           cmpa    0,x         ;NEXT CHAR SPACE?
D02A 27E7             (     flx29ccp.asm):00699 [3]             beq     NXTCH3      ;SKIP IF SO
                      (     flx29ccp.asm):00700                                     ;
D02C 8DB9             (     flx29ccp.asm):00701 [7]     NXTCH4  bsr     CLASS       ;GO CLASSIFY
D02E 3590             (     flx29ccp.asm):00702 [5+4]           puls    x,pc        ;RESTORE REG. & RETURN
                      (     flx29ccp.asm):00703         
                      (     flx29ccp.asm):00704         * GETFIL
                      (     flx29ccp.asm):00705         *
                      (     flx29ccp.asm):00706         * GETFIL gets A FILE SPECIFICATION FROM
                      (     flx29ccp.asm):00707         * THE INput sTREAM.
                      (     flx29ccp.asm):00708         *
                      (     flx29ccp.asm):00709         *   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):00710         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00711         
D030 8615             (     flx29ccp.asm):00712 [2]     GETFIL  lda     #21         ;SET PRE ERROR
D032 A701             (     flx29ccp.asm):00713 [4+1]           sta     1,x         ;
D034 86FF             (     flx29ccp.asm):00714 [2]             lda     #$FF        ;SET DRIVE NEG
D036 A703             (     flx29ccp.asm):00715 [4+1]           sta     3,x         ;
D038 6F04             (     flx29ccp.asm):00716 [6+1]           clr     4,x         ;
D03A 6F0C             (     flx29ccp.asm):00717 [6+1]           clr     12,x        ;CLEAR EXTENSION
D03C BDD0CE           (     flx29ccp.asm):00718 [8]             jsr     SKPSPC      ;SKIP SPACES
D03F 8608             (     flx29ccp.asm):00719 [2]             lda     #8          ;SET UP COUNT
D041 B7CC49           (     flx29ccp.asm):00720 [5]             sta     COUNT       ;SAVE IT
D044 8D34             (     flx29ccp.asm):00721 [7]             bsr     PRTM        ;PROCESS ITEM
D046 252E             (     flx29ccp.asm):00722 [3]             bcs     GETFI5      ;ERROR?
D048 260F             (     flx29ccp.asm):00723 [3]             bne     GETFI2      ;CHECK TERM
D04A 8D2E             (     flx29ccp.asm):00724 [7]             bsr     PRTM        ;PROCESS ITEM
D04C 2528             (     flx29ccp.asm):00725 [3]             bcs     GETFI5      ;ERROR?
D04E 2609             (     flx29ccp.asm):00726 [3]             bne     GETFI2      ;CHECK TERM
D050 BCCC3D           (     flx29ccp.asm):00727 [7]             cmpx    CRSAVE      ;CHECK ERROR?
D053 276C             (     flx29ccp.asm):00728 [3]             beq     PRTM6       ;
D055 8D23             (     flx29ccp.asm):00729 [7]             bsr     PRTM        ;PROCESS ITEM
D057 2368             (     flx29ccp.asm):00730 [3]             bls     PRTM6       ;ERROR?
                      (     flx29ccp.asm):00731                                     ;
D059 BECC3D           (     flx29ccp.asm):00732 [6]     GETFI2  ldx     CRSAVE      ;RESTORE POINTER
D05C 6D04             (     flx29ccp.asm):00733 [6+1]           tst     4,x         ;IS NAME NULL?
D05E 2761             (     flx29ccp.asm):00734 [3]             beq     PRTM6       ;
D060 6D03             (     flx29ccp.asm):00735 [6+1]           tst     3,x         ;CHECK DRIVE NUMBER
D062 2A0F             (     flx29ccp.asm):00736 [3]             bpl     GETFI4      ;SET YET?
D064 7DCC0D           (     flx29ccp.asm):00737 [7]             tst     SYSFLG      ;SYSTEM DRIVE?
D067 2705             (     flx29ccp.asm):00738 [3]             beq     GETFI3      ;
D069 B6CC0B           (     flx29ccp.asm):00739 [5]             lda     SYSDRV      ;GET SYSTEM DRIVE
D06C 2003             (     flx29ccp.asm):00740 [3]             bra     GETF35      ;
                      (     flx29ccp.asm):00741                                     ;
D06E B6CC0C           (     flx29ccp.asm):00742 [5]     GETFI3  lda     WRKDRV      ;GET WORK DRIVE
D071 A703             (     flx29ccp.asm):00743 [4+1]   GETF35  sta     3,x         ;SET DRIVE NUMBER
D073 7FCC0D           (     flx29ccp.asm):00744 [7]     GETFI4  clr     SYSFLG      ;CLEAR FLAG
D076 BECC3D           (     flx29ccp.asm):00745 [6]     GETFI5  ldx     CRSAVE      ;RESTORE FCB
D079 39               (     flx29ccp.asm):00746 [5]             rts
                      (     flx29ccp.asm):00747         
                      (     flx29ccp.asm):00748         * PRTM
                      (     flx29ccp.asm):00749         *
                      (     flx29ccp.asm):00750         * PRTM ProcesSES AN ITEM OF THE FILE SPEC
                      (     flx29ccp.asm):00751         
D07A 8D8C             (     flx29ccp.asm):00752 [7]     PRTM    bsr     NXTCH       ;GET NEXT CHAR
D07C 2543             (     flx29ccp.asm):00753 [3]             bcs     PRTM6       ;ERROR?
D07E 8139             (     flx29ccp.asm):00754 [2]             cmpa    #$39        ;CHECK IF NUMBER
D080 2215             (     flx29ccp.asm):00755 [3]             bhi     PRTM2       ;
D082 BECC3D           (     flx29ccp.asm):00756 [6]             ldx     CRSAVE      ;RESTORE POINTER
D085 6D03             (     flx29ccp.asm):00757 [6+1]           tst     3,x         ;CHECK FOR DRIVE NO
D087 2A38             (     flx29ccp.asm):00758 [3]             bpl     PRTM6       ;ERROR?
D089 8403             (     flx29ccp.asm):00759 [2]             anda    #3          ;MASK DRIVE
D08B A703             (     flx29ccp.asm):00760 [4+1]           sta     3,x         ;SET DRIVE NUM
D08D BDD008           (     flx29ccp.asm):00761 [8]             jsr     NXTCH       ;GET NEXT CHAR
D090 242F             (     flx29ccp.asm):00762 [3]             bcc     PRTM6       ;ERROR?
                      (     flx29ccp.asm):00763                                     ;
D092 812E             (     flx29ccp.asm):00764 [2]     PRTM1   cmpa    #$2E        ;CHECK TERM
D094 1CFE             (     flx29ccp.asm):00765 [3]             andcc   #$FE        ;CLC  CLEAR ERROR
D096 39               (     flx29ccp.asm):00766 [5]             rts                 ;
                      (     flx29ccp.asm):00767                                     ;
D097 F6CC49           (     flx29ccp.asm):00768 [5]     PRTM2   ldb     COUNT       ;GET COUNT
D09A 2B25             (     flx29ccp.asm):00769 [3]             bmi     PRTM6       ;ERROR?
D09C 3404             (     flx29ccp.asm):00770 [5+1]           pshs    b           ;SAVE COUNT
D09E C005             (     flx29ccp.asm):00771 [2]             subb    #5          ;SET NEW COUNT
D0A0 F7CC49           (     flx29ccp.asm):00772 [5]             stb     COUNT       ;SAVE IT
D0A3 3504             (     flx29ccp.asm):00773 [5+1]           puls    b           ;RESTORE OLD
                      (     flx29ccp.asm):00774                                     ;
D0A5 B1CC47           (     flx29ccp.asm):00775 [5]     PRTM3   cmpa    MAPUP       ;CHECK FOR LOWER CASE
D0A8 2502             (     flx29ccp.asm):00776 [3]             bcs     LD0AE       ;SKIP IF NOT
D0AA 8020             (     flx29ccp.asm):00777 [2]             suba    #$20        ;CONVERT TO UPPER
                      (     flx29ccp.asm):00778                                     ;
D0AC A704             (     flx29ccp.asm):00779 [4+1]   LD0AE   sta     4,x         ;PUT CHARACTER
D0AE 3001             (     flx29ccp.asm):00780 [4+1]           leax    1,x         ;BUMP THE POINTER
D0B0 5A               (     flx29ccp.asm):00781 [2]             decb                ;DEC THE COUNT
D0B1 BDD008           (     flx29ccp.asm):00782 [8]             jsr     NXTCH       ;GET NEXT CHAR
D0B4 2408             (     flx29ccp.asm):00783 [3]             bcc     PRTM5       ;TERM CHAR?
D0B6 812D             (     flx29ccp.asm):00784 [2]             cmpa    #$2D        ;IS IT HYPHEN?
D0B8 2704             (     flx29ccp.asm):00785 [3]             beq     PRTM5       ;
                      (     flx29ccp.asm):00786                                     ;
D0BA 815F             (     flx29ccp.asm):00787 [2]             cmpa    #$5F        ;IS IT UNDER SCORE?
D0BC 2606             (     flx29ccp.asm):00788 [3]             bne     PRTM7       ;
                      (     flx29ccp.asm):00789                                     ;
D0BE 5D               (     flx29ccp.asm):00790 [2]     PRTM5   tstb                ;CHECK COUNT
D0BF 26E4             (     flx29ccp.asm):00791 [3]             bne     PRTM3       ;REPEAT
                      (     flx29ccp.asm):00792                                     ;
D0C1 1A01             (     flx29ccp.asm):00793 [3]     PRTM6   orcc    #1          ;SEC  SET ERROR
D0C3 39               (     flx29ccp.asm):00794 [5]             rts                 ;
                      (     flx29ccp.asm):00795                                     ;
D0C4 5D               (     flx29ccp.asm):00796 [2]     PRTM7   tstb                ;CHECK COUNT
D0C5 27CB             (     flx29ccp.asm):00797 [3]             beq     PRTM1       ;FINISHED?
                      (     flx29ccp.asm):00798                                     ;
D0C7 6F04             (     flx29ccp.asm):00799 [6+1]           clr     4,x         ;CLEAR REST
D0C9 3001             (     flx29ccp.asm):00800 [4+1]           leax    1,x         ;BUMP POINTER
D0CB 5A               (     flx29ccp.asm):00801 [2]             decb                ;DEC THE COUNT
D0CC 20F6             (     flx29ccp.asm):00802 [3]             bra     PRTM7       ;REPEAT
                      (     flx29ccp.asm):00803         
                      (     flx29ccp.asm):00804         * SKPSPC
                      (     flx29ccp.asm):00805         *
                      (     flx29ccp.asm):00806         * SKPSPC skipS SPACES IN THE BUFFER
                      (     flx29ccp.asm):00807         *
                      (     flx29ccp.asm):00808         *   ENTRy: noNE
                      (     flx29ccp.asm):00809         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00810         
D0CE BFCC3D           (     flx29ccp.asm):00811 [6]     SKPSPC  stx     CRSAVE      ;SAVE INDEX
D0D1 BECC14           (     flx29ccp.asm):00812 [6]             ldx     BUFPNT      ;GET POINTER
                      (     flx29ccp.asm):00813                                     ;
D0D4 A600             (     flx29ccp.asm):00814 [4+1]   SKPSP2  lda     0,x         ;GET CHARACTER
D0D6 8120             (     flx29ccp.asm):00815 [2]             cmpa    #$20        ;IS IT SPACE?
D0D8 2604             (     flx29ccp.asm):00816 [3]             bne     SKPSP4      ;
                      (     flx29ccp.asm):00817                                     ;
D0DA 3001             (     flx29ccp.asm):00818 [4+1]           leax    1,x         ;BUMP TO NEXT
D0DC 20F6             (     flx29ccp.asm):00819 [3]             bra     SKPSP2      ;REPEAT
                      (     flx29ccp.asm):00820                                     ;
D0DE BFCC14           (     flx29ccp.asm):00821 [6]     SKPSP4  stx     BUFPNT      ;SET POINTER
D0E1 BECC3D           (     flx29ccp.asm):00822 [6]             ldx     CRSAVE      ;RESTORE REGISTER
D0E4 39               (     flx29ccp.asm):00823 [5]             rts
                      (     flx29ccp.asm):00824         
                      (     flx29ccp.asm):00825         * SETEXT
                      (     flx29ccp.asm):00826         *
                      (     flx29ccp.asm):00827         * SETEXT sets A DEFAULT NAME EXTENSION
                      (     flx29ccp.asm):00828         * IF THE exteNSION IS NULL. IT IS SET
                      (     flx29ccp.asm):00829         * ACCORDing tO THE CODE IN A.
                      (     flx29ccp.asm):00830         *
                      (     flx29ccp.asm):00831         *   ENTRy: a HAS CODE
                      (     flx29ccp.asm):00832         *          x POINTS TO FCB
                      (     flx29ccp.asm):00833         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00834         
D0E5 3430             (     flx29ccp.asm):00835 [5+4]   SETEXT  pshs    x,y         ;SAVE REGISTERS
D0E7 E60C             (     flx29ccp.asm):00836 [4+1]           ldb     12,x        ;GET FIRST EXT
D0E9 261F             (     flx29ccp.asm):00837 [3]             bne     SETEX6      ;NULL?
                      (     flx29ccp.asm):00838                                     ;
D0EB 318DD10C         (     flx29ccp.asm):00839 [4+5]           leay    >EXTTBL,pc  ;POINT TO TABLE
D0EF 810F             (     flx29ccp.asm):00840 [2]             cmpa    #$0F        ;CHECK RANGE
D0F1 2217             (     flx29ccp.asm):00841 [3]             bhi     SETEX6      ;
D0F3 C603             (     flx29ccp.asm):00842 [2]             ldb     #3          ;GET TO DESIRED EXT.
D0F5 3D               (     flx29ccp.asm):00843 [11]            mul                 ;
D0F6 31AB             (     flx29ccp.asm):00844 [4+4]           leay    d,y         ;
D0F8 C603             (     flx29ccp.asm):00845 [2]             ldb     #3          ;GET EXTENSION LENGTH
                      (     flx29ccp.asm):00846                                     ;
D0FA A6A0             (     flx29ccp.asm):00847 [4+2]   SETEX4  lda     ,y+        ;GET CHAR
D0FC B1CC47           (     flx29ccp.asm):00848 [5]             cmpa    MAPUP       ;IS IT LOWER CASE?
D0FF 2502             (     flx29ccp.asm):00849 [3]             bcs     SETEX5      ;NO
D101 8020             (     flx29ccp.asm):00850 [2]             suba    #$20        ;YES - MAKE UPPER CASE
                      (     flx29ccp.asm):00851                                     ;
D103 A70C             (     flx29ccp.asm):00852 [4+1]   SETEX5  sta     12,x        ;PUT IN EXT
D105 3001             (     flx29ccp.asm):00853 [4+1]           leax    1,x         ;BUMP POINTER
D107 5A               (     flx29ccp.asm):00854 [2]             decb                ;THE COUNT
D108 26F0             (     flx29ccp.asm):00855 [3]             bne     SETEX4      ;FINISHED?
                      (     flx29ccp.asm):00856                                     ;
D10A 35B0             (     flx29ccp.asm):00857 [5+6]   SETEX6  puls    x,y,pc      ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):00858         
                      (     flx29ccp.asm):00859         * EXTTBL
                      (     flx29ccp.asm):00860         *
                      (     flx29ccp.asm):00861         * EXTENSion cODE TABLE
                      (     flx29ccp.asm):00862         
D10C 62696E           (     flx29ccp.asm):00863         EXTTBL  fcc     "bin"   ;CODE 0
D10F 747874           (     flx29ccp.asm):00864                 fcc     "txt"   ;CODE 1
D112 636D64           (     flx29ccp.asm):00865                 fcc     "cmd"   ;CODE 2
D115 626173           (     flx29ccp.asm):00866                 fcc     "bas"   ;CODE 3
D118 737973           (     flx29ccp.asm):00867                 fcc     "sys"   ;CODE 4
D11B 62616B           (     flx29ccp.asm):00868                 fcc     "bak"   ;CODE 5
D11E 736372           (     flx29ccp.asm):00869                 fcc     "scr"   ;CODE 6
D121 646174           (     flx29ccp.asm):00870                 fcc     "dat"   ;CODE 7
D124 626163           (     flx29ccp.asm):00871                 fcc     "bac"   ;CODE 8
D127 646972           (     flx29ccp.asm):00872                 fcc     "dir"   ;CODE 9
D12A 707274           (     flx29ccp.asm):00873                 fcc     "prt"   ;CODE 10
D12D 6F7574           (     flx29ccp.asm):00874                 fcc     "out"   ;CODE 11
D130 72656C           (     flx29ccp.asm):00875                 fcc     "rel"   ;CODE 12
D133 726669           (     flx29ccp.asm):00876                 fcc     "rfi"   ;CODE 13
D136 646576           (     flx29ccp.asm):00877                 fcc     "dev"   ;CODE 14
D139 617263           (     flx29ccp.asm):00878                 fcc     "arc"   ;CODE 15
                      (     flx29ccp.asm):00879         
                      (     flx29ccp.asm):00880         * GETHEX
                      (     flx29ccp.asm):00881         *
                      (     flx29ccp.asm):00882         * GETHEX gets A HEX VALUE FROM THE
                      (     flx29ccp.asm):00883         * INPUT buffeR.  B IS NON ZERO IF
                      (     flx29ccp.asm):00884         * THERE was a NUMBER.
                      (     flx29ccp.asm):00885         *
                      (     flx29ccp.asm):00886         *   ENTRy: noNE
                      (     flx29ccp.asm):00887         *   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):00888         *          vaLUE IN X
                      (     flx29ccp.asm):00889         
D13C BDD228           (     flx29ccp.asm):00890 [8]     GETHEX  jsr     CLROFS      ;CLEAR SPACE & B REG
D13F BDD008           (     flx29ccp.asm):00891 [8]     GETHE2  jsr     NXTCH       ;GET CHARACTER
D142 2522             (     flx29ccp.asm):00892 [3]             bcs     GETHE8      ;GRAPHICS?
                      (     flx29ccp.asm):00893                                     ;
D144 8D26             (     flx29ccp.asm):00894 [7]             bsr     TSTHEX      ;TEST FOR HEX
D146 2518             (     flx29ccp.asm):00895 [3]             bcs     GETHE6      ;ERROR?
                      (     flx29ccp.asm):00896                                     ;
D148 3404             (     flx29ccp.asm):00897 [5+1]           pshs    b           ;SAVE IND
D14A C604             (     flx29ccp.asm):00898 [2]             ldb     #4          ;SET UP COUNT
                      (     flx29ccp.asm):00899                                     ;
D14C 78CC1C           (     flx29ccp.asm):00900 [7]     GETHE4  asl     OFFSET+1    ;SHIFT OVER 4
D14F 79CC1B           (     flx29ccp.asm):00901 [7]             rol     OFFSET      ;
D152 5A               (     flx29ccp.asm):00902 [2]             decb                ;DEC THE COUNT
D153 26F7             (     flx29ccp.asm):00903 [3]             bne     GETHE4      ;LOOP TIL DONE
                      (     flx29ccp.asm):00904                                     ;
D155 3504             (     flx29ccp.asm):00905 [5+1]           puls    b           ;RESTORE IND
D157 BBCC1C           (     flx29ccp.asm):00906 [5]             adda    OFFSET+1    ;
D15A B7CC1C           (     flx29ccp.asm):00907 [5]             sta     OFFSET+1    ;SET NEW DIGIT
D15D 5C               (     flx29ccp.asm):00908 [2]             incb                ;SET INDICATOR
D15E 20DF             (     flx29ccp.asm):00909 [3]             bra     GETHE2      ;
                      (     flx29ccp.asm):00910                                     ;
D160 BDD008           (     flx29ccp.asm):00911 [8]     GETHE6  jsr     NXTCH       ;GET CHARACTER
D163 24FB             (     flx29ccp.asm):00912 [3]             bcc     GETHE6      ;WAIT FOR TERM
D165 39               (     flx29ccp.asm):00913 [5]             rts                 ;
                      (     flx29ccp.asm):00914                                     ;
D166 BECC1B           (     flx29ccp.asm):00915 [6]     GETHE8  ldx     OFFSET      ;GET VALUE
D169 1CFE             (     flx29ccp.asm):00916 [3]     GETHE9  andcc   #$FE        ;CLC  CLEAR ERRORS
D16B 39               (     flx29ccp.asm):00917 [5]             rts
                      (     flx29ccp.asm):00918         
                      (     flx29ccp.asm):00919         * TSTHEX
                      (     flx29ccp.asm):00920         *
                      (     flx29ccp.asm):00921         * TEST For vaLID HEX CHARACTER
                      (     flx29ccp.asm):00922         
D16C 815F             (     flx29ccp.asm):00923 [2]     TSTHEX  cmpa    #$5F
D16E 2302             (     flx29ccp.asm):00924 [3]             bls     TSTHE2
D170 8020             (     flx29ccp.asm):00925 [2]             suba    #$20
                      (     flx29ccp.asm):00926         
D172 8047             (     flx29ccp.asm):00927 [2]     TSTHE2  suba    #$47        ;REMOVE BIAS
D174 2A0C             (     flx29ccp.asm):00928 [3]             bpl     TSTHE4      ;
                      (     flx29ccp.asm):00929                                     ;
D176 8B06             (     flx29ccp.asm):00930 [2]             adda    #6          ;CHECK RANGE
D178 2A04             (     flx29ccp.asm):00931 [3]             bpl     TSTHE3      ;ERROR?
                      (     flx29ccp.asm):00932                                     ;
D17A 8B07             (     flx29ccp.asm):00933 [2]             adda    #7          ;ADD BACK IN
D17C 2A04             (     flx29ccp.asm):00934 [3]             bpl     TSTHE4      ;ERROR?
                      (     flx29ccp.asm):00935                                     ;
D17E 8B0A             (     flx29ccp.asm):00936 [2]     TSTHE3  adda    #$0A        ;FINAL BIAS
D180 2AE7             (     flx29ccp.asm):00937 [3]             bpl     GETHE9      ;NO ERROR
                      (     flx29ccp.asm):00938         
D182 1A01             (     flx29ccp.asm):00939 [3]     TSTHE4  orcc    #1
D184 39               (     flx29ccp.asm):00940 [5]             rts
                      (     flx29ccp.asm):00941         
                      (     flx29ccp.asm):00942         * INDEC
                      (     flx29ccp.asm):00943         *
                      (     flx29ccp.asm):00944         * INPUT decimAL NUMBER.
                      (     flx29ccp.asm):00945         *
                      (     flx29ccp.asm):00946         *   ENTRy: noNE
                      (     flx29ccp.asm):00947         *   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):00948         *          vaLUE IN X
                      (     flx29ccp.asm):00949         *          b=0 IF NO NUMBER
                      (     flx29ccp.asm):00950         
D185 BDD228           (     flx29ccp.asm):00951 [8]     INDEC   jsr     CLROFS      ;CLEAR SPACE & B REG.
D188 BDD008           (     flx29ccp.asm):00952 [8]     INDEC2  jsr     NXTCH       ;GET CHARACTER
D18B 25D9             (     flx29ccp.asm):00953 [3]             bcs     GETHE8      ;TERM?
D18D 8139             (     flx29ccp.asm):00954 [2]             cmpa    #$39        ;CHECK FOR NUMBER
D18F 22CF             (     flx29ccp.asm):00955 [3]             bhi     GETHE6      ;
D191 840F             (     flx29ccp.asm):00956 [2]             anda    #$0F        ;MASK NUMBER
D193 3404             (     flx29ccp.asm):00957 [5+1]           pshs    b           ;SAVE COUNT
D195 3402             (     flx29ccp.asm):00958 [5+1]           pshs    a           ;SAVE NUMBER
D197 FCCC1B           (     flx29ccp.asm):00959 [6]             ldd     OFFSET      ;GET VALUE
D19A 58               (     flx29ccp.asm):00960 [2]             aslb                ;DO TIMES 8
D19B 49               (     flx29ccp.asm):00961 [2]             rola                ;
D19C 58               (     flx29ccp.asm):00962 [2]             aslb                ;
D19D 49               (     flx29ccp.asm):00963 [2]             rola                ;
D19E F3CC1B           (     flx29ccp.asm):00964 [7]             addd    OFFSET      ;PLUS TIMES 2
D1A1 58               (     flx29ccp.asm):00965 [2]             aslb                ;
D1A2 49               (     flx29ccp.asm):00966 [2]             rola                ;
D1A3 EBE0             (     flx29ccp.asm):00967 [4+2]           addb    ,s+        ;ADD IN NEW DIGIT
D1A5 8900             (     flx29ccp.asm):00968 [2]             adca    #0          ;
D1A7 FDCC1B           (     flx29ccp.asm):00969 [6]             std     OFFSET      ;SAVE RESULT
D1AA 3504             (     flx29ccp.asm):00970 [5+1]           puls    b           ;GET COUNT
D1AC 5C               (     flx29ccp.asm):00971 [2]             incb                ;BUMP COUNT
D1AD 20D9             (     flx29ccp.asm):00972 [3]             bra     INDEC2      ;REPEAT
                      (     flx29ccp.asm):00973         
                      (     flx29ccp.asm):00974         * LOAD
                      (     flx29ccp.asm):00975         *
                      (     flx29ccp.asm):00976         * LOAD Is the SYSTEM BINARY LOADER
                      (     flx29ccp.asm):00977         *
                      (     flx29ccp.asm):00978         *   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):00979         *   EXIT:  waRMS IF ERROR
                      (     flx29ccp.asm):00980         *          alL RGISTERS CHANGED
                      (     flx29ccp.asm):00981         
D1AF 7FCC1D           (     flx29ccp.asm):00982 [7]     LOAD    clr     XFR         ;CLEAR TRANSFER FLAG
D1B2 8D3D             (     flx29ccp.asm):00983 [7]     LOAD2   bsr     DOFMS       ;DO READ
D1B4 8102             (     flx29ccp.asm):00984 [2]             cmpa    #2          ;BEGIN DESIGNATOR?
D1B6 2715             (     flx29ccp.asm):00985 [3]             beq     LOAD4       ;YES - GET DATA COUNT
                      (     flx29ccp.asm):00986                                     ;
D1B8 8116             (     flx29ccp.asm):00987 [2]             cmpa    #$16        ;TRANSFER DESIG?
D1BA 26F6             (     flx29ccp.asm):00988 [3]             bne     LOAD2       ;
D1BC 8D33             (     flx29ccp.asm):00989 [7]             bsr     DOFMS       ;GET NEXT CHAR
D1BE B7CC1E           (     flx29ccp.asm):00990 [5]             sta     TADR        ;SET TRANSFER ADR
D1C1 8D2E             (     flx29ccp.asm):00991 [7]             bsr     DOFMS       ;GET LSB
D1C3 B7CC1F           (     flx29ccp.asm):00992 [5]             sta     TADR+1      ;SAVE IT
D1C6 8601             (     flx29ccp.asm):00993 [2]             lda     #1          ;SET NON ZERO
D1C8 B7CC1D           (     flx29ccp.asm):00994 [5]             sta     XFR         ;SET TRANSFER FLAG
D1CB 20E5             (     flx29ccp.asm):00995 [3]             bra     LOAD2       ;REPEAT
                      (     flx29ccp.asm):00996                                     ;
D1CD 8D22             (     flx29ccp.asm):00997 [7]     LOAD4   bsr     DOFMS       ;GET NEXT CHAR
D1CF 1F89             (     flx29ccp.asm):00998 [6]             tfr     a,b         ;SAVE IT
D1D1 8D1E             (     flx29ccp.asm):00999 [7]             bsr     DOFMS       ;GET REST
D1D3 1E89             (     flx29ccp.asm):01000 [8]             exg     a,b         ;PUT IN ORDER
D1D5 F3CC1B           (     flx29ccp.asm):01001 [7]             addd    OFFSET      ;OFFSET + ADDRESS
D1D8 FDCC3B           (     flx29ccp.asm):01002 [6]             std     INDEX       ;SAVE POINTER
D1DB 8D14             (     flx29ccp.asm):01003 [7]             bsr     DOFMS       ;GET DATA COUNT
D1DD 1F89             (     flx29ccp.asm):01004 [6]             tfr     a,b         ;MOVE TO B
D1DF 4D               (     flx29ccp.asm):01005 [2]             tsta                ;ZERO COUNT?
D1E0 27D0             (     flx29ccp.asm):01006 [3]             beq     LOAD2       ;YES -
                      (     flx29ccp.asm):01007                                     ;
D1E2 8D0D             (     flx29ccp.asm):01008 [7]     LOAD6   bsr     DOFMS       ;GET CHARACTER
D1E4 BECC3B           (     flx29ccp.asm):01009 [6]             ldx     INDEX       ;GET POINTER
D1E7 A780             (     flx29ccp.asm):01010 [4+2]           sta     ,x+        ;SAVE IN MEMORY
D1E9 BFCC3B           (     flx29ccp.asm):01011 [6]             stx     INDEX       ;SAVE POINTER
D1EC 5A               (     flx29ccp.asm):01012 [2]             decb                ;DEC THE COUNT
D1ED 26F3             (     flx29ccp.asm):01013 [3]             bne     LOAD6       ;FINISHED?
D1EF 20C1             (     flx29ccp.asm):01014 [3]             bra     LOAD2       ;REPEAT
                      (     flx29ccp.asm):01015         
                      (     flx29ccp.asm):01016         * DOFMS
                      (     flx29ccp.asm):01017         *
                      (     flx29ccp.asm):01018         * DOFMS does AN IO TRANSFER TO THE
                      (     flx29ccp.asm):01019         * FILE Mgmnt SYSTEM.
                      (     flx29ccp.asm):01020         *
                      (     flx29ccp.asm):01021         *   ENTRy: noNE
                      (     flx29ccp.asm):01022         *   EXIT:  saME AS FMS COMMAND
                      (     flx29ccp.asm):01023         
D1F1 8EC840           (     flx29ccp.asm):01024 [3]     DOFMS   ldx     #SYSFCB     ;POINT TO FCB
D1F4 BDD406           (     flx29ccp.asm):01025 [8]             jsr     FMS         ;DO COMMAND
D1F7 2711             (     flx29ccp.asm):01026 [3]             beq     LD20B       ;ERROR?
                      (     flx29ccp.asm):01027                                     ;
D1F9 A601             (     flx29ccp.asm):01028 [4+1]           lda     1,x         ;GET ERROR CODE
D1FB 8108             (     flx29ccp.asm):01029 [2]             cmpa    #8          ;IS IT EOF?
D1FD 260E             (     flx29ccp.asm):01030 [3]             bne     DOFMS4      ;
                      (     flx29ccp.asm):01031                                     ;
D1FF 3262             (     flx29ccp.asm):01032 [4+1]           leas    2,s         ;FIX STACK
D201 8604             (     flx29ccp.asm):01033 [2]             lda     #4          ;SET CMND
D203 A700             (     flx29ccp.asm):01034 [4+1]           sta     0,x         ;
D205 BDD406           (     flx29ccp.asm):01035 [8]             jsr     FMS         ;CALL FMS
D208 260A             (     flx29ccp.asm):01036 [3]             bne     DOFMS6      ;ERROR?
                      (     flx29ccp.asm):01037                                     ;
D20A 1CFE             (     flx29ccp.asm):01038 [3]     LD20B   andcc   #$FE        ;CLC  CLEAR ERROR
D20C 39               (     flx29ccp.asm):01039 [5]             rts                 ;
                      (     flx29ccp.asm):01040                                     ;
D20D B7CC20           (     flx29ccp.asm):01041 [5]     DOFMS4  sta     ERRTYP      ;SET TYPE
D210 8104             (     flx29ccp.asm):01042 [2]             cmpa    #4          ;NO FILE ERROR?
D212 2772             (     flx29ccp.asm):01043 [3]             beq     LD287       ;YES -
                      (     flx29ccp.asm):01044                                     ;
D214 8D73             (     flx29ccp.asm):01045 [7]     DOFMS6  bsr     RPTERR      ;REPORT ERROR
D216 7ECDDE           (     flx29ccp.asm):01046 [4]             jmp     NFERR4      ;DO WARM START
                      (     flx29ccp.asm):01047         
                      (     flx29ccp.asm):01048         * GET
                      (     flx29ccp.asm):01049         *
                      (     flx29ccp.asm):01050         * GET IS the DOS COMMAND USED TO
                      (     flx29ccp.asm):01051         * LOAD Binary FILES INTO MEMORY.
                      (     flx29ccp.asm):01052         *
                      (     flx29ccp.asm):01053         *   ENTRy: noNE
                      (     flx29ccp.asm):01054         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):01055         
D219 8600             (     flx29ccp.asm):01056 [2]     GET     lda     #0          ;SET DEFAULT CODE
D21B 8D35             (     flx29ccp.asm):01057 [7]             bsr     GETOPN      ;GET & OPEN FILE
D21D 250F             (     flx29ccp.asm):01058 [3]             bcs     TSTNAM      ;NO NAME?
D21F 8D07             (     flx29ccp.asm):01059 [7]             bsr     CLROFS      ;CLEAR OFFSET
D221 7CCC4A           (     flx29ccp.asm):01060 [7]             inc     GOTFIL      ;SET FILE INDIC.
D224 8D89             (     flx29ccp.asm):01061 [7]             bsr     LOAD        ;GO DO LOAD
D226 20F1             (     flx29ccp.asm):01062 [3]             bra     GET         ;REPEAT PROCESS
                      (     flx29ccp.asm):01063         
                      (     flx29ccp.asm):01064         * CLROFS
                      (     flx29ccp.asm):01065         *
                      (     flx29ccp.asm):01066         * CLEARS storAGE LOC. OFFSET
                      (     flx29ccp.asm):01067         
D228 4F               (     flx29ccp.asm):01068 [2]     CLROFS  clra
D229 5F               (     flx29ccp.asm):01069 [2]             clrb
D22A FDCC1B           (     flx29ccp.asm):01070 [6]             std     OFFSET
D22D 39               (     flx29ccp.asm):01071 [5]             rts
                      (     flx29ccp.asm):01072         
                      (     flx29ccp.asm):01073         * TSTNAM
                      (     flx29ccp.asm):01074         *
                      (     flx29ccp.asm):01075         * TSTNAM testS TO SEE IF ANY NAMES HAVE
                      (     flx29ccp.asm):01076         * BEEN ProcesSED YET.
                      (     flx29ccp.asm):01077         
D22E F6CC4A           (     flx29ccp.asm):01078 [5]     TSTNAM  ldb     GOTFIL      ;CHECK FLAG
D231 1027FB9E         (     flx29ccp.asm):01079 [5+?]           lbeq    NFERR       ;REPORT ERROR
D235 7ECD03           (     flx29ccp.asm):01080 [4]             jmp     WARMS       ;ALL DONE
                      (     flx29ccp.asm):01081         
                      (     flx29ccp.asm):01082         * LGO
                      (     flx29ccp.asm):01083         *
                      (     flx29ccp.asm):01084         * LGO IS the SYSTEM LOAD AND GO MODULE.
                      (     flx29ccp.asm):01085         *
                      (     flx29ccp.asm):01086         *   ENTRy: noNE
                      (     flx29ccp.asm):01087         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01088         
D238 8602             (     flx29ccp.asm):01089 [2]     LGO     lda     #2          ;SET DEFAULT CODE
D23A 8D22             (     flx29ccp.asm):01090 [7]             bsr     GETOP2      ;OPEN FILE
D23C 8DEA             (     flx29ccp.asm):01091 [7]             bsr     CLROFS      ;CLEAR OFFSET
D23E BDD1AF           (     flx29ccp.asm):01092 [8]             jsr     LOAD        ;GO DO LOAD
                      (     flx29ccp.asm):01093                 ;                    ;
D241 F6CC1D           (     flx29ccp.asm):01094 [5]             ldb     XFR         ;CHECK FOR TRANSFER ADR
D244 2704             (     flx29ccp.asm):01095 [3]             beq     LGO2        ;
D246 6E9FCC1E         (     flx29ccp.asm):01096 [3+5]           jmp     [TADR]      ;JUMP TO XFR ADR
                      (     flx29ccp.asm):01097                                     ;
D24A 8ECC54           (     flx29ccp.asm):01098 [3]     LGO2    ldx     #NOTRST     ;POINT TO STRING
D24D 8681             (     flx29ccp.asm):01099 [2]             lda     #$81        ;SET TYPE
D24F 7ECDD8           (     flx29ccp.asm):01100 [4]             jmp     NFERR1      ;REPORT
                      (     flx29ccp.asm):01101         
                      (     flx29ccp.asm):01102         * GETOPN
                      (     flx29ccp.asm):01103         *
                      (     flx29ccp.asm):01104         * GETOPN gets THE FILES NAME FROM
                      (     flx29ccp.asm):01105         * THE INput bUFFER AND OPENS THE FILE
                      (     flx29ccp.asm):01106         *
                      (     flx29ccp.asm):01107         *   ENTRy: a HAS DEFAULT CODE
                      (     flx29ccp.asm):01108         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01109         
D252 3402             (     flx29ccp.asm):01110 [5+1]   GETOPN  pshs    a           ;SAVE CODE
D254 8EC840           (     flx29ccp.asm):01111 [3]             ldx     #SYSFCB     ;POINT TO FCB
D257 BDD030           (     flx29ccp.asm):01112 [8]             jsr     GETFIL      ;GET FILE SPEC
D25A 3502             (     flx29ccp.asm):01113 [5+1]           puls    a           ;RESTORE CODE
D25C 251A             (     flx29ccp.asm):01114 [3]             bcs     GETOP4      ;ERROR?
                      (     flx29ccp.asm):01115                                     ;
D25E 8EC840           (     flx29ccp.asm):01116 [3]     GETOP2  ldx     #SYSFCB     ;POINT TO FCB
D261 BDD0E5           (     flx29ccp.asm):01117 [8]             jsr     SETEXT      ;SET EXTENSION
D264 8EC840           (     flx29ccp.asm):01118 [3]             ldx     #SYSFCB     ;POINT TO FCB
D267 8601             (     flx29ccp.asm):01119 [2]             lda     #1          ;SET OPEN CODE
D269 A700             (     flx29ccp.asm):01120 [4+1]           sta     0,x         ;SET COMMAND
D26B BDD1F1           (     flx29ccp.asm):01121 [8]             jsr     DOFMS       ;GO DO FMS
D26E 102500BB         (     flx29ccp.asm):01122 [5+?]           lbcs    NONMER      ;REPORT ANY ERROR
D272 86FF             (     flx29ccp.asm):01123 [2]             lda     #$FF        ;SET NEG
D274 A7883B           (     flx29ccp.asm):01124 [4+1]           sta     59,x        ;SET FOR NO SPC COMP
D277 39               (     flx29ccp.asm):01125 [5]             rts                 ;
                      (     flx29ccp.asm):01126                                     ;
D278 B6CC11           (     flx29ccp.asm):01127 [5]     GETOP4  lda     LSTTRM      ;GET TERM
D27B 810D             (     flx29ccp.asm):01128 [2]             cmpa    #$0D        ;IS TERM CR?
D27D 2707             (     flx29ccp.asm):01129 [3]             beq     LD287       ;YES -
                      (     flx29ccp.asm):01130                                     ;
D27F B1CC02           (     flx29ccp.asm):01131 [5]             cmpa    TTYEOL      ;IS IT EOL?
D282 1026FB4D         (     flx29ccp.asm):01132 [5+?]           lbne    NFERR       ;ERROR IF NEITHER
                      (     flx29ccp.asm):01133                                     ;
D286 1A01             (     flx29ccp.asm):01134 [3]     LD287   orcc    #1          ;SEC  SET TERM INDICATOR
D288 39               (     flx29ccp.asm):01135 [5]             rts
                      (     flx29ccp.asm):01136         
                      (     flx29ccp.asm):01137         * RPTERR
                      (     flx29ccp.asm):01138         *
                      (     flx29ccp.asm):01139         * RPTERR repoRTS FMS ERRORS
                      (     flx29ccp.asm):01140         
D289 3430             (     flx29ccp.asm):01141 [5+4]   RPTERR  pshs    x,y         ;SAVE REGISTERS
D28B A601             (     flx29ccp.asm):01142 [4+1]           lda     1,x         ;GET ERR NUM
D28D B7CC20           (     flx29ccp.asm):01143 [5]             sta     ERRTYP      ;SAVE IT
D290 2763             (     flx29ccp.asm):01144 [3]             beq     RPTE44      ;
D292 BDCDE4           (     flx29ccp.asm):01145 [8]             jsr     RESTIO      ;RESTORE IO
D295 10BECC2B         (     flx29ccp.asm):01146 [7]             ldy     ERRVEC      ;GET ERR VECTOR
D299 2608             (     flx29ccp.asm):01147 [3]             bne     RPTER1      ;
D29B 8110             (     flx29ccp.asm):01148 [2]             cmpa    #$10        ;NOT READY ERROR
D29D 2758             (     flx29ccp.asm):01149 [3]             beq     RPTER6      ;
D29F 108ECC9F         (     flx29ccp.asm):01150 [4]             ldy     #ERNM       ;POINT TO STRING
                      (     flx29ccp.asm):01151                                     ;
D2A3 8EC840           (     flx29ccp.asm):01152 [3]     RPTER1  ldx     #SYSFCB     ;POINT TO FCB
D2A6 6D02             (     flx29ccp.asm):01153 [6+1]           tst     2,x         ;
D2A8 2709             (     flx29ccp.asm):01154 [3]             beq     RPTER2      ;
                      (     flx29ccp.asm):01155                                     ;
D2AA 8604             (     flx29ccp.asm):01156 [2]             lda     #4          ;CLOSE FILE IN FCB
D2AC A700             (     flx29ccp.asm):01157 [4+1]           sta     0,x         ;
D2AE BDD406           (     flx29ccp.asm):01158 [8]             jsr     FMS         ;CALL FMS
D2B1 262E             (     flx29ccp.asm):01159 [3]             bne     RPTER4      ;
                      (     flx29ccp.asm):01160                                     ;
D2B3 8EC838           (     flx29ccp.asm):01161 [3]     RPTER2  ldx     #SYSFCB-8   ;SET TO FCB
D2B6 C60B             (     flx29ccp.asm):01162 [2]             ldb     #$0B        ;SET COUNT
D2B8 8D6E             (     flx29ccp.asm):01163 [7]             bsr     RPTER9      ;COPY NAME TO FCB
D2BA 8EC840           (     flx29ccp.asm):01164 [3]             ldx     #SYSFCB     ;
D2BD B6CC0B           (     flx29ccp.asm):01165 [5]             lda     SYSDRV      ;SET ALL DRIVES ** CHANGED TO SYS ** 2-25-79
D2C0 A703             (     flx29ccp.asm):01166 [4+1]           sta     3,x         ;
D2C2 8601             (     flx29ccp.asm):01167 [2]             lda     #1          ;SET EXTENSION
D2C4 A700             (     flx29ccp.asm):01168 [4+1]           sta     0,x         ;OPEN FOR READ
D2C6 BDD406           (     flx29ccp.asm):01169 [8]             jsr     FMS         ;
D2C9 2616             (     flx29ccp.asm):01170 [3]             bne     RPTER4      ;ERROR?
                      (     flx29ccp.asm):01171                                     ;
D2CB B6CC20           (     flx29ccp.asm):01172 [5]             lda     ERRTYP      ;GET ERROR NUM
D2CE 4A               (     flx29ccp.asm):01173 [2]             deca                ;CALCULATE REC NUM
D2CF 47               (     flx29ccp.asm):01174 [2]             asra                ;
D2D0 47               (     flx29ccp.asm):01175 [2]             asra                ;
D2D1 4C               (     flx29ccp.asm):01176 [2]             inca                ;
D2D2 6F8820           (     flx29ccp.asm):01177 [6+1]           clr     32,x        ;SET LRN IN FCB
D2D5 A78821           (     flx29ccp.asm):01178 [4+1]           sta     33,x        ;
D2D8 8615             (     flx29ccp.asm):01179 [2]             lda     #21         ;
D2DA A700             (     flx29ccp.asm):01180 [4+1]           sta     0,x         ;DO POSITION
D2DC BDD406           (     flx29ccp.asm):01181 [8]             jsr     FMS         ;
D2DF 271E             (     flx29ccp.asm):01182 [3]             beq     RPTER7      ;
                      (     flx29ccp.asm):01183                                     ;
D2E1 8ECC6D           (     flx29ccp.asm):01184 [3]     RPTER4  ldx     #DSKERS     ;POINT TO STRING
D2E4 BDCE79           (     flx29ccp.asm):01185 [8]             jsr     PSTRNG      ;OUTPUT IT
D2E7 BECC3D           (     flx29ccp.asm):01186 [6]             ldx     CRSAVE      ;RESTORE TO FCB
D2EA B6CC20           (     flx29ccp.asm):01187 [5]             lda     ERRTYP      ;GET ERR NUM
D2ED A701             (     flx29ccp.asm):01188 [4+1]           sta     1,x         ;
D2EF 6F00             (     flx29ccp.asm):01189 [6+1]           clr     0,x         ;
D2F1 5F               (     flx29ccp.asm):01190 [2]             clrb                ;
D2F2 BDCF80           (     flx29ccp.asm):01191 [8]             jsr     OUTDEC      ;OUTPUT NUMBER
                      (     flx29ccp.asm):01192                                     ;
D2F5 35B0             (     flx29ccp.asm):01193 [5+6]   RPTE44  puls    x,y,pc      ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):01194                                     ;
D2F7 8ECC7A           (     flx29ccp.asm):01195 [3]     RPTER6  ldx     #NTRST      ;POINT TO STRING
D2FA BDCE79           (     flx29ccp.asm):01196 [8]             jsr     PSTRNG      ;OUTPUT IT
D2FD 20F6             (     flx29ccp.asm):01197 [3]             bra     RPTE44      ;
                      (     flx29ccp.asm):01198                                     ;
D2FF BDCEAF           (     flx29ccp.asm):01199 [8]     RPTER7  jsr     PCRLF       ;OUTPUT CR & LF
D302 8EC840           (     flx29ccp.asm):01200 [3]             ldx     #SYSFCB     ;SET TO FCB
D305 B6CC20           (     flx29ccp.asm):01201 [5]             lda     ERRTYP      ;GET ERROR
D308 4A               (     flx29ccp.asm):01202 [2]             deca                ;FIND RECORD IN FCB
D309 8403             (     flx29ccp.asm):01203 [2]             anda    #3          ;MASK NUMBER
D30B C63F             (     flx29ccp.asm):01204 [2]             ldb     #63         ;GET MESSAGE LENGTH
D30D 3D               (     flx29ccp.asm):01205 [11]            mul                 ;GET TO DESIRED MESSAGE
D30E CB04             (     flx29ccp.asm):01206 [2]             addb    #4          ;ADD IN BIAS
D310 E78822           (     flx29ccp.asm):01207 [4+1]           stb     34,x        ;SET FDI IN FCB
                      (     flx29ccp.asm):01208                                     ;
D313 BDD406           (     flx29ccp.asm):01209 [8]     RPTE85  jsr     FMS         ;GET CHARACTER
D316 26C9             (     flx29ccp.asm):01210 [3]             bne     RPTER4      ;ERROR?
D318 BDCF3B           (     flx29ccp.asm):01211 [8]             jsr     PUTCHR      ;OUTPUT CHARACTER
D31B 810D             (     flx29ccp.asm):01212 [2]             cmpa    #$0D        ;IS IT CR?
D31D 26F4             (     flx29ccp.asm):01213 [3]             bne     RPTE85      ;REPEAT
                      (     flx29ccp.asm):01214                                     ;
D31F 8604             (     flx29ccp.asm):01215 [2]             lda     #4          ;CLOSE FILE
D321 A700             (     flx29ccp.asm):01216 [4+1]           sta     0,x         ;
D323 BDD406           (     flx29ccp.asm):01217 [8]             jsr     FMS         ;CALL FMS
D326 20CD             (     flx29ccp.asm):01218 [3]             bra     RPTE44      ;EXIT
                      (     flx29ccp.asm):01219                                     ;
D328 3430             (     flx29ccp.asm):01220 [5+4]   RPTER9  pshs    x,y         ;SAVE REGISTERS
D32A 7ED0FA           (     flx29ccp.asm):01221 [4]             jmp     SETEX4      ;GO COPY
                      (     flx29ccp.asm):01222         
                      (     flx29ccp.asm):01223         * NONMER
                      (     flx29ccp.asm):01224         *
                      (     flx29ccp.asm):01225         * REPORT no nAME ERROR
                      (     flx29ccp.asm):01226         
D32D 8ECC63           (     flx29ccp.asm):01227 [3]     NONMER  ldx     #NONMST     ;POINT TO STRING
D330 7ECDDB           (     flx29ccp.asm):01228 [4]             jmp     NFERR2      ;REPORT IT
                      (     flx29ccp.asm):01229         
                      (     flx29ccp.asm):01230         * DOCMD
                      (     flx29ccp.asm):01231         *
                      (     flx29ccp.asm):01232         * DO COMmand LINE
                      (     flx29ccp.asm):01233         
D333 3506             (     flx29ccp.asm):01234 [5+2]   DOCMD   puls    a,b         ;GET RET ADR
D335 FDCC41           (     flx29ccp.asm):01235 [6]             std     RETADR      ;SAVE ADDRESS
D338 10FFCC43         (     flx29ccp.asm):01236 [7]             sts     STKSTR      ;SAVE STACK PNTR
D33C 7FCC20           (     flx29ccp.asm):01237 [7]             clr     ERRTYP      ;CLEAR FLAG
D33F 7CCC28           (     flx29ccp.asm):01238 [7]             inc     CMFLG       ;SET MODE
D342 7ECDB2           (     flx29ccp.asm):01239 [4]             jmp     DOS4        ;GO DO LINE
                      (     flx29ccp.asm):01240         
                      (     flx29ccp.asm):01241         * RETRN
                      (     flx29ccp.asm):01242         *
                      (     flx29ccp.asm):01243         * RETRN returNS FROM DOCMD
                      (     flx29ccp.asm):01244         
D345 7FCC28           (     flx29ccp.asm):01245 [7]     RETRN   clr     CMFLG       ;CLEAR MODE
D348 10FECC43         (     flx29ccp.asm):01246 [7]             lds     STKSTR      ;RESTORE STACK
D34C F6CC20           (     flx29ccp.asm):01247 [5]             ldb     ERRTYP      ;GET STATUS
D34F 6E9FCC41         (     flx29ccp.asm):01248 [3+5]           jmp     [RETADR]    ;DO RETURN
                      (     flx29ccp.asm):01249         
                      (     flx29ccp.asm):01250         * ADDBX
                      (     flx29ccp.asm):01251         * ADDS ContenTS OF B TO X
                      (     flx29ccp.asm):01252         
D353 3A               (     flx29ccp.asm):01253 [3]     ADDBX   abx
D354 39               (     flx29ccp.asm):01254 [5]             rts
                      (     flx29ccp.asm):01255         
                      (     flx29ccp.asm):01256         * MEXIT
                      (     flx29ccp.asm):01257         *
                      (     flx29ccp.asm):01258         * MONITOr exiT CHECK
                      (     flx29ccp.asm):01259         
D355 7DCCFC           (     flx29ccp.asm):01260 [7]     MEXIT   tst     PR1         ;CHECK PROCESS 1
D358 2604             (     flx29ccp.asm):01261 [3]             bne     MEXIT2      ;
D35A 6E9FDE33         (     flx29ccp.asm):01262 [3+5]           jmp     [MONITR]    ;JUMP TO MONITOR
                      (     flx29ccp.asm):01263                                     ;
D35E 8EC840           (     flx29ccp.asm):01264 [3]     MEXIT2  ldx     #SYSFCB     ;POINT TO FCB
D361 861B             (     flx29ccp.asm):01265 [2]             lda     #27         ;
D363 A701             (     flx29ccp.asm):01266 [4+1]           sta     1,x         ;SET ERROR
D365 BDD289           (     flx29ccp.asm):01267 [8]             jsr     RPTERR      ;REPORT ERROR
D368 7ECD67           (     flx29ccp.asm):01268 [4]             jmp     ENTRY       ;GO BACK
                      (        flex9.asm):00009                         include "flx29fms.asm"
                      (     flx29fms.asm):00001                 OPT PAG
                      (     flx29fms.asm):00002                 TTL 6809 FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00003                 PAG
                      (     flx29fms.asm):00004                 PRAGMA CD
                      (     flx29fms.asm):00005         *
                      (     flx29fms.asm):00006         * TSC 6809 DISK FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00007         *
                      (     flx29fms.asm):00008         * COPYRIGHT (C) 1979 BY
                      (     flx29fms.asm):00009         *
                      (     flx29fms.asm):00010         * TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29fms.asm):00011         * BOX 2574
                      (     flx29fms.asm):00012         * WEST LAFAYETTE, INDIANA 47906
                      (     flx29fms.asm):00013         * (317) 463-2502
                      (     flx29fms.asm):00014         *
                      (     flx29fms.asm):00015         * NOTE:
                      (     flx29fms.asm):00016         * AS OF 11/79 THE POINTS IN FMS WHICH LOAD A REGISTER
                      (     flx29fms.asm):00017         * WITH THE SECTOR LENGTH HAVE BEEN CHANGED TO SIMPLY
                      (     flx29fms.asm):00018         * CLEAR THE REGISTER (SINCE LDB #256 = LDB #0).
                      (     flx29fms.asm):00019         * ALL POINTS AFFECTED BY THIS CHANGE ARE FLAGGED WITH
                      (     flx29fms.asm):00020         * FOUR BACKSLASHES IN THE COMMENT FIELD (\\\\).
                      (     flx29fms.asm):00021         *
                      (     flx29fms.asm):00022         * CORRECTED WRITE FILE SECTOR MAP ROUTINE (WTFSM) 2/4/80.
                      (     flx29fms.asm):00023         
                      (     flx29fms.asm):00024         *
                      (     flx29fms.asm):00025         * THE FILE MANAGEMENT SYSTEM (FMS) RELIES
                      (     flx29fms.asm):00026         * ON THE USER DEFINITIONS OF FILE CONTROL
                      (     flx29fms.asm):00027         * BLOCKS (FCB) FOR EACH FILE OPENED.
                      (     flx29fms.asm):00028         * THE FCB STRUCTURE IS AS FOLLOWS:
                      (     flx29fms.asm):00029         *
                      (     flx29fms.asm):00030         * EACH FCB CONSUMES 320 BYTES OF RAM.
                      (     flx29fms.asm):00031         * EACH BYTE IS USED AS FOLLOWS:
                      (     flx29fms.asm):00032         *
                      (     flx29fms.asm):00033         * NAME  OFFSET FUNCTION
                      (     flx29fms.asm):00034         * ----  ------ --------
                      (     flx29fms.asm):00035         
     0000             (     flx29fms.asm):00036         FFC     equ     0           ;FUNCTION OP CODE
     0001             (     flx29fms.asm):00037         FES     equ     1           ;ERROR STATUS BYTE
     0002             (     flx29fms.asm):00038         FAS     equ     2           ;ACTIVITY STATUS
     0003             (     flx29fms.asm):00039         FDN     equ     3           ;DRIVE NUMBER
     0004             (     flx29fms.asm):00040         FFN     equ     4           ;- 11 FILE NAME
     000C             (     flx29fms.asm):00041         FNE     equ     12          ;- 14 NAME EXTENSION
     000F             (     flx29fms.asm):00042         FID     equ     15          ;IDENTIFIER BYTE
     0010             (     flx29fms.asm):00043         FNU     equ     16          ;FILE NUMBER
     0011             (     flx29fms.asm):00044         FSA     equ     17          ;- 18 START DISK ADR.
     0013             (     flx29fms.asm):00045         FEA     equ     19          ;- 20 END DISK ADDRESS
     0015             (     flx29fms.asm):00046         FSZ     equ     21          ;- 22 FILE SIZE
     0017             (     flx29fms.asm):00047         FMP     equ     23          ;- 24 FILE SECTOR MAP
     0019             (     flx29fms.asm):00048         FDT     equ     25          ;- 27 CREATION DATE
     001C             (     flx29fms.asm):00049         FLP     equ     28          ;- 29 FCB LIST POINTER
     001E             (     flx29fms.asm):00050         FCS     equ     30          ;- 31 CURRENT SECTOR
     0020             (     flx29fms.asm):00051         FRN     equ     32          ;- 33 RECORD NUMBER
     0022             (     flx29fms.asm):00052         FDI     equ     34          ;DATA INDEX
     0023             (     flx29fms.asm):00053         FRI     equ     35          ;RANDOM INDEX
     0024             (     flx29fms.asm):00054         FWB     equ     36          ;- 46 NAME WORK BUFFER
     002F             (     flx29fms.asm):00055         FCD     equ     47          ;- 49 CURRENT DIR. ADR.
     0032             (     flx29fms.asm):00056         FFD     equ     50          ;- 52 FIRST DELETED DIR.
     0035             (     flx29fms.asm):00057         FLR     equ     53          ;- 55 LAST RECORD PNTR
     0038             (     flx29fms.asm):00058         FNK     equ     56          ;- 58 NEXT KEY POINTER
     003B             (     flx29fms.asm):00059         FSC     equ     59          ;SPACE COMP. CNTR
     003C             (     flx29fms.asm):00060         FSP     equ     60          ;- 63 SPARE BYTES
     0040             (     flx29fms.asm):00061         FSB     equ     64          ;- 319 SECTOR BUFFER
                      (     flx29fms.asm):00062         
     003C             (     flx29fms.asm):00063         FMX equ FSP                             ;MAX SECTOR NUMBER
     0037             (     flx29fms.asm):00064         SBC equ FLR+2                           ;SEQ. BLOCK COUNT
                      (     flx29fms.asm):00065         
                      (     flx29fms.asm):00066         *
                      (     flx29fms.asm):00067         * ALL DRIVER ROUTINES ARE REFERENCED
                      (     flx29fms.asm):00068         * THROUGH THIS TABLE.
                      (     flx29fms.asm):00069         
                      (     flx29fms.asm):00070         ;DREAD   equ     $DE00       ;DISK READ ROUTINE
                      (     flx29fms.asm):00071         ;DWRITE  equ     $DE03       ;DISK WRITE ROUTINE
                      (     flx29fms.asm):00072         ;RESTOR  equ     $DE09       ;HEAD RESTORE ROUTINE
                      (     flx29fms.asm):00073         ;VERIFY  equ     $DE06       ;WRITE VERIFY ROUTINE
                      (     flx29fms.asm):00074         ;DRIVE   equ     $DE0C       ;DRIVE SELECT
                      (     flx29fms.asm):00075         ;CHECK   equ     $DE0F       ;CHECK READY
                      (     flx29fms.asm):00076         ;QUKCHK  equ     $DE12       ;QUICK READY CHECK
                      (     flx29fms.asm):00077         ;DINIT   equ     $DE15       ;INITIALIZE DRIVERS
                      (     flx29fms.asm):00078         ;DWARM   equ     $DE18       ;USER WARMSTART ROUTINE
                      (     flx29fms.asm):00079         ;DSEEK   equ     $DE1B       ;SEEK TO TRACK ROUTINE
                      (     flx29fms.asm):00080         
                      (     flx29fms.asm):00081         * ALL LOW LEVEL SYSTEM VARIABLES
                      (     flx29fms.asm):00082         * AND CONSTANTS ARE IN THIS AREA.
                      (     flx29fms.asm):00083         *
                      (     flx29fms.asm):00084         * SYSTEM CONSTANTS
                      (     flx29fms.asm):00085         
     0100             (     flx29fms.asm):00086         SL      equ     256         ;SECTOR LENGTH
     000B             (     flx29fms.asm):00087         NL      equ     11          ;NAME LENGTH
     0005             (     flx29fms.asm):00088         RTC     equ     5           ;RETRY COUNT
     0007             (     flx29fms.asm):00089         RSC     equ     7           ;SEEK RETRY COUNT
     0004             (     flx29fms.asm):00090         RS      equ     4           ;RECORD START
     0010             (     flx29fms.asm):00091         IRS     equ     16          ;INFO RECORD START
     0018             (     flx29fms.asm):00092         IRL     equ     24          ;INFO RECORD LENGTH
     0004             (     flx29fms.asm):00093         IRFAS   equ     $04         ;INFO MASK
     0016             (     flx29fms.asm):00094         LSTFC   equ     22          ;LAST FUNCTION CODE
     007F             (     flx29fms.asm):00095         MAXSP   equ     $7F         ;MAX SPACE COUNT
     0020             (     flx29fms.asm):00096         SPC     equ     $20         ;ASCII SPACE
     0009             (     flx29fms.asm):00097         SCC     equ     9           ;SPACE COMPRESSION CHAR.
     0018             (     flx29fms.asm):00098         DELC    equ     $18         ;DELETE CHARACTER
     0004             (     flx29fms.asm):00099         NODR    equ     4           ;NUMBER OF DRIVES
     0000             (     flx29fms.asm):00100         DTRK    equ     0           ;DIRECTORY START TRACK
     0005             (     flx29fms.asm):00101         DSEC    equ     5           ;DIR. START SECTOR
     0003             (     flx29fms.asm):00102         ISEC    equ     3           ;INFO SECTOR NUMBER
     007F             (     flx29fms.asm):00103         TRMSK   equ     $7F         ;TRACK MASK
     007F             (     flx29fms.asm):00104         SCMSK   equ     $7F         ;SECTOR MASK
     004C             (     flx29fms.asm):00105         LSTTRK  equ     76          ;LAST TRACK NUMBER
     000F             (     flx29fms.asm):00106         LSTSEC  equ     15          ;LAST SECTOR NUMBER
     0010             (     flx29fms.asm):00107         RNFMSK  equ     $10         ;REC NOT FOUND MASK
     0005             (     flx29fms.asm):00108         MAIND   equ     $0005       ;MAIN DIRECTORY ADDRESS
                      (     flx29fms.asm):00109         
                      (     flx29fms.asm):00110         * DOS CONSTANTS
                      (     flx29fms.asm):00111         
     CC0E             (     flx29fms.asm):00112         DATE    equ     $CC0E       ;SYSTEM DATA
     C709             (     flx29fms.asm):00113         LOCK    equ     $C709       ;LOCK FMS
     C70C             (     flx29fms.asm):00114         UNLOCK  equ     $C70C       ;UNLOCK FMS
                      (     flx29fms.asm):00115         ;PR1     equ     $CCFC       ;PROCESS 1 REGISTER
                      (     flx29fms.asm):00116         
                      (     flx29fms.asm):00117         * SYSTEM ERROR NUMBER DEFINITIONS
                      (     flx29fms.asm):00118         *
                      (     flx29fms.asm):00119         * NAME  NUMBER MEANING
                      (     flx29fms.asm):00120         * ----  ------ -------
                      (     flx29fms.asm):00121         
     0000             (     flx29fms.asm):00122         NOER    equ     0           ;NO ERROR
     0001             (     flx29fms.asm):00123         ICER    equ     1           ;ILLEGAL FUNCTION CODE
     0002             (     flx29fms.asm):00124         FBER    equ     2           ;FILE BUSY
     0003             (     flx29fms.asm):00125         FEER    equ     3           ;FILE EXISTS
     0004             (     flx29fms.asm):00126         NFER    equ     4           ;NO SUCH FILE
     0005             (     flx29fms.asm):00127         DRER    equ     5           ;DIRECTORY ERROR
     0006             (     flx29fms.asm):00128         TMER    equ     6           ;TOO MANY FILES
     0007             (     flx29fms.asm):00129         DFER    equ     7           ;DISK FULL
     0008             (     flx29fms.asm):00130         EFER    equ     8           ;END OF FILE
     0009             (     flx29fms.asm):00131         RDER    equ     9           ;READ ERROR (CRC)
     000A             (     flx29fms.asm):00132         WTER    equ     10          ;WRITE ERROR (CRC)
     000B             (     flx29fms.asm):00133         WPER    equ     11          ;WRITE PROTECTED
     000C             (     flx29fms.asm):00134         DPER    equ     12          ;DELETE PROTECTED
     000D             (     flx29fms.asm):00135         IFER    equ     13          ;ILLEGAL FCB
     000E             (     flx29fms.asm):00136         DAER    equ     14          ;ILLEGAL DISK ADDRESS
     000F             (     flx29fms.asm):00137         DNER    equ     15          ;DRIVE NUMBER ERROR
     0010             (     flx29fms.asm):00138         NRER    equ     16          ;NOT READY
     0011             (     flx29fms.asm):00139         ADER    equ     17          ;ACCESS DENIED
     0012             (     flx29fms.asm):00140         STER    equ     18          ;STATUS ERROR
     0013             (     flx29fms.asm):00141         IRER    equ     19          ;INDEX RANGE ERROR
     0014             (     flx29fms.asm):00142         FIER    equ     20          ;FMS INACTIVE
     0015             (     flx29fms.asm):00143         INER    equ     21          ;ILLEGAL FILE NAME
     0016             (     flx29fms.asm):00144         CLER    equ     22          ;CLOSE ERROR
     0017             (     flx29fms.asm):00145         FSER    equ     23          ;FSM OVERFLOW ERROR
     0018             (     flx29fms.asm):00146         RRER    equ     24          ;RECORD RANGE ERROR
     0019             (     flx29fms.asm):00147         RMER    equ     25          ;RECORD MATCH ERROR
                      (     flx29fms.asm):00148         
                      (     flx29fms.asm):00149         ;
                      (     flx29fms.asm):00150         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (     flx29fms.asm):00151         ;_____________________________________________________________________________________________________
                      (     flx29fms.asm):00152                         ORG     $D3E1       ; TABLE STARTS AT $D3E1
                      (     flx29fms.asm):00153         
D3E1 DE8E             (     flx29fms.asm):00154         LD3E1           FDB     ADDDEV      ; add an IRQ handler to table
D3E3 DE9A             (     flx29fms.asm):00155                         FDB     DELDEV      ; delete an IRQ handler from table
                      (     flx29fms.asm):00156         
D3E5 DE6D             (     flx29fms.asm):00157                         FDB     INCHNE      ; INPUT CHARACTER W/O ECHO
D3E7 DE7A             (     flx29fms.asm):00158         IHNDLRP         FDB     IHNDLR      ; IRQ INTERRUPT HANDLER
D3E9 FDAB             (     flx29fms.asm):00159         SWIVECP         FDB     SWIVEC      ; SWI3 VECTOR LOCATION
D3EB FDAB             (     flx29fms.asm):00160         IRQVECP         FDB     IRQVEC      ; IRQ VECTOR LOCATION
D3ED DE3E             (     flx29fms.asm):00161                         FDB     TMOFF       ; TIMER OFF ROUTINE
D3EF DE3E             (     flx29fms.asm):00162                         FDB     TMON        ; TIMER ON ROUTINE
D3F1 DE3E             (     flx29fms.asm):00163                         FDB     TMINT       ; TIMER INITIALIZATION
D3F3 DE33             (     flx29fms.asm):00164                         FDB     MONITR      ; MONITOR ENTRY ADDRESS
D3F5 DE3F             (     flx29fms.asm):00165                         FDB     TINIT       ; TERMINAL INITIALIZATION
D3F7 DE5D             (     flx29fms.asm):00166                         FDB     STAT        ; CHECK TERMINAL STATUS
D3F9 DE4C             (     flx29fms.asm):00167                         FDB     VOUTCH      ; OUTPUT CHARACTER
D3FB DE43             (     flx29fms.asm):00168                         FDB     VINCH       ; INPUT CHARACTER W/ ECHO
                      (     flx29fms.asm):00169         
                      (     flx29fms.asm):00170         
                      (     flx29fms.asm):00171                 org     $D3FD
D3FD 7EC400           (     flx29fms.asm):00172 [4]     TSTSTR  jmp     STAR
                      (     flx29fms.asm):00173         
                      (     flx29fms.asm):00174                 org $D400
                      (     flx29fms.asm):00175         
                      (     flx29fms.asm):00176         * FMS JUMP TABLES
                      (     flx29fms.asm):00177         *
                      (     flx29fms.asm):00178         * ALL CALLS TO THE FMS SHOULD ENTER
                      (     flx29fms.asm):00179         * THROUGH ONE OF THESE THREE POINTS.
                      (     flx29fms.asm):00180         
D400 7ED43A           (     flx29fms.asm):00181 [4]     FMSINT  jmp     INIT        ;FMS INITIALIZATION  $D400
D403 7ED45D           (     flx29fms.asm):00182 [4]     FMSCLS  jmp     EXCLS       ;FMS CLOSURE         $D403
D406 7ED47F           (     flx29fms.asm):00183 [4]     FMS     jmp     CMND        ;FMS COMMAND ENTRY   $D406
                      (     flx29fms.asm):00184         
                      (     flx29fms.asm):00185         * GLOBAL VARIABLE STORAGE
                      (     flx29fms.asm):00186         
D409                  (     flx29fms.asm):00187         FCBBAS  rmb     2           ;FCB BASE POINTER        $D409
D40B                  (     flx29fms.asm):00188         FCBSTR  rmb     2           ;CURRENT FCB             $D40B
D40D                  (     flx29fms.asm):00189         TEMP    rmb     2           ;TEMPORARY INDEX         $D40D
D40F                  (     flx29fms.asm):00190         DATAPT  rmb     2           ;DATA POINTER            $D40F
D411                  (     flx29fms.asm):00191         ETRIES  rmb     1           ;ERROR TRY COUNT         $D411
D412                  (     flx29fms.asm):00192         STRIES  rmb     1           ;SEEK TRY COUNT          $D412
D413                  (     flx29fms.asm):00193         CLD     rmb     2           ;CURRENT LOOK UP DIR     $D413
D415                  (     flx29fms.asm):00194         CUD     rmb     2           ;CURRENT USER DIR        $D415
D417                  (     flx29fms.asm):00195         DIRDN   rmb     1           ;DIRECTORY DRIVE NUM     $D417
D418                  (     flx29fms.asm):00196         BKLN    rmb     2           ;BACK LINK               $D418
D41A                  (     flx29fms.asm):00197         SINDIR  rmb     1           ;SINGLE DIR SEARCH       $D41A
D41B                  (     flx29fms.asm):00198         AVLPNT  rmb     2           ;AVAIL POINTER           $D41B
D41D                  (     flx29fms.asm):00199         SECMAP  rmb     NODR*6      ;SECTOR MAPS             $D41D
                      (     flx29fms.asm):00200         
                      (     flx29fms.asm):00201                 org     $D435
                      (     flx29fms.asm):00202         
D435 FF               (     flx29fms.asm):00203         VRFYFG  fcb     $FF         ;VERIFY FLAG
                      (     flx29fms.asm):00204         
D436 00000000         (     flx29fms.asm):00205         DRVINFO fcb     $00,$00,$00,$00
                      (     flx29fms.asm):00206         
                      (     flx29fms.asm):00207         * SYSTEM ENTRY ROUTINES
                      (     flx29fms.asm):00208         *
                      (     flx29fms.asm):00209         * THE FOLLOWING THREE ROUTINES SHOULD
                      (     flx29fms.asm):00210         * BE ACCESSED THROUGH THE SYSTEM JUMP
                      (     flx29fms.asm):00211         * TABLE.
                      (     flx29fms.asm):00212         
                      (     flx29fms.asm):00213         * INIT
                      (     flx29fms.asm):00214         *
                      (     flx29fms.asm):00215         * INIT IS THE FMS INITIALIZATION ROUTINE.
                      (     flx29fms.asm):00216         * NO ERRORS CAN OCCUR FROM THIS ROUTINE
                      (     flx29fms.asm):00217         * AND THE SYSTEM ASSUMES NO FILES ARE OPEN.
                      (     flx29fms.asm):00218         
D43A BDDE15           (     flx29fms.asm):00219 [8]     INIT    jsr     DINIT       ;INITIALIZE DRIVERS
D43D 8ED409           (     flx29fms.asm):00220 [3]             ldx     #FCBBAS     ;SET POINTER
D440 C60A             (     flx29fms.asm):00221 [2]             ldb     #10         ;SET COUNT
D442 8D11             (     flx29fms.asm):00222 [7]             bsr     INIT4       ;CLEAR SPACE
D444 8E0005           (     flx29fms.asm):00223 [3]             ldx     #MAIND      ;SET MAIN DIRECTORY
D447 BFD413           (     flx29fms.asm):00224 [6]             stx     CLD         ;
D44A BFD415           (     flx29fms.asm):00225 [6]             stx     CUD         ;
D44D 7FD41A           (     flx29fms.asm):00226 [7]             clr     SINDIR      ;CLEAR SINGLE DIR
                      (     flx29fms.asm):00227                                     ;
D450 8ED41B           (     flx29fms.asm):00228 [3]     INIT2   ldx     #AVLPNT     ;POINT TO FMS SPC
D453 C61A             (     flx29fms.asm):00229 [2]             ldb     #26         ;SET COUNTER
                      (     flx29fms.asm):00230                                     ;
D455 6F80             (     flx29fms.asm):00231 [6+2]   INIT4   clr     ,x+        ;CLEAR BYTE
D457 5A               (     flx29fms.asm):00232 [2]             decb                ;DEC THE COUNT
D458 26FB             (     flx29fms.asm):00233 [3]             bne     INIT4       ;REPEAT?
D45A 7EC70C           (     flx29fms.asm):00234 [4]             jmp     UNLOCK
                      (     flx29fms.asm):00235         
                      (     flx29fms.asm):00236         * EXCLS
                      (     flx29fms.asm):00237         *
                      (     flx29fms.asm):00238         * EXCLS IS THE FMS EXIT ROUTINE.
                      (     flx29fms.asm):00239         * EXECUTION OF THIS ROUTINE TELLS THE
                      (     flx29fms.asm):00240         * SYSTEM TO CLOSE ALL OPEN FILES.
                      (     flx29fms.asm):00241         
D45D BDC709           (     flx29fms.asm):00242 [8]     EXCLS   jsr     LOCK        ;LOCK FMS
D460 BED409           (     flx29fms.asm):00243 [6]     EXCLS1  ldx     FCBBAS      ;GET LINK BASE
D463 27EB             (     flx29fms.asm):00244 [3]             beq     INIT2       ;ANY FCBS LEFT?
D465 3088E4           (     flx29fms.asm):00245 [4+1]           leax    -FLP,x      ;
D468 BFD40B           (     flx29fms.asm):00246 [6]             stx     FCBSTR      ;SET ACT. FCB
D46B 3420             (     flx29fms.asm):00247 [5+2]           pshs    y           ;SAVE REGISTER
D46D BDDADB           (     flx29fms.asm):00248 [8]             jsr     CLOSE       ;GO CLOSE FILE
D470 3520             (     flx29fms.asm):00249 [5+2]           puls    y           ;RESTORE REGISTER
D472 24EC             (     flx29fms.asm):00250 [3]             bcc     EXCLS1      ;REPEAT
                      (     flx29fms.asm):00251                                     ;
D474 BED40B           (     flx29fms.asm):00252 [6]             ldx     FCBSTR      ;SET TO FCB
D477 6F02             (     flx29fms.asm):00253 [6+1]           clr     2,x         ;CLEAR FAS
D479 BDC70C           (     flx29fms.asm):00254 [8]             jsr     UNLOCK      ;UNLOCK FMS
D47C C6FF             (     flx29fms.asm):00255 [2]             ldb     #$FF        ;SET ERROR
D47E 39               (     flx29fms.asm):00256 [5]             rts
                      (     flx29fms.asm):00257         
                      (     flx29fms.asm):00258         * CMND
                      (     flx29fms.asm):00259         *
                      (     flx29fms.asm):00260         * CMND IS THE FMS COMMAND INTERPRETER.
                      (     flx29fms.asm):00261         * ALL COMMAND CALLS TO FMS SHOULD BE
                      (     flx29fms.asm):00262         * THROUGH THIS ROUTINE.
                      (     flx29fms.asm):00263         
D47F 7DCCFC           (     flx29fms.asm):00264 [7]     CMND    tst     PR1         ;PROCESS ACTIVE?
D482 2703             (     flx29fms.asm):00265 [3]             beq     CMND1       ;
D484 BDC709           (     flx29fms.asm):00266 [8]             jsr     LOCK        ;LOCK FMS
                      (     flx29fms.asm):00267                                     ;
D487 3424             (     flx29fms.asm):00268 [5+3]   CMND1   pshs    b,y         ;SAVE REGISTERS
D489 BFD40B           (     flx29fms.asm):00269 [6]             stx     FCBSTR      ;SET FCB STORAGE
D48C 6F01             (     flx29fms.asm):00270 [6+1]           clr     FES,x       ;CLEAR ERRORS
D48E E684             (     flx29fms.asm):00271 [4+0]           ldb     FFC,x       ;GET FUNCTION CODE
D490 2622             (     flx29fms.asm):00272 [3]             bne     CMND4       ;IO CODE?
                      (     flx29fms.asm):00273                                     ;
D492 E602             (     flx29fms.asm):00274 [4+1]           ldb     FAS,x       ;GET ACTIVITY BYTE
D494 271A             (     flx29fms.asm):00275 [3]             beq     CMND3       ;
                      (     flx29fms.asm):00276                                     ;
D496 C102             (     flx29fms.asm):00277 [2]             cmpb    #2          ;IS IT WRITE?
D498 2711             (     flx29fms.asm):00278 [3]             beq     CMND2       ;
D49A BDD5BD           (     flx29fms.asm):00279 [8]             jsr     SRDSEQ      ;GO DO READ
D49D BED40B           (     flx29fms.asm):00280 [6]     CMND15  ldx     FCBSTR      ;RESTORE X
D4A0 2526             (     flx29fms.asm):00281 [3]             bcs     CMND7       ;ERROR?
D4A2 7DCCFC           (     flx29fms.asm):00282 [7]             tst     PR1         ;PR 1 ACTIVE?
D4A5 2623             (     flx29fms.asm):00283 [3]             bne     CMND8       ;
D4A7 5F               (     flx29fms.asm):00284 [2]             clrb                ;CLEAR ERRORS
D4A8 3524             (     flx29fms.asm):00285 [5+3]           puls    b,y         ;RESTORE REGISTERS
D4AA 39               (     flx29fms.asm):00286 [5]             rts                 ;
                      (     flx29fms.asm):00287                                     ;jmp  $f82a
                      (     flx29fms.asm):00288         
D4AB BDD6D8           (     flx29fms.asm):00289 [8]     CMND2   jsr     SWTSEQ      ;GO DO WRITE
D4AE 20ED             (     flx29fms.asm):00290 [3]             bra     CMND15      ;
                      (     flx29fms.asm):00291                                     ;
D4B0 C612             (     flx29fms.asm):00292 [2]     CMND3   ldb     #STER       ;SET STATUS ERROR
D4B2 2014             (     flx29fms.asm):00293 [3]             bra     CMND7       ;REPORT ERROR
                      (     flx29fms.asm):00294                                     ;
D4B4 C116             (     flx29fms.asm):00295 [2]     CMND4   cmpb    #LSTFC      ;CHECK CODE
D4B6 2304             (     flx29fms.asm):00296 [3]             bls     CMND5       ;
D4B8 C601             (     flx29fms.asm):00297 [2]             ldb     #ICER       ;SET CODE ERROR
D4BA 200C             (     flx29fms.asm):00298 [3]             bra     CMND7       ;REPORT IT
                      (     flx29fms.asm):00299                                     ;
D4BC 5A               (     flx29fms.asm):00300 [2]     CMND5   decb                ;DEC THE CODE
D4BD 58               (     flx29fms.asm):00301 [2]             aslb                ;CODE TIMES 2
D4BE 8ED4D2           (     flx29fms.asm):00302 [3]             ldx     #CODTBL     ;POINT TO TABLE
D4C1 AD95             (     flx29fms.asm):00303 [7+4]           jsr     [b,x]       ;GO DO ROUTINE
D4C3 BED40B           (     flx29fms.asm):00304 [6]             ldx     FCBSTR      ;RESTORE FCB PNTR
D4C6 2402             (     flx29fms.asm):00305 [3]             bcc     CMND8       ;ERRORS?
                      (     flx29fms.asm):00306                                     ;
D4C8 E701             (     flx29fms.asm):00307 [4+1]   CMND7   stb     FES,x       ;SET ERROR
                      (     flx29fms.asm):00308                                     ;
D4CA BDC70C           (     flx29fms.asm):00309 [8]     CMND8   jsr     UNLOCK      ;
D4CD 6D01             (     flx29fms.asm):00310 [6+1]           tst     FES,x       ;TEST FOR ERROR
D4CF 3524             (     flx29fms.asm):00311 [5+3]           puls    b,y         ;RESTORE REGISTERS
D4D1 39               (     flx29fms.asm):00312 [5]             rts
                      (     flx29fms.asm):00313         
                      (     flx29fms.asm):00314         * CODTBL
                      (     flx29fms.asm):00315         *
                      (     flx29fms.asm):00316         * CODTBL IS THE SYSTEM TABLE OF
                      (     flx29fms.asm):00317         * FUNCTION CODE ROUTINE ADDRESSES.
                      (     flx29fms.asm):00318         
D4D2 D990             (     flx29fms.asm):00319         CODTBL  fdb     OPNRD       ;OPNRD   OPEN FOR READ
D4D4 D9E3             (     flx29fms.asm):00320                 fdb     OPNWT       ;OPNWT   OPEN FOR WRITE
D4D6 DB11             (     flx29fms.asm):00321                 fdb     OPNRW       ;OPNRW   OPEN FOR READ WRITE
D4D8 DADB             (     flx29fms.asm):00322                 fdb     CLOSE       ;CLOSE   CLOSE FILE
D4DA D5EB             (     flx29fms.asm):00323                 fdb     REWIND      ;REWIND  REWIND FILE
D4DC D826             (     flx29fms.asm):00324                 fdb     OPNDIR      ;OPNDIR  OPEN DIRECTORY
D4DE D841             (     flx29fms.asm):00325                 fdb     GETIR       ;GETIR   GET INFO RECORD
D4E0 D880             (     flx29fms.asm):00326                 fdb     PUTIR       ;PUTIR   PUT INFO RECORD
D4E2 D64A             (     flx29fms.asm):00327                 fdb     READSS      ;READSS  READ SINGLE SECTOR
D4E4 D6A8             (     flx29fms.asm):00328                 fdb     WRITSS      ;WRITSS  WRITE SINGLE SECTOR
D4E6 D973             (     flx29fms.asm):00329                 fdb     WRTDIR      ;WRTDIR  WRITE DIRECTORY
D4E8 DBEE             (     flx29fms.asm):00330                 fdb     DELETE      ;DELETE  DELETE FILE
D4EA DB44             (     flx29fms.asm):00331                 fdb     RENAME      ;RENAME  RENAME FILE
D4EC D6A2             (     flx29fms.asm):00332                 fdb     RETRY4      ;RETRY4  APPEND FILES
D4EE DA9F             (     flx29fms.asm):00333                 fdb     NEXTS       ;NEXTS   NEXT SEQU. SECTOR
D4F0 D819             (     flx29fms.asm):00334                 fdb     OPNSIR      ;OPNSIR  OPEN SYSTEM INFO
D4F2 D578             (     flx29fms.asm):00335                 fdb     GETRAN      ;GETRAN  GET RANDOM CHARACTER
D4F4 D599             (     flx29fms.asm):00336                 fdb     PUTRAN      ;PUTRAN  WRITE RANDOM CHARACTER
D4F6 DB1F             (     flx29fms.asm):00337                 fdb     WTAPP       ;WTAPP   OPEN WRITE APPEND
D4F8 DDD6             (     flx29fms.asm):00338                 fdb     NXTRDY      ;NXTRDY  FIND NEXT READY DRIVE
D4FA DD14             (     flx29fms.asm):00339                 fdb     POSIT       ;POSIT   POSITION TO RECORD N
D4FC DCFE             (     flx29fms.asm):00340                 fdb     BKREC       ;BKREC   BACKUP ONE RECORD
                      (     flx29fms.asm):00341         
                      (     flx29fms.asm):00342         *
                      (     flx29fms.asm):00343         * THE FOLLOWING ROUTINES ARE THE SYSTEM
                      (     flx29fms.asm):00344         * LEVEL ROUTINES USED BY THE FMS.
                      (     flx29fms.asm):00345         
                      (     flx29fms.asm):00346         * SETFCB
                      (     flx29fms.asm):00347         *
                      (     flx29fms.asm):00348         * SETFCB IS USED TO TELL THE SYSTEM
                      (     flx29fms.asm):00349         * WHERE THE NEW FCB IS LOCATED.
                      (     flx29fms.asm):00350         * IT SETS UP A CHAINED STRUCTURE
                      (     flx29fms.asm):00351         * WITH FCBBAS AS THE BASE OF THE CHAIN.
                      (     flx29fms.asm):00352         *
                      (     flx29fms.asm):00353         *   ENTRY: NONE
                      (     flx29fms.asm):00354         *   EXIT:  CS IF FCB EXISTS
                      (     flx29fms.asm):00355         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00356         
D4FE 8D21             (     flx29fms.asm):00357 [7]     SETFCB  bsr     FNDFCB      ;FIND FCB
D500 2605             (     flx29fms.asm):00358 [3]             bne     SETFC2      ;ERROR?
D502 C602             (     flx29fms.asm):00359 [2]             ldb     #FBER       ;FILE BUSY
D504 1A01             (     flx29fms.asm):00360 [3]             orcc    #1          ;SEC SHOW ERROR
D506 39               (     flx29fms.asm):00361 [5]             rts                 ;
                      (     flx29fms.asm):00362                                     ;
D507 ED84             (     flx29fms.asm):00363 [5+0]   SETFC2  std     ,x         ;SET FCB
D509 AE84             (     flx29fms.asm):00364 [5+0]           ldx     ,x         ;GET FCB POS
D50B 6F84             (     flx29fms.asm):00365 [6+0]           clr     ,x         ;CLEAR LAST LINK
D50D 6F01             (     flx29fms.asm):00366 [6+1]           clr     1,x         ;ALSO SHOWS NO ERROR
D50F 39               (     flx29fms.asm):00367 [5]             rts
                      (     flx29fms.asm):00368         
                      (     flx29fms.asm):00369         * REMFCB
                      (     flx29fms.asm):00370         *
                      (     flx29fms.asm):00371         * REMFCB IS USED TO REMOVE AN ACTIVE
                      (     flx29fms.asm):00372         * FCB FROM THE SYSTEM FCB LIST.
                      (     flx29fms.asm):00373         *
                      (     flx29fms.asm):00374         *   ENTRY: NONE
                      (     flx29fms.asm):00375         *   EXIT:  CS IF FCB NOT FOUND
                      (     flx29fms.asm):00376         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00377         
D510 8D0F             (     flx29fms.asm):00378 [7]     REMFCB  bsr     FNDFCB      ;FIND FCB
D512 2705             (     flx29fms.asm):00379 [3]             beq     REMFC2      ;ERROR?
D514 C60D             (     flx29fms.asm):00380 [2]             ldb     #IFER       ;SET ERROR CODE
D516 1A01             (     flx29fms.asm):00381 [3]             orcc    #1          ;SEC SHOW ERROR
D518 39               (     flx29fms.asm):00382 [5]             rts                 ;
                      (     flx29fms.asm):00383                                     ;
D519 EC9800           (     flx29fms.asm):00384 [5+4]   REMFC2  ldd     [0,x]       ;GET NEXT LINK
D51C ED84             (     flx29fms.asm):00385 [5+0]           std     ,x         ;SAVE NEW VALUE
D51E 1CFE             (     flx29fms.asm):00386 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D520 39               (     flx29fms.asm):00387 [5]             rts
                      (     flx29fms.asm):00388         
                      (     flx29fms.asm):00389         * FNDFCB
                      (     flx29fms.asm):00390         *
                      (     flx29fms.asm):00391         * FNDFCB TRIES TO FIND THE FCB IN
                      (     flx29fms.asm):00392         * FCBSTR IN THE SYSTEM TABLE.
                      (     flx29fms.asm):00393         *
                      (     flx29fms.asm):00394         *   ENTRY: NONE
                      (     flx29fms.asm):00395         *   EXIT:  NE IF NOT FOUND
                      (     flx29fms.asm):00396         *          A & B DESTROYED
                      (     flx29fms.asm):00397         *          X POINTS TO FCB
                      (     flx29fms.asm):00398         
D521 FCD40B           (     flx29fms.asm):00399 [6]     FNDFCB  ldd     FCBSTR      ;PICKUP FCB
D524 C3001C           (     flx29fms.asm):00400 [4]             addd    #FLP        ;SET TO LIST PNTR
D527 8ED409           (     flx29fms.asm):00401 [3]             ldx     #FCBBAS     ;GET BASE LOC.
D52A 10AE84           (     flx29fms.asm):00402 [6+0]   FNDFC3  ldy     ,x         ;CHECK FOR LIST END
D52D 2603             (     flx29fms.asm):00403 [3]             bne     FNDFC4      ;
D52F 1CFB             (     flx29fms.asm):00404 [3]             andcc   #$FB        ;SET NE BIT
D531 39               (     flx29fms.asm):00405 [5]             rts                 ;
                      (     flx29fms.asm):00406                                     ;
D532 10A384           (     flx29fms.asm):00407 [7+0]   FNDFC4  cmpd    ,x         ;COMPARE VALUE
D535 2601             (     flx29fms.asm):00408 [3]             bne     FNDFC6      ;
D537 39               (     flx29fms.asm):00409 [5]             rts                 ;RET WITH EQ
                      (     flx29fms.asm):00410                                     ;
D538 AE84             (     flx29fms.asm):00411 [5+0]   FNDFC6  ldx     ,x         ;MOVE TO NEXT FCB
D53A 20EE             (     flx29fms.asm):00412 [3]             bra     FNDFC3      ;REPEAT
                      (     flx29fms.asm):00413         
                      (     flx29fms.asm):00414         * CLRFCB
                      (     flx29fms.asm):00415         *
                      (     flx29fms.asm):00416         * CLRFCB CLEARS SELECTED SECTIONS OF
                      (     flx29fms.asm):00417         * THE CURRENT FCB.
                      (     flx29fms.asm):00418         *
                      (     flx29fms.asm):00419         *   ENTRY: NONE
                      (     flx29fms.asm):00420         *   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00421         
D53C BED40B           (     flx29fms.asm):00422 [6]     CLRFCB  ldx     FCBSTR      ;GET FCB
D53F 4F               (     flx29fms.asm):00423 [2]             clra                ;CLEAR A BYTE
D540 5F               (     flx29fms.asm):00424 [2]             clrb                ;GET SECTOR LENGTH \\\\
D541 8D02             (     flx29fms.asm):00425 [7]             bsr     CLRFC2      ;CLEAR OUT
D543 C62F             (     flx29fms.asm):00426 [2]             ldb     #FSB-FSA    ;
D545 A78811           (     flx29fms.asm):00427 [4+1]   CLRFC2  sta     FSA,x       ;CLEAR BYTE
D548 3001             (     flx29fms.asm):00428 [4+1]           leax    1,x         ;BUMP THE POINTER
D54A 5A               (     flx29fms.asm):00429 [2]             decb                ;DEC THE COUNT
D54B 26F8             (     flx29fms.asm):00430 [3]             bne     CLRFC2      ;LOOP TIL DONE
D54D 39               (     flx29fms.asm):00431 [5]             rts
                      (     flx29fms.asm):00432         
                      (     flx29fms.asm):00433         * COPNAM
                      (     flx29fms.asm):00434         *
                      (     flx29fms.asm):00435         * COPNAM WILL COPY THE NAME (NL BYTES)
                      (     flx29fms.asm):00436         * FROM FCB AREA FFN (FILE NAME) TO THE
                      (     flx29fms.asm):00437         * AREA FWB (WORK BUFFER).
                      (     flx29fms.asm):00438         *
                      (     flx29fms.asm):00439         *   ENTRY: NONE
                      (     flx29fms.asm):00440         *   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00441         
D54E BED40B           (     flx29fms.asm):00442 [6]     COPNAM  ldx     FCBSTR      ;PICKUP FCB
D551 C60B             (     flx29fms.asm):00443 [2]             ldb     #NL         ;SET NAME LENGTH
D553 A604             (     flx29fms.asm):00444 [4+1]   COPNA2  lda     FFN,x       ;GET CHARACTER
D555 A78824           (     flx29fms.asm):00445 [4+1]           sta     FWB,x       ;MOVE IT
D558 3001             (     flx29fms.asm):00446 [4+1]           leax    1,x         ;BUMP THE POINTER
D55A 5A               (     flx29fms.asm):00447 [2]             decb                ;DEC THE COUNTER
D55B 26F6             (     flx29fms.asm):00448 [3]             bne     COPNA2
D55D 39               (     flx29fms.asm):00449 [5]             rts
                      (     flx29fms.asm):00450         
                      (     flx29fms.asm):00451         * CMPNAM
                      (     flx29fms.asm):00452         *
                      (     flx29fms.asm):00453         * CMPNAM WILL COMPARE THE NAME (NL
                      (     flx29fms.asm):00454         * BYTES LONG) IN THE FCB AREA FWB
                      (     flx29fms.asm):00455         * (WORK BUFFER) TO THE CONTENTS OF
                      (     flx29fms.asm):00456         * FCB AREA FFN (FILE NAME).
                      (     flx29fms.asm):00457         *
                      (     flx29fms.asm):00458         *   ENTRY: NONE
                      (     flx29fms.asm):00459         *   EXIT:  NE IF NOT EQUAL
                      (     flx29fms.asm):00460         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00461         
D55E BED40B           (     flx29fms.asm):00462 [6]     CMPNAM  ldx     FCBSTR      ;PICKUP FCB
D561 C60B             (     flx29fms.asm):00463 [2]             ldb     #NL         ;SET LENGTH
                      (     flx29fms.asm):00464                                     ;
D563 A604             (     flx29fms.asm):00465 [4+1]   CMPNA1  lda     FFN,x       ;GET CHARACTER
D565 8A20             (     flx29fms.asm):00466 [2]             ora     #$20        ;MAKE LOWERCASE
D567 3402             (     flx29fms.asm):00467 [5+1]           pshs    a           ;
D569 A68824           (     flx29fms.asm):00468 [4+1]           lda     FWB,x       ;GET 2ND CHARACTER
D56C 8A20             (     flx29fms.asm):00469 [2]             ora     #$20        ;MAKE LOWERCASE
D56E A1E0             (     flx29fms.asm):00470 [4+2]           cmpa    ,s+         ;COMPARE THEM
D570 2605             (     flx29fms.asm):00471 [3]             bne     CMPNA4      ;NOT EQUAL?
                      (     flx29fms.asm):00472                                     ;
D572 3001             (     flx29fms.asm):00473 [4+1]           leax    1,x         ;BUMP THE POINTER
D574 5A               (     flx29fms.asm):00474 [2]             decb                ;DEC THE COUNTER
D575 26EC             (     flx29fms.asm):00475 [3]             bne     CMPNA1      ;REPEAT
D577 39               (     flx29fms.asm):00476 [5]     CMPNA4  rts
                      (     flx29fms.asm):00477         
                      (     flx29fms.asm):00478         * GETRAN   * FFC #17 *
                      (     flx29fms.asm):00479         *
                      (     flx29fms.asm):00480         * GETRAN GETS A RANDOM CHARACTER FROM
                      (     flx29fms.asm):00481         * THE CURRENT FSB.
                      (     flx29fms.asm):00482         *
                      (     flx29fms.asm):00483         *   ENTRY: FRI CONTAINS DESIRED INDEX
                      (     flx29fms.asm):00484         *   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00485         *          A CONTAINS CHARACTER
                      (     flx29fms.asm):00486         *          B & X CHANGED
                      (     flx29fms.asm):00487         
D578 BED40B           (     flx29fms.asm):00488 [6]     GETRAN  ldx     FCBSTR      ;GET FCB
D57B E602             (     flx29fms.asm):00489 [4+1]           ldb     FAS,x       ;GET STATUS
D57D 54               (     flx29fms.asm):00490 [2]             lsrb                ;CHECK IF R OR RW
D57E 2479             (     flx29fms.asm):00491 [3]             bcc     REWIN2      ;GO SET ERROR
D580 E68823           (     flx29fms.asm):00492 [4+1]           ldb     FRI,x       ;GET RANDOM INDEX
D583 7ED609           (     flx29fms.asm):00493 [4]             jmp     RDSEQ0
                      (     flx29fms.asm):00494         
                      (     flx29fms.asm):00495         * PUTNXT
                      (     flx29fms.asm):00496         *
                      (     flx29fms.asm):00497         * PUTNXT PUTS THE CHARACTER IN A INTO
                      (     flx29fms.asm):00498         * THE NEXT AVAILABLE FSB LOCATION
                      (     flx29fms.asm):00499         * POINTED TO BY THE FDI.
                      (     flx29fms.asm):00500         *
                      (     flx29fms.asm):00501         *   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00502         *   EXIT:  CS IF LAST FSB POS. USED
                      (     flx29fms.asm):00503         *          B & X CHANGED
                      (     flx29fms.asm):00504         
D586 BED40B           (     flx29fms.asm):00505 [6]     PUTNXT  ldx     FCBSTR      ;PICKUP FCB
D589 E68822           (     flx29fms.asm):00506 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D58C 6C8822           (     flx29fms.asm):00507 [6+1]           inc     FDI,x       ;BUMP FDI
D58F 3A               (     flx29fms.asm):00508 [3]             abx                 ;ADD IN INDEX
D590 A78840           (     flx29fms.asm):00509 [4+1]           sta     FSB,x       ;PUT THE CHARACTER
D593 5C               (     flx29fms.asm):00510 [2]             incb                ;BUMP IT
D594 261F             (     flx29fms.asm):00511 [3]             bne     PUTRA2      ;OVER END OF FSB?
D596 1A01             (     flx29fms.asm):00512 [3]             orcc    #1          ;SEC OVER END!
D598 39               (     flx29fms.asm):00513 [5]             rts
                      (     flx29fms.asm):00514         
                      (     flx29fms.asm):00515         * PUTRAN   * FFC #18 *
                      (     flx29fms.asm):00516         *
                      (     flx29fms.asm):00517         * PUTRAN PUTS THE CHARACTER IN A
                      (     flx29fms.asm):00518         * IN THE FSB LOCATION INDEXED BY
                      (     flx29fms.asm):00519         * THE FRI.
                      (     flx29fms.asm):00520         *
                      (     flx29fms.asm):00521         *   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00522         *          FRI CONTAINS INDEX
                      (     flx29fms.asm):00523         *   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00524         *          B & X CHANGED
                      (     flx29fms.asm):00525         
D599 BED40B           (     flx29fms.asm):00526 [6]     PUTRAN  ldx     FCBSTR      ;GET FCB
D59C E602             (     flx29fms.asm):00527 [4+1]           ldb     FAS,x       ;CHECK IF RW
D59E C403             (     flx29fms.asm):00528 [2]             andb    #3          ;MASK OFF
D5A0 C103             (     flx29fms.asm):00529 [2]             cmpb    #3          ;IS IT RW?
D5A2 2655             (     flx29fms.asm):00530 [3]             bne     REWIN2      ;SKIP IF ERROR
D5A4 CA80             (     flx29fms.asm):00531 [2]             orb     #$80        ;SET UPDATE BIT
D5A6 E702             (     flx29fms.asm):00532 [4+1]           stb     FAS,x       ;SAVE IT
D5A8 E60F             (     flx29fms.asm):00533 [4+1]           ldb     FID,x       ;CHECK WP
D5AA C580             (     flx29fms.asm):00534 [2]             bitb    #$80        ;
D5AC 260A             (     flx29fms.asm):00535 [3]             bne     PUTRA4      ;
D5AE E68823           (     flx29fms.asm):00536 [4+1]           ldb     FRI,x       ;GET RANDOM INDEX
D5B1 3A               (     flx29fms.asm):00537 [3]             abx                 ;ADD IN INDEX
D5B2 A78840           (     flx29fms.asm):00538 [4+1]           sta     64,x        ;FSB,x PUT CHARACTER
                      (     flx29fms.asm):00539                                     ;
D5B5 1CFE             (     flx29fms.asm):00540 [3]     PUTRA2  andcc   #$FE        ;CLC CLEAR ERROR
D5B7 39               (     flx29fms.asm):00541 [5]             rts                 ;
                      (     flx29fms.asm):00542                                     ;
D5B8 C60B             (     flx29fms.asm):00543 [2]     PUTRA4  ldb     #WPER       ;SET WP ERROR
D5BA 1A01             (     flx29fms.asm):00544 [3]             orcc    #1          ;SEC SET ERROR
D5BC 39               (     flx29fms.asm):00545 [5]             rts
                      (     flx29fms.asm):00546         
                      (     flx29fms.asm):00547         * SRDSEQ
                      (     flx29fms.asm):00548         *
                      (     flx29fms.asm):00549         * SRDSEQ IS THE HIGH LEVEL READ
                      (     flx29fms.asm):00550         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00551         * CONTROL CHARACTERS AND SPACE
                      (     flx29fms.asm):00552         * EXPANSION ARE HANDLED HERE UNLESS
                      (     flx29fms.asm):00553         * FSC IS NEGATIVE.
                      (     flx29fms.asm):00554         *
                      (     flx29fms.asm):00555         *   ENTRY: NONE
                      (     flx29fms.asm):00556         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00557         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00558         *          A & X CHANGED
                      (     flx29fms.asm):00559         
D5BD A6883B           (     flx29fms.asm):00560 [4+1]   SRDSEQ  lda     FSC,x       ;CHECK FOR SP. EXP.
D5C0 2B3C             (     flx29fms.asm):00561 [3]             bmi     RDSEQ       ;CONTROL IGNORE?
D5C2 2707             (     flx29fms.asm):00562 [3]             beq     SRDSE2      ;ACTIVE EXPANSION?
D5C4 6A883B           (     flx29fms.asm):00563 [6+1]           dec     FSC,x       ;DEC THE SPACE COUNT
D5C7 8620             (     flx29fms.asm):00564 [2]             lda     #SPC        ;SETUP SPACE
D5C9 201D             (     flx29fms.asm):00565 [3]             bra     SRDSE7      ;FINISH UP
                      (     flx29fms.asm):00566                                     ;
D5CB 8D31             (     flx29fms.asm):00567 [7]     SRDSE2  bsr     RDSEQ       ;READ NEXT CHAR
D5CD 251B             (     flx29fms.asm):00568 [3]             bcs     SRDSE8      ;ERRORS?
D5CF 8118             (     flx29fms.asm):00569 [2]             cmpa    #DELC       ;IS IT DELETED?
D5D1 2215             (     flx29fms.asm):00570 [3]             bhi     SRDSE7      ;SKIP ALL SPECIALS
D5D3 27F6             (     flx29fms.asm):00571 [3]             beq     SRDSE2      ;
D5D5 8109             (     flx29fms.asm):00572 [2]             cmpa    #SCC        ;SPACE COMP CHAR?
D5D7 260C             (     flx29fms.asm):00573 [3]             bne     SRDSE6      ;
D5D9 8D23             (     flx29fms.asm):00574 [7]             bsr     RDSEQ       ;GO GET COUNT
D5DB 250D             (     flx29fms.asm):00575 [3]             bcs     SRDSE8      ;ERROR?
D5DD BED40B           (     flx29fms.asm):00576 [6]             ldx     FCBSTR      ;RESTORE POINTER
D5E0 A7883B           (     flx29fms.asm):00577 [4+1]           sta     FSC,x       ;SAVE COUNT
D5E3 20D8             (     flx29fms.asm):00578 [3]             bra     SRDSEQ      ;REPEAT
                      (     flx29fms.asm):00579                                     ;
D5E5 4D               (     flx29fms.asm):00580 [2]     SRDSE6  tsta                ;IS CHAR NULL?
D5E6 27E3             (     flx29fms.asm):00581 [3]             beq     SRDSE2      ;IGNORE IF SO
                      (     flx29fms.asm):00582                                     ;
D5E8 1CFE             (     flx29fms.asm):00583 [3]     SRDSE7  andcc   #$FE        ;CLC CLEAR ERROR
D5EA 39               (     flx29fms.asm):00584 [5]     SRDSE8  rts
                      (     flx29fms.asm):00585         
                      (     flx29fms.asm):00586         * REWIND   * FFC #5 *
                      (     flx29fms.asm):00587         *
                      (     flx29fms.asm):00588         * REWIND WILL LOGICALLY REWIND THE
                      (     flx29fms.asm):00589         * FILE SPECIFIED IN THE FCB.
                      (     flx29fms.asm):00590         *
                      (     flx29fms.asm):00591         *   ENTRY: NONE
                      (     flx29fms.asm):00592         *   EXIT:  SAME AS RDNEXT
                      (     flx29fms.asm):00593         
D5EB BDDAC9           (     flx29fms.asm):00594 [8]     REWIND  jsr     DOSTAT      ;CHECK STATUS
D5EE 2509             (     flx29fms.asm):00595 [3]             bcs     REWIN2      ;ERROR?
D5F0 8501             (     flx29fms.asm):00596 [2]             bita    #1          ;CHECK FOR R BIT
D5F2 2705             (     flx29fms.asm):00597 [3]             beq     REWIN2      ;ERROR?
D5F4 A784             (     flx29fms.asm):00598 [4+0]           sta     FFC,x       ;SET FFC
D5F6 7ED9AA           (     flx29fms.asm):00599 [4]             jmp     OPNRD1      ;GO SETUP FILE
                      (     flx29fms.asm):00600                                     ;
D5F9 C612             (     flx29fms.asm):00601 [2]     REWIN2  ldb     #STER       ;SET ERROR CODE
D5FB 1A01             (     flx29fms.asm):00602 [3]             orcc    #1          ;SEC SHOW ERROR
D5FD 39               (     flx29fms.asm):00603 [5]             rts
                      (     flx29fms.asm):00604         
                      (     flx29fms.asm):00605         * RDSEQ
                      (     flx29fms.asm):00606         *
                      (     flx29fms.asm):00607         * RDSEQ IS THE LOW LEVEL GET
                      (     flx29fms.asm):00608         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00609         *
                      (     flx29fms.asm):00610         *   ENTRY: NONE
                      (     flx29fms.asm):00611         *   EXIT:  CHAR IN A
                      (     flx29fms.asm):00612         *          CS IF ERROR
                      (     flx29fms.asm):00613         *          B & X DESTROYED
                      (     flx29fms.asm):00614         
D5FE BED40B           (     flx29fms.asm):00615 [6]     RDSEQ   ldx     FCBSTR      ;PICKUP FCB
D601 E68822           (     flx29fms.asm):00616 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D604 270A             (     flx29fms.asm):00617 [3]             beq     RDSEQ1      ;
D606 6C8822           (     flx29fms.asm):00618 [6+1]           inc     FDI,x       ;BUMP DATA INDEX
                      (     flx29fms.asm):00619                                     ;
D609 3A               (     flx29fms.asm):00620 [3]     RDSEQ0  abx                 ;ADD IN OFFSET
D60A A68840           (     flx29fms.asm):00621 [4+1]           lda     FSB,x       ;GET CHARACTER
D60D 1CFE             (     flx29fms.asm):00622 [3]             andcc   #$FE        ;CLC
D60F 39               (     flx29fms.asm):00623 [5]             rts                 ;
                      (     flx29fms.asm):00624                                     ;
D610 8D03             (     flx29fms.asm):00625 [7]     RDSEQ1  bsr     RDNEXT      ;GET NEXT RECORD
D612 24EA             (     flx29fms.asm):00626 [3]             bcc     RDSEQ       ;ERRORS?
D614 39               (     flx29fms.asm):00627 [5]             rts
                      (     flx29fms.asm):00628         
                      (     flx29fms.asm):00629         * RDNEXT
                      (     flx29fms.asm):00630         *
                      (     flx29fms.asm):00631         * RDNEXT READS THE NEXT SEQUENTIAL
                      (     flx29fms.asm):00632         * RECORD IF IT EXISTS.
                      (     flx29fms.asm):00633         *
                      (     flx29fms.asm):00634         *   ENTRY: NONE
                      (     flx29fms.asm):00635         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00636         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00637         *          A & X CHANGED
                      (     flx29fms.asm):00638         
D615 BED40B           (     flx29fms.asm):00639 [6]     RDNEXT  ldx     FCBSTR      ;PICKUP FCB
D618 EC8840           (     flx29fms.asm):00640 [5+1]           ldd     FSB,x       ;GET TRACK & SECTOR
D61B 6C8821           (     flx29fms.asm):00641 [6+1]           inc     FRN+1,x     ;BUMP REC NUM
D61E 2603             (     flx29fms.asm):00642 [3]             bne     RDNEX1      ;
D620 6C8820           (     flx29fms.asm):00643 [6+1]           inc     FRN,x       ;
                      (     flx29fms.asm):00644                                     ;
D623 10830000         (     flx29fms.asm):00645 [5]     RDNEX1  cmpd    #$0000      ;TEST IF 0 LINK
D627 271C             (     flx29fms.asm):00646 [3]             beq     RDNEX4      ;END OF FILE?
D629 ED881E           (     flx29fms.asm):00647 [5+1]   RDNEX2  std     FCS,x       ;SET CURRENT ADR.
D62C 3402             (     flx29fms.asm):00648 [5+1]           pshs    a           ;
D62E 8604             (     flx29fms.asm):00649 [2]             lda     #RS         ;SET RECORD START
D630 A78822           (     flx29fms.asm):00650 [4+1]           sta     FDI,x       ;SAVE IT
D633 3502             (     flx29fms.asm):00651 [5+1]           puls    a           ;
D635 8D13             (     flx29fms.asm):00652 [7]             bsr     READSS      ;GO DO READ
D637 2410             (     flx29fms.asm):00653 [3]             bcc     RDNEX8      ;ERRORS?
D639 C580             (     flx29fms.asm):00654 [2]             bitb    #$80        ;CHECK NOT READY
D63B 2704             (     flx29fms.asm):00655 [3]             beq     RDNEX3      ;
D63D C610             (     flx29fms.asm):00656 [2]             ldb     #NRER       ;SET ERROR
D63F 2006             (     flx29fms.asm):00657 [3]             bra     RDNEX6      ;
                      (     flx29fms.asm):00658                                     ;
D641 C609             (     flx29fms.asm):00659 [2]     RDNEX3  ldb     #RDER       ;SET READ ERROR
D643 2002             (     flx29fms.asm):00660 [3]             bra     RDNEX6      ;
                      (     flx29fms.asm):00661                                     ;
D645 C608             (     flx29fms.asm):00662 [2]     RDNEX4  ldb     #EFER       ;SET EOF ERROR
D647 1A01             (     flx29fms.asm):00663 [3]     RDNEX6  orcc    #1          ;SEC SHOW ERROR
D649 39               (     flx29fms.asm):00664 [5]     RDNEX8  rts
                      (     flx29fms.asm):00665         
                      (     flx29fms.asm):00666         * READSS   * FFC #9 *
                      (     flx29fms.asm):00667         *
                      (     flx29fms.asm):00668         * READSS READS A SINGLE RECORD (SECTOR)
                      (     flx29fms.asm):00669         * FROM THE DISK.
                      (     flx29fms.asm):00670         *
                      (     flx29fms.asm):00671         *   ENTRY: NONE
                      (     flx29fms.asm):00672         *   EXIT:  CS IF READ ERROR
                      (     flx29fms.asm):00673         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00674         
D64A 8D25             (     flx29fms.asm):00675 [7]     READSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS
D64C BED40B           (     flx29fms.asm):00676 [6]             ldx     FCBSTR      ;SET POINTER
D64F BDDF78           (     flx29fms.asm):00677 [8]             jsr     DRIVE       ;DO DRIVE SEL
D652 2512             (     flx29fms.asm):00678 [3]             bcs     READS6      ;
                      (     flx29fms.asm):00679                                     ;
D654 8D11             (     flx29fms.asm):00680 [7]     READS2  bsr     GETCUR      ;GET DISK ADDRESS
D656 BDDE00           (     flx29fms.asm):00681 [8]             jsr     DREAD       ;GO READ RECORD
D659 2603             (     flx29fms.asm):00682 [3]             bne     READS4      ;ERRORS?
D65B 1CFE             (     flx29fms.asm):00683 [3]             andcc   #$FE        ;CLC CLEAR ERROR
D65D 39               (     flx29fms.asm):00684 [5]             rts                 ;
                      (     flx29fms.asm):00685                                     ;
D65E 3404             (     flx29fms.asm):00686 [5+1]   READS4  pshs    b           ;SAVE B
D660 8D17             (     flx29fms.asm):00687 [7]             bsr     RETRY       ;CHECK IF RETRY
D662 3504             (     flx29fms.asm):00688 [5+1]           puls    b           ;RESTORE B
D664 24EE             (     flx29fms.asm):00689 [3]             bcc     READS2      ;TRY AGAIN?
                      (     flx29fms.asm):00690         
D666 39               (     flx29fms.asm):00691 [5]     READS6  rts
                      (     flx29fms.asm):00692         
                      (     flx29fms.asm):00693         * GETCUR
                      (     flx29fms.asm):00694         *
                      (     flx29fms.asm):00695         * GETCUR GETS THE CURRENT RECORD ADDRESS
                      (     flx29fms.asm):00696         * (TRACK AND SECTOR) INTO A & B.
                      (     flx29fms.asm):00697         * IF ILLEGAL ADDRESS, CARRY IS SET.
                      (     flx29fms.asm):00698         *
                      (     flx29fms.asm):00699         *   ENTRY: NONE
                      (     flx29fms.asm):00700         *   EXIT:  CS IF ILLEGAL ADR.
                      (     flx29fms.asm):00701         *          A = TRACK NUMBER
                      (     flx29fms.asm):00702         *          B = SECTOR NUMBER
                      (     flx29fms.asm):00703         *          X POINTS TO FSB
                      (     flx29fms.asm):00704         
D667 BED40B           (     flx29fms.asm):00705 [6]     GETCUR  ldx     FCBSTR      ;PICKUP FCB
D66A EC881E           (     flx29fms.asm):00706 [5+1]           ldd     FCS,x       ;GET TRACK & SECTOR
D66D 308840           (     flx29fms.asm):00707 [4+1]           leax    FSB,x       ;ADD FSB BIAS
D670 39               (     flx29fms.asm):00708 [5]             rts
                      (     flx29fms.asm):00709         
                      (     flx29fms.asm):00710         * CLRTRY
                      (     flx29fms.asm):00711         *
                      (     flx29fms.asm):00712         * CLRTRY CLEARS THE ERROR TRY COUNTERS
                      (     flx29fms.asm):00713         *
                      (     flx29fms.asm):00714         *   ENTRY: NONE
                      (     flx29fms.asm):00715         *   EXIT:  A CLEARED
                      (     flx29fms.asm):00716         
D671 4F               (     flx29fms.asm):00717 [2]     CLRTRY  clra                ;CLEAR A
D672 B7D411           (     flx29fms.asm):00718 [5]             sta     ETRIES      ;CLEAR COUNTERS
D675 B7D412           (     flx29fms.asm):00719 [5]             sta     STRIES
D678 39               (     flx29fms.asm):00720 [5]             rts
                      (     flx29fms.asm):00721         
                      (     flx29fms.asm):00722         * RETRY
                      (     flx29fms.asm):00723         *
                      (     flx29fms.asm):00724         * RETRY WILL TEST THE TRY COUNTERS
                      (     flx29fms.asm):00725         * ETRIES AND STRIES TO SEE IF THEY
                      (     flx29fms.asm):00726         * ARE AT MAXIMUM.
                      (     flx29fms.asm):00727         * A RESTORE OPERATION IS PERFORMED
                      (     flx29fms.asm):00728         * IF NECESSARY.
                      (     flx29fms.asm):00729         *
                      (     flx29fms.asm):00730         *   ENTRY: NONE
                      (     flx29fms.asm):00731         *   EXIT:  CS IF NO MORE TRIES LEFT
                      (     flx29fms.asm):00732         
D679 C510             (     flx29fms.asm):00733 [2]     RETRY   bitb    #$10        ;CHECK IF SEEK ERROR
D67B 2611             (     flx29fms.asm):00734 [3]             bne     RETRY2      ;
D67D C580             (     flx29fms.asm):00735 [2]             bitb    #$80        ;CHECK NOT READY
D67F 2624             (     flx29fms.asm):00736 [3]             bne     RETRY6      ;
D681 F6D411           (     flx29fms.asm):00737 [5]             ldb     ETRIES      ;CHECK ERROR CNTR
D684 5C               (     flx29fms.asm):00738 [2]             incb                ;BUMP IT ONE
D685 C105             (     flx29fms.asm):00739 [2]             cmpb    #RTC        ;IS IT MAXIMUM?
D687 2705             (     flx29fms.asm):00740 [3]             beq     RETRY2      ;
                      (     flx29fms.asm):00741                                     ;
D689 F7D411           (     flx29fms.asm):00742 [5]             stb     ETRIES      ;SAVE COUNT
D68C 2014             (     flx29fms.asm):00743 [3]             bra     RETRY4      ;
                      (     flx29fms.asm):00744                                     ;
D68E 7FD411           (     flx29fms.asm):00745 [7]     RETRY2  clr     ETRIES      ;CLEAR COUNTER
D691 F6D412           (     flx29fms.asm):00746 [5]             ldb     STRIES      ;CHECK SEEK CNTR
D694 5C               (     flx29fms.asm):00747 [2]             incb                ;BUMP IT
D695 C107             (     flx29fms.asm):00748 [2]             cmpb    #RSC        ;IS IT MAXIMUM?
D697 270C             (     flx29fms.asm):00749 [3]             beq     RETRY6      ;
D699 F7D412           (     flx29fms.asm):00750 [5]             stb     STRIES      ;SAVE COUNTER
D69C BED40B           (     flx29fms.asm):00751 [6]             ldx     FCBSTR      ;
D69F BDDE09           (     flx29fms.asm):00752 [8]             jsr     DRESTOR      ;GO RESTORE
                      (     flx29fms.asm):00753                                     ;
D6A2 1CFE             (     flx29fms.asm):00754 [3]     RETRY4  andcc   #$FE        ;CLC CLEAR ERROR
D6A4 39               (     flx29fms.asm):00755 [5]             rts                 ;
                      (     flx29fms.asm):00756                                     ;
D6A5 1A01             (     flx29fms.asm):00757 [3]     RETRY6  orcc    #1          ;SEC SET ERROR
D6A7 39               (     flx29fms.asm):00758 [5]             rts
                      (     flx29fms.asm):00759         
                      (     flx29fms.asm):00760         * WRITSS   * FFC #10 *
                      (     flx29fms.asm):00761         *
                      (     flx29fms.asm):00762         * WRITSS IS THE SYSTEM WRITE SINGLE
                      (     flx29fms.asm):00763         * SECTOR ROUTINE.
                      (     flx29fms.asm):00764         *
                      (     flx29fms.asm):00765         *   ENTRY: NONE
                      (     flx29fms.asm):00766         *   EXIT:  CS IF WRITE ERROR
                      (     flx29fms.asm):00767         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00768         
D6A8 8DC7             (     flx29fms.asm):00769 [7]     WRITSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS
D6AA BED40B           (     flx29fms.asm):00770 [6]             ldx     FCBSTR      ;SET POINTER
D6AD BDDF78           (     flx29fms.asm):00771 [8]             jsr     DRIVE       ;DO DRIVE SEL
D6B0 2520             (     flx29fms.asm):00772 [3]             bcs     WRITS6      ;
                      (     flx29fms.asm):00773                                     ;
D6B2 BED40B           (     flx29fms.asm):00774 [6]     WRITS2  ldx     FCBSTR      ;SET POINTER
D6B5 8DB0             (     flx29fms.asm):00775 [7]             bsr     GETCUR      ;GET CURRENT SEC
D6B7 BDDE03           (     flx29fms.asm):00776 [8]             jsr     DWRITE      ;DO ACTUAL WRITE
D6BA 260A             (     flx29fms.asm):00777 [3]             bne     WRITS4      ;ERRORS?
                      (     flx29fms.asm):00778                                     ;
D6BC B6D435           (     flx29fms.asm):00779 [5]             lda     VRFYFG      ;VERIFY SECTOR?
D6BF 2737             (     flx29fms.asm):00780 [3]             beq     SWTSE6      ;NO VERIFY
                      (     flx29fms.asm):00781                                     ;
D6C1 BDDF11           (     flx29fms.asm):00782 [8]             jsr     VERIFY      ;GO DO VERIFY
D6C4 2732             (     flx29fms.asm):00783 [3]             beq     SWTSE6      ;ERROR?
                      (     flx29fms.asm):00784                                     ;
D6C6 C540             (     flx29fms.asm):00785 [2]     WRITS4  bitb    #$40        ;CHECK IF W.P.
D6C8 260B             (     flx29fms.asm):00786 [3]             bne     WRITS8      ;
                      (     flx29fms.asm):00787                                     ;
D6CA 3404             (     flx29fms.asm):00788 [5+1]           pshs    b           ;SAVE STATUS
D6CC 8DAB             (     flx29fms.asm):00789 [7]             bsr     RETRY       ;RETRY?
D6CE 3504             (     flx29fms.asm):00790 [5+1]           puls    b           ;RESTORE STATUS
D6D0 24E0             (     flx29fms.asm):00791 [3]             bcc     WRITS2      ;TRY AGAIN
D6D2 39               (     flx29fms.asm):00792 [5]     WRITS6  rts                 ;ERROR RETURN
                      (     flx29fms.asm):00793                                     ;
D6D3 C620             (     flx29fms.asm):00794 [2]     WRITS7  ldb     #$20        ;SET ERROR
D6D5 1A01             (     flx29fms.asm):00795 [3]     WRITS8  orcc    #1          ;SHOW ERROR
D6D7 39               (     flx29fms.asm):00796 [5]             rts                 ;ERROR RETURN
                      (     flx29fms.asm):00797         
                      (     flx29fms.asm):00798         * SWTSEQ
                      (     flx29fms.asm):00799         *
                      (     flx29fms.asm):00800         * SWTSEQ IS THE HIGH LEVEL WRITE
                      (     flx29fms.asm):00801         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00802         * SPACE COMPRESSION IS HANDLED HERE
                      (     flx29fms.asm):00803         * UNLESS FSC IS NEGATIVE.
                      (     flx29fms.asm):00804         *
                      (     flx29fms.asm):00805         *   ENTRY: NONE
                      (     flx29fms.asm):00806         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00807         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00808         *          A & X CHANGED
                      (     flx29fms.asm):00809         
D6D8 BED40B           (     flx29fms.asm):00810 [6]     SWTSEQ  ldx     FCBSTR      ;PICKUP FCB
D6DB E6883B           (     flx29fms.asm):00811 [4+1]           ldb     FSC,x       ;GET SPC COUNT
D6DE 2B3D             (     flx29fms.asm):00812 [3]             bmi     WTSEQ       ;WRITE IF NEG.
D6E0 8120             (     flx29fms.asm):00813 [2]             cmpa    #SPC        ;IS CHARACTER SPACE?
D6E2 260F             (     flx29fms.asm):00814 [3]             bne     SWTSE4      ;
D6E4 5C               (     flx29fms.asm):00815 [2]             incb                ;BUMP THE COUNT
D6E5 E7883B           (     flx29fms.asm):00816 [4+1]           stb     FSC,x       ;SAVE IT
D6E8 C17F             (     flx29fms.asm):00817 [2]             cmpb    #MAXSP      ;MAXIMUM?
D6EA 260C             (     flx29fms.asm):00818 [3]             bne     SWTSE6      ;
D6EC 200D             (     flx29fms.asm):00819 [3]             bra     PUTSPC      ;** FIX FOR 128 SPACES **
                      (     flx29fms.asm):00820                                     ;
D6EE 8D0B             (     flx29fms.asm):00821 [7]     SWTSE2  bsr     PUTSPC      ;GO PUT SPACES
D6F0 24E6             (     flx29fms.asm):00822 [3]             bcc     SWTSEQ      ;ERRORS?
D6F2 39               (     flx29fms.asm):00823 [5]             rts                 ;
                      (     flx29fms.asm):00824                                     ;
D6F3 5D               (     flx29fms.asm):00825 [2]     SWTSE4  tstb                ;COUNT ZERO?
D6F4 2727             (     flx29fms.asm):00826 [3]             beq     WTSEQ       ;
D6F6 20F6             (     flx29fms.asm):00827 [3]             bra     SWTSE2      ;DO SPACES
                      (     flx29fms.asm):00828                                     ;
D6F8 1CFE             (     flx29fms.asm):00829 [3]     SWTSE6  andcc   #$FE        ;CLC CLEAR ERRORS
D6FA 39               (     flx29fms.asm):00830 [5]             rts
                      (     flx29fms.asm):00831         
                      (     flx29fms.asm):00832         * PUTSPC
                      (     flx29fms.asm):00833         *
                      (     flx29fms.asm):00834         * PUTSPC IS THE ROUTINE WHICH WRITES
                      (     flx29fms.asm):00835         * THE SPACE COMPRESSION CODE AND THE
                      (     flx29fms.asm):00836         * SPACE COUNT.
                      (     flx29fms.asm):00837         *
                      (     flx29fms.asm):00838         *   ENTRY: B HAS COUNT
                      (     flx29fms.asm):00839         *   EXIT:  A PRESERVED
                      (     flx29fms.asm):00840         
D6FB 3402             (     flx29fms.asm):00841 [5+1]   PUTSPC  pshs    a           ;SAVE CHAR
D6FD C101             (     flx29fms.asm):00842 [2]             cmpb    #1          ;IS COUNT 1?
D6FF 2604             (     flx29fms.asm):00843 [3]             bne     PUTSP2      ;
D701 8620             (     flx29fms.asm):00844 [2]             lda     #$20        ;SETUP SPACE
D703 2010             (     flx29fms.asm):00845 [3]             bra     PUTSP4      ;GO WRITE
                      (     flx29fms.asm):00846                                     ;
D705 8609             (     flx29fms.asm):00847 [2]     PUTSP2  lda     #SCC        ;SETUP SCC
D707 8D14             (     flx29fms.asm):00848 [7]             bsr     WTSEQ       ;WRITE IT OUT
D709 3502             (     flx29fms.asm):00849 [5+1]           puls    a           ;
D70B 250F             (     flx29fms.asm):00850 [3]             bcs     PUTSP6      ;ERROR?
D70D 3402             (     flx29fms.asm):00851 [5+1]           pshs    a           ;SAVE CHAR
D70F BED40B           (     flx29fms.asm):00852 [6]             ldx     FCBSTR      ;PICKUP FCB
D712 A6883B           (     flx29fms.asm):00853 [4+1]           lda     FSC,x       ;GET COUNT
D715 6F883B           (     flx29fms.asm):00854 [6+1]   PUTSP4  clr     FSC,x           ;CLEAR COUNT
D718 8D03             (     flx29fms.asm):00855 [7]             bsr     WTSEQ       ;WRITE COUNT
D71A 3502             (     flx29fms.asm):00856 [5+1]           puls    a           ;RESTORE CHAR
D71C 39               (     flx29fms.asm):00857 [5]     PUTSP6  rts
                      (     flx29fms.asm):00858         
                      (     flx29fms.asm):00859         * WTSEQ
                      (     flx29fms.asm):00860         *
                      (     flx29fms.asm):00861         * WTSEQ WRITES THE NEXT CHARACTER TO
                      (     flx29fms.asm):00862         * THE FSB AREA OF THE FCB.
                      (     flx29fms.asm):00863         *
                      (     flx29fms.asm):00864         *   ENTRY: A HAS CHARACTER
                      (     flx29fms.asm):00865         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00866         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00867         *          X CHANGED
                      (     flx29fms.asm):00868         
D71D BED40B           (     flx29fms.asm):00869 [6]     WTSEQ   ldx     FCBSTR      ;GET FCB POINTER
D720 E602             (     flx29fms.asm):00870 [4+1]           ldb     FAS,x       ;GET ACTIVE STATUS
D722 C102             (     flx29fms.asm):00871 [2]             cmpb    #2          ;IS IT WRITE?
D724 1026FED1         (     flx29fms.asm):00872 [5+?]           lbne    REWIN2      ;ERROR IF NOT
D728 E68822           (     flx29fms.asm):00873 [4+1]           ldb     FDI,x       ;GET INDEX
D72B C104             (     flx29fms.asm):00874 [2]             cmpb    #RS         ;IS IT BEGINNING?
D72D 2608             (     flx29fms.asm):00875 [3]             bne     WTSEQ2      ;
D72F 3402             (     flx29fms.asm):00876 [5+1]           pshs    a           ;SAVE CHAR.
D731 8D21             (     flx29fms.asm):00877 [7]             bsr     WTNEXT      ;GO WRITE RECORD
D733 3502             (     flx29fms.asm):00878 [5+1]           puls    a           ;RESTORE CHAR.
D735 250F             (     flx29fms.asm):00879 [3]             bcs     WTSEQ4      ;ERRORS?
                      (     flx29fms.asm):00880                                     ;
D737 BDD586           (     flx29fms.asm):00881 [8]     WTSEQ2  jsr     PUTNXT      ;PUT CHARACTER
D73A 240A             (     flx29fms.asm):00882 [3]             bcc     WTSEQ4      ;LAST SPACE USED?
D73C C604             (     flx29fms.asm):00883 [2]             ldb     #RS         ;SET RECORD START
D73E BED40B           (     flx29fms.asm):00884 [6]             ldx     FCBSTR      ;POINT TO FCB
D741 E78822           (     flx29fms.asm):00885 [4+1]           stb     FDI,x       ;SET INDEX
D744 1CFE             (     flx29fms.asm):00886 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D746 39               (     flx29fms.asm):00887 [5]     WTSEQ4  rts
                      (     flx29fms.asm):00888         
                      (     flx29fms.asm):00889         * CLRLRN
                      (     flx29fms.asm):00890         
D747 BED40B           (     flx29fms.asm):00891 [6]     CLRLRN  ldx     FCBSTR      ;GET POINTER
D74A 4F               (     flx29fms.asm):00892 [2]             clra                ;
D74B 5F               (     flx29fms.asm):00893 [2]             clrb                ;
D74C ED8820           (     flx29fms.asm):00894 [5+1]           std     FRN,x       ;CLEAR LRN
D74F ED8842           (     flx29fms.asm):00895 [5+1]           std     FSB+2,x     ;CLEAR ACTUAL RN
D752 2027             (     flx29fms.asm):00896 [3]             bra     WTNEX1      ;GO WRITE NEXT
                      (     flx29fms.asm):00897         
                      (     flx29fms.asm):00898         * WTNEXT
                      (     flx29fms.asm):00899         *
                      (     flx29fms.asm):00900         * WTNEXT WRITES THE NEXT RECORD.
                      (     flx29fms.asm):00901         *
                      (     flx29fms.asm):00902         *   ENTRY: X = FCB
                      (     flx29fms.asm):00903         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00904         *          REGISTERS CHANGED
                      (     flx29fms.asm):00905         
D754 E68812           (     flx29fms.asm):00906 [4+1]   WTNEXT  ldb     FSA+1,x     ;FIRST RECORD?
D757 2622             (     flx29fms.asm):00907 [3]             bne     WTNEX1      ;
D759 E68817           (     flx29fms.asm):00908 [4+1]           ldb     FMP,x       ;CHECK FOR RANDOM
D75C 2744             (     flx29fms.asm):00909 [3]             beq     ASNNXT      ;
D75E 6F8817           (     flx29fms.asm):00910 [6+1]           clr     FMP,x       ;CLEAR FLAG
D761 8D3F             (     flx29fms.asm):00911 [7]             bsr     ASNNXT      ;GO ASSIGN
D763 252A             (     flx29fms.asm):00912 [3]             bcs     GETFS2      ;ERROR?
D765 8DE0             (     flx29fms.asm):00913 [7]             bsr     CLRLRN      ;CLEAR LRN
D767 2526             (     flx29fms.asm):00914 [3]             bcs     GETFS2      ;ERROR?
D769 8DDC             (     flx29fms.asm):00915 [7]             bsr     CLRLRN      ;CLEAR NEXT
D76B 2522             (     flx29fms.asm):00916 [3]             bcs     GETFS2      ;ERROR?
D76D BED40B           (     flx29fms.asm):00917 [6]             ldx     FCBSTR      ;GET FCB
D770 C602             (     flx29fms.asm):00918 [2]             ldb     #2          ;SET FSM COUNT
D772 E78817           (     flx29fms.asm):00919 [4+1]           stb     FMP,x       ;
D775 EC8811           (     flx29fms.asm):00920 [5+1]           ldd     FSA,x       ;GET START ADDR
D778 7EDC9A           (     flx29fms.asm):00921 [4]             jmp     UPDF75      ;GO DO UPDATE
                      (     flx29fms.asm):00922                                     ;
D77B 8D0E             (     flx29fms.asm):00923 [7]     WTNEX1  bsr     GETFST      ;GET FIRST AVAIL
D77D BED40B           (     flx29fms.asm):00924 [6]             ldx     FCBSTR      ;SET FCB PNTR
D780 ED8840           (     flx29fms.asm):00925 [5+1]           std     FSB,x       ;SET FORWARD LINK
D783 BDD6A8           (     flx29fms.asm):00926 [8]             jsr     WRITSS      ;WRITE RECORD
D786 241A             (     flx29fms.asm):00927 [3]             bcc     ASNNXT      ;ERROR?
D788 7EDBD9           (     flx29fms.asm):00928 [4]             jmp     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):00929         
                      (     flx29fms.asm):00930         * GETFST
                      (     flx29fms.asm):00931         *
                      (     flx29fms.asm):00932         * GETFST LOADS THE FIRST AVAILABLE
                      (     flx29fms.asm):00933         * SECTOR ADDRESS INTO A & B.
                      (     flx29fms.asm):00934         *
                      (     flx29fms.asm):00935         *   ENTRY: NONE
                      (     flx29fms.asm):00936         *   EXIT:  EQ IF FSTAVL = 00
                      (     flx29fms.asm):00937         *          X UNCHANGED
                      (     flx29fms.asm):00938         *          A & B = FSTAVL H & L
                      (     flx29fms.asm):00939         
D78B 8D03             (     flx29fms.asm):00940 [7]     GETFST  bsr     FSECMP      ;FIND SECTOR MAP
D78D EC84             (     flx29fms.asm):00941 [5+0]           ldd     ,x         ;GET FIRST AVAIL.
D78F 39               (     flx29fms.asm):00942 [5]     GETFS2  rts
                      (     flx29fms.asm):00943         
                      (     flx29fms.asm):00944         * FSECMP
                      (     flx29fms.asm):00945         *
                      (     flx29fms.asm):00946         * FSECMP FINDS THE SECTOR MAP
                      (     flx29fms.asm):00947         * CORRESPONDING TO THE CURRENT
                      (     flx29fms.asm):00948         * DRIVE SELECTED IN THE FCB.
                      (     flx29fms.asm):00949         *
                      (     flx29fms.asm):00950         *   ENTRY: NONE
                      (     flx29fms.asm):00951         *   EXIT:  EQ IF AVAIL NOT SET
                      (     flx29fms.asm):00952         *          X POINTS TO SECTOR MAP
                      (     flx29fms.asm):00953         
D790 BED40B           (     flx29fms.asm):00954 [6]     FSECMP  ldx     FCBSTR      ;PICKUP FCB
D793 E603             (     flx29fms.asm):00955 [4+1]           ldb     FDN,x       ;GET DRIVE NUMBER
D795 8606             (     flx29fms.asm):00956 [2]             lda     #6          ;MULTIPLY TIMES 6
D797 3D               (     flx29fms.asm):00957 [11]            mul                 ;
D798 8ED41D           (     flx29fms.asm):00958 [3]             ldx     #SECMAP     ;POINT TO MAPS
D79B 3A               (     flx29fms.asm):00959 [3]             abx                 ;FIX POINTER
D79C BFD41B           (     flx29fms.asm):00960 [6]             stx     AVLPNT      ;SET POINTER
D79F 6D84             (     flx29fms.asm):00961 [6+0]           tst     ,x         ;IS AVAIL EMPTY?
D7A1 39               (     flx29fms.asm):00962 [5]             rts
                      (     flx29fms.asm):00963         
                      (     flx29fms.asm):00964         * ASNNXT
                      (     flx29fms.asm):00965         *
                      (     flx29fms.asm):00966         * ASNNXT ASSIGNS THE NEXT AVAILABLE
                      (     flx29fms.asm):00967         * RECORD TO THE CURRENT OPEN WRITE
                      (     flx29fms.asm):00968         * FILE POINTED TO BY THE FCB.
                      (     flx29fms.asm):00969         *
                      (     flx29fms.asm):00970         *   ENTRY: NONE
                      (     flx29fms.asm):00971         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00972         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00973         
D7A2 8DE7             (     flx29fms.asm):00974 [7]     ASNNXT  bsr     GETFST      ;GET FSTAVL
D7A4 2605             (     flx29fms.asm):00975 [3]             bne     ASNNX2      ;IS IT ZERO?
D7A6 C607             (     flx29fms.asm):00976 [2]             ldb     #DFER       ;DISK FULL!
D7A8 1A01             (     flx29fms.asm):00977 [3]     ASNNX1  orcc    #1          ;SEC SET ERROR
D7AA 39               (     flx29fms.asm):00978 [5]             rts                 ;
                      (     flx29fms.asm):00979                                     ;
D7AB BED40B           (     flx29fms.asm):00980 [6]     ASNNX2  ldx     FCBSTR      ;GET FCB POINTER
D7AE ED8813           (     flx29fms.asm):00981 [5+1]           std     FEA,x       ;SET END ADDRESS
D7B1 6D8812           (     flx29fms.asm):00982 [6+1]           tst     FSA+1,x     ;IS THIS FIRST?
D7B4 2603             (     flx29fms.asm):00983 [3]             bne     ASNNX4      ;JUMP AHEAD IF NOT
D7B6 ED8811           (     flx29fms.asm):00984 [5+1]           std     FSA,x       ;SET START ADDRESS
                      (     flx29fms.asm):00985                                     ;
D7B9 6C8816           (     flx29fms.asm):00986 [6+1]   ASNNX4  inc     FSZ+1,x     ;BUMP FILE SIZE
D7BC 2603             (     flx29fms.asm):00987 [3]             bne     ASNNX6      ;
D7BE 6C8815           (     flx29fms.asm):00988 [6+1]           inc     FSZ,x       ;FIX MSB
                      (     flx29fms.asm):00989                                     ;
D7C1 6D8817           (     flx29fms.asm):00990 [6+1]   ASNNX6  tst     FMP,x       ;CHECK FOR RANDOM
D7C4 270B             (     flx29fms.asm):00991 [3]             beq     ASNN65      ;
D7C6 BDDC5B           (     flx29fms.asm):00992 [8]             jsr     UPDFSM      ;UPDATE FSM ENTRY
D7C9 25DD             (     flx29fms.asm):00993 [3]             bcs     ASNNX1      ;ERROR?
D7CB BED40B           (     flx29fms.asm):00994 [6]             ldx     FCBSTR      ;GET FCB
D7CE EC8813           (     flx29fms.asm):00995 [5+1]           ldd     FEA,x       ;GET END ADDRESS
                      (     flx29fms.asm):00996                                     ;
D7D1 BDD629           (     flx29fms.asm):00997 [8]     ASNN65  jsr     RDNEX2      ;READ NEXT RECORD
D7D4 25D2             (     flx29fms.asm):00998 [3]             bcs     ASNNX1      ;READ ERROR?
D7D6 BED40B           (     flx29fms.asm):00999 [6]             ldx     FCBSTR      ;POINT TO FCB
D7D9 EC8840           (     flx29fms.asm):01000 [5+1]           ldd     FSB,x       ;GET FOR. LINK
D7DC 3406             (     flx29fms.asm):01001 [5+2]           pshs    a,b         ;SAVE LINK
D7DE 8DB0             (     flx29fms.asm):01002 [7]             bsr     FSECMP      ;FIND SECTOR MAP
D7E0 3506             (     flx29fms.asm):01003 [5+2]           puls    a,b         ;RESTORE LINK
D7E2 ED84             (     flx29fms.asm):01004 [5+0]           std     ,x         ;SET FIRST AVAIL
D7E4 260A             (     flx29fms.asm):01005 [3]             bne     ASNNX7      ;FULL DISK??
                      (     flx29fms.asm):01006                                     ;
D7E6 6F02             (     flx29fms.asm):01007 [6+1]           clr     2,x         ;CLEAR OUT REST
D7E8 6F03             (     flx29fms.asm):01008 [6+1]           clr     3,x         ;
D7EA 6F04             (     flx29fms.asm):01009 [6+1]           clr     4,x         ;
D7EC 6F05             (     flx29fms.asm):01010 [6+1]           clr     5,x         ;
D7EE 2008             (     flx29fms.asm):01011 [3]             bra     ASNNX8      ;GO AHEAD
                      (     flx29fms.asm):01012                                     ;
D7F0 10AE04           (     flx29fms.asm):01013 [6+1]   ASNNX7  ldy     4,x         ;GET SEC COUNT
D7F3 313F             (     flx29fms.asm):01014 [4+1]           leay    -1,y        ;DEC BY 1
D7F5 10AF04           (     flx29fms.asm):01015 [6+1]           sty     4,x         ;SAVE RESULT
                      (     flx29fms.asm):01016                                     ;
D7F8 4F               (     flx29fms.asm):01017 [2]     ASNNX8  clra                ;CLEAR REGISTER
D7F9 BED40B           (     flx29fms.asm):01018 [6]             ldx     FCBSTR      ;SET POINTER
D7FC 6C8821           (     flx29fms.asm):01019 [6+1]           inc     FRN+1,x     ;INC LRN
D7FF 2603             (     flx29fms.asm):01020 [3]             bne     ASNN85      ;
D801 6C8820           (     flx29fms.asm):01021 [6+1]           inc     FRN,x       ;
                      (     flx29fms.asm):01022                                     ;
D804 5F               (     flx29fms.asm):01023 [2]     ASNN85  clrb                ;GET SECTOR LENGTH \\\\
D805 A78840           (     flx29fms.asm):01024 [4+1]   ASNNX9  sta     FSB,x       ;CLEAR LOCATION
D808 3001             (     flx29fms.asm):01025 [4+1]           leax    1,x         ;BUMP POINTER
D80A 5A               (     flx29fms.asm):01026 [2]             decb                ;DEC THE COUNTER
D80B 26F8             (     flx29fms.asm):01027 [3]             bne     ASNNX9      ;REPEAT?
                      (     flx29fms.asm):01028                                     ;
D80D BED40B           (     flx29fms.asm):01029 [6]             ldx     FCBSTR      ;GET FCB PNTR
D810 EC8820           (     flx29fms.asm):01030 [5+1]           ldd     FRN,x       ;GET LRN
D813 ED8842           (     flx29fms.asm):01031 [5+1]           std     FSB+2,x     ;SAVE IN DATA
D816 1CFE             (     flx29fms.asm):01032 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D818 39               (     flx29fms.asm):01033 [5]             rts
                      (     flx29fms.asm):01034         
                      (     flx29fms.asm):01035         * OPN - SIR, DIR
                      (     flx29fms.asm):01036         *
                      (     flx29fms.asm):01037         * OPNIR OPENS EITHER THE SYSTEM IR
                      (     flx29fms.asm):01038         * OR THE DIRECTORY IR, DEPENDING ON
                      (     flx29fms.asm):01039         * THE ENTRY POINT.
                      (     flx29fms.asm):01040         *
                      (     flx29fms.asm):01041         *   ENTRY: NONE
                      (     flx29fms.asm):01042         *   EXIT:  B & X DESTROYED
                      (     flx29fms.asm):01043         
D819 5F               (     flx29fms.asm):01044 [2]     OPNSIR  clrb                ;SET TRACK 0
D81A 3404             (     flx29fms.asm):01045 [5+1]           pshs    b
D81C C603             (     flx29fms.asm):01046 [2]             ldb     #ISEC       ;GET SECTOR
D81E 200E             (     flx29fms.asm):01047 [3]             bra     OPNIR
                      (     flx29fms.asm):01048         
                      (     flx29fms.asm):01049         * ------- No Path to this code
                      (     flx29fms.asm):01050         
D820 BED415           (     flx29fms.asm):01051 [6]     OPNCUD  ldx     CUD         ;GET CUD
D823 BFD413           (     flx29fms.asm):01052 [6]             stx     CLD         ;SAVE AS LOOKUP
                      (     flx29fms.asm):01053                                     ;
                      (     flx29fms.asm):01054         * -------                   ;
                      (     flx29fms.asm):01055                                     ;
D826 F6D413           (     flx29fms.asm):01056 [5]     OPNCLD  ldb     CLD         ;GET TRACK
D829 3404             (     flx29fms.asm):01057 [5+1]           pshs    b           ;SAVE IT
D82B F6D414           (     flx29fms.asm):01058 [5]             ldb     CLD+1       ;GET SECTOR
                      (     flx29fms.asm):01059                                     ;
     D826             (     flx29fms.asm):01060         OPNDIR  equ     OPNCLD      ;
                      (     flx29fms.asm):01061                                     ;
D82E BED40B           (     flx29fms.asm):01062 [6]     OPNIR   ldx     FCBSTR      ;SET FCB POINTER
D831 E78841           (     flx29fms.asm):01063 [4+1]           stb     FSB+1,x     ;SAVE SECTOR
D834 3504             (     flx29fms.asm):01064 [5+1]           puls    b           ;GET TRACK
D836 E78840           (     flx29fms.asm):01065 [4+1]           stb     FSB,x       ;SET SECTOR PNTR
D839 7FD418           (     flx29fms.asm):01066 [7]             clr     BKLN        ;CLEAR BACK LINK
D83C 5F               (     flx29fms.asm):01067 [2]             clrb                ;GET SECTOR LENGTH \\\\
D83D E78822           (     flx29fms.asm):01068 [4+1]           stb     FDI,x       ;SAVE IT
D840 39               (     flx29fms.asm):01069 [5]             rts
                      (     flx29fms.asm):01070         
                      (     flx29fms.asm):01071         * GETIR
                      (     flx29fms.asm):01072         *
                      (     flx29fms.asm):01073         * GETIR GETS THE NEXT INFORMATION
                      (     flx29fms.asm):01074         * RECORD (IR) FROM THE FSB.
                      (     flx29fms.asm):01075         *
                      (     flx29fms.asm):01076         *   ENTRY: X = FCB
                      (     flx29fms.asm):01077         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01078         
D841 BED40B           (     flx29fms.asm):01079 [6]     GETIR   ldx     FCBSTR      ;SET FCB POINTER
D844 E68822           (     flx29fms.asm):01080 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D847 261E             (     flx29fms.asm):01081 [3]             bne     GETIR2      ;NEXT SECTOR?
                      (     flx29fms.asm):01082                                     ;
D849 BDD615           (     flx29fms.asm):01083 [8]             jsr     RDNEXT      ;GET NEXT SECTOR
D84C 2531             (     flx29fms.asm):01084 [3]             bcs     GETIR8      ;ERROR?
                      (     flx29fms.asm):01085                                     ;
D84E BED40B           (     flx29fms.asm):01086 [6]             ldx     FCBSTR      ;GET FCB POINTER
D851 7DD418           (     flx29fms.asm):01087 [7]             tst     BKLN        ;TEST BACK LINK
D854 2606             (     flx29fms.asm):01088 [3]             bne     GETIR1      ;IS IT SET?
                      (     flx29fms.asm):01089                                     ;
D856 CC0005           (     flx29fms.asm):01090 [3]             ldd     #$0005          ;< OLD Code
                      (     flx29fms.asm):01091         *       ldd     FSB+4,x         ;GET NEW BL  <- CORRECTED
D859 FDD418           (     flx29fms.asm):01092 [6]             std     BKLN        ;SAVE IT
                      (     flx29fms.asm):01093                                     ;
D85C 8610             (     flx29fms.asm):01094 [2]     GETIR1  lda     #IRS        ;SET START INDEX
D85E A78822           (     flx29fms.asm):01095 [4+1]           sta     FDI,x       ;
D861 EC881E           (     flx29fms.asm):01096 [5+1]           ldd     FCS,x       ;GET CURRENT SEC ADR
D864 ED882F           (     flx29fms.asm):01097 [5+1]           std     FCD,x       ;SET CURRENT IR
                      (     flx29fms.asm):01098                                     ;
D867 A68822           (     flx29fms.asm):01099 [4+1]   GETIR2  lda     FDI,x       ;GET CURRENT INDEX
D86A A78831           (     flx29fms.asm):01100 [4+1]           sta     FCD+2,x     ;SAVE IT
D86D C618             (     flx29fms.asm):01101 [2]             ldb     #IRL        ;SET LENGTH
                      (     flx29fms.asm):01102                                     ;
D86F 3414             (     flx29fms.asm):01103 [5+3]   GETIR4  pshs    b,x         ;SAVE VALUES
D871 BDD5FE           (     flx29fms.asm):01104 [8]             jsr     RDSEQ       ;READ NEXT CHAR
D874 3514             (     flx29fms.asm):01105 [5+3]           puls    b,x         ;RESTORE VALUES
D876 A704             (     flx29fms.asm):01106 [4+1]           sta     FFN,x       ;PUT THE CHAR
D878 3001             (     flx29fms.asm):01107 [4+1]           leax    1,x         ;BUMP THE POINTER
D87A 5A               (     flx29fms.asm):01108 [2]             decb                ;DEC THE COUNT
D87B 26F2             (     flx29fms.asm):01109 [3]             bne     GETIR4      ;FINISHED?
                      (     flx29fms.asm):01110         *       clrb                ;CLEAR ERRORS
D87D 1CFE             (     flx29fms.asm):01111 [3]             andcc   #$FE        ;CLC CLEAR ERROR
D87F 39               (     flx29fms.asm):01112 [5]     GETIR8  rts
                      (     flx29fms.asm):01113         
                      (     flx29fms.asm):01114         * PUTIR
                      (     flx29fms.asm):01115         *
                      (     flx29fms.asm):01116         * PUTIR PUTS THE IR INTO THE FSB.
                      (     flx29fms.asm):01117         *
                      (     flx29fms.asm):01118         *   ENTRY: NONE
                      (     flx29fms.asm):01119         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01120         
D880 BED40B           (     flx29fms.asm):01121 [6]     PUTIR   ldx     FCBSTR      ;SET FCB POINTER
D883 A68831           (     flx29fms.asm):01122 [4+1]           lda     FCD+2,x     ;GET INDEX
D886 A78822           (     flx29fms.asm):01123 [4+1]           sta     FDI,x       ;SET IT
D889 C618             (     flx29fms.asm):01124 [2]             ldb     #IRL        ;SET LENGTH COUNT
                      (     flx29fms.asm):01125                                     ;
D88B 3414             (     flx29fms.asm):01126 [5+3]   PUTIR2  pshs    b,x         ;SAVE POINTERS
D88D A604             (     flx29fms.asm):01127 [4+1]           lda     FFN,x       ;GET THE CHAR
D88F BDD71D           (     flx29fms.asm):01128 [8]             jsr     WTSEQ       ;GO WRITE CHAR
D892 3514             (     flx29fms.asm):01129 [5+3]           puls    b,x         ;RESTORE POINTERS
D894 3001             (     flx29fms.asm):01130 [4+1]           leax    1,x         ;BUMP THE POINTER
D896 5A               (     flx29fms.asm):01131 [2]             decb                ;DEC THE COUNT
D897 26F2             (     flx29fms.asm):01132 [3]             bne     PUTIR2      ;REPEAT?
                      (     flx29fms.asm):01133                                     ;
D899 7ED6A8           (     flx29fms.asm):01134 [4]             jmp     WRITSS      ;GO WRITE SECTOR
                      (     flx29fms.asm):01135         
                      (     flx29fms.asm):01136         * FNDNAM
                      (     flx29fms.asm):01137         *
                      (     flx29fms.asm):01138         * FNDNAM TRIES TO FIND THE NAME IN
                      (     flx29fms.asm):01139         * FFN IN THE DIRECTORY.
                      (     flx29fms.asm):01140         *
                      (     flx29fms.asm):01141         *   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01142         *   EXIT:  EQ IF FOUND
                      (     flx29fms.asm):01143         *          CS IF ERROR ( IN B )
                      (     flx29fms.asm):01144         *          REGISTERS CHANGED
                      (     flx29fms.asm):01145         
D89C BED40B           (     flx29fms.asm):01146 [6]     FNDNAM  ldx     FCBSTR      ;GET FCB
D89F A603             (     flx29fms.asm):01147 [4+1]           lda     FDN,x       ;GET DRIVE NUM
D8A1 A78823           (     flx29fms.asm):01148 [4+1]           sta     FRI,x       ;SAVE IT IN TEMP
D8A4 B6D417           (     flx29fms.asm):01149 [5]             lda     DIRDN       ;GET DIR DRIVE NUM
D8A7 7DD41A           (     flx29fms.asm):01150 [7]             tst     SINDIR      ;SINGLE DIR ?
D8AA 2631             (     flx29fms.asm):01151 [3]             bne     FNDNA1      ;
                      (     flx29fms.asm):01152                                     ;
D8AC A703             (     flx29fms.asm):01153 [4+1]           sta     FDN,x       ;SET NEW DRIVE NUM
D8AE BED415           (     flx29fms.asm):01154 [6]             ldx     CUD         ;GET DIR POINTER
D8B1 BFD413           (     flx29fms.asm):01155 [6]             stx     CLD         ;SET CLD
                      (     flx29fms.asm):01156                                     ;
D8B4 8C0005           (     flx29fms.asm):01157 [4]     FNDN04  cmpx    #MAIND      ;IS IT MAIN?
D8B7 270C             (     flx29fms.asm):01158 [3]             beq     FNDN06      ;
D8B9 8D22             (     flx29fms.asm):01159 [7]             bsr     FNDNA1      ;SEARCH DIR
D8BB 2337             (     flx29fms.asm):01160 [3]             bls     FNDNA3      ;FIND OR ERROR?
D8BD BED418           (     flx29fms.asm):01161 [6]             ldx     BKLN        ;GET BACK LINK
D8C0 BFD413           (     flx29fms.asm):01162 [6]             stx     CLD         ;SET CLD
D8C3 20EF             (     flx29fms.asm):01163 [3]             bra     FNDN04      ;REPEAT
                      (     flx29fms.asm):01164                                     ;
D8C5 BED40B           (     flx29fms.asm):01165 [6]     FNDN06  ldx     FCBSTR      ;SET POINTER
D8C8 A68823           (     flx29fms.asm):01166 [4+1]           lda     FRI,x       ;RESTORE DN
D8CB A703             (     flx29fms.asm):01167 [4+1]           sta     FDN,x       ;
D8CD 2A0E             (     flx29fms.asm):01168 [3]             bpl     FNDNA1      ;DRIVE SPECIFIC?
                      (     flx29fms.asm):01169                                     ;
D8CF BDDDD6           (     flx29fms.asm):01170 [8]     FNDN08  jsr     NXTRDY      ;GET NEXT RDY DRV
D8D2 2536             (     flx29fms.asm):01171 [3]             bcs     FNDNA9      ;ERROR?
D8D4 8D07             (     flx29fms.asm):01172 [7]             bsr     FNDNA1      ;DO SEARCH
D8D6 231C             (     flx29fms.asm):01173 [3]             bls     FNDNA3      ;FIND OR ERROR?
D8D8 BDDDC6           (     flx29fms.asm):01174 [8]             jsr     RSTNAM      ;RESTORE NAME
D8DB 20F2             (     flx29fms.asm):01175 [3]             bra     FNDN08      ;
                      (     flx29fms.asm):01176                                     ;
D8DD BED40B           (     flx29fms.asm):01177 [6]     FNDNA1  ldx     FCBSTR      ;SET POINTER
D8E0 7FD41A           (     flx29fms.asm):01178 [7]             clr     SINDIR      ;CLEAR MODE
D8E3 BDD54E           (     flx29fms.asm):01179 [8]             jsr     COPNAM      ;COPY NAME TO FWB
D8E6 BDD826           (     flx29fms.asm):01180 [8]             jsr     OPNDIR      ;OPEN DIRECTORY
                      (     flx29fms.asm):01181                                     ;
D8E9 BDD841           (     flx29fms.asm):01182 [8]     FNDNA2  jsr     GETIR       ;GET RECORD
D8EC 2407             (     flx29fms.asm):01183 [3]             bcc     FNDNA4      ;ERROR?
D8EE C108             (     flx29fms.asm):01184 [2]             cmpb    #EFER       ;END OF FILE?
D8F0 2718             (     flx29fms.asm):01185 [3]             beq     FNDNA9      ;
D8F2 1A01             (     flx29fms.asm):01186 [3]             orcc    #1          ;SEC SET ERROR
D8F4 39               (     flx29fms.asm):01187 [5]     FNDNA3  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01188                                     ;
D8F5 BED40B           (     flx29fms.asm):01189 [6]     FNDNA4  ldx     FCBSTR      ;POINT TO FCB
D8F8 A604             (     flx29fms.asm):01190 [4+1]           lda     FFN,x       ;GET CHAR
D8FA 270C             (     flx29fms.asm):01191 [3]             beq     FNDNA8      ;NO MORE?
D8FC 2A02             (     flx29fms.asm):01192 [3]             bpl     FNDNA6      ;DELETED NAME?
D8FE 8D0F             (     flx29fms.asm):01193 [7]             bsr     SETFD       ;SET DELETED
                      (     flx29fms.asm):01194                                     ;
D900 BDD55E           (     flx29fms.asm):01195 [8]     FNDNA6  jsr     CMPNAM      ;COMPARE NAME
D903 26E4             (     flx29fms.asm):01196 [3]             bne     FNDNA2      ;EQUAL?
D905 1CFE             (     flx29fms.asm):01197 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D907 39               (     flx29fms.asm):01198 [5]             rts                 ;
                      (     flx29fms.asm):01199                                     ;
D908 8D05             (     flx29fms.asm):01200 [7]     FNDNA8  bsr     SETFD       ;
D90A 1CFB             (     flx29fms.asm):01201 [3]     FNDNA9  andcc   #$FB        ;SHOW NO FIND
D90C 1CFE             (     flx29fms.asm):01202 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D90E 39               (     flx29fms.asm):01203 [5]             rts                 ;
                      (     flx29fms.asm):01204                                     ;
D90F A68833           (     flx29fms.asm):01205 [4+1]   SETFD   lda     FFD+1,x     ;FIRST DELETED?
D912 260C             (     flx29fms.asm):01206 [3]             bne     SETFD2      ;
D914 EC882F           (     flx29fms.asm):01207 [5+1]           ldd     FCD,x       ;GET CURRENT ADR
D917 ED8832           (     flx29fms.asm):01208 [5+1]           std     FFD,x       ;SET FIRST DELETED
D91A A68831           (     flx29fms.asm):01209 [4+1]           lda     FCD+2,x     ;GET INDEX
D91D A78834           (     flx29fms.asm):01210 [4+1]           sta     FFD+2,x     ;SAVE IT
D920 39               (     flx29fms.asm):01211 [5]     SETFD2  rts
                      (     flx29fms.asm):01212         
                      (     flx29fms.asm):01213         * GETAVL
                      (     flx29fms.asm):01214         *
                      (     flx29fms.asm):01215         * GETAVL SETS THE SECTOR MAP POINTERS
                      (     flx29fms.asm):01216         * IF THEY HAVE NOT BEEN SET.
                      (     flx29fms.asm):01217         *
                      (     flx29fms.asm):01218         *   ENTRY: NONE
                      (     flx29fms.asm):01219         *   EXIT:  CS SET IF ERROR
                      (     flx29fms.asm):01220         *          REGISTERS CHANGED
                      (     flx29fms.asm):01221         
D921 BDD790           (     flx29fms.asm):01222 [8]     GETAVL  jsr     FSECMP      ;FIND MAP
D924 2617             (     flx29fms.asm):01223 [3]             bne     GETAV3      ;SET YET?
D926 8D18             (     flx29fms.asm):01224 [7]             bsr     GETDIS      ;READ IN DIS
D928 2515             (     flx29fms.asm):01225 [3]             bcs     GETAV4      ;ERROR?
                      (     flx29fms.asm):01226                                     ;
D92A C606             (     flx29fms.asm):01227 [2]             ldb     #6          ;SET COUNTER
D92C 10BED40B         (     flx29fms.asm):01228 [7]             ldy     FCBSTR      ;GET FCB
D930 BED41B           (     flx29fms.asm):01229 [6]             ldx     AVLPNT      ;POINT TO MAP
                      (     flx29fms.asm):01230         
D933 A6A85D           (     flx29fms.asm):01231 [4+1]   GETAV2  lda     FSB+FSA+IRS-4,y
D936 3121             (     flx29fms.asm):01232 [4+1]           leay    1,y
D938 A780             (     flx29fms.asm):01233 [4+2]           sta     ,x+
D93A 5A               (     flx29fms.asm):01234 [2]             decb                ;DEC THE COUNT
D93B 26F6             (     flx29fms.asm):01235 [3]             bne     GETAV2      ;FINISHED?
                      (     flx29fms.asm):01236         
D93D 1CFE             (     flx29fms.asm):01237 [3]     GETAV3  andcc   #$FE        ;CLC CLEAR ERRORS
D93F 39               (     flx29fms.asm):01238 [5]     GETAV4  rts
                      (     flx29fms.asm):01239         
                      (     flx29fms.asm):01240         * GETDIS
                      (     flx29fms.asm):01241         *
                      (     flx29fms.asm):01242         * GETDIS READS IN THE DIS SECTOR.
                      (     flx29fms.asm):01243         *
                      (     flx29fms.asm):01244         *   ENTRY: NONE
                      (     flx29fms.asm):01245         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01246         *          REGISTERS CHANGED
                      (     flx29fms.asm):01247         
D940 BDD819           (     flx29fms.asm):01248 [8]     GETDIS  jsr     OPNSIR      ;OPEN THE DIS
D943 BDD615           (     flx29fms.asm):01249 [8]             jsr     RDNEXT      ;READ NEXT BLOCK
D946 2508             (     flx29fms.asm):01250 [3]             bcs     GETDI2      ;ERROR?
                      (     flx29fms.asm):01251                                     ;
D948 BED40B           (     flx29fms.asm):01252 [6]             ldx     FCBSTR      ;SET POINTER
D94B C610             (     flx29fms.asm):01253 [2]             ldb     #IRS        ;SET START POINT
D94D E78822           (     flx29fms.asm):01254 [4+1]           stb     FDI,x       ;SET INDEX
D950 39               (     flx29fms.asm):01255 [5]     GETDI2  rts
                      (     flx29fms.asm):01256         
                      (     flx29fms.asm):01257         * PUTAVL
                      (     flx29fms.asm):01258         *
                      (     flx29fms.asm):01259         * PUTAVL UPDATES THE DIS SECTOR.
                      (     flx29fms.asm):01260         *
                      (     flx29fms.asm):01261         *   ENTRY: NONE
                      (     flx29fms.asm):01262         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01263         *          REGISTERS CHANGED
                      (     flx29fms.asm):01264         
D951 BDD790           (     flx29fms.asm):01265 [8]     PUTAVL  jsr     FSECMP      ;FIND SECTOR MAP
D954 8DEA             (     flx29fms.asm):01266 [7]             bsr     GETDIS      ;GO GET DIS
D956 25F8             (     flx29fms.asm):01267 [3]             bcs     GETDI2      ;ERROR?
D958 C606             (     flx29fms.asm):01268 [2]             ldb     #6          ;SET UP COUNTER
D95A 10BED40B         (     flx29fms.asm):01269 [7]             ldy     FCBSTR      ;GET FCB POINTER
D95E BED41B           (     flx29fms.asm):01270 [6]             ldx     AVLPNT      ;POINT TO MAP
                      (     flx29fms.asm):01271         
D961 A680             (     flx29fms.asm):01272 [4+2]   PUTAV2  lda     ,x+
D963 A7A85D           (     flx29fms.asm):01273 [4+1]           sta     FSB+FSA+IRS-4,y
D966 3121             (     flx29fms.asm):01274 [4+1]           leay    1,y
D968 5A               (     flx29fms.asm):01275 [2]             decb                ;DEC THE COUNT
D969 26F6             (     flx29fms.asm):01276 [3]             bne     PUTAV2      ;FINISHED?
                      (     flx29fms.asm):01277                                     ;
D96B BDD6A8           (     flx29fms.asm):01278 [8]             jsr     WRITSS      ;WRITE SECTOR
D96E 24E0             (     flx29fms.asm):01279 [3]             bcc     GETDI2      ;ERROR?
D970 7EDBD9           (     flx29fms.asm):01280 [4]             jmp     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01281         
                      (     flx29fms.asm):01282         * WRTDIR
                      (     flx29fms.asm):01283         *
                      (     flx29fms.asm):01284         * WRTDIR UPDATES THE DISK DIRECTORY.
                      (     flx29fms.asm):01285         *
                      (     flx29fms.asm):01286         *   ENTRY: NONE
                      (     flx29fms.asm):01287         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01288         
D973 BED40B           (     flx29fms.asm):01289 [6]     WRTDIR  ldx     FCBSTR      ;POINT TO FCB
D976 8602             (     flx29fms.asm):01290 [2]             lda     #2          ;SET FOR WRITE
D978 A702             (     flx29fms.asm):01291 [4+1]           sta     FAS,x       ;
D97A EC882F           (     flx29fms.asm):01292 [5+1]           ldd     FCD,x       ;GET CURRENT DIR
D97D ED881E           (     flx29fms.asm):01293 [5+1]           std     FCS,x       ;SET CURRENT SECTOR
D980 BDD64A           (     flx29fms.asm):01294 [8]             jsr     READSS      ;READ IN DIR
D983 2508             (     flx29fms.asm):01295 [3]             bcs     WRTDI2      ;ERROR?
D985 BDD880           (     flx29fms.asm):01296 [8]             jsr     PUTIR       ;GO WRITE DIR
D988 2405             (     flx29fms.asm):01297 [3]             bcc     WRTDI4      ;
D98A 7EDBD9           (     flx29fms.asm):01298 [4]             jmp     WRTERR      ;CHECK FOR WP ERR
                      (     flx29fms.asm):01299                                     ;
D98D C60A             (     flx29fms.asm):01300 [2]     WRTDI2  ldb     #WTER       ;SET ERROR
D98F 39               (     flx29fms.asm):01301 [5]     WRTDI4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01302         
                      (     flx29fms.asm):01303         * OPNRD
                      (     flx29fms.asm):01304         *
                      (     flx29fms.asm):01305         * OPNRD IS THE HIGH LEVEL SYSTEM
                      (     flx29fms.asm):01306         * ROUTINE WHICH OPENS A FILE FOR
                      (     flx29fms.asm):01307         * A READ OPERATION.
                      (     flx29fms.asm):01308         *
                      (     flx29fms.asm):01309         *   ENTRY: NONE
                      (     flx29fms.asm):01310         *   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01311         *          REGISTERS CHANGED
                      (     flx29fms.asm):01312         
D990 BDD4FE           (     flx29fms.asm):01313 [8]     OPNRD   jsr     SETFCB      ;SET FCB POINTER
D993 253D             (     flx29fms.asm):01314 [3]             bcs     OPNRD2      ;ERROR?
D995 BDD89C           (     flx29fms.asm):01315 [8]             jsr     FNDNAM      ;LOOK UP NAME
D998 2538             (     flx29fms.asm):01316 [3]             bcs     OPNRD2      ;ERRORS?
                      (     flx29fms.asm):01317                                     ;
D99A 263B             (     flx29fms.asm):01318 [3]             bne     LD9D6       ;WAS IT FOUND?
                      (     flx29fms.asm):01319                                     ;
D99C BED40B           (     flx29fms.asm):01320 [6]             ldx     FCBSTR      ;POINT TO FCB
D99F 7DD41A           (     flx29fms.asm):01321 [7]             tst     SINDIR      ;SINGLE DIR?
D9A2 2706             (     flx29fms.asm):01322 [3]             beq     OPNRD1      ;
D9A4 A60F             (     flx29fms.asm):01323 [4+1]           lda     FID,x       ;CHECK RP BIT
D9A6 8520             (     flx29fms.asm):01324 [2]             bita    #$20        ;IS IT SET?
D9A8 2629             (     flx29fms.asm):01325 [3]             bne     OPNRD3      ;REPORT ERROR
                      (     flx29fms.asm):01326                                     ;
D9AA BDDCD9           (     flx29fms.asm):01327 [8]     OPNRD1  jsr     SETMAX      ;SET MAX SEC
D9AD 252A             (     flx29fms.asm):01328 [3]             bcs     OPNERR      ;ERROR?
D9AF EC8811           (     flx29fms.asm):01329 [5+1]           ldd     FSA,x       ;GET ADDRESS
D9B2 ED8840           (     flx29fms.asm):01330 [5+1]           std     FSB,x       ;SET FRWD LINK
D9B5 BDDA8E           (     flx29fms.asm):01331 [8]             jsr     SETST       ;SET STATUS
D9B8 E68817           (     flx29fms.asm):01332 [4+1]           ldb     FMP,x       ;CHECK RANDOM
D9BB 2713             (     flx29fms.asm):01333 [3]             beq     OPNR15      ;
                      (     flx29fms.asm):01334                                     ;
D9BD 3404             (     flx29fms.asm):01335 [5+1]   OPNR12  pshs    b           ;SAVE COUNT
D9BF BDD615           (     flx29fms.asm):01336 [8]             jsr     RDNEXT      ;GET NEXT SECTOR
D9C2 3504             (     flx29fms.asm):01337 [5+1]           puls    b           ;RESTORE COUNT
D9C4 250C             (     flx29fms.asm):01338 [3]             bcs     OPNRD2      ;ERROR?
                      (     flx29fms.asm):01339                                     ;
D9C6 5A               (     flx29fms.asm):01340 [2]             decb                ;DEC THE COUNT
D9C7 26F4             (     flx29fms.asm):01341 [3]             bne     OPNR12      ;
                      (     flx29fms.asm):01342                                     ;
D9C9 BED40B           (     flx29fms.asm):01343 [6]             ldx     FCBSTR      ;SET FCB PNTR
D9CC 5F               (     flx29fms.asm):01344 [2]             clrb                ;GET SECTOR LENGTH \\\\
D9CD E78822           (     flx29fms.asm):01345 [4+1]           stb     FDI,x       ;
                      (     flx29fms.asm):01346                                     ;
D9D0 1CFE             (     flx29fms.asm):01347 [3]     OPNR15  andcc   #$FE        ;CLC CLEAR ERRORS
D9D2 39               (     flx29fms.asm):01348 [5]     OPNRD2  rts                 ;
                      (     flx29fms.asm):01349                                     ;
D9D3 C611             (     flx29fms.asm):01350 [2]     OPNRD3  ldb     #ADER       ;READ ACC DENIED
D9D5 2002             (     flx29fms.asm):01351 [3]             bra     OPNERR      ;
                      (     flx29fms.asm):01352                                     ;
D9D7 C604             (     flx29fms.asm):01353 [2]     LD9D6   ldb     #NFER       ;FILE NOT FOUND
                      (     flx29fms.asm):01354         
                      (     flx29fms.asm):01355         * OPEN ERROR
                      (     flx29fms.asm):01356         
D9D9 3404             (     flx29fms.asm):01357 [5+1]   OPNERR  pshs    b           ;SAVE ERROR
D9DB BDD510           (     flx29fms.asm):01358 [8]             jsr     REMFCB      ;REMOVE FCB
D9DE 3504             (     flx29fms.asm):01359 [5+1]           puls    b           ;
D9E0 1A01             (     flx29fms.asm):01360 [3]             orcc    #1          ;SEC  SET ERROR
D9E2 39               (     flx29fms.asm):01361 [5]             rts
                      (     flx29fms.asm):01362         
                      (     flx29fms.asm):01363         * OPNWT
                      (     flx29fms.asm):01364         *
                      (     flx29fms.asm):01365         * OPNWT OPENS A FILE FOR WRITE.
                      (     flx29fms.asm):01366         *
                      (     flx29fms.asm):01367         *   ENTRY: NONE
                      (     flx29fms.asm):01368         *   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01369         *          REGISTERS CHANGED
                      (     flx29fms.asm):01370         
D9E3 BED40B           (     flx29fms.asm):01371 [6]     OPNWT   ldx     FCBSTR      ;SET POINTER
D9E6 6D03             (     flx29fms.asm):01372 [6+1]           tst     FDN,x       ;CHECK FOR ALL DRIVES
D9E8 2A08             (     flx29fms.asm):01373 [3]             bpl     OPNWT3      ;
D9EA BDDDD6           (     flx29fms.asm):01374 [8]             jsr     NXTRDY      ;FIND READY
D9ED 2403             (     flx29fms.asm):01375 [3]             bcc     OPNWT3      ;FOUND ONE
D9EF C610             (     flx29fms.asm):01376 [2]             ldb     #NRER       ;NONE READY
D9F1 39               (     flx29fms.asm):01377 [5]             rts                 ;
                      (     flx29fms.asm):01378                                     ;
D9F2 BDD4FE           (     flx29fms.asm):01379 [8]     OPNWT3  jsr     SETFCB      ;SET FCB LINK
D9F5 25E2             (     flx29fms.asm):01380 [3]             bcs     OPNERR      ;ERROR?
D9F7 BDD53C           (     flx29fms.asm):01381 [8]             jsr     CLRFCB      ;CLEAR OUT FCB
D9FA BDD921           (     flx29fms.asm):01382 [8]             jsr     GETAVL      ;SETUP SECTOR MAP
D9FD 25DA             (     flx29fms.asm):01383 [3]             bcs     OPNERR      ;ERROR?
D9FF BDD89C           (     flx29fms.asm):01384 [8]             jsr     FNDNAM      ;GO LOOK FOR NAME
DA02 25D5             (     flx29fms.asm):01385 [3]             bcs     OPNERR      ;ERROR?
DA04 2604             (     flx29fms.asm):01386 [3]             bne     OPNWT4      ;FIND?
DA06 C603             (     flx29fms.asm):01387 [2]             ldb     #FEER       ;FOUND - ERROR
DA08 20CF             (     flx29fms.asm):01388 [3]             bra     OPNERR      ;
                      (     flx29fms.asm):01389                                     ;
DA0A BDDCD9           (     flx29fms.asm):01390 [8]     OPNWT4  jsr     SETMAX      ;SET MAX SEC
DA0D 25CA             (     flx29fms.asm):01391 [3]             bcs     OPNERR      ;ERROR?
DA0F BED40B           (     flx29fms.asm):01392 [6]             ldx     FCBSTR      ;POINT TO FCB
DA12 C60A             (     flx29fms.asm):01393 [2]             ldb     #10         ;SET COUNT
DA14 6F0F             (     flx29fms.asm):01394 [6+1]   OPNWT5  clr     FID,x       ;CLEAR BLOCK
DA16 3001             (     flx29fms.asm):01395 [4+1]           leax    1,x         ;
DA18 5A               (     flx29fms.asm):01396 [2]             decb                ;DEC THE COUNT
DA19 26F9             (     flx29fms.asm):01397 [3]             bne     OPNWT5      ;
                      (     flx29fms.asm):01398                                     ;
DA1B BED40B           (     flx29fms.asm):01399 [6]             ldx     FCBSTR      ;
DA1E EC8832           (     flx29fms.asm):01400 [5+1]           ldd     FFD,x       ;GET FIRST DELETED
DA21 2734             (     flx29fms.asm):01401 [3]             beq     OPNWT8      ;EOF ER?
DA23 ED882F           (     flx29fms.asm):01402 [5+1]           std     FCD,x       ;SET CURRENT DIR
DA26 A68834           (     flx29fms.asm):01403 [4+1]           lda     FFD+2,x     ;GET INDEX
DA29 A78831           (     flx29fms.asm):01404 [4+1]           sta     FCD+2,x     ;SAVE IT
DA2C FCCC0E           (     flx29fms.asm):01405 [6]             ldd     DATE        ;GET DATE
DA2F ED8819           (     flx29fms.asm):01406 [5+1]           std     FDT,x       ;SET DATE
DA32 B6CC10           (     flx29fms.asm):01407 [5]             lda     DATE+2
DA35 A7881B           (     flx29fms.asm):01408 [4+1]           sta     FDT+2,x
                      (     flx29fms.asm):01409         
                      (     flx29fms.asm):01410         *       -- not in UniFLEX version
                      (     flx29fms.asm):01411         
DA38 A603             (     flx29fms.asm):01412 [4+1]           lda     FDN,x       ;GET DRIVE
DA3A 8ED436           (     flx29fms.asm):01413 [3]             ldx     #DRVINFO    ;GET TABLE POINTER
DA3D A686             (     flx29fms.asm):01414 [4+1]           lda     a,x         ;GET DRIVE INFO
DA3F BED40B           (     flx29fms.asm):01415 [6]             ldx     FCBSTR      ;POINT TO FCB
DA42 A78818           (     flx29fms.asm):01416 [4+1]           sta     24,x        ;
                      (     flx29fms.asm):01417                                     ;
                      (     flx29fms.asm):01418         *       --                  ;
                      (     flx29fms.asm):01419                                     ;
DA45 BDDDC6           (     flx29fms.asm):01420 [8]             jsr     RSTNAM      ;RESTORE NAME
DA48 BDD973           (     flx29fms.asm):01421 [8]             jsr     WRTDIR      ;SET DIRECTORY
DA4B 258C             (     flx29fms.asm):01422 [3]             bcs     OPNERR      ;ERROR?
DA4D 8D3F             (     flx29fms.asm):01423 [7]             bsr     SETST       ;SET STATUS
DA4F 8604             (     flx29fms.asm):01424 [2]             lda     #RS         ;SET DATA POINTER
DA51 A78822           (     flx29fms.asm):01425 [4+1]           sta     FDI,x       ;
DA54 1CFE             (     flx29fms.asm):01426 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DA56 39               (     flx29fms.asm):01427 [5]             rts                 ;
                      (     flx29fms.asm):01428                                     ;
DA57 BED40B           (     flx29fms.asm):01429 [6]     OPNWT8  ldx     FCBSTR      ;POINT TO FCB
DA5A 6F8817           (     flx29fms.asm):01430 [6+1]           clr     FMP,x       ;CLEAR FLAG
DA5D 6C8812           (     flx29fms.asm):01431 [6+1]           inc     FSA+1,x     ;SET FSA NON 0
DA60 EC882F           (     flx29fms.asm):01432 [5+1]           ldd     FCD,x       ;GET POSITION
DA63 BDD629           (     flx29fms.asm):01433 [8]             jsr     RDNEX2      ;READ SECTOR
DA66 250D             (     flx29fms.asm):01434 [3]             bcs     OPNW85      ;ERROR?
                      (     flx29fms.asm):01435                                     ;
DA68 BDD77B           (     flx29fms.asm):01436 [8]             jsr     WTNEX1      ;GO WRITE NEW
DA6B 2508             (     flx29fms.asm):01437 [3]             bcs     OPNW85      ;ERROR?
                      (     flx29fms.asm):01438                                     ;
DA6D BDD6A8           (     flx29fms.asm):01439 [8]             jsr     WRITSS      ;WRITE NEW SECTOR
DA70 2406             (     flx29fms.asm):01440 [3]             bcc     OPNWT9      ;ERROR?
DA72 BDDBD9           (     flx29fms.asm):01441 [8]             jsr     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01442                                     ;
DA75 7ED9D9           (     flx29fms.asm):01443 [4]     OPNW85  jmp     OPNERR      ;
                      (     flx29fms.asm):01444                                     ;
DA78 BED40B           (     flx29fms.asm):01445 [6]     OPNWT9  ldx     FCBSTR      ;SET POINTER
DA7B EC881E           (     flx29fms.asm):01446 [5+1]           ldd     FCS,x       ;GET CURRENT
DA7E ED8832           (     flx29fms.asm):01447 [5+1]           std     FFD,x       ;SET FIRST DELETED
DA81 8610             (     flx29fms.asm):01448 [2]             lda     #IRS        ;SET INDEX
DA83 A78834           (     flx29fms.asm):01449 [4+1]           sta     FFD+2,x     ;
DA86 BDD951           (     flx29fms.asm):01450 [8]             jsr     PUTAVL      ;UPDATE AVLS
DA89 25EA             (     flx29fms.asm):01451 [3]             bcs     OPNW85      ;
DA8B 7EDA0A           (     flx29fms.asm):01452 [4]             jmp     OPNWT4      ;FINISH UP
                      (     flx29fms.asm):01453         
                      (     flx29fms.asm):01454         * SETST
                      (     flx29fms.asm):01455         *
                      (     flx29fms.asm):01456         * SETST SETS THE FCB STATUS AFTER
                      (     flx29fms.asm):01457         * AN OPEN FILE COMMAND.
                      (     flx29fms.asm):01458         *
                      (     flx29fms.asm):01459         *   ENTRY: NONE
                      (     flx29fms.asm):01460         *   EXIT:  A & X CHANGED
                      (     flx29fms.asm):01461         
DA8E BED40B           (     flx29fms.asm):01462 [6]     SETST   ldx     FCBSTR      ;POINT TO FCB
DA91 A684             (     flx29fms.asm):01463 [4+0]           lda     FFC,x       ;GET FUNCTION CODE
DA93 A702             (     flx29fms.asm):01464 [4+1]           sta     FAS,x       ;SET ACTIVITY STATUS
DA95 6F84             (     flx29fms.asm):01465 [6+0]           clr     FFC,x       ;CLEAR FUNCTION CODE
DA97 6F883B           (     flx29fms.asm):01466 [6+1]           clr     FSC,x       ;CLEAR SPC COMP
DA9A 4F               (     flx29fms.asm):01467 [2]             clra                ;GET SECTOR LENGTH \\\\
DA9B A78822           (     flx29fms.asm):01468 [4+1]           sta     FDI,x       ;SET INDEX
DA9E 39               (     flx29fms.asm):01469 [5]             rts
                      (     flx29fms.asm):01470         
                      (     flx29fms.asm):01471         * NEXTS
                      (     flx29fms.asm):01472         *
                      (     flx29fms.asm):01473         * NEXTS IS THE SYSTEM ROUTINE TO
                      (     flx29fms.asm):01474         * ADVANCE TO THE NEXT SECTOR.
                      (     flx29fms.asm):01475         *
                      (     flx29fms.asm):01476         *   ENTRY: NONE
                      (     flx29fms.asm):01477         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01478         
DA9F 8D28             (     flx29fms.asm):01479 [7]     NEXTS   bsr     DOSTAT      ;CHECK STATUS
DAA1 250E             (     flx29fms.asm):01480 [3]             bcs     NEXTS4      ;ERROR?
DAA3 6F84             (     flx29fms.asm):01481 [6+0]           clr     ,x         ;
DAA5 44               (     flx29fms.asm):01482 [2]             lsra                ;READING?
DAA6 1025FB6B         (     flx29fms.asm):01483 [5+?]           lbcs    RDNEXT      ;READ NEXT
                      (     flx29fms.asm):01484                                     ;
DAAA C604             (     flx29fms.asm):01485 [2]             ldb     #RS         ;SET START
DAAC E78822           (     flx29fms.asm):01486 [4+1]           stb     FDI,x       ;SET INDEX
DAAF 1CFE             (     flx29fms.asm):01487 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DAB1 39               (     flx29fms.asm):01488 [5]     NEXTS4  rts
                      (     flx29fms.asm):01489         
                      (     flx29fms.asm):01490         * CHKWT
                      (     flx29fms.asm):01491         *
                      (     flx29fms.asm):01492         * CHECK FOR WRITE SECTOR NECESSITY
                      (     flx29fms.asm):01493         *
                      (     flx29fms.asm):01494         *   ENTRY: NONE
                      (     flx29fms.asm):01495         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01496         
DAB2 BED40B           (     flx29fms.asm):01497 [6]     CHKWT   ldx     FCBSTR      ;GET FCB POINTER
DAB5 A602             (     flx29fms.asm):01498 [4+1]           lda     FAS,x       ;GET STATUS
DAB7 8183             (     flx29fms.asm):01499 [2]             cmpa    #$83        ;NEED WRITING?
DAB9 260B             (     flx29fms.asm):01500 [3]             bne     CHKWT4      ;
                      (     flx29fms.asm):01501                                     ;
DABB 8603             (     flx29fms.asm):01502 [2]             lda     #3          ;RESET STATUS
DABD A702             (     flx29fms.asm):01503 [4+1]           sta     FAS,x       ;
                      (     flx29fms.asm):01504                                     ;
DABF BDD6A8           (     flx29fms.asm):01505 [8]     CHKWT2  jsr     WRITSS      ;WRITE SECTOR
DAC2 10250113         (     flx29fms.asm):01506 [5+?]           lbcs    WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01507                                     ;
DAC6 1CFE             (     flx29fms.asm):01508 [3]     CHKWT4  andcc   #$FE        ;CLC CLEAR ERRORS
DAC8 39               (     flx29fms.asm):01509 [5]             rts
                      (     flx29fms.asm):01510         
                      (     flx29fms.asm):01511         * DOSTAT
                      (     flx29fms.asm):01512         *
                      (     flx29fms.asm):01513         * DOSTAT DOES FILE STATUS CHECKING
                      (     flx29fms.asm):01514         *
                      (     flx29fms.asm):01515         *   ENTRY: NONE
                      (     flx29fms.asm):01516         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01517         *          CS IF ERROR
                      (     flx29fms.asm):01518         
DAC9 8DE7             (     flx29fms.asm):01519 [7]     DOSTAT  bsr     CHKWT       ;CHECK FOR WRITE
DACB 250D             (     flx29fms.asm):01520 [3]             bcs     DOSTA4      ;ERRORS?
                      (     flx29fms.asm):01521                                     ;
DACD BED40B           (     flx29fms.asm):01522 [6]             ldx     FCBSTR      ;SET POINTER
DAD0 A602             (     flx29fms.asm):01523 [4+1]           lda     FAS,x       ;GET STATUS
DAD2 8103             (     flx29fms.asm):01524 [2]             cmpa    #3          ;IS IT RW?
DAD4 23F0             (     flx29fms.asm):01525 [3]             bls     CHKWT4      ;ERROR?
                      (     flx29fms.asm):01526                                     ;
DAD6 C612             (     flx29fms.asm):01527 [2]             ldb     #STER       ;SET ERROR
DAD8 1A01             (     flx29fms.asm):01528 [3]             orcc    #1          ;SEC
DADA 39               (     flx29fms.asm):01529 [5]     DOSTA4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01530         
                      (     flx29fms.asm):01531         * CLOSE
                      (     flx29fms.asm):01532         *
                      (     flx29fms.asm):01533         * CLOSE A DISK FILE
                      (     flx29fms.asm):01534         *
                      (     flx29fms.asm):01535         *   ENTRY: NONE
                      (     flx29fms.asm):01536         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01537         
DADB 8DEC             (     flx29fms.asm):01538 [7]     CLOSE   bsr     DOSTAT      ;CHECK STATUS
DADD 2531             (     flx29fms.asm):01539 [3]             bcs     CLOSE4      ;ERROR?
DADF 8102             (     flx29fms.asm):01540 [2]             cmpa    #2          ;IS IT WRITE?
DAE1 2708             (     flx29fms.asm):01541 [3]             beq     CLOSE2      ;
                      (     flx29fms.asm):01542                                     ;
DAE3 BED40B           (     flx29fms.asm):01543 [6]     CLOSE1  ldx     FCBSTR      ;GET FCB
DAE6 6F02             (     flx29fms.asm):01544 [6+1]           clr     FAS,x       ;CLEAR STATUS
DAE8 7ED510           (     flx29fms.asm):01545 [4]             jmp     REMFCB      ;REMOVE FCB
                      (     flx29fms.asm):01546                                     ;
DAEB A68812           (     flx29fms.asm):01547 [4+1]   CLOSE2  lda     FSA+1,x     ;CHECK IF EMPTY
DAEE 2605             (     flx29fms.asm):01548 [3]             bne     CLOSE3      ;EMPTY?
DAF0 BDDBBF           (     flx29fms.asm):01549 [8]             jsr     DELNAM      ;DELETE NAME
DAF3 2019             (     flx29fms.asm):01550 [3]             bra     CLOS35      ;
                      (     flx29fms.asm):01551                                     ;
DAF5 8DC8             (     flx29fms.asm):01552 [7]     CLOSE3  bsr     CHKWT2      ;WRITE SECTOR
DAF7 2517             (     flx29fms.asm):01553 [3]             bcs     CLOSE4      ;ERROR?
DAF9 BED40B           (     flx29fms.asm):01554 [6]             ldx     FCBSTR      ;GET POINTER
DAFC 6D8817           (     flx29fms.asm):01555 [6+1]           tst     FMP,x       ;RANDOM?
DAFF 2705             (     flx29fms.asm):01556 [3]             beq     CLOS32      ;
                      (     flx29fms.asm):01557                                     ;
DB01 BDDCB0           (     flx29fms.asm):01558 [8]             jsr     WTFSM       ;WRITE FSM
DB04 250A             (     flx29fms.asm):01559 [3]             bcs     CLOSE4      ;ERROR?
                      (     flx29fms.asm):01560                                     ;
DB06 BDD973           (     flx29fms.asm):01561 [8]     CLOS32  jsr     WRTDIR      ;WRITE DIRECTORY
DB09 2505             (     flx29fms.asm):01562 [3]             bcs     CLOSE4      ;ERROR?
                      (     flx29fms.asm):01563                                     ;
DB0B BDD951           (     flx29fms.asm):01564 [8]             jsr     PUTAVL      ;SET AVL MAP
                      (     flx29fms.asm):01565                                     ;
DB0E 24D3             (     flx29fms.asm):01566 [3]     CLOS35  bcc     CLOSE1      ;ERRORS?
DB10 39               (     flx29fms.asm):01567 [5]     CLOSE4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01568         
                      (     flx29fms.asm):01569         * OPNRW
                      (     flx29fms.asm):01570         *
                      (     flx29fms.asm):01571         * OPNRW OPENS A FILE FOR UPDATE
                      (     flx29fms.asm):01572         *
                      (     flx29fms.asm):01573         *   ENTRY: NONE
                      (     flx29fms.asm):01574         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01575         
DB11 BDD990           (     flx29fms.asm):01576 [8]     OPNRW   jsr     OPNRD       ;OPEN AS READ
DB14 2528             (     flx29fms.asm):01577 [3]             bcs     WTAPP4      ;ERROR?
DB16 BDD615           (     flx29fms.asm):01578 [8]             jsr     RDNEXT      ;READ FIRST SEC
DB19 2523             (     flx29fms.asm):01579 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01580         
DB1B 8603             (     flx29fms.asm):01581 [2]             lda     #3          ;SET RW STATUS
DB1D 2018             (     flx29fms.asm):01582 [3]             bra     WTAPP2      ;FINISH UP
                      (     flx29fms.asm):01583         
                      (     flx29fms.asm):01584         * WTAPP
                      (     flx29fms.asm):01585         *
                      (     flx29fms.asm):01586         * WTAPP IS THE SYSTEM OPEN FILE
                      (     flx29fms.asm):01587         * FOR WRITE APPEND. THE FILE MUST
                      (     flx29fms.asm):01588         * EXIST AND NEW DATA IS WRITTEN ON
                      (     flx29fms.asm):01589         * THE END OF THE FILE.
                      (     flx29fms.asm):01590         *
                      (     flx29fms.asm):01591         *   ENTRY: NONE
                      (     flx29fms.asm):01592         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01593         
DB1F BDD990           (     flx29fms.asm):01594 [8]     WTAPP   jsr     OPNRD       ;OPEN AS READ
DB22 251A             (     flx29fms.asm):01595 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01596                                     ;
DB24 BED40B           (     flx29fms.asm):01597 [6]             ldx     FCBSTR      ;GET FCB POINTER
DB27 A60F             (     flx29fms.asm):01598 [4+1]           lda     FID,x       ;GET ATT BYTE
DB29 8580             (     flx29fms.asm):01599 [2]             bita    #$80        ;CHECK WP BIT
DB2B 2612             (     flx29fms.asm):01600 [3]             bne     WTAPP6      ;
                      (     flx29fms.asm):01601                                     ;
DB2D EC8813           (     flx29fms.asm):01602 [5+1]           ldd     FEA,x       ;GET END ADDRESS
DB30 BDD629           (     flx29fms.asm):01603 [8]             jsr     RDNEX2      ;READ IN LAST
DB33 2509             (     flx29fms.asm):01604 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01605                                     ;
DB35 8602             (     flx29fms.asm):01606 [2]             lda     #2          ;SET WRITE STATUS
                      (     flx29fms.asm):01607                                     ;
DB37 BED40B           (     flx29fms.asm):01608 [6]     WTAPP2  ldx     FCBSTR      ;SET POINTER
DB3A A702             (     flx29fms.asm):01609 [4+1]           sta     FAS,x       ;SET STATUS
DB3C 1CFE             (     flx29fms.asm):01610 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DB3E 39               (     flx29fms.asm):01611 [5]     WTAPP4  rts                 ;
                      (     flx29fms.asm):01612                                     ;
DB3F C60B             (     flx29fms.asm):01613 [2]     WTAPP6  ldb     #WPER       ;SET ERROR
DB41 1A01             (     flx29fms.asm):01614 [3]             orcc    #1          ;SEC
DB43 39               (     flx29fms.asm):01615 [5]             rts
                      (     flx29fms.asm):01616         
                      (     flx29fms.asm):01617         * RENAME
                      (     flx29fms.asm):01618         *
                      (     flx29fms.asm):01619         * RENAME IS THE SYSTEM FILE RENAME
                      (     flx29fms.asm):01620         * ROUTINE.  THE NEW NAME MUST BE IN
                      (     flx29fms.asm):01621         * FCB+FLR.
                      (     flx29fms.asm):01622         *
                      (     flx29fms.asm):01623         *   ENTRY: SEE ABOVE
                      (     flx29fms.asm):01624         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01625         
DB44 8D35             (     flx29fms.asm):01626 [7]     RENAME  bsr     SWAP        ;SWAP NAMES
DB46 BDD89C           (     flx29fms.asm):01627 [8]             jsr     FNDNAM      ;GO LOOK FOR IT
DB49 252A             (     flx29fms.asm):01628 [3]             bcs     RENAM5      ;ERROR?
DB4B 2724             (     flx29fms.asm):01629 [3]             beq     RENAM4      ;ALREADY EXISTS?
                      (     flx29fms.asm):01630                                     ;
DB4D BED40B           (     flx29fms.asm):01631 [6]             ldx     FCBSTR      ;
DB50 C60B             (     flx29fms.asm):01632 [2]             ldb     #NL         ;SET COUNTER
                      (     flx29fms.asm):01633                                     ;
DB52 A68824           (     flx29fms.asm):01634 [4+1]   RENAM1  lda     FWB,x       ;GET CHAR
DB55 A704             (     flx29fms.asm):01635 [4+1]           sta     FFN,x       ;MOVE BACK
DB57 3001             (     flx29fms.asm):01636 [4+1]           leax    1,x         ;BUMP THE POINTER
DB59 5A               (     flx29fms.asm):01637 [2]             decb                ;DEC THE COUNT
DB5A 26F6             (     flx29fms.asm):01638 [3]             bne     RENAM1      ;
DB5C 8D4D             (     flx29fms.asm):01639 [7]             bsr     SWPNM       ;SWAP AND FIND
DB5E 2515             (     flx29fms.asm):01640 [3]             bcs     RENAM5      ;ERROR?
DB60 BED40B           (     flx29fms.asm):01641 [6]             ldx     FCBSTR      ;GET POINTER
DB63 A60F             (     flx29fms.asm):01642 [4+1]           lda     FID,x       ;GET ATT BYTE
DB65 8580             (     flx29fms.asm):01643 [2]             bita    #$80        ;
DB67 26D6             (     flx29fms.asm):01644 [3]             bne     WTAPP6      ;
DB69 8560             (     flx29fms.asm):01645 [2]             bita    #$60        ;CHECK DP BIT
DB6B 2609             (     flx29fms.asm):01646 [3]             bne     RENAM6      ;
DB6D 8D0C             (     flx29fms.asm):01647 [7]             bsr     SWAP        ;SWAP NAMES
DB6F 2055             (     flx29fms.asm):01648 [3]             bra     DELNA2      ;WRITE DIRECTORY
                      (     flx29fms.asm):01649                                     ;
DB71 C603             (     flx29fms.asm):01650 [2]     RENAM4  ldb     #FEER       ;SET ERROR
DB73 1A01             (     flx29fms.asm):01651 [3]             orcc    #1          ;SEC SHOW ERROR
DB75 39               (     flx29fms.asm):01652 [5]     RENAM5  rts                 ;
                      (     flx29fms.asm):01653                                     ;
DB76 C60C             (     flx29fms.asm):01654 [2]     RENAM6  ldb     #DPER       ;SET ERROR
DB78 1A01             (     flx29fms.asm):01655 [3]             orcc    #1          ;SEC SHOW ERROR
DB7A 39               (     flx29fms.asm):01656 [5]             rts
                      (     flx29fms.asm):01657         
                      (     flx29fms.asm):01658         * SWAP
                      (     flx29fms.asm):01659         *
                      (     flx29fms.asm):01660         * SWAP THE NAME IN FLR WITH FFN.
                      (     flx29fms.asm):01661         * IF FLR HAS NULL EXT SET AS FFN.
                      (     flx29fms.asm):01662         
DB7B BED40B           (     flx29fms.asm):01663 [6]     SWAP    ldx     FCBSTR      ;SET FCB POINTER
DB7E 860B             (     flx29fms.asm):01664 [2]             lda     #NL         ;SET COUNT
DB80 B7D411           (     flx29fms.asm):01665 [5]             sta     ETRIES      ;SAVE IT
                      (     flx29fms.asm):01666                                     ;
DB83 A604             (     flx29fms.asm):01667 [4+1]   SWAP2   lda     FFN,x       ;GET CHARACTER
DB85 E68835           (     flx29fms.asm):01668 [4+1]           ldb     FLR,x       ;GET OTHER
DB88 A78835           (     flx29fms.asm):01669 [4+1]           sta     FLR,x       ;SWAP THEM
DB8B E704             (     flx29fms.asm):01670 [4+1]           stb     FFN,x       ;
DB8D 3001             (     flx29fms.asm):01671 [4+1]           leax    1,x         ;BUMP TO NEXT
DB8F 7AD411           (     flx29fms.asm):01672 [7]             dec     ETRIES      ;DEC THE COUNT
DB92 26EF             (     flx29fms.asm):01673 [3]             bne     SWAP2       ;AGAIN?
                      (     flx29fms.asm):01674                                     ;
DB94 BED40B           (     flx29fms.asm):01675 [6]             ldx     FCBSTR      ;RESTORE POINTER
DB97 A60C             (     flx29fms.asm):01676 [4+1]           lda     FNE,x       ;GET IST CHAR
DB99 260C             (     flx29fms.asm):01677 [3]             bne     SWAP6       ;IS IT NULL?
DB9B C603             (     flx29fms.asm):01678 [2]             ldb     #3          ;SET COUNT
DB9D A6883D           (     flx29fms.asm):01679 [4+1]   SWAP4   lda     FLR+8,x     ;GET CHAR
DBA0 A70C             (     flx29fms.asm):01680 [4+1]           sta     FNE,x       ;SAVE IT
DBA2 3001             (     flx29fms.asm):01681 [4+1]           leax    1,x         ;BUMP TO NEXT
DBA4 5A               (     flx29fms.asm):01682 [2]             decb                ;DEC THE COUNT
DBA5 26F6             (     flx29fms.asm):01683 [3]             bne     SWAP4       ;
DBA7 BED40B           (     flx29fms.asm):01684 [6]     SWAP6   ldx     FCBSTR      ;RESTORE POINTER
DBAA 39               (     flx29fms.asm):01685 [5]             rts
                      (     flx29fms.asm):01686         
                      (     flx29fms.asm):01687         * SWPNM
                      (     flx29fms.asm):01688         *
                      (     flx29fms.asm):01689         * SWAP NAMES AND DO FNDNAM
                      (     flx29fms.asm):01690         
DBAB 8DCE             (     flx29fms.asm):01691 [7]     SWPNM   bsr     SWAP        ;GO DO SWAP
DBAD BDD89C           (     flx29fms.asm):01692 [8]     SWPNM2  jsr     FNDNAM      ;FIND NAME
DBB0 2507             (     flx29fms.asm):01693 [3]             bcs     SWPNM4      ;ERROR?
DBB2 2606             (     flx29fms.asm):01694 [3]             bne     SWPNM5      ;NO FIND?
                      (     flx29fms.asm):01695                                     ;
DBB4 BED40B           (     flx29fms.asm):01696 [6]             ldx     FCBSTR      ;RESTORE POINTER
DBB7 1CFE             (     flx29fms.asm):01697 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DBB9 39               (     flx29fms.asm):01698 [5]     SWPNM4  rts                 ;
                      (     flx29fms.asm):01699                                     ;
DBBA C604             (     flx29fms.asm):01700 [2]     SWPNM5  ldb     #NFER       ;SET ERROR
DBBC 1A01             (     flx29fms.asm):01701 [3]             orcc    #1          ;SEC
DBBE 39               (     flx29fms.asm):01702 [5]             rts
                      (     flx29fms.asm):01703         
                      (     flx29fms.asm):01704         * DELNAM
                      (     flx29fms.asm):01705         *
                      (     flx29fms.asm):01706         * DELETE FILE NAME IN DIR
                      (     flx29fms.asm):01707         
DBBF BED40B           (     flx29fms.asm):01708 [6]     DELNAM  ldx     FCBSTR      ;POINT TO FCB
DBC2 86FF             (     flx29fms.asm):01709 [2]             lda     #$FF        ;SET NEGATIVE
DBC4 A704             (     flx29fms.asm):01710 [4+1]           sta     FFN,x       ;SET VALUE
                      (     flx29fms.asm):01711                                     ;
DBC6 BDD973           (     flx29fms.asm):01712 [8]     DELNA2  jsr     WRTDIR      ;WRITE DIRECTORY
DBC9 BED40B           (     flx29fms.asm):01713 [6]             ldx     FCBSTR      ;SET POINTER
DBCC 8600             (     flx29fms.asm):01714 [2]             lda     #0          ;CLEAR STATUS
DBCE A702             (     flx29fms.asm):01715 [4+1]           sta     FAS,x
DBD0 39               (     flx29fms.asm):01716 [5]             rts
                      (     flx29fms.asm):01717         
                      (     flx29fms.asm):01718         * WRITIT
                      (     flx29fms.asm):01719         *
                      (     flx29fms.asm):01720         * WRITIT PUTS AND WRITES NEW
                      (     flx29fms.asm):01721         * FORWARD LINK IN SECTOR.
                      (     flx29fms.asm):01722         
DBD1 ED8840           (     flx29fms.asm):01723 [5+1]   WRITIT  std     FSB,x       ;SET NEW LINK
DBD4 BDD6A8           (     flx29fms.asm):01724 [8]             jsr     WRITSS      ;WRITE SECTOR
DBD7 2414             (     flx29fms.asm):01725 [3]             bcc     WRTER4      ;
                      (     flx29fms.asm):01726                                     ;
DBD9 C540             (     flx29fms.asm):01727 [2]     WRTERR  bitb    #$40        ;W.P. ?
DBDB 2608             (     flx29fms.asm):01728 [3]             bne     WRTER1      ;
DBDD C580             (     flx29fms.asm):01729 [2]             bitb    #$80        ;
DBDF 270A             (     flx29fms.asm):01730 [3]             beq     WRTER3      ;
DBE1 C610             (     flx29fms.asm):01731 [2]             ldb     #NRER       ;SET NOT READY
DBE3 2006             (     flx29fms.asm):01732 [3]             bra     WRTER3      ;
                      (     flx29fms.asm):01733                                     ;
DBE5 C60B             (     flx29fms.asm):01734 [2]     WRTER1  ldb     #WPER       ;SET WP ERROR
DBE7 2002             (     flx29fms.asm):01735 [3]             bra     WRTER3      ;
                      (     flx29fms.asm):01736                                     ;
                      (     flx29fms.asm):01737         * ---- No path to this code ;
                      (     flx29fms.asm):01738                                     ;
DBE9 C60A             (     flx29fms.asm):01739 [2]     WRTER2  ldb     #WTER       ;SET WRITE ERROR
                      (     flx29fms.asm):01740         
                      (     flx29fms.asm):01741         * ----
                      (     flx29fms.asm):01742         
DBEB 1A01             (     flx29fms.asm):01743 [3]     WRTER3  orcc    #1
DBED 39               (     flx29fms.asm):01744 [5]     WRTER4  rts
                      (     flx29fms.asm):01745         
                      (     flx29fms.asm):01746         * DELETE
                      (     flx29fms.asm):01747         *
                      (     flx29fms.asm):01748         * DELETE A SYSTEM FILE RETURNING ITS
                      (     flx29fms.asm):01749         * SECTORS BACK TO THE LIST OF AVAIL.
                      (     flx29fms.asm):01750         *
                      (     flx29fms.asm):01751         *   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01752         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01753         *          CS IF ERROR
                      (     flx29fms.asm):01754         
DBEE BDD921           (     flx29fms.asm):01755 [8]     DELETE  jsr     GETAVL      ;GET SEC MAP
DBF1 255E             (     flx29fms.asm):01756 [3]             bcs     DELET6      ;ERROR?
DBF3 8DB8             (     flx29fms.asm):01757 [7]             bsr     SWPNM2      ;FIND NAME
DBF5 255A             (     flx29fms.asm):01758 [3]             bcs     DELET6      ;ERROR?
                      (     flx29fms.asm):01759                                     ;
DBF7 BED40B           (     flx29fms.asm):01760 [6]             ldx     FCBSTR      ;GET POINTER
DBFA A60F             (     flx29fms.asm):01761 [4+1]           lda     FID,x       ;GET ATT BYTE
DBFC 8580             (     flx29fms.asm):01762 [2]             bita    #$80        ;CHECK WP BIT
DBFE 2652             (     flx29fms.asm):01763 [3]             bne     DELET7      ;
                      (     flx29fms.asm):01764                                     ;
DC00 8560             (     flx29fms.asm):01765 [2]             bita    #$60        ;CHECK DP BIT
DC02 2652             (     flx29fms.asm):01766 [3]             bne     DELET8      ;
                      (     flx29fms.asm):01767                                     ;
DC04 BDD790           (     flx29fms.asm):01768 [8]             jsr     FSECMP      ;FIND SEC MAP
DC07 BED41B           (     flx29fms.asm):01769 [6]             ldx     AVLPNT      ;GET MAP POINTER
DC0A EC02             (     flx29fms.asm):01770 [5+1]           ldd     2,x         ;GET LAST AVAIL
DC0C 260F             (     flx29fms.asm):01771 [3]             bne     DELET2      ;IS IT NULL?
DC0E BED40B           (     flx29fms.asm):01772 [6]             ldx     FCBSTR      ;RESTORE POINTER
DC11 EC8811           (     flx29fms.asm):01773 [5+1]           ldd     FSA,x       ;GET START ADR
DC14 2733             (     flx29fms.asm):01774 [3]             beq     DELET5      ;
DC16 BED41B           (     flx29fms.asm):01775 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC19 ED84             (     flx29fms.asm):01776 [5+0]           std     ,x         ;SET NEW
DC1B 2014             (     flx29fms.asm):01777 [3]             bra     DELET4      ;JUMP AHEAD
                      (     flx29fms.asm):01778                                     ;
DC1D BED40B           (     flx29fms.asm):01779 [6]     DELET2  ldx     FCBSTR      ;SET POINTER
DC20 BDD629           (     flx29fms.asm):01780 [8]             jsr     RDNEX2      ;READ SECTOR
DC23 252C             (     flx29fms.asm):01781 [3]             bcs     DELET6      ;ERRORS?
DC25 BED40B           (     flx29fms.asm):01782 [6]             ldx     FCBSTR      ;RESTORE POINTER
DC28 EC8811           (     flx29fms.asm):01783 [5+1]           ldd     FSA,x       ;GET START ADR
DC2B 271C             (     flx29fms.asm):01784 [3]             beq     DELET5      ;
DC2D 8DA2             (     flx29fms.asm):01785 [7]             bsr     WRITIT      ;SET LINK
DC2F 2520             (     flx29fms.asm):01786 [3]             bcs     DELET6      ;ERROR?
                      (     flx29fms.asm):01787                                     ;
DC31 BED40B           (     flx29fms.asm):01788 [6]     DELET4  ldx     FCBSTR      ;SET FCB PNTR
DC34 EC8813           (     flx29fms.asm):01789 [5+1]           ldd     FEA,x       ;GET END ADR
DC37 BED41B           (     flx29fms.asm):01790 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC3A ED02             (     flx29fms.asm):01791 [5+1]           std     2,x         ;SET NEW LAST
DC3C BED40B           (     flx29fms.asm):01792 [6]             ldx     FCBSTR      ;SET POINTER
DC3F EC8815           (     flx29fms.asm):01793 [5+1]           ldd     FSZ,x       ;GET SIZE
DC42 BED41B           (     flx29fms.asm):01794 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC45 E304             (     flx29fms.asm):01795 [6+1]           addd    4,x         ;ADD IN SECTORS
DC47 ED04             (     flx29fms.asm):01796 [5+1]           std     4,x         ;SAVE NEW COUNT
                      (     flx29fms.asm):01797                                     ;
DC49 BDDBBF           (     flx29fms.asm):01798 [8]     DELET5  jsr     DELNAM      ;DELETE NAME
DC4C 2503             (     flx29fms.asm):01799 [3]             bcs     DELET6      ;ERROR?
DC4E BDD951           (     flx29fms.asm):01800 [8]             jsr     PUTAVL      ;WRITE AVAIL SEC
DC51 39               (     flx29fms.asm):01801 [5]     DELET6  rts                 ;
                      (     flx29fms.asm):01802                                     ;
DC52 C60B             (     flx29fms.asm):01803 [2]     DELET7  ldb     #WPER       ;SET ERROR
DC54 2002             (     flx29fms.asm):01804 [3]             bra     DELET9      ;
                      (     flx29fms.asm):01805                                     ;
DC56 C60C             (     flx29fms.asm):01806 [2]     DELET8  ldb     #DPER       ;SET ERROR
DC58 1A01             (     flx29fms.asm):01807 [3]     DELET9  orcc    #1          ;SEC SHOW ERROR
DC5A 39               (     flx29fms.asm):01808 [5]             rts
                      (     flx29fms.asm):01809         
                      (     flx29fms.asm):01810         * UPDFSM
                      (     flx29fms.asm):01811         *
                      (     flx29fms.asm):01812         * UPDATE FILE SECTOR MAP
                      (     flx29fms.asm):01813         
DC5B EC881E           (     flx29fms.asm):01814 [5+1]   UPDFSM  ldd     FCS,x       ;GET CURRENT SEC
DC5E 5C               (     flx29fms.asm):01815 [2]             incb                            ;CHECK IF SEQUENTIAL
DC5F E1883C           (     flx29fms.asm):01816 [4+1]           cmpb    FMX,x       ;CHECK MAX
DC62 2303             (     flx29fms.asm):01817 [3]             bls     UPDFS2      ;
DC64 C601             (     flx29fms.asm):01818 [2]             ldb     #1          ;SET SECTOR 1
DC66 4C               (     flx29fms.asm):01819 [2]             inca                ;BUMP TRACK
DC67 10A38813         (     flx29fms.asm):01820 [7+1]   UPDFS2  cmpd    FEA,x       ;CHECK END
DC6B 260E             (     flx29fms.asm):01821 [3]             bne     UPDFS4      ;
DC6D A68837           (     flx29fms.asm):01822 [4+1]           lda     SBC,x       ;CHECK MAX COUNT
DC70 81FF             (     flx29fms.asm):01823 [2]             cmpa    #$FF        ;IS IT MAX?
DC72 2707             (     flx29fms.asm):01824 [3]             beq     UPDFS4      ;
DC74 4C               (     flx29fms.asm):01825 [2]             inca                ;BUMP COUNT
DC75 A78837           (     flx29fms.asm):01826 [4+1]           sta     SBC,x       ;SAVE IT
DC78 1CFE             (     flx29fms.asm):01827 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DC7A 39               (     flx29fms.asm):01828 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01829                                     ;
DC7B 8D33             (     flx29fms.asm):01830 [7]     UPDFS4  bsr     WTFSM       ;WRITE FSM
DC7D 2530             (     flx29fms.asm):01831 [3]             bcs     UPDFS9      ;ERROR?
DC7F BED40B           (     flx29fms.asm):01832 [6]             ldx     FCBSTR      ;SET POINTER
DC82 A6883A           (     flx29fms.asm):01833 [4+1]           lda     FNK+2,x     ;GET OFFSET
DC85 8B03             (     flx29fms.asm):01834 [2]             adda    #3          ;BUMP TO NEXT ENTRY
DC87 2616             (     flx29fms.asm):01835 [3]             bne     UPDFS8      ;END OF SECTOR?
DC89 EC881E           (     flx29fms.asm):01836 [5+1]           ldd     FCS,x       ;GET CURRENT
DC8C 10A38811         (     flx29fms.asm):01837 [7+1]           cmpd    FSA,x       ;START ADDR?
DC90 2705             (     flx29fms.asm):01838 [3]             beq     UPDFS7      ;
DC92 C617             (     flx29fms.asm):01839 [2]     UPDFS6  ldb     #FSER       ;SET ERROR
DC94 1A01             (     flx29fms.asm):01840 [3]             orcc    #1                      ;sec
DC96 39               (     flx29fms.asm):01841 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01842                                     ;
DC97 EC8840           (     flx29fms.asm):01843 [5+1]   UPDFS7  ldd     FSB,x       ;GET LINK
DC9A ED8838           (     flx29fms.asm):01844 [5+1]   UPDF75  std     FNK,x       ;SET POINTER
DC9D 8604             (     flx29fms.asm):01845 [2]             lda     #4          ;SET INITIAL OFFSET
DC9F A7883A           (     flx29fms.asm):01846 [4+1]   UPDFS8  sta     FNK+2,x     ;
DCA2 EC8813           (     flx29fms.asm):01847 [5+1]           ldd     FEA,x       ;GET END ADDR
DCA5 ED8835           (     flx29fms.asm):01848 [5+1]           std     FLR,x       ;MARK POSITION
DCA8 8601             (     flx29fms.asm):01849 [2]             lda     #1          ;SET COUNT
DCAA A78837           (     flx29fms.asm):01850 [4+1]           sta     SBC,x       ;
DCAD 1CFE             (     flx29fms.asm):01851 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DCAF 39               (     flx29fms.asm):01852 [5]     UPDFS9  rts                 ;RETURN
                      (     flx29fms.asm):01853         
                      (     flx29fms.asm):01854         * WTFSM
                      (     flx29fms.asm):01855         *
                      (     flx29fms.asm):01856         * WRITE FILE SECTOR MAP
                      (     flx29fms.asm):01857         
DCB0 EC8838           (     flx29fms.asm):01858 [5+1]   WTFSM   ldd     FNK,x       ;GET RECORD
DCB3 BDD629           (     flx29fms.asm):01859 [8]             jsr     RDNEX2      ;READ SECTOR
DCB6 25F7             (     flx29fms.asm):01860 [3]             bcs     UPDFS9      ;ERROR?
DCB8 BED40B           (     flx29fms.asm):01861 [6]             ldx     FCBSTR
DCBB 1F12             (     flx29fms.asm):01862 [6]             tfr     x,y
DCBD E6883A           (     flx29fms.asm):01863 [4+1]           ldb     FNK+2,x
                      (     flx29fms.asm):01864         
                      (     flx29fms.asm):01865         * LEAX    B,x   < original code
                      (     flx29fms.asm):01866         * Add NOP and ABX
                      (     flx29fms.asm):01867         
DCC0 12               (     flx29fms.asm):01868 [2]             nop
DCC1 3A               (     flx29fms.asm):01869 [3]             abx                 ;CORRECTED 2/4/80
DCC2 C603             (     flx29fms.asm):01870 [2]             ldb     #3
DCC4 A6A835           (     flx29fms.asm):01871 [4+1]   WTFSM2  lda     FLR,y
DCC7 3121             (     flx29fms.asm):01872 [4+1]           leay    1,y
DCC9 A78840           (     flx29fms.asm):01873 [4+1]           sta     FSB,x
DCCC 3001             (     flx29fms.asm):01874 [4+1]           leax    1,x
DCCE 5A               (     flx29fms.asm):01875 [2]             decb                ;DEC THE COUNT
DCCF 26F3             (     flx29fms.asm):01876 [3]             bne     WTFSM2      ;
DCD1 BDD6A8           (     flx29fms.asm):01877 [8]             jsr     WRITSS      ;WRITE SECTOR
DCD4 24D9             (     flx29fms.asm):01878 [3]             bcc     UPDFS9      ;ERROR?
DCD6 7EDBD9           (     flx29fms.asm):01879 [4]             jmp     WRTERR      ;SET ERROR
                      (     flx29fms.asm):01880         
                      (     flx29fms.asm):01881         * SETMAX
                      (     flx29fms.asm):01882         *
                      (     flx29fms.asm):01883         * SET MAX SECTOR NUMBER
                      (     flx29fms.asm):01884         
DCD9 BDD819           (     flx29fms.asm):01885 [8]     SETMAX  jsr     OPNSIR      ;GET SECTOR
DCDC BDD615           (     flx29fms.asm):01886 [8]             jsr     RDNEXT      ;
DCDF 2546             (     flx29fms.asm):01887 [3]             bcs     POSI05      ;ERROR?
DCE1 BED40B           (     flx29fms.asm):01888 [6]             ldx     FCBSTR      ;SET FCB PNTR
DCE4 4F               (     flx29fms.asm):01889 [2]             clra                ;
DCE5 5F               (     flx29fms.asm):01890 [2]             clrb                ;
DCE6 ED8820           (     flx29fms.asm):01891 [5+1]           std     FRN,x       ;CLEAR REC NUM
DCE9 A68867           (     flx29fms.asm):01892 [4+1]           lda     FSB+39,x    ;GET MAX
DCEC A7883C           (     flx29fms.asm):01893 [4+1]           sta     FMX,x       ;SAVE MAX
DCEF 5F               (     flx29fms.asm):01894 [2]             clrb                ;GET SECTOR LENGTH \\\\
DCF0 6F8840           (     flx29fms.asm):01895 [6+1]   SETMA2  clr     FSB,x       ;CLEAR BYTES
DCF3 3001             (     flx29fms.asm):01896 [4+1]           leax    1,x         ;
DCF5 5A               (     flx29fms.asm):01897 [2]             decb                ;DEC THE COUNTER
DCF6 26F8             (     flx29fms.asm):01898 [3]             bne     SETMA2      ;
DCF8 BED40B           (     flx29fms.asm):01899 [6]             ldx     FCBSTR      ;RESTORE POINTER
DCFB 1CFE             (     flx29fms.asm):01900 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DCFD 39               (     flx29fms.asm):01901 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01902         
                      (     flx29fms.asm):01903         * BKREC
                      (     flx29fms.asm):01904         *
                      (     flx29fms.asm):01905         * BACK UP ONE RECORD
                      (     flx29fms.asm):01906         
DCFE BED40B           (     flx29fms.asm):01907 [6]     BKREC   ldx     FCBSTR      ;GET FCB
DD01 A68817           (     flx29fms.asm):01908 [4+1]           lda     FMP,x       ;RANDOM?
DD04 271D             (     flx29fms.asm):01909 [3]             beq     POSIT0      ;
DD06 EC8820           (     flx29fms.asm):01910 [5+1]           ldd     FRN,x       ;GET REC NUMBER
DD09 830001           (     flx29fms.asm):01911 [4]             subd    #1          ;DEC BY ONE
DD0C 2A03             (     flx29fms.asm):01912 [3]             bpl     BKREC2      ;UNDERFLOW?
DD0E 7EDDB3           (     flx29fms.asm):01913 [4]             jmp     POSIT8      ;
DD11 ED8820           (     flx29fms.asm):01914 [5+1]   BKREC2  std     FRN,x       ;SAVE NEW
                      (     flx29fms.asm):01915         
                      (     flx29fms.asm):01916         * POSIT
                      (     flx29fms.asm):01917         *
                      (     flx29fms.asm):01918         * POSITION TO FRN RECORD NUMBER
                      (     flx29fms.asm):01919         
DD14 BDDAC9           (     flx29fms.asm):01920 [8]     POSIT   jsr     DOSTAT      ;CHECK STATUS
DD17 250E             (     flx29fms.asm):01921 [3]             bcs     POSI05      ;ERROR?
DD19 46               (     flx29fms.asm):01922 [2]             rora                ;
DD1A 2407             (     flx29fms.asm):01923 [3]             bcc     POSIT0      ;ERROR?
DD1C 6F84             (     flx29fms.asm):01924 [6+0]           clr     ,x         ;CLEAR FFC
DD1E A68817           (     flx29fms.asm):01925 [4+1]           lda     FMP,x       ;CHECK RANDOM
DD21 2605             (     flx29fms.asm):01926 [3]             bne     POSIT1      ;ERROR?
                      (     flx29fms.asm):01927                                     ;
DD23 C612             (     flx29fms.asm):01928 [2]     POSIT0  ldb     #STER       ;SET ERROR
DD25 1A01             (     flx29fms.asm):01929 [3]             orcc    #1                      ;sec
DD27 39               (     flx29fms.asm):01930 [5]     POSI05  rts                 ;RETURN
                      (     flx29fms.asm):01931                                     ;
DD28 7FD411           (     flx29fms.asm):01932 [7]     POSIT1  clr     ETRIES      ;CLEAR COUNT
DD2B EC8811           (     flx29fms.asm):01933 [5+1]           ldd     FSA,x       ;GET START ADDR
DD2E 10AE8820         (     flx29fms.asm):01934 [6+1]           ldy     FRN,x       ;CHECK FOR 0
DD32 276A             (     flx29fms.asm):01935 [3]             beq     POSIT7      ;GO DO ZERO
DD34 BDDDB8           (     flx29fms.asm):01936 [8]     POSIT2  jsr     GETFSM      ;GET FSM
DD37 25EE             (     flx29fms.asm):01937 [3]             bcs     POSI05      ;
DD39 4F               (     flx29fms.asm):01938 [2]             clra                ;CLEAR COUNT
DD3A 5F               (     flx29fms.asm):01939 [2]             clrb                ;
DD3B 6D02             (     flx29fms.asm):01940 [6+1]   POSIT3  tst     2,x         ;CHECK FOR EOF
DD3D 2774             (     flx29fms.asm):01941 [3]             beq     POSIT8      ;
DD3F EB02             (     flx29fms.asm):01942 [4+1]           addb    2,x         ;ADD IN NEW
DD41 8900             (     flx29fms.asm):01943 [2]             adca    #0          ;
DD43 BFD40F           (     flx29fms.asm):01944 [6]             stx     DATAPT      ;
DD46 BED40B           (     flx29fms.asm):01945 [6]             ldx     FCBSTR      ;
DD49 10A38820         (     flx29fms.asm):01946 [7+1]           cmpd    FRN,x       ;CHECK NUMBER
DD4D 242C             (     flx29fms.asm):01947 [3]             bhs     POSIT6      ;
DD4F BED40F           (     flx29fms.asm):01948 [6]     POSIT4  ldx     DATAPT      ;RESTORE POINTER
DD52 3003             (     flx29fms.asm):01949 [4+1]           leax    3,x         ;BUMP TO NEXT
DD54 3402             (     flx29fms.asm):01950 [5+1]           pshs a              ;SAVE COUNT
DD56 B6D411           (     flx29fms.asm):01951 [5]             lda     ETRIES      ;
DD59 4C               (     flx29fms.asm):01952 [2]             inca                ;BUMP POSITION
DD5A B7D411           (     flx29fms.asm):01953 [5]             sta     ETRIES      ;SAVE RESULT
DD5D 8154             (     flx29fms.asm):01954 [2]             cmpa    #84         ;LAST RECORD?
DD5F 2708             (     flx29fms.asm):01955 [3]             beq     POSIT5      ;
DD61 81A8             (     flx29fms.asm):01956 [2]             cmpa    #168        ;
DD63 3502             (     flx29fms.asm):01957 [5+1]           puls a              ;RESTORE TOTAL
DD65 274C             (     flx29fms.asm):01958 [3]             beq     POSIT8      ;ERROR?
DD67 20D2             (     flx29fms.asm):01959 [3]             bra     POSIT3      ;REPEAT
DD69 3404             (     flx29fms.asm):01960 [5+1]   POSIT5  pshs b              ;
DD6B BED40B           (     flx29fms.asm):01961 [6]             ldx     FCBSTR      ;SET POINTER
DD6E EC8840           (     flx29fms.asm):01962 [5+1]           ldd     FSB,x       ;
DD71 8D45             (     flx29fms.asm):01963 [7]             bsr     GETFSM      ;GET FSM
DD73 253E             (     flx29fms.asm):01964 [3]             bcs     POSIT8      ;ERROR?
DD75 3504             (     flx29fms.asm):01965 [5+1]           puls b              ;
DD77 3502             (     flx29fms.asm):01966 [5+1]           puls a              ;RESTORE TOTAL
DD79 20C0             (     flx29fms.asm):01967 [3]             bra     POSIT3      ;REPEAT
DD7B A38820           (     flx29fms.asm):01968 [6+1]   POSIT6  subd    FRN,x       ;SUB REC NUM
DD7E BED40F           (     flx29fms.asm):01969 [6]             ldx     DATAPT      ;RESTORE POINTER
DD81 A602             (     flx29fms.asm):01970 [4+1]           lda     2,x         ;
DD83 3404             (     flx29fms.asm):01971 [5+1]           pshs b                          ; sba
DD85 A0E0             (     flx29fms.asm):01972 [4+2]                   suba ,s+            ;
DD87 4A               (     flx29fms.asm):01973 [2]             deca                ;FIX UP COUNT
DD88 1F89             (     flx29fms.asm):01974 [6]             tfr     a,b         ;
DD8A A684             (     flx29fms.asm):01975 [4+0]           lda     ,x         ;GET TRACK
DD8C EB01             (     flx29fms.asm):01976 [4+1]           addb    1,x         ;ADD IN SECTOR
DD8E BED40B           (     flx29fms.asm):01977 [6]             ldx     FCBSTR      ;
DD91 2505             (     flx29fms.asm):01978 [3]             bcs     POSI68      ;
DD93 E1883C           (     flx29fms.asm):01979 [4+1]   POSI65  cmpb    FMX,x       ;MAX?
DD96 2306             (     flx29fms.asm):01980 [3]             bls     POSIT7      ;
DD98 E0883C           (     flx29fms.asm):01981 [4+1]   POSI68  subb    FMX,x       ;FIX IF SO
DD9B 4C               (     flx29fms.asm):01982 [2]             inca                ;BUMP TRACK
DD9C 20F5             (     flx29fms.asm):01983 [3]             bra     POSI65      ;
DD9E BDD629           (     flx29fms.asm):01984 [8]     POSIT7  jsr     RDNEX2      ;READ NEXT
DDA1 2514             (     flx29fms.asm):01985 [3]             bcs     POSI85      ;ERROR?
DDA3 BED40B           (     flx29fms.asm):01986 [6]             ldx     FCBSTR      ;
DDA6 EC8842           (     flx29fms.asm):01987 [5+1]           ldd     FSB+2,x     ;GET LRN
DDA9 10A38820         (     flx29fms.asm):01988 [7+1]           cmpd    FRN,x       ;COMPARE TO FRN
DDAD 2714             (     flx29fms.asm):01989 [3]             beq     GETS1       ;
DDAF C619             (     flx29fms.asm):01990 [2]     POSI75  ldb     #RMER       ;SET ERROR
DDB1 2002             (     flx29fms.asm):01991 [3]             bra     POSI82      ;
DDB3 C618             (     flx29fms.asm):01992 [2]     POSIT8  ldb     #RRER       ;SET ERROR
DDB5 1A01             (     flx29fms.asm):01993 [3]     POSI82  orcc    #01                     ;sec
DDB7 39               (     flx29fms.asm):01994 [5]     POSI85  rts                             ;RETURN
                      (     flx29fms.asm):01995         
                      (     flx29fms.asm):01996         * GET FSM SECTOR
                      (     flx29fms.asm):01997         
DDB8 BDD629           (     flx29fms.asm):01998 [8]     GETFSM  jsr     RDNEX2      ;READ NEXT SEC
DDBB 2508             (     flx29fms.asm):01999 [3]             bcs     GETS2       ;ERROR?
DDBD BED40B           (     flx29fms.asm):02000 [6]             ldx     FCBSTR      ;SET INDEX
DDC0 C644             (     flx29fms.asm):02001 [2]             ldb     #FSB+4      ;SET OFFSET
DDC2 3A               (     flx29fms.asm):02002 [3]             abx                 ;
DDC3 1CFE             (     flx29fms.asm):02003 [3]     GETS1   andcc   #$fe        ; clc CLEAR ERRORS
DDC5 39               (     flx29fms.asm):02004 [5]     GETS2   rts
                      (     flx29fms.asm):02005         
                      (     flx29fms.asm):02006         * RSTNAM
                      (     flx29fms.asm):02007         *
                      (     flx29fms.asm):02008         * RESTORE NAME FROM FWB TO FFN.
                      (     flx29fms.asm):02009         
DDC6 BED40B           (     flx29fms.asm):02010 [6]     RSTNAM  ldx     FCBSTR      ;SET FCB
DDC9 C60B             (     flx29fms.asm):02011 [2]             ldb     #NL         ;SET COUNTER
DDCB A68824           (     flx29fms.asm):02012 [4+1]   RSTNA2  lda     FWB,x       ;GET CHARACTER
DDCE A704             (     flx29fms.asm):02013 [4+1]           sta     FFN,x       ;PUT IT
DDD0 3001             (     flx29fms.asm):02014 [4+1]           leax    1,x           ;BUMP THE POINTER
DDD2 5A               (     flx29fms.asm):02015 [2]             decb                ;DEC THE COUNT
DDD3 26F6             (     flx29fms.asm):02016 [3]             bne     RSTNA2      ;
DDD5 39               (     flx29fms.asm):02017 [5]             rts                 ;RETURN
                      (     flx29fms.asm):02018         
                      (     flx29fms.asm):02019         * NXTRDY
                      (     flx29fms.asm):02020         *
                      (     flx29fms.asm):02021         * NXTRDY RETURNS THE DRIVE NUMBER IN
                      (     flx29fms.asm):02022         * FCB+FDN OF THE NEXT READY DRIVE.
                      (     flx29fms.asm):02023         * CS IF NO MORE READY DRIVES.
                      (     flx29fms.asm):02024         
DDD6 BED40B           (     flx29fms.asm):02025 [6]     NXTRDY  ldx     FCBSTR      ;GET FCB
DDD9 A603             (     flx29fms.asm):02026 [4+1]           lda     FDN,x       ;GET DRIVE NUMBER
DDDB 4C               (     flx29fms.asm):02027 [2]             inca                ;BUMP BY ONE
DDDC 8104             (     flx29fms.asm):02028 [2]             cmpa    #4          ;PAST RANGE?
DDDE 240F             (     flx29fms.asm):02029 [3]             bhs     NXTRD6      ;
DDE0 A703             (     flx29fms.asm):02030 [4+1]           sta     FDN,x       ;SAVE NEW NUMBER
DDE2 2605             (     flx29fms.asm):02031 [3]             bne     NXTRD2      ;DRIVE 0 ?
DDE4 BDDE0F           (     flx29fms.asm):02032 [8]             jsr     DCHECK       ;CHECK IF READY
DDE7 2003             (     flx29fms.asm):02033 [3]             bra     NXTRD4      ;
DDE9 BDDE12           (     flx29fms.asm):02034 [8]     NXTRD2  jsr     DQUICK      ;QUICK CHECK
DDEC 25E8             (     flx29fms.asm):02035 [3]     NXTRD4  bcs     NXTRDY      ;CHECK NEXT DRIVE
DDEE 39               (     flx29fms.asm):02036 [5]             rts                 ;RETURN
DDEF C610             (     flx29fms.asm):02037 [2]     NXTRD6  ldb     #NRER       ;SET ERROR
DDF1 1A01             (     flx29fms.asm):02038 [3]             orcc    #1                      ;sec
DDF3 39               (     flx29fms.asm):02039 [5]             rts                 ;RETURN
                      (        flex9.asm):00010                         include "drivers.asm"
                      (      drivers.asm):00001                         NAM     DRIVERS
                      (      drivers.asm):00002                         PAG
                      (      drivers.asm):00003                         PRAGMA CD
                      (      drivers.asm):00004         
     0000             (      drivers.asm):00005         USEDSKYNG   EQU     0
                      (      drivers.asm):00006         
                      (      drivers.asm):00007         
                      (      drivers.asm):00008         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00009         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00010         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00011         ;
                      (      drivers.asm):00012         ;  Harware Addresses
                      (      drivers.asm):00013         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00014         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00015         UART0           equ     $FE68           ; DATA IN/OUT
     FE69             (      drivers.asm):00016         UART1           equ     $FE69           ; CHECK RX
     FE6A             (      drivers.asm):00017         UART2           equ     $FE6A           ; INTERRUPTS
     FE6B             (      drivers.asm):00018         UART3           equ     $FE6B           ; LINE CONTROL
     FE6C             (      drivers.asm):00019         UART4           equ     $FE6C           ; MODEM CONTROL
     FE6D             (      drivers.asm):00020         UART5           equ     $FE6D           ; LINE STATUS
     FE6E             (      drivers.asm):00021         UART6           equ     $FE6E           ; MODEM STATUS
     FE6F             (      drivers.asm):00022         UART7           equ     $FE6F           ; SCRATCH REG.
                      (      drivers.asm):00023         
                      (      drivers.asm):00024         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00025         ;
                      (      drivers.asm):00026         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00027         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00028                         ORG     $DE00
                      (      drivers.asm):00029         
DE00 7EDEBB           (      drivers.asm):00030 [4]     DREAD           JMP     >READ       * DE00    READ      Read a single sector
DE03 7EDEEF           (      drivers.asm):00031 [4]     DWRITE          JMP     >WRITE      * DE03    WRITE     Write a single sector
DE06 7EDF11           (      drivers.asm):00032 [4]     DVERFY          JMP     >VERIFY     * DE06    VERIFY    Verify last sector written
DE09 7EDF5D           (      drivers.asm):00033 [4]     DRESTOR         JMP     >RESTORE    * DE09    RESTORE   Restore head to track #0
DE0C 7EDF78           (      drivers.asm):00034 [4]     DDRIVE          JMP     >DRIVE      * DE0C    DRIVE     Select the specified drive
DE0F 7EDFBE           (      drivers.asm):00035 [4]     DCHECK          JMP     >CHKRDY     * DE0F    CHKRDY    Check for drive ready
DE12 7EDFC9           (      drivers.asm):00036 [4]     DQUICK          JMP     >QUICK      * DE12    QUICK     Quick check for drive ready
DE15 7EDF4B           (      drivers.asm):00037 [4]     DINIT           JMP     >CINIT      * DE15    CINIT     Driver initialize (cold start)
DE18 7EDF54           (      drivers.asm):00038 [4]     DWARM           JMP     >WARM       * DE18    WARM      Driver initialize (warm start)
DE1B 7EDF2E           (      drivers.asm):00039 [4]     DSEEK           JMP     >SEEK       * DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00040         
                      (      drivers.asm):00041         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00042         ; Temp Storage Area
                      (      drivers.asm):00043         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00044         
                      (      drivers.asm):00045         
DE1E 00               (      drivers.asm):00046         CURDRV          FCB     $00
DE1F 00               (      drivers.asm):00047         CURDRVTYP       FCB     $00
DE20 00               (      drivers.asm):00048         CURDRVADDRESS   FCB     $00
DE21 0000             (      drivers.asm):00049         CURDRVSLICE     FDB     $0000
                      (      drivers.asm):00050         
DE23 02020202         (      drivers.asm):00051         DRVTYPES        FCB     $02,$02,$02,$02
                      (      drivers.asm):00052                         ;   $00 - INVALID
                      (      drivers.asm):00053                         ;   $01 - Floppy
                      (      drivers.asm):00054                         ;   $02 - IDE
DE27 00000000         (      drivers.asm):00055         DRVADDRESS      FCB     $00,$00,$00,$00
DE2B 0000000000000000 (      drivers.asm):00056         DRVSLICE        FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00057         
                      (      drivers.asm):00058         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00059         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00060         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00061         
                      (      drivers.asm):00062         
                      (      drivers.asm):00063         
                      (      drivers.asm):00064         
                      (      drivers.asm):00065         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00066         ;
                      (      drivers.asm):00067         ;       Monitor entry routine
                      (      drivers.asm):00068         ;_____________________________________________________________________________________________________
DE33 860A             (      drivers.asm):00069 [2]     MONITR          LDA     #$A
DE35 8D15             (      drivers.asm):00070 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00071 [2]                     LDA     #$D
DE39 8D11             (      drivers.asm):00072 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00073 [4]                     JMP     $FC0B               LOCATION OF MONITOR
                      (      drivers.asm):00074         
                      (      drivers.asm):00075         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00076         ;
                      (      drivers.asm):00077         ;       Timer Drivers
                      (      drivers.asm):00078         ;
                      (      drivers.asm):00079         ;       Timers not supported
                      (      drivers.asm):00080         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00081         TMOFF       ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00082         TMON        ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00083         TMINT       ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00084 [5]                     RTS
                      (      drivers.asm):00085         
                      (      drivers.asm):00086         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00087         ;
                      (      drivers.asm):00088         ;       Console Drivers
                      (      drivers.asm):00089         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00090         ;       Terminal init routine
DE3F 3402             (      drivers.asm):00091 [5+1]   TINIT           PSHS    A
                      (      drivers.asm):00092                         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00093                         ;       LDA             #$80            ;
                      (      drivers.asm):00094                         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00095                             ;   LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00096                             ;   STA             UART0           ; save baud rate
                      (      drivers.asm):00097                             ;   LDA             #00                     ;
                      (      drivers.asm):00098                             ;   STA             UART1           ;
                      (      drivers.asm):00099                             ;   LDA             #03                     ;
                      (      drivers.asm):00100                             ;   STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00101                             ;   STA             UART4           ;
DE41 3582             (      drivers.asm):00102 [5+3]                   PULS    PC,A
                      (      drivers.asm):00103         
                      (      drivers.asm):00104         
                      (      drivers.asm):00105         ;       Terminal input routine
                      (      drivers.asm):00106         
DE43 7DDEB9           (      drivers.asm):00107 [7]     VINCH           TST     >TAPPTR         ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00108 [3]                     BEQ     TREDIR          ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00109 [7+5]                   JSR     [TAPPTR]        ; redirect to alternate routine
                      (      drivers.asm):00110         
                      (      drivers.asm):00111         ;       Terminal output routine
                      (      drivers.asm):00112         
DE4C 3402             (      drivers.asm):00113 [5+1]   VOUTCH          PSHS    a
                      (      drivers.asm):00114         !
DE4E B6FE6D           (      drivers.asm):00115 [5]                             LDA             UART5                   ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00116 [2]                             ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00117 [2]                             CMPA    #$00
DE55 27F7             (      drivers.asm):00118 [3]                             BEQ             <                       ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00119 [5+1]                   PULS    A
DE59 B7FE68           (      drivers.asm):00120 [5]                             STA             UART0                   ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00121 [5]                     RTS
                      (      drivers.asm):00122         
                      (      drivers.asm):00123         
                      (      drivers.asm):00124         ;       Terminal status check routine
                      (      drivers.asm):00125         
DE5D 3402             (      drivers.asm):00126 [5+1]   STAT:           PSHS    A
DE5F B6FE6D           (      drivers.asm):00127 [5]                     LDA         UART5                       ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00128 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00129 [2]                             CMPA    #$00
DE66 3582             (      drivers.asm):00130 [5+3]                           PULS    PC,A
                      (      drivers.asm):00131         
                      (      drivers.asm):00132         
                      (      drivers.asm):00133         ;       Monitor terminal input character with echo
                      (      drivers.asm):00134         
DE68 BDDE6D           (      drivers.asm):00135 [8]     TREDIR          JSR     INCHNE
DE6B 20DF             (      drivers.asm):00136 [3]                     BRA     VOUTCH
                      (      drivers.asm):00137         
                      (      drivers.asm):00138         
                      (      drivers.asm):00139         ;       Monitor terminal input character without echo
                      (      drivers.asm):00140         
DE6D                  (      drivers.asm):00141         INCHNE
DE6D B6FE6D           (      drivers.asm):00142 [5]                             LDA         UART5                       ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00143 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00144 [2]                             CMPA    #$00
DE74 27F7             (      drivers.asm):00145 [3]                             BEQ         INCHNE              ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00146 [5]                             LDA         UART0                       ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00147 [5]                             RTS
                      (      drivers.asm):00148         
                      (      drivers.asm):00149         
                      (      drivers.asm):00150         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00151         ;
                      (      drivers.asm):00152         ;       Interupt handler
                      (      drivers.asm):00153         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00154         IHNDLR          ;leau    <IRQLL-4,pc         get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00155                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00156                         fcb     IRQLL-*-5
DE7D EE44             (      drivers.asm):00157 [5+1]   CHKNXT          ldu     4,u                 get a link
DE7F 270C             (      drivers.asm):00158 [3]                     beq     IHDONE              end of list
                      (      drivers.asm):00159         
DE81 A6D4             (      drivers.asm):00160 [4+3]                   lda     [,u]                get status from device
DE83 A546             (      drivers.asm):00161 [4+1]                   bita    6,u                 did it interrupt?
DE85 27F6             (      drivers.asm):00162 [3]                     beq     CHKNXT              no - check next
                      (      drivers.asm):00163         
DE87 10AEC4           (      drivers.asm):00164 [6+0]                   ldy     ,u                  yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00165 [3+4]                   jmp     [2,u]               go to device ISR
                      (      drivers.asm):00166         
DE8D 3B               (      drivers.asm):00167 [6+?]   IHDONE          rti                         return from interrupt
                      (      drivers.asm):00168         
                      (      drivers.asm):00169         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00170         ;       add a device to IRQ handler table
                      (      drivers.asm):00171         ;_____________________________________________________________________________________________________
DE8E 3470             (      drivers.asm):00172 [5+6]   ADDDEV          pshs    x,y,u
DE90 8D14             (      drivers.asm):00173 [7]                     bsr     SRCHLST             find link in chain
DE92 2704             (      drivers.asm):00174 [3]                     beq     DEVARE              already exists - exit
DE94 EF04             (      drivers.asm):00175 [5+1]                   stu     4,x                 set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00176 [5+1]                   stx     4,y                 link this one into prev blk
DE98 35F0             (      drivers.asm):00177 [5+8]   DEVARE          puls    pc,X,Y,U
                      (      drivers.asm):00178         
                      (      drivers.asm):00179         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00180         ;       delete a device from IRQ handler table
                      (      drivers.asm):00181         ;_____________________________________________________________________________________________________
DE9A 3470             (      drivers.asm):00182 [5+6]   DELDEV          pshs    x,y,u
DE9C 8D08             (      drivers.asm):00183 [7]                     bsr     SRCHLST             find link in chain
DE9E 2604             (      drivers.asm):00184 [3]                     bne     NODEV               not found - exit
DEA0 AE04             (      drivers.asm):00185 [5+1]                   ldx     4,x                 get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00186 [5+1]                   stx     4,u                 set in prev block
DEA4 35F0             (      drivers.asm):00187 [5+8]   NODEV           puls    pc,X,Y,U
                      (      drivers.asm):00188         
                      (      drivers.asm):00189         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00190         ;       search a linked list
                      (      drivers.asm):00191         ;
                      (      drivers.asm):00192         ;               entry: X = address of ISR control block
                      (      drivers.asm):00193         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00194         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00195         ;
                      (      drivers.asm):00196         ;               format of ISR control block:
                      (      drivers.asm):00197         ;
                      (      drivers.asm):00198         ;                       offset  description
                      (      drivers.asm):00199         ;                         0     address of I/O device
                      (      drivers.asm):00200         ;                         2     address of ISR
                      (      drivers.asm):00201         ;                         4     link to next ISR control block
                      (      drivers.asm):00202         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00203         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00204         SRCHLST         ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00205                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00206                         fcb     IRQLL-*-5
DEA9 31C4             (      drivers.asm):00207 [4+0]   SRCHLP          leay    ,u
DEAB AC44             (      drivers.asm):00208 [6+1]                   cmpx    4,u                 X = link?
DEAD 2706             (      drivers.asm):00209 [3]                     beq     FNDENT              yes - return pointer in U
                      (      drivers.asm):00210         
DEAF EE44             (      drivers.asm):00211 [5+1]                   ldu     4,u                 no - get link in U
DEB1 26F6             (      drivers.asm):00212 [3]                     bne     SRCHLP              not end of chain - loop
DEB3 1CFB             (      drivers.asm):00213 [3]                     andcc   #$FB                clear Z flag in CC
                      (      drivers.asm):00214         
DEB5 39               (      drivers.asm):00215 [5]     FNDENT          rts                         return - not found
                      (      drivers.asm):00216         
                      (      drivers.asm):00217         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00218         
                      (      drivers.asm):00219         
DEB6 0000             (      drivers.asm):00220         IRQLL           fdb     0                   pointer to first entry in the table
DEB8 01               (      drivers.asm):00221                         fcb     1
                      (      drivers.asm):00222         
DEB9 0000             (      drivers.asm):00223         TAPPTR          fdb     0                   no terminal input redirection
                      (      drivers.asm):00224         
                      (      drivers.asm):00225         
                      (      drivers.asm):00226         
                      (      drivers.asm):00227         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00228         ;
                      (      drivers.asm):00229         ;       Disk Driver Dispatchers
                      (      drivers.asm):00230         ;
                      (      drivers.asm):00231         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00232         ;       driver for the device
                      (      drivers.asm):00233         ;
                      (      drivers.asm):00234         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00235         
                      (      drivers.asm):00236         
                      (      drivers.asm):00237         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00238         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00239         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00240         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00241         ;
                      (      drivers.asm):00242         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00243         ;                   (A) = Track Number
                      (      drivers.asm):00244         ;                   (B) = Sector Number
                      (      drivers.asm):00245         ;
                      (      drivers.asm):00246         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00247         ;                   (A) May be destroyed
                      (      drivers.asm):00248         ;                   (B) = Error condition
                      (      drivers.asm):00249         ;                   (Z) = 1 if no error
                      (      drivers.asm):00250         ;                       = 0 if an error
                      (      drivers.asm):00251         ;_____________________________________________________________________________________________________
DEBB 3402             (      drivers.asm):00252 [5+1]   READ            PSHS     A
                      (      drivers.asm):00253         
DEBD 3402             (      drivers.asm):00254 [5+1]           PSHS    A
DEBF 8652             (      drivers.asm):00255 [2]             LDA     #'R
DEC1 BDDE4C           (      drivers.asm):00256 [8]             JSR     VOUTCH
DEC4 3502             (      drivers.asm):00257 [5+1]           PULS    A
                      (      drivers.asm):00258         
DEC6 B6DE1F           (      drivers.asm):00259 [5]                     LDA     CURDRVTYP
DEC9 8101             (      drivers.asm):00260 [2]                     CMPA    #$01
DECB 2709             (      drivers.asm):00261 [3]                     BEQ     READFLOPPY
DECD 8102             (      drivers.asm):00262 [2]                     CMPA    #$02
DECF 2710             (      drivers.asm):00263 [3]                     BEQ     READIDE
DED1 C61F             (      drivers.asm):00264 [2]     READERR:        LDB     #$1F
DED3 57               (      drivers.asm):00265 [2]                     ASRB
DED4 3582             (      drivers.asm):00266 [5+3]                   PULS    PC,A
DED6                  (      drivers.asm):00267         READFLOPPY:
DED6 3402             (      drivers.asm):00268 [5+1]           PSHS    A
DED8 8646             (      drivers.asm):00269 [2]             LDA     #'F
DEDA BDDE4C           (      drivers.asm):00270 [8]             JSR     VOUTCH
DEDD 3502             (      drivers.asm):00271 [5+1]           PULS    A
                      (      drivers.asm):00272         
DEDF 20F0             (      drivers.asm):00273 [3]                     BRA     READERR
DEE1                  (      drivers.asm):00274         READIDE:
                      (      drivers.asm):00275         
DEE1 3402             (      drivers.asm):00276 [5+1]           PSHS    A
DEE3 8652             (      drivers.asm):00277 [2]             LDA     #'R
DEE5 BDDE4C           (      drivers.asm):00278 [8]             JSR     VOUTCH
DEE8 3502             (      drivers.asm):00279 [5+1]           PULS    A
                      (      drivers.asm):00280         
DEEA 3502             (      drivers.asm):00281 [5+1]                   PULS    A
DEEC 7EE0D2           (      drivers.asm):00282 [4]                     JMP     IDE_READ_SECTOR
                      (      drivers.asm):00283         
                      (      drivers.asm):00284         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00285         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00286         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00287         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00288         ;           in length.
                      (      drivers.asm):00289         ;
                      (      drivers.asm):00290         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00291         ;                         to be written to disk
                      (      drivers.asm):00292         ;                   (A) = Track Number
                      (      drivers.asm):00293         ;                   (B) = Sector Number
                      (      drivers.asm):00294         ;
                      (      drivers.asm):00295         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00296         ;                   (A) May be destroyed
                      (      drivers.asm):00297         ;                   (B) = Error condition
                      (      drivers.asm):00298         ;                   (Z) = 1 if no error
                      (      drivers.asm):00299         ;                       = 0 if an error
                      (      drivers.asm):00300         ;_____________________________________________________________________________________________________
DEEF 3402             (      drivers.asm):00301 [5+1]   WRITE           PSHS     A
                      (      drivers.asm):00302         
DEF1 3402             (      drivers.asm):00303 [5+1]           PSHS    A
DEF3 8657             (      drivers.asm):00304 [2]             LDA     #'W
DEF5 BDDE4C           (      drivers.asm):00305 [8]             JSR     VOUTCH
DEF8 3502             (      drivers.asm):00306 [5+1]           PULS    A
                      (      drivers.asm):00307         
DEFA B6DE1F           (      drivers.asm):00308 [5]                     LDA     CURDRVTYP
DEFD 8101             (      drivers.asm):00309 [2]                     CMPA    #$01
DEFF 2709             (      drivers.asm):00310 [3]                     BEQ     WRITEFLOPPY
DF01 8102             (      drivers.asm):00311 [2]                     CMPA    #$02
DF03 2707             (      drivers.asm):00312 [3]                     BEQ     WRITEIDE
DF05 C61F             (      drivers.asm):00313 [2]     WRITEERR:       LDB     #$1F
DF07 57               (      drivers.asm):00314 [2]                     ASRB
DF08 3582             (      drivers.asm):00315 [5+3]                   PULS    PC,A
DF0A                  (      drivers.asm):00316         WRITEFLOPPY:
DF0A 20F9             (      drivers.asm):00317 [3]                     BRA     WRITEERR
DF0C                  (      drivers.asm):00318         WRITEIDE:
DF0C 3502             (      drivers.asm):00319 [5+1]                   PULS    A
DF0E 7EE146           (      drivers.asm):00320 [4]                     JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00321         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00322         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00323         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00324         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00325         ;           single sector operation.
                      (      drivers.asm):00326         ;
                      (      drivers.asm):00327         ;           ENTRY - No entry parameters
                      (      drivers.asm):00328         ;
                      (      drivers.asm):00329         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00330         ;                   (A) May be destroyed
                      (      drivers.asm):00331         ;                   (B) = Error condition
                      (      drivers.asm):00332         ;                   (Z) = 1 if no error
                      (      drivers.asm):00333         ;                       = 0 if an error
                      (      drivers.asm):00334         ;_____________________________________________________________________________________________________
DF11                  (      drivers.asm):00335         VERIFY
DF11 3402             (      drivers.asm):00336 [5+1]           PSHS    A
DF13 8656             (      drivers.asm):00337 [2]             LDA     #'V
DF15 BDDE4C           (      drivers.asm):00338 [8]             JSR     VOUTCH
DF18 3502             (      drivers.asm):00339 [5+1]           PULS    A
                      (      drivers.asm):00340         
DF1A B6DE1F           (      drivers.asm):00341 [5]                     LDA     CURDRVTYP
DF1D 8101             (      drivers.asm):00342 [2]                     CMPA    #$01
DF1F 2708             (      drivers.asm):00343 [3]                     BEQ     VERIFYFLOPPY
DF21 8102             (      drivers.asm):00344 [2]                     CMPA    #$02
DF23 2706             (      drivers.asm):00345 [3]                     BEQ     VERIFYIDE
DF25 C61F             (      drivers.asm):00346 [2]     VERIFYERR:      LDB     #$1F
DF27 57               (      drivers.asm):00347 [2]                     ASRB
DF28 39               (      drivers.asm):00348 [5]                     RTS
DF29                  (      drivers.asm):00349         VERIFYFLOPPY:
DF29 20FA             (      drivers.asm):00350 [3]                     BRA     VERIFYERR
DF2B                  (      drivers.asm):00351         VERIFYIDE:
DF2B C600             (      drivers.asm):00352 [2]                     LDB     #$00
DF2D 39               (      drivers.asm):00353 [5]                     RTS
                      (      drivers.asm):00354         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00355         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00356         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00357         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00358         ;
                      (      drivers.asm):00359         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00360         ;                   (B) = Sector Number
                      (      drivers.asm):00361         ;
                      (      drivers.asm):00362         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00363         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00364         ;                   (B) = Error condition
                      (      drivers.asm):00365         ;                   (Z) = 1 if no error
                      (      drivers.asm):00366         ;                       = 0 if an error
                      (      drivers.asm):00367         ;_____________________________________________________________________________________________________
DF2E                  (      drivers.asm):00368         SEEK
DF2E 3402             (      drivers.asm):00369 [5+1]           PSHS    A
DF30 8653             (      drivers.asm):00370 [2]             LDA     #'S
DF32 BDDE4C           (      drivers.asm):00371 [8]             JSR     VOUTCH
DF35 3502             (      drivers.asm):00372 [5+1]           PULS    A
DF37 B6DE1F           (      drivers.asm):00373 [5]                     LDA     CURDRVTYP
DF3A 8101             (      drivers.asm):00374 [2]                     CMPA    #$01
DF3C 2708             (      drivers.asm):00375 [3]                     BEQ     SEEKFLOPPY
DF3E 8102             (      drivers.asm):00376 [2]                     CMPA    #$02
DF40 2706             (      drivers.asm):00377 [3]                     BEQ     SEEKIDE
DF42 C61F             (      drivers.asm):00378 [2]     SEEKERR:        LDB     #$1F
DF44 57               (      drivers.asm):00379 [2]                     ASRB
DF45 39               (      drivers.asm):00380 [5]                     RTS
DF46                  (      drivers.asm):00381         SEEKFLOPPY:
DF46 20FA             (      drivers.asm):00382 [3]                     BRA     SEEKERR
DF48                  (      drivers.asm):00383         SEEKIDE:
DF48 C600             (      drivers.asm):00384 [2]                     LDB     #$00
DF4A 39               (      drivers.asm):00385 [5]                     RTS
                      (      drivers.asm):00386         
                      (      drivers.asm):00387         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00388         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00389         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00390         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00391         ;           can be done here.
                      (      drivers.asm):00392         ;
                      (      drivers.asm):00393         ;           ENTRY - No parameters
                      (      drivers.asm):00394         ;
                      (      drivers.asm):00395         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00396         ;_____________________________________________________________________________________________________
DF4B                  (      drivers.asm):00397         CINIT
DF4B 8649             (      drivers.asm):00398 [2]             LDA     #'I
DF4D BDDE4C           (      drivers.asm):00399 [8]             JSR     VOUTCH
DF50 BDDFD9           (      drivers.asm):00400 [8]                     JSR     PPIDE_INIT
DF53 39               (      drivers.asm):00401 [5]                     RTS
                      (      drivers.asm):00402         
                      (      drivers.asm):00403         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00404         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00405         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00406         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00407         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00408         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00409         ;           reset such that the controller would not function properly
                      (      drivers.asm):00410         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00411         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00412         ;
                      (      drivers.asm):00413         ;           ENTRY - No parameters
                      (      drivers.asm):00414         ;
                      (      drivers.asm):00415         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00416         ;_____________________________________________________________________________________________________
DF54                  (      drivers.asm):00417         WARM
DF54 8677             (      drivers.asm):00418 [2]             LDA     #'w
DF56 BDDE4C           (      drivers.asm):00419 [8]             JSR     VOUTCH
DF59 BDE19E           (      drivers.asm):00420 [8]                     JSR     PPIDE_RESET
DF5C 39               (      drivers.asm):00421 [5]                     RTS
                      (      drivers.asm):00422         
                      (      drivers.asm):00423         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00424         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00425         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00426         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00427         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00428         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00429         ;           operation.
                      (      drivers.asm):00430         ;
                      (      drivers.asm):00431         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00432         ;
                      (      drivers.asm):00433         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00434         ;                   (A) May be destroyed
                      (      drivers.asm):00435         ;                   (B) = Error condition
                      (      drivers.asm):00436         ;                   (Z) = 1 if no error
                      (      drivers.asm):00437         ;                       = 0 if an error
                      (      drivers.asm):00438         ;_____________________________________________________________________________________________________
DF5D                  (      drivers.asm):00439         RESTORE
DF5D 8672             (      drivers.asm):00440 [2]             LDA     #'r
DF5F BDDE4C           (      drivers.asm):00441 [8]             JSR     VOUTCH
DF62 8D14             (      drivers.asm):00442 [7]                     BSR     DRIVE
DF64 B6DE1F           (      drivers.asm):00443 [5]                     LDA     CURDRVTYP
DF67 8101             (      drivers.asm):00444 [2]                     CMPA    #$01
DF69 2708             (      drivers.asm):00445 [3]                     BEQ     RESTOREFLOPPY
DF6B 8102             (      drivers.asm):00446 [2]                     CMPA    #$02
DF6D 2706             (      drivers.asm):00447 [3]                     BEQ     RESTOREIDE
DF6F C61F             (      drivers.asm):00448 [2]     RESTOREERR:     LDB     #$1F
DF71 57               (      drivers.asm):00449 [2]                     ASRB
DF72 39               (      drivers.asm):00450 [5]                     RTS
DF73                  (      drivers.asm):00451         RESTOREFLOPPY:
DF73 20FA             (      drivers.asm):00452 [3]                     BRA     RESTOREERR
DF75                  (      drivers.asm):00453         RESTOREIDE:
DF75 C600             (      drivers.asm):00454 [2]                     LDB     #$00
DF77 39               (      drivers.asm):00455 [5]                     RTS
                      (      drivers.asm):00456         
                      (      drivers.asm):00457         
                      (      drivers.asm):00458         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00459         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00460         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00461         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00462         ;
                      (      drivers.asm):00463         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00464         ;
                      (      drivers.asm):00465         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00466         ;                   (A) May be destroyed
                      (      drivers.asm):00467         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00468         ;                       = Error condition otherwise
                      (      drivers.asm):00469         ;                   (Z) = 1 if no error
                      (      drivers.asm):00470         ;                       = 0 if an error
                      (      drivers.asm):00471         ;                   (C) = 0 if no error
                      (      drivers.asm):00472         ;                       = 1 if an error
                      (      drivers.asm):00473         ;_____________________________________________________________________________________________________
DF78                  (      drivers.asm):00474         DRIVE:
                      (      drivers.asm):00475         
DF78 8644             (      drivers.asm):00476 [2]             LDA     #'D
DF7A BDDE4C           (      drivers.asm):00477 [8]             JSR     VOUTCH
                      (      drivers.asm):00478         
DF7D A603             (      drivers.asm):00479 [4+1]                   LDA     3,X             ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF7F 8104             (      drivers.asm):00480 [2]                     CMPA    #4
DF81 2505             (      drivers.asm):00481 [3]                     BCS     DRIVE1
DF83                  (      drivers.asm):00482         DRIVEERR:
DF83 C61F             (      drivers.asm):00483 [2]                     LDB     #$1F
DF85 57               (      drivers.asm):00484 [2]                     ASRB
DF86 3590             (      drivers.asm):00485 [5+4]                   PULS    PC,X
                      (      drivers.asm):00486         
DF88 8EDE23           (      drivers.asm):00487 [3]     DRIVE1          LDX     #DRVTYPES
DF8B 3086             (      drivers.asm):00488 [4+1]                   LEAX    A,X             ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF8D E684             (      drivers.asm):00489 [4+0]                   LDB     ,X
DF8F C101             (      drivers.asm):00490 [2]                     CMPB    #$01            ; IF $01, OK
DF91 2706             (      drivers.asm):00491 [3]                     BEQ     >
DF93 C102             (      drivers.asm):00492 [2]                     CMPB    #$02            ; IF $02, OK
DF95 2702             (      drivers.asm):00493 [3]                     BEQ     >
DF97 20EA             (      drivers.asm):00494 [3]                     BRA     DRIVEERR
DF99 F7DE1F           (      drivers.asm):00495 [5]     !               STB     CURDRVTYP
DF9C B7DE1E           (      drivers.asm):00496 [5]                     STA     CURDRV
DF9F 8EDE27           (      drivers.asm):00497 [3]                     LDX     #DRVADDRESS
DFA2 3086             (      drivers.asm):00498 [4+1]                   LEAX    A,X             ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DFA4 E684             (      drivers.asm):00499 [4+0]                   LDB     ,X
DFA6 F7DE20           (      drivers.asm):00500 [5]                     STB     CURDRVADDRESS
DFA9 8EDE2B           (      drivers.asm):00501 [3]                     LDX     #DRVSLICE
DFAC 48               (      drivers.asm):00502 [2]                     LSLA                    ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DFAD 3086             (      drivers.asm):00503 [4+1]                   LEAX    A,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DFAF E684             (      drivers.asm):00504 [4+0]                   LDB     ,X
DFB1 F7DE21           (      drivers.asm):00505 [5]                     STB     CURDRVSLICE
DFB4 3001             (      drivers.asm):00506 [4+1]                   LEAX    1,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DFB6 E684             (      drivers.asm):00507 [4+0]                   LDB     ,X
DFB8 F7DE22           (      drivers.asm):00508 [5]                     STB     CURDRVSLICE+1
DFBB C600             (      drivers.asm):00509 [2]                     LDB     #$00
DFBD 39               (      drivers.asm):00510 [5]                     RTS
                      (      drivers.asm):00511         
                      (      drivers.asm):00512         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00513         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00514         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00515         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00516         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00517         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00518         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00519         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00520         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00521         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00522         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00523         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00524         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00525         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00526         ;
                      (      drivers.asm):00527         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00528         ;
                      (      drivers.asm):00529         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00530         ;                   (A) May be destroyed
                      (      drivers.asm):00531         ;                   (B) = Error condition
                      (      drivers.asm):00532         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00533         ;                       = 0 if not ready
                      (      drivers.asm):00534         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00535         ;                       = 1 if not ready
                      (      drivers.asm):00536         ;_____________________________________________________________________________________________________
DFBE                  (      drivers.asm):00537         CHKRDY
DFBE 3402             (      drivers.asm):00538 [5+1]           PSHS    A
DFC0 8643             (      drivers.asm):00539 [2]             LDA     #'C
DFC2 BDDE4C           (      drivers.asm):00540 [8]             JSR     VOUTCH
DFC5 3502             (      drivers.asm):00541 [5+1]           PULS    A
DFC7 20AF             (      drivers.asm):00542 [3]                     BRA     DRIVE
                      (      drivers.asm):00543         
                      (      drivers.asm):00544         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00545         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00546         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00547         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00548         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00549         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00550         ;_____________________________________________________________________________________________________
DFC9                  (      drivers.asm):00551         QUICK
DFC9 3402             (      drivers.asm):00552 [5+1]           PSHS    A
DFCB 8651             (      drivers.asm):00553 [2]             LDA     #'Q
DFCD BDDE4C           (      drivers.asm):00554 [8]             JSR     VOUTCH
DFD0 3502             (      drivers.asm):00555 [5+1]           PULS    A
DFD2 20A4             (      drivers.asm):00556 [3]                     BRA     DRIVE
                      (      drivers.asm):00557         
                      (      drivers.asm):00558         
                      (      drivers.asm):00559         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00560                         INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       =       $FE60           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         =       PPIDE_PPI+0     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         =       PPIDE_PPI+1     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      =       PPIDE_PPI+2     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       =       PPIDE_PPI+3     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   =       $01             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   =       $02             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   =       $04             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  =       $08             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  =       $10             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   =       $20             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   =       $40             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  =       $80             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA              =       PPIDE_CS0_LINE
     0009             (   flexidedrv.asm):00028         PPIDE_ERR               =       PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   =       PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (   flexidedrv.asm):00030         PPIDE_LBALOW    =       PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (   flexidedrv.asm):00031         PPIDE_LBAMID    =       PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (   flexidedrv.asm):00032         PPIDE_LBAHI             =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (   flexidedrv.asm):00033         PPIDE_DEVICE    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (   flexidedrv.asm):00034         PPIDE_COMMAND   =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (   flexidedrv.asm):00035         PPIDE_STATUS    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (   flexidedrv.asm):00036         PPIDE_CONTROL   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (   flexidedrv.asm):00037         PPIDE_ASTATUS   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL =       $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  =       $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE =       $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  =       $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    =       $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN=     $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP=       $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   =       %10010010       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   =       %10000000       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DFD4 00               (   flexidedrv.asm):00054         PPIDEINDEX:             .BYTE   $00
DFD5 0000             (   flexidedrv.asm):00055         PPIDETIMEOUT:   .BYTE   $00,$00
DFD7 0000             (   flexidedrv.asm):00056         PPIDEWORKVAR:   .BYTE   $00,$00
                      (   flexidedrv.asm):00057         
                      (   flexidedrv.asm):00058         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00059         ;
                      (   flexidedrv.asm):00060         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00061         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00062         ;
DFD9                  (   flexidedrv.asm):00063         PPIDE_INIT:
DFD9 8EE31C           (   flexidedrv.asm):00064 [3]             LDX     #MESSAGE1
DFDC BDCE7B           (   flexidedrv.asm):00065 [8]             JSR     >PDATA1         ; DO PROMPT
DFDF BDCEAF           (   flexidedrv.asm):00066 [8]             JSR     >PCRLF         ; AND CRLF
DFE2 BDE0C4           (   flexidedrv.asm):00067 [8]                 JSR     IDE_PPIDETECT       ; TEST FOR PPI HARDWARE
DFE5 261D             (   flexidedrv.asm):00068 [3]             BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00069         ;
DFE7 8EE324           (   flexidedrv.asm):00070 [3]             LDX     #MESSAGE2
DFEA BDCE7B           (   flexidedrv.asm):00071 [8]             JSR     >PDATA1         ; DO PROMPT
DFED CCFE60           (   flexidedrv.asm):00072 [3]                 LDD     #PPIDE_PPI      ; GET BASE PORT
DFF0 FDDFD7           (   flexidedrv.asm):00073 [6]                     STD     PPIDEWORKVAR
DFF3 8EDFD7           (   flexidedrv.asm):00074 [3]                     LDX     #PPIDEWORKVAR
DFF6 BDCFCA           (   flexidedrv.asm):00075 [8]                 JSR     OUTADR                      ; PRINT BASE PORT
                      (   flexidedrv.asm):00076         ;
DFF9 BDE19E           (   flexidedrv.asm):00077 [8]                 JSR     PPIDE_RESET         ; RESET THE BUS
DFFC BDE02A           (   flexidedrv.asm):00078 [8]                 JSR     PPIDE_PROBE         ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
DFFF 2503             (   flexidedrv.asm):00079 [3]                 BCS         IDE_ABORT
E001 7EE00D           (   flexidedrv.asm):00080 [4]                 JMP         IDE_PRINT_INFO
E004                  (   flexidedrv.asm):00081         IDE_ABORT:
E004 8EE32B           (   flexidedrv.asm):00082 [3]             LDX     #MESSAGE3
E007 BDCE7B           (   flexidedrv.asm):00083 [8]             JSR     >PDATA1         ; DO PROMPT
E00A 7EE026           (   flexidedrv.asm):00084 [4]                 JMP         IDE_INITA
E00D                  (   flexidedrv.asm):00085         IDE_PRINT_INFO:
E00D BDCEAF           (   flexidedrv.asm):00086 [8]                 JSR     >PCRLF         ; AND CRLF
E010 8EE338           (   flexidedrv.asm):00087 [3]             LDX     #MESSAGE4
E013 BDCE7B           (   flexidedrv.asm):00088 [8]             JSR     >PDATA1         ; DO PROMPT
E016 8600             (   flexidedrv.asm):00089 [2]                 LDA     #$00
E018 BDE075           (   flexidedrv.asm):00090 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
E01B 8EE349           (   flexidedrv.asm):00091 [3]             LDX     #MESSAGE5
E01E BDCE7B           (   flexidedrv.asm):00092 [8]             JSR     >PDATA1         ; DO PROMPT
E021 8601             (   flexidedrv.asm):00093 [2]                 LDA     #$01
E023 BDE075           (   flexidedrv.asm):00094 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
E026                  (   flexidedrv.asm):00095         IDE_INITA:
E026 BDCEAF           (   flexidedrv.asm):00096 [8]                 JSR     >PCRLF         ; AND CRLF
E029 39               (   flexidedrv.asm):00097 [5]                 RTS                                 ; DONE
                      (   flexidedrv.asm):00098         ;
                      (   flexidedrv.asm):00099         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00100         ;
                      (   flexidedrv.asm):00101         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00102         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00103         ;
E02A                  (   flexidedrv.asm):00104         PPIDE_PROBE:
                      (   flexidedrv.asm):00105         ;
                      (   flexidedrv.asm):00106                 ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00107                 ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00108                 ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00109                 ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00110                 ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00111                 ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00112                 ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00113                 ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00114         
E02A 8600             (   flexidedrv.asm):00115 [2]             LDA     #$00
E02C B7FE60           (   flexidedrv.asm):00116 [5]             STA     PPIDELO                 ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00117         
E02F BDE1C9           (   flexidedrv.asm):00118 [8]             JSR         IDE_WAIT_NOT_BUSY   ; WAIT FOR BUSY TO CLEAR
E032 253E             (   flexidedrv.asm):00119 [3]             BCS     PPIDE_PROBE_FAIL        ; IF TIMEOUT, REPORT NO IDE PRESENT
E034 860F             (   flexidedrv.asm):00120 [2]             LDA         #PPIDE_STATUS               ; GET STATUS
E036 BDE2B9           (   flexidedrv.asm):00121 [8]             JSR         IDE_READ
E039 1F18             (   flexidedrv.asm):00122 [6]         TFR     X,A
E03B 8440             (   flexidedrv.asm):00123 [2]             ANDA    #%01000000
E03D 8100             (   flexidedrv.asm):00124 [2]             CMPA    #$00
E03F 2731             (   flexidedrv.asm):00125 [3]             BEQ     PPIDE_PROBE_FAIL        ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00126         
                      (   flexidedrv.asm):00127                 ; CHECK SIGNATURE
E041 860A             (   flexidedrv.asm):00128 [2]             LDA         #PPIDE_SEC_CNT
E043 BDE2B9           (   flexidedrv.asm):00129 [8]             JSR         IDE_READ
E046 1F18             (   flexidedrv.asm):00130 [6]         TFR     X,A
E048 8101             (   flexidedrv.asm):00131 [2]             CMPA    #$01
E04A 2626             (   flexidedrv.asm):00132 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E04C 860B             (   flexidedrv.asm):00133 [2]             LDA         #PPIDE_LBALOW
E04E BDE2B9           (   flexidedrv.asm):00134 [8]             JSR         IDE_READ
E051 1F18             (   flexidedrv.asm):00135 [6]         TFR     X,A
E053 8101             (   flexidedrv.asm):00136 [2]             CMPA    #$01
E055 261B             (   flexidedrv.asm):00137 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
E057 860C             (   flexidedrv.asm):00138 [2]             LDA         #PPIDE_LBAMID
E059 BDE2B9           (   flexidedrv.asm):00139 [8]             JSR         IDE_READ
E05C 1F18             (   flexidedrv.asm):00140 [6]         TFR     X,A
E05E 8100             (   flexidedrv.asm):00141 [2]             CMPA    #$00
E060 2610             (   flexidedrv.asm):00142 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E062 860D             (   flexidedrv.asm):00143 [2]             LDA         #PPIDE_LBAHI
E064 BDE2B9           (   flexidedrv.asm):00144 [8]             JSR         IDE_READ
E067 1F18             (   flexidedrv.asm):00145 [6]         TFR     X,A
E069 8100             (   flexidedrv.asm):00146 [2]             CMPA    #$00
E06B 2605             (   flexidedrv.asm):00147 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E06D 1CFE             (   flexidedrv.asm):00148 [3]             CLC
E06F 7EE074           (   flexidedrv.asm):00149 [4]             JMP     PPIDE_PROBE_SUCCESS
E072                  (   flexidedrv.asm):00150         PPIDE_PROBE_FAIL:
E072 1A01             (   flexidedrv.asm):00151 [3]             SEC
E074                  (   flexidedrv.asm):00152         PPIDE_PROBE_SUCCESS:
E074 39               (   flexidedrv.asm):00153 [5]             RTS                                     ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00154         
                      (   flexidedrv.asm):00155         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00156         ;*
                      (   flexidedrv.asm):00157         ;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00158         ;*      CARRY SET ON ERROR
                      (   flexidedrv.asm):00159         ;*      A=MST/SLV
                      (   flexidedrv.asm):00160         ;*____________________________________________________________________________________________________
E075                  (   flexidedrv.asm):00161         IDE_READ_INFO:
                      (   flexidedrv.asm):00162                         ; SET DRIVE BIT
E075 8401             (   flexidedrv.asm):00163 [2]                     ANDA    #$01                    ; ONLY WANT THE 1 BIT (MST/SLV)
E077 48               (   flexidedrv.asm):00164 [2]                     ASLA                            ; SHIFT 4
E078 48               (   flexidedrv.asm):00165 [2]                     ASLA                            ;
E079 48               (   flexidedrv.asm):00166 [2]                     ASLA                            ;
E07A 48               (   flexidedrv.asm):00167 [2]                     ASLA                            ;
E07B 8AE0             (   flexidedrv.asm):00168 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E07D 1F89             (   flexidedrv.asm):00169 [6]                     TFR     A,B
E07F 8600             (   flexidedrv.asm):00170 [2]             LDA     #$00
E081 1F01             (   flexidedrv.asm):00171 [6]             TFR     D,X
E083 860E             (   flexidedrv.asm):00172 [2]                     LDA         #PPIDE_DEVICE
E085 BDE2DE           (   flexidedrv.asm):00173 [8]                     JSR         IDE_WRITE
E088 BDE1C9           (   flexidedrv.asm):00174 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E08B 2525             (   flexidedrv.asm):00175 [3]                     BCS         IDE_READ_INFO_ABORT
E08D 860F             (   flexidedrv.asm):00176 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E08F 8E00EC           (   flexidedrv.asm):00177 [3]                     LDX         #PPIDE_CMD_ID
E092 BDE2DE           (   flexidedrv.asm):00178 [8]                     JSR         IDE_WRITE           ;ASK THE DRIVE TO READ IT
E095 BDE1F2           (   flexidedrv.asm):00179 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E098 2518             (   flexidedrv.asm):00180 [3]                     BCS         IDE_READ_INFO_ABORT
E09A BDE222           (   flexidedrv.asm):00181 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E09D 8EE35A           (   flexidedrv.asm):00182 [3]             LDX     #MESSAGE6
E0A0 BDCE7B           (   flexidedrv.asm):00183 [8]             JSR     >PDATA1
E0A3 8EE3DD           (   flexidedrv.asm):00184 [3]                     LDX     #HSTBUF+122
E0A6 BDCFCA           (   flexidedrv.asm):00185 [8]                     JSR     OUTADR
E0A9 8EE3DB           (   flexidedrv.asm):00186 [3]                     LDX     #HSTBUF+120
E0AC BDCFCA           (   flexidedrv.asm):00187 [8]                     JSR     OUTADR
E0AF 7EE0BE           (   flexidedrv.asm):00188 [4]                     JMP     IDE_READ_INFO_OK
E0B2                  (   flexidedrv.asm):00189         IDE_READ_INFO_ABORT:
E0B2 8EE32B           (   flexidedrv.asm):00190 [3]             LDX     #MESSAGE3
E0B5 BDCE7B           (   flexidedrv.asm):00191 [8]             JSR     >PDATA1         DO PROMPT
E0B8 BDCEAF           (   flexidedrv.asm):00192 [8]                     JSR     >PCRLF         AND CRLF
E0BB 1A01             (   flexidedrv.asm):00193 [3]                     SEC
E0BD 39               (   flexidedrv.asm):00194 [5]                     RTS                             ;
E0BE                  (   flexidedrv.asm):00195         IDE_READ_INFO_OK:
E0BE BDCEAF           (   flexidedrv.asm):00196 [8]                     JSR     >PCRLF         AND CRLF
E0C1 1CFE             (   flexidedrv.asm):00197 [3]                     CLC
E0C3 39               (   flexidedrv.asm):00198 [5]                     RTS
                      (   flexidedrv.asm):00199         
                      (   flexidedrv.asm):00200         
                      (   flexidedrv.asm):00201         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00202         ;
                      (   flexidedrv.asm):00203         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00204         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00205         ;
E0C4                  (   flexidedrv.asm):00206         IDE_PPIDETECT:
                      (   flexidedrv.asm):00207         ;
                      (   flexidedrv.asm):00208                 ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00209                 ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00210                 ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00211                 ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00212                 ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00213                 ; INTERFERE WITH THE VALUE BEING READ.
E0C4 BDE30E           (   flexidedrv.asm):00214 [8]             JSR         SET_PPI_WR
                      (   flexidedrv.asm):00215         ;
E0C7 8600             (   flexidedrv.asm):00216 [2]             LDA     #$00                    ; VALUE ZERO
E0C9 B7FE60           (   flexidedrv.asm):00217 [5]             STA         PPIDELO                     ; PUSH VALUE TO PORT
E0CC B6FE60           (   flexidedrv.asm):00218 [5]             LDA         PPIDELO                     ; GET PORT VALUE
E0CF 8100             (   flexidedrv.asm):00219 [2]         CMPA    #$00
E0D1 39               (   flexidedrv.asm):00220 [5]             RTS                             ; AND RETURN
                      (   flexidedrv.asm):00221         ;
                      (   flexidedrv.asm):00222         
                      (   flexidedrv.asm):00223         
                      (   flexidedrv.asm):00224         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00225         ;*
                      (   flexidedrv.asm):00226         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00227         ;*
                      (   flexidedrv.asm):00228         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00229         ;                   (A) = Track Number
                      (   flexidedrv.asm):00230         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00231         ;
                      (   flexidedrv.asm):00232         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00233         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00234         ;                   (B) = Error condition
                      (   flexidedrv.asm):00235         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00236         ;                       = 0 if an error
                      (   flexidedrv.asm):00237         ;*____________________________________________________________________________________________________
E0D2                  (   flexidedrv.asm):00238         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00239                 ;       PRTDBG "IDE READ SECTOR$"
E0D2 3420             (   flexidedrv.asm):00240 [5+2]           PSHS    Y
E0D4 3410             (   flexidedrv.asm):00241 [5+2]           PSHS    X
E0D6 1F92             (   flexidedrv.asm):00242 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E0D8 BDE0F8           (   flexidedrv.asm):00243 [8]                     JSR     IDE_READ_RAW_SECTOR
E0DB 3510             (   flexidedrv.asm):00244 [5+2]           PULS    X
E0DD 2617             (   flexidedrv.asm):00245 [3]             BNE     IDE_READ_SECTOR_ERROR
                      (   flexidedrv.asm):00246         
E0DF 1F28             (   flexidedrv.asm):00247 [6]             TFR     Y,A
E0E1 8401             (   flexidedrv.asm):00248 [2]             ANDA    #$01
E0E3 C600             (   flexidedrv.asm):00249 [2]             LDB     #$00
E0E5 1F02             (   flexidedrv.asm):00250 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E0E7 C600             (   flexidedrv.asm):00251 [2]             LDB     #$00                   ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00252         !
E0E9 A6A9E363         (   flexidedrv.asm):00253 [4+4]           LDA     HSTBUF,Y
E0ED A780             (   flexidedrv.asm):00254 [4+2]           STA     ,X+
E0EF 3121             (   flexidedrv.asm):00255 [5]             INY
E0F1 5C               (   flexidedrv.asm):00256 [2]             INCB
E0F2 C100             (   flexidedrv.asm):00257 [2]             CMPB    #$00
E0F4 26F3             (   flexidedrv.asm):00258 [3]             BNE <
E0F6                  (   flexidedrv.asm):00259         IDE_READ_SECTOR_ERROR:
E0F6 35A0             (   flexidedrv.asm):00260 [5+4]           PULS    PC,Y
                      (   flexidedrv.asm):00261         
E0F8                  (   flexidedrv.asm):00262         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00263                 ;       PRTDBG "IDE READ RAW SECTOR$"
E0F8 BDE295           (   flexidedrv.asm):00264 [8]                     JSR         IDE_CONVERT_SECTOR  ;
E0FB B6E362           (   flexidedrv.asm):00265 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E0FE B1E35F           (   flexidedrv.asm):00266 [5]                     CMPA    CDEBSEHD                ;
E101 2613             (   flexidedrv.asm):00267 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E103 B6E361           (   flexidedrv.asm):00268 [5]                     LDA         DEBCYLM                     ;
E106 B1E35E           (   flexidedrv.asm):00269 [5]                     CMPA    CDEBCYLM                ;
E109 260B             (   flexidedrv.asm):00270 [3]                     BNE         IDE_READ_SECTOR_DIRTY
E10B B6E360           (   flexidedrv.asm):00271 [5]                     LDA         DEBCYLL                     ;
E10E B1E35D           (   flexidedrv.asm):00272 [5]                     CMPA    CDEBCYLL                ;
E111 2603             (   flexidedrv.asm):00273 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E113 C600             (   flexidedrv.asm):00274 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E115 39               (   flexidedrv.asm):00275 [5]                     RTS
                      (   flexidedrv.asm):00276         
E116                  (   flexidedrv.asm):00277         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00278                 ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E116 BDE1C9           (   flexidedrv.asm):00279 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E119 2528             (   flexidedrv.asm):00280 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E11B                  (   flexidedrv.asm):00281         IDE_READ_SECTOR_DIRTY1:
E11B BDE252           (   flexidedrv.asm):00282 [8]                     JSR         IDE_SETUP_LBA               ;TELL IT WHICH SECTOR WE WANT
E11E 860F             (   flexidedrv.asm):00283 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E120 8E0020           (   flexidedrv.asm):00284 [3]                     LDX         #PPIDE_CMD_READ
E123 BDE2DE           (   flexidedrv.asm):00285 [8]                     JSR         IDE_WRITE                   ;ASK THE DRIVE TO READ IT
E126 BDE1F2           (   flexidedrv.asm):00286 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E129 2518             (   flexidedrv.asm):00287 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E12B BDE222           (   flexidedrv.asm):00288 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E12E B6E362           (   flexidedrv.asm):00289 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E131 B7E35F           (   flexidedrv.asm):00290 [5]                     STA         CDEBSEHD            ;
E134 B6E360           (   flexidedrv.asm):00291 [5]                     LDA         DEBCYLL                     ;
E137 B7E35D           (   flexidedrv.asm):00292 [5]                     STA         CDEBCYLL            ;
E13A B6E361           (   flexidedrv.asm):00293 [5]                     LDA         DEBCYLM                     ;
E13D B7E35E           (   flexidedrv.asm):00294 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00295         
E140 C600             (   flexidedrv.asm):00296 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E142 39               (   flexidedrv.asm):00297 [5]                     RTS
E143                  (   flexidedrv.asm):00298         IDE_READ_SECTOR_DIRTY_ERROR:
E143 C60F             (   flexidedrv.asm):00299 [2]                     LDB         #$0F                        ; SET ERROR CONDITION
E145 39               (   flexidedrv.asm):00300 [5]                     RTS
                      (   flexidedrv.asm):00301         
                      (   flexidedrv.asm):00302         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00303         ;*
                      (   flexidedrv.asm):00304         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00305         ;*
                      (   flexidedrv.asm):00306         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00307         ;                   (A) = Track Number
                      (   flexidedrv.asm):00308         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00309         ;
                      (   flexidedrv.asm):00310         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00311         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00312         ;                   (B) = Error condition
                      (   flexidedrv.asm):00313         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00314         ;                       = 0 if an error
                      (   flexidedrv.asm):00315         ;*____________________________________________________________________________________________________
E146                  (   flexidedrv.asm):00316         IDE_WRITE_SECTOR:
E146 3420             (   flexidedrv.asm):00317 [5+2]           PSHS    Y
                      (   flexidedrv.asm):00318         
E148 3410             (   flexidedrv.asm):00319 [5+2]           PSHS    X
E14A 1F92             (   flexidedrv.asm):00320 [6]             TFR     B,Y                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00321         
                      (   flexidedrv.asm):00322                 ;       PRTDBG "IDE WRITE SECTOR$"
E14C BDE0F8           (   flexidedrv.asm):00323 [8]                     JSR         IDE_READ_RAW_SECTOR     ; DETERMINE PHYSICAL SECTOR
E14F 2640             (   flexidedrv.asm):00324 [3]             BNE     IDE_WRITE_SECTOR_ERROR
                      (   flexidedrv.asm):00325         
E151 1F28             (   flexidedrv.asm):00326 [6]             TFR     Y,A
E153 8401             (   flexidedrv.asm):00327 [2]             ANDA    #$01
E155 C600             (   flexidedrv.asm):00328 [2]             LDB     #$00
E157 1F02             (   flexidedrv.asm):00329 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E159 C600             (   flexidedrv.asm):00330 [2]             LDB     #$00                   ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00331         !
E15B A680             (   flexidedrv.asm):00332 [4+2]           LDA     ,X+
E15D A7A9E363         (   flexidedrv.asm):00333 [4+4]           STA     HSTBUF,Y
E161 3121             (   flexidedrv.asm):00334 [5]             INY
E163 5C               (   flexidedrv.asm):00335 [2]             INCB
E164 C100             (   flexidedrv.asm):00336 [2]             CMPB    #$00
E166 26F3             (   flexidedrv.asm):00337 [3]             BNE <
                      (   flexidedrv.asm):00338         
E168 BDE1C9           (   flexidedrv.asm):00339 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E16B 2524             (   flexidedrv.asm):00340 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E16D 860F             (   flexidedrv.asm):00341 [2]                     LDA         #PPIDE_COMMAND
E16F 8E0030           (   flexidedrv.asm):00342 [3]                     LDX         #PPIDE_CMD_WRITE
E172 BDE2DE           (   flexidedrv.asm):00343 [8]                     JSR         IDE_WRITE           ;TELL DRIVE TO WRITE A SECTOR
E175 BDE1F2           (   flexidedrv.asm):00344 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNIT IT WANTS THE DATA
E178 2517             (   flexidedrv.asm):00345 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E17A BDE23A           (   flexidedrv.asm):00346 [8]                     JSR         IDE_WRITE_BUFFER    ;GIVE THE DATA TO THE DRIVE
E17D BDE1C9           (   flexidedrv.asm):00347 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;WAIT UNTIL THE WRITE IS COMPLETE
E180 250F             (   flexidedrv.asm):00348 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E182 86FF             (   flexidedrv.asm):00349 [2]                     LDA         #$FF                        ; STORE CURRENT PARMS
E184 B7E35F           (   flexidedrv.asm):00350 [5]                     STA         CDEBSEHD            ;
E187 B7E35D           (   flexidedrv.asm):00351 [5]                     STA         CDEBCYLL            ;
E18A B7E35E           (   flexidedrv.asm):00352 [5]                     STA         CDEBCYLM            ;
E18D C600             (   flexidedrv.asm):00353 [2]                     LDB         #$00                        ; ZERO ON RETURN = OPERATION OK
E18F 35A0             (   flexidedrv.asm):00354 [5+4]                   PULS    PC,Y
E191                  (   flexidedrv.asm):00355         IDE_WRITE_SECTOR_ERROR:
E191 C6FF             (   flexidedrv.asm):00356 [2]                     LDB         #$FF                        ; 1 ON RETURN = OPERATION FAIL
E193 F7E35F           (   flexidedrv.asm):00357 [5]             STB         CDEBSEHD            ;
E196 F7E35D           (   flexidedrv.asm):00358 [5]                     STB         CDEBCYLL            ;
E199 F7E35E           (   flexidedrv.asm):00359 [5]                     STB         CDEBCYLM            ;
E19C 35A0             (   flexidedrv.asm):00360 [5+4]                   PULS    PC,Y
                      (   flexidedrv.asm):00361         
                      (   flexidedrv.asm):00362         ;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00363         ;*
                      (   flexidedrv.asm):00364         ;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00365         ;*
                      (   flexidedrv.asm):00366         ;*____________________________________________________________________________________________________
E19E                  (   flexidedrv.asm):00367         PPIDE_RESET:
                      (   flexidedrv.asm):00368           ;     PRTDBG "IDE RESET$"
E19E 8600             (   flexidedrv.asm):00369 [2]                     LDA         #$00
E1A0 B7E362           (   flexidedrv.asm):00370 [5]                     STA         DEBSEHD
E1A3 B7E360           (   flexidedrv.asm):00371 [5]                     STA         DEBCYLL
E1A6 B7E361           (   flexidedrv.asm):00372 [5]                     STA         DEBCYLM
E1A9 86FF             (   flexidedrv.asm):00373 [2]                     LDA         #$FF                        ;
E1AB B7E35F           (   flexidedrv.asm):00374 [5]                     STA         CDEBSEHD            ;
E1AE B7E35D           (   flexidedrv.asm):00375 [5]                     STA         CDEBCYLL            ;
E1B1 B7E35E           (   flexidedrv.asm):00376 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00377         
E1B4 8680             (   flexidedrv.asm):00378 [2]                     LDA         #PPIDE_RST_LINE
E1B6 B7FE62           (   flexidedrv.asm):00379 [5]                     STA         PPIDECNTRL                  ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00380         
E1B9 8E0100           (   flexidedrv.asm):00381 [3]                     LDX         #$0100
                      (   flexidedrv.asm):00382         ;       PRTDBG "IDE RESET DELAY$"
E1BC                  (   flexidedrv.asm):00383         RST_DLY:
E1BC 301F             (   flexidedrv.asm):00384 [5]                     DEX
E1BE 8C0000           (   flexidedrv.asm):00385 [4]                     CPX         #$0000
E1C1 26F9             (   flexidedrv.asm):00386 [3]                     BNE         RST_DLY
E1C3 8600             (   flexidedrv.asm):00387 [2]                     LDA         #$00
E1C5 B7FE62           (   flexidedrv.asm):00388 [5]                     STA         PPIDECNTRL                  ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00389         
                      (   flexidedrv.asm):00390         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00391         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00392                 IF USEDSKYNG = 1
                      (   flexidedrv.asm):00393                         JSR     DSKY_REINIT
                      (   flexidedrv.asm):00394                 ENDC
                      (   flexidedrv.asm):00395         
E1C8 39               (   flexidedrv.asm):00396 [5]                     RTS
                      (   flexidedrv.asm):00397         
                      (   flexidedrv.asm):00398         
                      (   flexidedrv.asm):00399         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00400         ;*
                      (   flexidedrv.asm):00401         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00402         ;*
                      (   flexidedrv.asm):00403         ;*____________________________________________________________________________________________________
E1C9                  (   flexidedrv.asm):00404         IDE_WAIT_NOT_BUSY:
E1C9 3412             (   flexidedrv.asm):00405 [5+3]                   PSHS    X,A
E1CB 8600             (   flexidedrv.asm):00406 [2]                     LDA     #$00
E1CD B7DFD5           (   flexidedrv.asm):00407 [5]                     STA     PPIDETIMEOUT
E1D0 B7DFD6           (   flexidedrv.asm):00408 [5]                     STA     PPIDETIMEOUT+1
E1D3                  (   flexidedrv.asm):00409         IDE_WAIT_NOT_BUSY1:
E1D3 860F             (   flexidedrv.asm):00410 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR RDY BIT TO BE SET
E1D5 BDE2B9           (   flexidedrv.asm):00411 [8]                     JSR         IDE_READ
E1D8 1F18             (   flexidedrv.asm):00412 [6]             TFR     X,A
E1DA 8480             (   flexidedrv.asm):00413 [2]                     ANDA    #$80
E1DC 270F             (   flexidedrv.asm):00414 [3]                     BEQ         IDE_WAIT_NOT_BUSY2
E1DE 7CDFD5           (   flexidedrv.asm):00415 [7]                     INC     PPIDETIMEOUT
E1E1 26F0             (   flexidedrv.asm):00416 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1E3 7CDFD6           (   flexidedrv.asm):00417 [7]                     INC     PPIDETIMEOUT+1
E1E6 26EB             (   flexidedrv.asm):00418 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1E8 1A01             (   flexidedrv.asm):00419 [3]                     SEC
E1EA 7EE1EF           (   flexidedrv.asm):00420 [4]                     JMP         IDE_WAIT_NOT_BUSY3
E1ED                  (   flexidedrv.asm):00421         IDE_WAIT_NOT_BUSY2:
E1ED 1CFE             (   flexidedrv.asm):00422 [3]                     CLC
E1EF                  (   flexidedrv.asm):00423         IDE_WAIT_NOT_BUSY3:
E1EF 3592             (   flexidedrv.asm):00424 [5+5]           PULS    PC,X,A
E1F1 39               (   flexidedrv.asm):00425 [5]                     RTS
                      (   flexidedrv.asm):00426         
                      (   flexidedrv.asm):00427         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00428         ;*
                      (   flexidedrv.asm):00429         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00430         ;*
                      (   flexidedrv.asm):00431         ;*____________________________________________________________________________________________________
E1F2                  (   flexidedrv.asm):00432         IDE_WAIT_DRQ:
E1F2 3432             (   flexidedrv.asm):00433 [5+5]           PSHS    A,X,Y
E1F4 8600             (   flexidedrv.asm):00434 [2]                     LDA     #$00
E1F6 B7DFD5           (   flexidedrv.asm):00435 [5]                     STA     PPIDETIMEOUT
E1F9 B7DFD6           (   flexidedrv.asm):00436 [5]                     STA     PPIDETIMEOUT+1
E1FC                  (   flexidedrv.asm):00437         IDE_WAIT_DRQ1:
E1FC 860F             (   flexidedrv.asm):00438 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR DRQ BIT TO BE SET
E1FE BDE2B9           (   flexidedrv.asm):00439 [8]                     JSR         IDE_READ
E201 1F18             (   flexidedrv.asm):00440 [6]                     TFR     X,A
E203 8488             (   flexidedrv.asm):00441 [2]                     ANDA    #%10001000              ; MASK OFF BUSY(7) AND DRQ(3)
E205 8108             (   flexidedrv.asm):00442 [2]                     CMPA    #%00001000              ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E207 2715             (   flexidedrv.asm):00443 [3]                     BEQ         IDE_WAIT_DRQ2
E209 8401             (   flexidedrv.asm):00444 [2]                     ANDA    #%00000001              ; IS ERROR?
E20B 8101             (   flexidedrv.asm):00445 [2]                     CMPA    #%00000001              ;
E20D 270A             (   flexidedrv.asm):00446 [3]                     BEQ     IDE_WAIT_DRQE
E20F 7CDFD5           (   flexidedrv.asm):00447 [7]                     INC     PPIDETIMEOUT
E212 26E8             (   flexidedrv.asm):00448 [3]                     BNE     IDE_WAIT_DRQ1
E214 7CDFD6           (   flexidedrv.asm):00449 [7]                     INC     PPIDETIMEOUT+1
E217 26E3             (   flexidedrv.asm):00450 [3]                     BNE     IDE_WAIT_DRQ1
E219                  (   flexidedrv.asm):00451         IDE_WAIT_DRQE:
E219 1A01             (   flexidedrv.asm):00452 [3]                     SEC
E21B 7EE220           (   flexidedrv.asm):00453 [4]                     JMP     IDE_WAIT_DRQ3
E21E                  (   flexidedrv.asm):00454         IDE_WAIT_DRQ2:
E21E 1CFE             (   flexidedrv.asm):00455 [3]                     CLC
E220                  (   flexidedrv.asm):00456         IDE_WAIT_DRQ3:
E220 35B2             (   flexidedrv.asm):00457 [5+7]           PULS    PC,A,X,Y
                      (   flexidedrv.asm):00458         
                      (   flexidedrv.asm):00459         
                      (   flexidedrv.asm):00460         
                      (   flexidedrv.asm):00461         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00462         ;*
                      (   flexidedrv.asm):00463         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00464         ;*
                      (   flexidedrv.asm):00465         ;*____________________________________________________________________________________________________
E222                  (   flexidedrv.asm):00466         IDE_READ_BUFFER:
E222 108E0000         (   flexidedrv.asm):00467 [4]                     LDY     #$0000                  ; INDEX
E226                  (   flexidedrv.asm):00468         IDEBUFRD:
E226 8608             (   flexidedrv.asm):00469 [2]                     LDA         #PPIDE_DATA
E228 BDE2BC           (   flexidedrv.asm):00470 [8]                     JSR         IDE_READ_NO_SETUP
E22B AFA9E363         (   flexidedrv.asm):00471 [5+4]                   STX         HSTBUF,Y            ;
E22F 3121             (   flexidedrv.asm):00472 [5]             INY
E231 3121             (   flexidedrv.asm):00473 [5]             INY
E233 108C0200         (   flexidedrv.asm):00474 [5]                     CMPY    #$0200                  ;
E237 26ED             (   flexidedrv.asm):00475 [3]                     BNE         IDEBUFRD            ;
E239 39               (   flexidedrv.asm):00476 [5]                     RTS                             ;
                      (   flexidedrv.asm):00477         
                      (   flexidedrv.asm):00478         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00479         ;*
                      (   flexidedrv.asm):00480         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00481         ;*
                      (   flexidedrv.asm):00482         ;*____________________________________________________________________________________________________
E23A                  (   flexidedrv.asm):00483         IDE_WRITE_BUFFER:
E23A 108E0000         (   flexidedrv.asm):00484 [4]                     LDY     #$0000                  ; INDEX
E23E                  (   flexidedrv.asm):00485         IDEBUFWT:
E23E AEA9E363         (   flexidedrv.asm):00486 [5+4]                   LDX     HSTBUF,Y                ; SECTORS ARE BIG ENDIAN
E242 3121             (   flexidedrv.asm):00487 [5]                     INY                                     ;
E244 3121             (   flexidedrv.asm):00488 [5]                     INY
E246 8608             (   flexidedrv.asm):00489 [2]                     LDA         #PPIDE_DATA
E248 BDE2DE           (   flexidedrv.asm):00490 [8]                     JSR         IDE_WRITE
E24B 108C0200         (   flexidedrv.asm):00491 [5]                     CMPY    #$0200                  ;
E24F 26ED             (   flexidedrv.asm):00492 [3]                     BNE         IDEBUFWT            ;
E251 39               (   flexidedrv.asm):00493 [5]                     RTS                                     ;
                      (   flexidedrv.asm):00494         
                      (   flexidedrv.asm):00495         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00496         ;*
                      (   flexidedrv.asm):00497         ;*  SETUP LBA DATA
                      (   flexidedrv.asm):00498         ;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00499         ;*____________________________________________________________________________________________________
E252                  (   flexidedrv.asm):00500         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00501         ;               PRTDBG "PPIDE SETUP LBA$"
E252 B6DE20           (   flexidedrv.asm):00502 [5]             LDA     CURDRVADDRESS
E255 8401             (   flexidedrv.asm):00503 [2]                     ANDA    #$01                    ; ONLY WANT DRIVE CFG
E257 48               (   flexidedrv.asm):00504 [2]                     ASLA                                ; SHIFT 4
E258 48               (   flexidedrv.asm):00505 [2]                     ASLA                                ;
E259 48               (   flexidedrv.asm):00506 [2]                     ASLA                                ;
E25A 48               (   flexidedrv.asm):00507 [2]                     ASLA                                ;
E25B 8AE0             (   flexidedrv.asm):00508 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E25D 1F89             (   flexidedrv.asm):00509 [6]                     TFR     A,B
E25F 8600             (   flexidedrv.asm):00510 [2]             LDA     #$00
E261 1F01             (   flexidedrv.asm):00511 [6]                     TFR     D,X
E263 860E             (   flexidedrv.asm):00512 [2]                     LDA         #PPIDE_DEVICE
E265 BDE2DE           (   flexidedrv.asm):00513 [8]                     JSR         IDE_WRITE
E268 8600             (   flexidedrv.asm):00514 [2]             LDA     #$00
E26A F6E361           (   flexidedrv.asm):00515 [5]                     LDB     DEBCYLM
E26D 1F01             (   flexidedrv.asm):00516 [6]                     TFR     D,X
E26F 860D             (   flexidedrv.asm):00517 [2]                     LDA         #PPIDE_LBAHI
E271 BDE2DE           (   flexidedrv.asm):00518 [8]                     JSR         IDE_WRITE
E274 8600             (   flexidedrv.asm):00519 [2]             LDA     #$00
E276 F6E360           (   flexidedrv.asm):00520 [5]                     LDB     DEBCYLL                 ;
E279 1F01             (   flexidedrv.asm):00521 [6]                     TFR     D,X
E27B 860C             (   flexidedrv.asm):00522 [2]                     LDA         #PPIDE_LBAMID
E27D BDE2DE           (   flexidedrv.asm):00523 [8]                     JSR         IDE_WRITE
E280 8600             (   flexidedrv.asm):00524 [2]             LDA     #$00
E282 F6E362           (   flexidedrv.asm):00525 [5]                     LDB     DEBSEHD                 ;
E285 1F01             (   flexidedrv.asm):00526 [6]                     TFR     D,X
E287 860B             (   flexidedrv.asm):00527 [2]                     LDA         #PPIDE_LBALOW
E289 BDE2DE           (   flexidedrv.asm):00528 [8]                     JSR         IDE_WRITE
E28C 8E0001           (   flexidedrv.asm):00529 [3]                     LDX         #$0001
E28F 860A             (   flexidedrv.asm):00530 [2]                     LDA         #PPIDE_SEC_CNT
E291 BDE2DE           (   flexidedrv.asm):00531 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00532         
E294 39               (   flexidedrv.asm):00533 [5]                     RTS
                      (   flexidedrv.asm):00534         
                      (   flexidedrv.asm):00535         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00536         ;
                      (   flexidedrv.asm):00537         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00538         ;
                      (   flexidedrv.asm):00539         ;                   (A) = Track Number
                      (   flexidedrv.asm):00540         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00541         ;________________________________________________________________________________________________________
E295                  (   flexidedrv.asm):00542         IDE_CONVERT_SECTOR:
E295 54               (   flexidedrv.asm):00543 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E296 44               (   flexidedrv.asm):00544 [2]             LSRA                    ;
E297 2402             (   flexidedrv.asm):00545 [3]             BCC     >
E299 CA80             (   flexidedrv.asm):00546 [2]             ORB     #$80
                      (   flexidedrv.asm):00547         !
E29B F7E362           (   flexidedrv.asm):00548 [5]                 STB     DEBSEHD                     ; STORE IN SECTOR/HEAD
E29E B7E360           (   flexidedrv.asm):00549 [5]                 STA     DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00550         
                      (   flexidedrv.asm):00551         ;       ADD SLICE OFFSET
E2A1 FCDE21           (   flexidedrv.asm):00552 [6]                 LDD     CURDRVSLICE
E2A4 54               (   flexidedrv.asm):00553 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E2A5 44               (   flexidedrv.asm):00554 [2]             LSRA                    ;
E2A6 2402             (   flexidedrv.asm):00555 [3]             BCC     >
E2A8 CA80             (   flexidedrv.asm):00556 [2]             ORB     #$80
                      (   flexidedrv.asm):00557         !
E2AA F7E361           (   flexidedrv.asm):00558 [5]             STB         DEBCYLM                     ; STORE IN TRACK (LSB)
E2AD 2408             (   flexidedrv.asm):00559 [3]             BCC     >
E2AF B6E360           (   flexidedrv.asm):00560 [5]                 LDA     DEBCYLL                     ; STORE IN TRACK (LSB)
E2B2 8A80             (   flexidedrv.asm):00561 [2]             ORA     #$80
E2B4 B7E360           (   flexidedrv.asm):00562 [5]             STA         DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00563         !
E2B7 39               (   flexidedrv.asm):00564 [5]             RTS
                      (   flexidedrv.asm):00565         
                      (   flexidedrv.asm):00566         
                      (   flexidedrv.asm):00567         
                      (   flexidedrv.asm):00568           IF USEDSKYNG = 1
                      (   flexidedrv.asm):00569         ;       PRTDBG "DSKY OUTPUT 1$"
                      (   flexidedrv.asm):00570                 LDA     SEKDSK
                      (   flexidedrv.asm):00571                 STA     DSKY_HEXBUF
                      (   flexidedrv.asm):00572                 LDA     DEBCYLM
                      (   flexidedrv.asm):00573                 STA     DSKY_HEXBUF+1
                      (   flexidedrv.asm):00574                 LDA     DEBCYLL
                      (   flexidedrv.asm):00575                 STA     DSKY_HEXBUF+2
                      (   flexidedrv.asm):00576                 LDA     DEBSEHD
                      (   flexidedrv.asm):00577                 STA     DSKY_HEXBUF+3
                      (   flexidedrv.asm):00578                 JSR     DSKY_BIN2SEG
                      (   flexidedrv.asm):00579                 JSR     DSKY_SHOW
                      (   flexidedrv.asm):00580           ENDC
E2B8 39               (   flexidedrv.asm):00581 [5]             RTS
                      (   flexidedrv.asm):00582         
                      (   flexidedrv.asm):00583         
                      (   flexidedrv.asm):00584         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00585         
                      (   flexidedrv.asm):00586         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00587         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00588         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00589         
                      (   flexidedrv.asm):00590                 ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00591                 ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00592                 ;OUTPUT X = WORD READ FROM IDE DRIVE
E2B9                  (   flexidedrv.asm):00593         IDE_READ:
E2B9 BDE300           (   flexidedrv.asm):00594 [8]             JSR         SET_PPI_RD          ; SETUP FOR A READ CYCLE
E2BC                  (   flexidedrv.asm):00595         IDE_READ_NO_SETUP:
E2BC B7FE62           (   flexidedrv.asm):00596 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2BF 8A40             (   flexidedrv.asm):00597 [2]             ORA         #PPIDE_RD_LINE      ; ASSERT RD PIN
E2C1 B7FE62           (   flexidedrv.asm):00598 [5]             STA         PPIDECNTRL
E2C4 3402             (   flexidedrv.asm):00599 [5+1]       PSHS    A
E2C6 F6FE60           (   flexidedrv.asm):00600 [5]             LDB         PPIDELO                     ; READ LOWER BYTE
E2C9 B6FE61           (   flexidedrv.asm):00601 [5]             LDA         PPIDEHI                     ; READ UPPER BYTE
E2CC 1F01             (   flexidedrv.asm):00602 [6]         TFR     D,X
E2CE 3502             (   flexidedrv.asm):00603 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2D0 B7FE62           (   flexidedrv.asm):00604 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2D3 8840             (   flexidedrv.asm):00605 [2]             EORA    #PPIDE_RD_LINE  ; ASSERT RD PIN
E2D5 B7FE62           (   flexidedrv.asm):00606 [5]             STA         PPIDECNTRL
E2D8 8600             (   flexidedrv.asm):00607 [2]             LDA         #$00
E2DA B7FE62           (   flexidedrv.asm):00608 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2DD 39               (   flexidedrv.asm):00609 [5]             RTS
                      (   flexidedrv.asm):00610         
                      (   flexidedrv.asm):00611                 ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00612                 ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00613                 ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00614                 ;
                      (   flexidedrv.asm):00615         
E2DE                  (   flexidedrv.asm):00616         IDE_WRITE:
E2DE BDE30E           (   flexidedrv.asm):00617 [8]             JSR         SET_PPI_WR          ; SETUP FOR A WRITE CYCLE
E2E1 3402             (   flexidedrv.asm):00618 [5+1]       PSHS    A
E2E3 1F10             (   flexidedrv.asm):00619 [6]         TFR     X,D
E2E5 F7FE60           (   flexidedrv.asm):00620 [5]             STB         PPIDELO                     ; WRITE LOWER BYTE
E2E8 B7FE61           (   flexidedrv.asm):00621 [5]             STA         PPIDEHI                     ; WRITE UPPER BYTE
E2EB 3502             (   flexidedrv.asm):00622 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2ED B7FE62           (   flexidedrv.asm):00623 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2F0 8A20             (   flexidedrv.asm):00624 [2]             ORA         #PPIDE_WR_LINE              ; ASSERT WRITE PIN
E2F2 B7FE62           (   flexidedrv.asm):00625 [5]             STA         PPIDECNTRL
E2F5 8820             (   flexidedrv.asm):00626 [2]             EORA    #PPIDE_WR_LINE          ; DE ASSERT WR PIN
E2F7 B7FE62           (   flexidedrv.asm):00627 [5]             STA             PPIDECNTRL
E2FA 8600             (   flexidedrv.asm):00628 [2]             LDA         #$00
E2FC B7FE62           (   flexidedrv.asm):00629 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2FF 39               (   flexidedrv.asm):00630 [5]             RTS
                      (   flexidedrv.asm):00631         
                      (   flexidedrv.asm):00632         
                      (   flexidedrv.asm):00633         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00634         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00635         ;
                      (   flexidedrv.asm):00636         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00637         
E300                  (   flexidedrv.asm):00638         SET_PPI_RD:
E300 3402             (   flexidedrv.asm):00639 [5+1]           PSHS    A
E302 8600             (   flexidedrv.asm):00640 [2]             LDA         #$00
E304 B7FE62           (   flexidedrv.asm):00641 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E307 8692             (   flexidedrv.asm):00642 [2]             LDA     #PPRD_IDE_8255
E309 B7FE63           (   flexidedrv.asm):00643 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, READ MODE
E30C 3582             (   flexidedrv.asm):00644 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00645         
E30E                  (   flexidedrv.asm):00646         SET_PPI_WR:
E30E 3402             (   flexidedrv.asm):00647 [5+1]           PSHS    A
E310 8600             (   flexidedrv.asm):00648 [2]             LDA         #$00
E312 B7FE62           (   flexidedrv.asm):00649 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E315 8680             (   flexidedrv.asm):00650 [2]             LDA     #PPWR_IDE_8255
E317 B7FE63           (   flexidedrv.asm):00651 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, WRITE MODE
E31A 3582             (   flexidedrv.asm):00652 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00653         
E31C 5050494445203A   (   flexidedrv.asm):00654         MESSAGE1    FCC     "PPIDE :"
E323 04               (   flexidedrv.asm):00655                     FCB     EOT
E324 20494F3D3078     (   flexidedrv.asm):00656         MESSAGE2    FCC     " IO=0x"
E32A 04               (   flexidedrv.asm):00657                     FCB     EOT
E32B 204E4F5420505245 (   flexidedrv.asm):00658         MESSAGE3    FCC     " NOT PRESENT"
     53454E54
E337 04               (   flexidedrv.asm):00659                     FCB     EOT
E338 205050494445303A (   flexidedrv.asm):00660         MESSAGE4    FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
E348 04               (   flexidedrv.asm):00661                     FCB     EOT
E349 205050494445313A (   flexidedrv.asm):00662         MESSAGE5    FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
E359 04               (   flexidedrv.asm):00663                     FCB     EOT
E35A 3078             (   flexidedrv.asm):00664         MESSAGE6    FCC     "0x"
E35C 04               (   flexidedrv.asm):00665                     FCB     EOT
                      (   flexidedrv.asm):00666         
                      (   flexidedrv.asm):00667         
                      (   flexidedrv.asm):00668         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E35D 00               (   flexidedrv.asm):00669         CDEBCYLL:       .BYTE 0         ; DEBLOCKED CYLINDER LSB
E35E 00               (   flexidedrv.asm):00670         CDEBCYLM:       .BYTE 0         ; DEBLOCKED CYLINDER MSB
E35F 00               (   flexidedrv.asm):00671         CDEBSEHD:       .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E360 00               (   flexidedrv.asm):00672         DEBCYLL:        .BYTE 0         ; DEBLOCKED CYLINDER LSB
E361 00               (   flexidedrv.asm):00673         DEBCYLM:        .BYTE 0         ; DEBLOCKED CYLINDER MSB
E362 00               (   flexidedrv.asm):00674         DEBSEHD:        .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
                      (      drivers.asm):00561         
                      (      drivers.asm):00562         
                      (      drivers.asm):00563         
                      (      drivers.asm):00564         
                      (      drivers.asm):00565         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00566         
E363                  (      drivers.asm):00567         HSTBUF:         RMB     512
                      (        flex9.asm):00011                         include "../software/monitor.asm"
                      (../software/monit):00001             PRAGMA CD
                      (../software/monit):00002         
                      (../software/monit):00003         ;__MONITOR_________________________________________________________________________________________
                      (../software/monit):00004         ;
                      (../software/monit):00005         ;       MINI ROM MONITOR FOR THE NHYODYNE 6809 PROCESSOR
                      (../software/monit):00006         ;
                      (../software/monit):00007         ;       WRITTEN BY: DAN WERNER -- 8/2/2022
                      (../software/monit):00008         ;       based on the ROM by Andrew Lynch
                      (../software/monit):00009         ;
                      (../software/monit):00010         ;___________________________________________________________________________________________________
                      (../software/monit):00011         ;
                      (../software/monit):00012         ; DATA CONSTANTS
                      (../software/monit):00013         ;___________________________________________________________________________________________________
                      (../software/monit):00014         ;
                      (../software/monit):00015         
     C000             (../software/monit):00016         MONSTACK                        EQU     $C000           ; STACK POINTER
                      (../software/monit):00017         
                      (../software/monit):00018         ; UART 16C550 SERIAL
     FE68             (../software/monit):00019         MONUART0        equ     $FE68           ; DATA IN/OUT
     FE69             (../software/monit):00020         MONUART1        equ     $FE69           ; CHECK RX
     FE6A             (../software/monit):00021         MONUART2        equ     $FE6A           ; INTERRUPTS
     FE6B             (../software/monit):00022         MONUART3        equ     $FE6B           ; LINE CONTROL
     FE6C             (../software/monit):00023         MONUART4        equ     $FE6C           ; MODEM CONTROL
     FE6D             (../software/monit):00024         MONUART5        equ     $FE6D           ; LINE STATUS
     FE6E             (../software/monit):00025         MONUART6        equ     $FE6E           ; MODEM STATUS
     FE6F             (../software/monit):00026         MONUART7        equ     $FE6F           ; SCRATCH REG.
                      (../software/monit):00027         
                      (../software/monit):00028         
                      (../software/monit):00029                       ORG       $EFE0
EFE0 F3               (../software/monit):00030                         FCB             $F3                             ;DI - DISABLE INTERRUPTS
EFE1 010010           (../software/monit):00031                         FCB             $01,$00,$10             ;LD     BC,$1000 -BYTES TO MOVE
EFE4 110070           (../software/monit):00032                         FCB             $11,$00,$70             ;LD     DE,$7000 -DESTINATION ADDRESS (6809 IS !A15)
EFE7 212001           (../software/monit):00033                         FCB             $21,$20,$01             ;LD     HL,$0120 -SOURCE ADDRESS
EFEA EDB0             (../software/monit):00034                         FCB             $ED,$B0                 ;LDIR            -COPY RAM
EFEC DBFE             (../software/monit):00035                         FCB             $DB,$FE                 ;IN     A,$FF    -ENABLE 6809
EFEE 0E00             (../software/monit):00036                         FCB             $0E,$00                 ;LD     C,00H    -CP/M SYSTEM RESET CALL
EFF0 CD0500           (../software/monit):00037                         FCB             $CD,$05,$00                     ;CALL   0005H    -RETURN TO PROMPT
                      (../software/monit):00038         ;
                      (../software/monit):00039         ;
                      (../software/monit):00040         ;
                      (../software/monit):00041         
                      (../software/monit):00042                 ORG     $FC00
                      (../software/monit):00043         
                      (../software/monit):00044         
                      (../software/monit):00045         ;___________________________________________________________________________________________________
                      (../software/monit):00046         ;
                      (../software/monit):00047         ;       INITIALIZE 6809
                      (../software/monit):00048         ;___________________________________________________________________________________________________
FC00                  (../software/monit):00049         MAIN:
FC00 10CEC000         (../software/monit):00050 [4]             LDS     #MONSTACK                       ; RESET STACK POINTER
FC04 4F               (../software/monit):00051 [2]             CLRA                            ; set direct page register to 0
FC05 1F8B             (../software/monit):00052 [6]             TFR     A,DP                    ;
                      (../software/monit):00053         
                      (../software/monit):00054         
FC07 4F               (../software/monit):00055 [2]             CLRA                            ; CLEAR ACCUMULATOR A
FC08 BDFD8C           (../software/monit):00056 [8]             JSR     SERIALINIT              ; INIT SERIAL PORT
                      (../software/monit):00057         
                      (../software/monit):00058         ;__CONTRL_________________________________________________________________________________________
                      (../software/monit):00059         ;
                      (../software/monit):00060         ;       MONITOR MAIN LOOP
                      (../software/monit):00061         ;__________________________________________________________________________________________________
FC0B                  (../software/monit):00062         CONTRL:
FC0B BDFD81           (../software/monit):00063 [8]             JSR         DISPLAY_CRLF                ; DISPLAY CRLF
FC0E 863E             (../software/monit):00064 [2]             LDA     #'>'                    ; CARRIAGE RETURN
FC10 BDFD8D           (../software/monit):00065 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC13 BDFD9E           (../software/monit):00066 [8]             JSR         IOF_CONINW          ;
FC16 BDFD8D           (../software/monit):00067 [8]             JSR         WRSER1                      ; OUTPUT CHAR TO CONSOLE
                      (../software/monit):00068                                                         ;
FC19 8144             (../software/monit):00069 [2]             CMPA    #'D'                    ; IS DUMP MEMORY?
FC1B 271E             (../software/monit):00070 [3]             BEQ         DUMP                        ;
FC1D 814C             (../software/monit):00071 [2]             CMPA    #'L'                    ; IS LOAD?
FC1F 2717             (../software/monit):00072 [3]             BEQ         MLOAD                       ; YES, JUMP
FC21 814D             (../software/monit):00073 [2]             CMPA    #'M'                    ; IS CHANGE?
FC23 273F             (../software/monit):00074 [3]             BEQ         CHANGE                      ; YES, JUMP
FC25 8150             (../software/monit):00075 [2]             CMPA    #'P'                    ; IS PRINT?
FC27 2752             (../software/monit):00076 [3]             BEQ         PRINT                       ; YES, JUMP
FC29 8147             (../software/monit):00077 [2]             CMPA    #'G'                    ; IS GO?
FC2B 272C             (../software/monit):00078 [3]             BEQ         GO                  ; YES JUMP
                      (../software/monit):00079                                                         ;
                      (../software/monit):00080                                                         ; COMMAND NOT FOUND ISSUE ERROR
FC2D 863F             (../software/monit):00081 [2]             LDA     #'?'                    ; PRINT '?'
FC2F BDFD8D           (../software/monit):00082 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC32 BDFD81           (../software/monit):00083 [8]             JSR         DISPLAY_CRLF        ; DISPLAY CRLF
FC35 7EFC0B           (../software/monit):00084 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00085         
FC38                  (../software/monit):00086         MLOAD:
FC38 7EFC8D           (../software/monit):00087 [4]             JMP         MONLOAD
                      (../software/monit):00088         
                      (../software/monit):00089         
FC3B                  (../software/monit):00090         DUMP:
FC3B BDFD7C           (../software/monit):00091 [8]             JSR     OUTS                    ;
FC3E BDFD1E           (../software/monit):00092 [8]             JSR         BADDR                       ;
FC41 3410             (../software/monit):00093 [5+2]           PSHS    X                           ;
FC43 BDFD7C           (../software/monit):00094 [8]             JSR         OUTS                        ;
FC46 BDFD1E           (../software/monit):00095 [8]             JSR         BADDR                       ;
FC49 3510             (../software/monit):00096 [5+2]           PULS    X                       ;
FC4B BDFD81           (../software/monit):00097 [8]             JSR         DISPLAY_CRLF    ;
FC4E                  (../software/monit):00098         DUMP_LOOP:
FC4E BDFCC7           (../software/monit):00099 [8]             JSR         DUMP_LINE           ;
FC51 BCFDB0           (../software/monit):00100 [7]             CMPX    XHI                     ;
FC54 2BF8             (../software/monit):00101 [3]             BMI         DUMP_LOOP           ;
FC56 7EFC0B           (../software/monit):00102 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00103         
                      (../software/monit):00104         
FC59                  (../software/monit):00105         GO:
FC59 BDFD1E           (../software/monit):00106 [8]             JSR         BADDR                       ; GET ADDRESS
FC5C BDFD7C           (../software/monit):00107 [8]             JSR         OUTS                        ; PRINT SPACE
FC5F BEFDB0           (../software/monit):00108 [6]             LDX         XHI                         ; LOAD X WITH ADDRESS
FC62 6E84             (../software/monit):00109 [3+0]           JMP         $0000,X                     ; JUMP TO ADDRESS
                      (../software/monit):00110         
                      (../software/monit):00111         ; CHANGE MEMORY(M AAAA DD NN)
FC64                  (../software/monit):00112         CHANGE:
FC64 BDFD1E           (../software/monit):00113 [8]             JSR         BADDR                       ; BUILD ADDRESS
FC67 BDFD7C           (../software/monit):00114 [8]             JSR         OUTS                        ; PRINT SPACE
FC6A BDFD7A           (../software/monit):00115 [8]             JSR         OUT2HS                      ;
FC6D BDFD2C           (../software/monit):00116 [8]             JSR         BYTE                        ;
FC70 301F             (../software/monit):00117 [4+1]           LEAX    -1,X                    ;
FC72 A784             (../software/monit):00118 [4+0]           STA     ,X                      ;
FC74 A184             (../software/monit):00119 [4+0]           CMPA    ,X                      ;
FC76 2647             (../software/monit):00120 [3]             BNE         LOAD19                      ; MEMORY DID NOT CHANGE
FC78 7EFC0B           (../software/monit):00121 [4]             JMP         CONTRL                      ;
                      (../software/monit):00122         
                      (../software/monit):00123         ; PRINT CONTENTS OF STACK
FC7B                  (../software/monit):00124         PRINT:
FC7B 10FFFDAC         (../software/monit):00125 [7]             STS         SP                          ;
FC7F BEFDAC           (../software/monit):00126 [6]             LDX         SP                  ;
FC82 C609             (../software/monit):00127 [2]             LDB         #$09                        ;
FC84                  (../software/monit):00128         PRINT2:                                 ;
FC84 BDFD7A           (../software/monit):00129 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FC87 5A               (../software/monit):00130 [2]             DECB                            ;
FC88 26FA             (../software/monit):00131 [3]             BNE         PRINT2                  ; DONE? IF NO DO MORE
FC8A 7EFC0B           (../software/monit):00132 [4]             JMP         CONTRL                  ; DONE? IF YES RETURN TO MAIN LOOP
                      (../software/monit):00133         
                      (../software/monit):00134         
FC8D                  (../software/monit):00135         MONLOAD:
                      (../software/monit):00136         
FC8D                  (../software/monit):00137         LOAD3:
FC8D BDFD9E           (../software/monit):00138 [8]             JSR         IOF_CONINW
FC90 8153             (../software/monit):00139 [2]             CMPA    #'S'
FC92 26F9             (../software/monit):00140 [3]             BNE         LOAD3               ; FIRST CHAR NOT (S)
FC94 BDFD9E           (../software/monit):00141 [8]             JSR         IOF_CONINW          ; READ CHAR
FC97 8139             (../software/monit):00142 [2]             CMPA    #'9'
FC99 2729             (../software/monit):00143 [3]             BEQ         LOAD21
FC9B 8131             (../software/monit):00144 [2]             CMPA    #'1'
FC9D 26EE             (../software/monit):00145 [3]             BNE         LOAD3               ; SECOND CHAR NOT (1)
FC9F 7FFDAE           (../software/monit):00146 [7]             CLR         CKSM                ; ZERO CHECKSUM
FCA2 BDFD2C           (../software/monit):00147 [8]             JSR         BYTE                ; READ BYTE
FCA5 8002             (../software/monit):00148 [2]             SUBA    #$02
FCA7 B7FDAF           (../software/monit):00149 [5]             STA         BYTECT              ; BYTE COUNT
                      (../software/monit):00150         ; BUILD ADDRESS
FCAA 8D72             (../software/monit):00151 [7]             BSR         BADDR
                      (../software/monit):00152         ; STORE DATA
FCAC                  (../software/monit):00153         LOAD11:
FCAC BDFD2C           (../software/monit):00154 [8]             JSR         BYTE
FCAF 7AFDAF           (../software/monit):00155 [7]             DEC         BYTECT
FCB2 2706             (../software/monit):00156 [3]             BEQ         LOAD15              ; ZERO BYTE COUNT
FCB4 A784             (../software/monit):00157 [4+0]           STA     ,X                      ; STORE DATA
FCB6 3001             (../software/monit):00158 [4+1]           LEAX    1,X
FCB8 20F2             (../software/monit):00159 [3]             BRA         LOAD11
                      (../software/monit):00160         
FCBA                  (../software/monit):00161         LOAD15:
FCBA 7CFDAE           (../software/monit):00162 [7]             INC         CKSM
FCBD 27CE             (../software/monit):00163 [3]             BEQ         LOAD3
FCBF                  (../software/monit):00164         LOAD19:
FCBF 863F             (../software/monit):00165 [2]             LDA         #'?'
FCC1 BDFD8D           (../software/monit):00166 [8]             JSR         WRSER1
FCC4                  (../software/monit):00167         LOAD21:
FCC4 7EFC0B           (../software/monit):00168 [4]     C1      JMP         CONTRL
                      (../software/monit):00169         
                      (../software/monit):00170         
                      (../software/monit):00171         
FCC7                  (../software/monit):00172         DUMP_LINE:
FCC7 BDFD63           (../software/monit):00173 [8]             JSR         OUTADDR                     ;
FCCA BDFD7C           (../software/monit):00174 [8]             JSR         OUTS                        ;
FCCD 3410             (../software/monit):00175 [5+2]           PSHS    X                       ;
FCCF C610             (../software/monit):00176 [2]             LDB         #$10                        ;
FCD1                  (../software/monit):00177         DUMP_LINE_LOOP:
FCD1 BDFD7A           (../software/monit):00178 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FCD4 5A               (../software/monit):00179 [2]             DECB                            ;
FCD5 26FA             (../software/monit):00180 [3]             BNE         DUMP_LINE_LOOP      ; DONE? IF NO DO MORE
FCD7 3510             (../software/monit):00181 [5+2]           PULS    X                           ;
FCD9 BDFD7C           (../software/monit):00182 [8]             JSR         OUTS                        ;
FCDC 863A             (../software/monit):00183 [2]             LDA         #':'                        ;
FCDE BDFD8D           (../software/monit):00184 [8]             JSR         WRSER1                      ;
FCE1 C610             (../software/monit):00185 [2]             LDB         #$10                        ;
FCE3                  (../software/monit):00186         DUMP_LINE_LOOPA:
FCE3 A600             (../software/monit):00187 [4+1]           LDA         0,X                 ;
FCE5 8120             (../software/monit):00188 [2]             CMPA    #32                     ;
FCE7 2B0A             (../software/monit):00189 [3]             BMI         DUMP_LINE_INVALID
FCE9 817F             (../software/monit):00190 [2]             CMPA    #127                    ;
FCEB 2A06             (../software/monit):00191 [3]             BPL         DUMP_LINE_INVALID
FCED BDFD8D           (../software/monit):00192 [8]             JSR         WRSER1                      ;
FCF0 7EFCF8           (../software/monit):00193 [4]             JMP         DUMP_LINE_VALID
FCF3                  (../software/monit):00194         DUMP_LINE_INVALID:                      ;
FCF3 862E             (../software/monit):00195 [2]             LDA         #'.'                        ;
FCF5 BDFD8D           (../software/monit):00196 [8]             JSR         WRSER1                      ;
FCF8                  (../software/monit):00197         DUMP_LINE_VALID:                        ;
FCF8 3001             (../software/monit):00198 [4+1]           LEAX    1,X                     ;
FCFA 5A               (../software/monit):00199 [2]             DECB                            ;
FCFB 26E6             (../software/monit):00200 [3]             BNE         DUMP_LINE_LOOPA     ; DONE? IF NO DO MORE
FCFD BDFD81           (../software/monit):00201 [8]             JSR         DISPLAY_CRLF        ;
FD00 39               (../software/monit):00202 [5]             RTS
                      (../software/monit):00203         
                      (../software/monit):00204         ; INPUT HEX CHAR
FD01                  (../software/monit):00205         INHEX:
FD01 BDFD9E           (../software/monit):00206 [8]             JSR         IOF_CONINW          ;
FD04 3402             (../software/monit):00207 [5+1]           PSHS    A                       ;
FD06 BDFD8D           (../software/monit):00208 [8]             JSR         WRSER1                      ;
FD09 3502             (../software/monit):00209 [5+1]           PULS    A                       ;
FD0B 8130             (../software/monit):00210 [2]             CMPA    #$30                    ;
FD0D 2BB5             (../software/monit):00211 [3]             BMI         C1                          ; NOT HEX
FD0F 8139             (../software/monit):00212 [2]             CMPA    #$39                    ;
FD11 2F0A             (../software/monit):00213 [3]             BLE         IN1HG                       ;
FD13 8141             (../software/monit):00214 [2]             CMPA    #$41                    ;
FD15 2BAD             (../software/monit):00215 [3]             BMI         C1                  ; NOT HEX
FD17 8146             (../software/monit):00216 [2]             CMPA    #$46                    ;
FD19 2EA9             (../software/monit):00217 [3]             BGT         C1                      ; NOT HEX
FD1B 8007             (../software/monit):00218 [2]             SUBA    #$07                    ;
FD1D                  (../software/monit):00219         IN1HG:                                  ;
FD1D 39               (../software/monit):00220 [5]             RTS                                     ;
                      (../software/monit):00221         
                      (../software/monit):00222         ; BUILD ADDRESS
FD1E                  (../software/monit):00223         BADDR:
FD1E 8D0C             (../software/monit):00224 [7]             BSR         BYTE                ; READ 2 FRAMES
FD20 B7FDB0           (../software/monit):00225 [5]             STA     XHI
FD23 8D07             (../software/monit):00226 [7]             BSR         BYTE
FD25 B7FDB1           (../software/monit):00227 [5]             STA     XLOW
FD28 BEFDB0           (../software/monit):00228 [6]             LDX         XHI                 ; (X) ADDRESS WE BUILT
FD2B 39               (../software/monit):00229 [5]             RTS
                      (../software/monit):00230         
                      (../software/monit):00231         ; INPUT BYTE (TWO FRAMES)
FD2C                  (../software/monit):00232         BYTE:
FD2C 8DD3             (../software/monit):00233 [7]             BSR         INHEX                   ; GET HEX CHAR
FD2E 48               (../software/monit):00234 [2]             ASLA
FD2F 48               (../software/monit):00235 [2]             ASLA
FD30 48               (../software/monit):00236 [2]             ASLA
FD31 48               (../software/monit):00237 [2]             ASLA
FD32 1F89             (../software/monit):00238 [6]             TFR     A,B         ; TAB
FD34 4D               (../software/monit):00239 [2]         TSTA                ; TAB
FD35 8DCA             (../software/monit):00240 [7]             BSR         INHEX
FD37 840F             (../software/monit):00241 [2]             ANDA    #$0F                    ; MASK TO 4 BITS
FD39 3404             (../software/monit):00242 [5+1]           PSHS    B           ; ABA
FD3B ABE0             (../software/monit):00243 [4+2]       ADDA    ,S+         ; ABA
FD3D 1F89             (../software/monit):00244 [6]             TFR     A,B         ; TAB
FD3F 4D               (../software/monit):00245 [2]         TSTA                ; TAB
FD40 FBFDAE           (../software/monit):00246 [5]             ADDB    CKSM
FD43 F7FDAE           (../software/monit):00247 [5]             STB     CKSM
FD46 39               (../software/monit):00248 [5]             RTS
                      (../software/monit):00249         
                      (../software/monit):00250         
                      (../software/monit):00251         
FD47                  (../software/monit):00252         MONOUTHL:
FD47 44               (../software/monit):00253 [2]             LSRA                            ; OUT HEX LEFT BCD DIGIT
FD48 44               (../software/monit):00254 [2]             LSRA                            ;
FD49 44               (../software/monit):00255 [2]             LSRA                            ;
FD4A 44               (../software/monit):00256 [2]             LSRA                            ;
                      (../software/monit):00257         
FD4B                  (../software/monit):00258         MONOUTHR:                                       ;
FD4B 840F             (../software/monit):00259 [2]             ANDA    #$0F                ; OUT HEC RIGHT DIGIT
FD4D 8B30             (../software/monit):00260 [2]             ADDA    #$30            ;
FD4F 8139             (../software/monit):00261 [2]             CMPA    #$39            ;
FD51 2302             (../software/monit):00262 [3]             BLS         OUTHR1              ;
FD53 8B07             (../software/monit):00263 [2]             ADDA    #$07                ;
FD55                  (../software/monit):00264         OUTHR1:
FD55 7EFD8D           (../software/monit):00265 [4]             JMP         WRSER1              ;
                      (../software/monit):00266         
FD58                  (../software/monit):00267         OUT2H:
FD58 A600             (../software/monit):00268 [4+1]           LDA     0,X                     ; OUTPUT 2 HEX CHAR
FD5A 8DEB             (../software/monit):00269 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD5C A600             (../software/monit):00270 [4+1]           LDA     0,X                     ;
FD5E 8DEB             (../software/monit):00271 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD60 3001             (../software/monit):00272 [4+1]           LEAX    1,X
FD62 39               (../software/monit):00273 [5]             RTS
                      (../software/monit):00274         
FD63                  (../software/monit):00275         OUTADDR:
FD63 3410             (../software/monit):00276 [5+2]           PSHS    X                       ;
FD65 3502             (../software/monit):00277 [5+1]           PULS    A                       ;
FD67 3402             (../software/monit):00278 [5+1]           PSHS    A                       ;
FD69 8DDC             (../software/monit):00279 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD6B 3502             (../software/monit):00280 [5+1]           PULS    A                       ;
FD6D 8DDC             (../software/monit):00281 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD6F 3502             (../software/monit):00282 [5+1]           PULS    A                       ;
FD71 3402             (../software/monit):00283 [5+1]           PSHS    A                       ;
FD73 8DD2             (../software/monit):00284 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD75 3502             (../software/monit):00285 [5+1]           PULS    A                       ;
FD77 8DD2             (../software/monit):00286 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD79 39               (../software/monit):00287 [5]             RTS
                      (../software/monit):00288         
FD7A                  (../software/monit):00289         OUT2HS:
FD7A 8DDC             (../software/monit):00290 [7]             BSR         OUT2H               ; OUTPUT 2 HEX CHAR + SPACE
FD7C                  (../software/monit):00291         OUTS:
FD7C 8620             (../software/monit):00292 [2]             LDA         #$20                ; SPACE
FD7E 7EFD8D           (../software/monit):00293 [4]             JMP         WRSER1              ;
                      (../software/monit):00294         
                      (../software/monit):00295         
                      (../software/monit):00296         
                      (../software/monit):00297         ;__________________________________________________________________________________________________________
                      (../software/monit):00298         
FD81                  (../software/monit):00299         DISPLAY_CRLF:
FD81 860D             (../software/monit):00300 [2]             LDA     #$0D                    ; PRINT CR
FD83 BDFD8D           (../software/monit):00301 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD86 860A             (../software/monit):00302 [2]             LDA     #$0A                    ; PRINT LF
FD88 BDFD8D           (../software/monit):00303 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD8B 39               (../software/monit):00304 [5]             RTS
                      (../software/monit):00305         
FD8C                  (../software/monit):00306         SERIALINIT:
                      (../software/monit):00307                 ;       LDA             #$80            ;
                      (../software/monit):00308                 ;       STA             UART3           ; SET DLAB FLAG
                      (../software/monit):00309                 ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../software/monit):00310                 ;       STA             UART0           ; save baud rate
                      (../software/monit):00311                 ;       LDA             #00                     ;
                      (../software/monit):00312                 ;       STA             UART1           ;
                      (../software/monit):00313                 ;       LDA             #03                     ;
                      (../software/monit):00314                 ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../software/monit):00315                 ;       STA             UART4           ;
FD8C 39               (../software/monit):00316 [5]             RTS
                      (../software/monit):00317         
FD8D                  (../software/monit):00318         WRSER1:
FD8D 3402             (../software/monit):00319 [5+1]           PSHS    A
FD8F                  (../software/monit):00320         TX_BUSYLP:
FD8F B6FE6D           (../software/monit):00321 [5]                     LDA             MONUART5                ; READ LINE STATUS REGISTER
FD92 8420             (../software/monit):00322 [2]                     ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
FD94 8100             (../software/monit):00323 [2]                     CMPA    #$00
FD96 27F7             (../software/monit):00324 [3]                     BEQ             TX_BUSYLP               ; IF NOT REPEAT
FD98 3502             (../software/monit):00325 [5+1]           PULS    A
FD9A B7FE68           (../software/monit):00326 [5]                     STA             MONUART0                ; THEN WRITE THE CHAR TO UART
FD9D 39               (../software/monit):00327 [5]             RTS
                      (../software/monit):00328         
                      (../software/monit):00329         
FD9E                  (../software/monit):00330         IOF_CONINW:                             ;
FD9E                  (../software/monit):00331         SERIAL_INCHW1:
FD9E B6FE6D           (../software/monit):00332 [5]                     LDA         MONUART5            ; READ LINE STATUS REGISTER
FDA1 8401             (../software/monit):00333 [2]                     ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
FDA3 8100             (../software/monit):00334 [2]                     CMPA    #$00
FDA5 27F7             (../software/monit):00335 [3]                     BEQ         SERIAL_INCHW1       ; LOOP UNTIL DATA IS READY
FDA7 B6FE68           (../software/monit):00336 [5]                     LDA         MONUART0            ; THEN READ THE CHAR FROM THE UART
FDAA 39               (../software/monit):00337 [5]                     RTS
                      (../software/monit):00338         
                      (../software/monit):00339         
                      (../software/monit):00340         ;_____________________________________________________________________________________________________
                      (../software/monit):00341         ;   Default ISRs.  Will be changed by OS Setup
FDAB                  (../software/monit):00342         SWIVEC:
FDAB                  (../software/monit):00343         IRQVEC:
FDAB 3B               (../software/monit):00344 [6+?]                   rti
                      (../software/monit):00345         
                      (../software/monit):00346         ; REGISTERS FOR GO
FDAC 0000             (../software/monit):00347         SP          FDB $0000           ; S-HIGH
                      (../software/monit):00348         ; END REGISTERS FOR GO
FDAE 00               (../software/monit):00349         CKSM    FCB     00                      ; CHECKSUM
FDAF 00               (../software/monit):00350         BYTECT  FCB     00                      ; BYTE COUNT
FDB0 00               (../software/monit):00351         XHI         FCB 00                      ; XREG HIGH
FDB1 00               (../software/monit):00352         XLOW    FCB     00                      ; XREG LOW
                      (../software/monit):00353         
                      (../software/monit):00354                 ORG     $FFF2               ; SET RESET VECTOR TO MAIN PROGRAM
FFF2 FDAB             (../software/monit):00355                         FDB         SWIVEC
FFF4 FC00             (../software/monit):00356         SW2VECP FDB         MAIN
FFF6 FC00             (../software/monit):00357         FRQVECP FDB         MAIN
FFF8 FDAB             (../software/monit):00358                         FDB         IRQVEC
FFFA FC00             (../software/monit):00359         SW1VECP FDB         MAIN
FFFC FC00             (../software/monit):00360         NMIVECP FDB         MAIN
FFFE FC00             (../software/monit):00361         RESETV  FDB         MAIN
                      (../software/monit):00362         
                      (../software/monit):00363                 END

Symbol Table:
[ G] ADDBX                            D353
[ G] ADDDEV                           DE8E
[ G] ADER                             0011
[ G] ASNN65                           D7D1
[ G] ASNN85                           D804
[ G] ASNNX1                           D7A8
[ G] ASNNX2                           D7AB
[ G] ASNNX4                           D7B9
[ G] ASNNX6                           D7C1
[ G] ASNNX7                           D7F0
[ G] ASNNX8                           D7F8
[ G] ASNNX9                           D805
[ G] ASNNXT                           D7A2
[ G] AVLPNT                           D41B
[ G] BADDR                            FD1E
[ G] BKLN                             D418
[ G] BKREC                            DCFE
[ G] BKREC2                           DD11
[ G] BREAK                            CE88
[ G] BREAK1                           CE97
[ G] BREAK2                           CE9A
[ G] BUFPNT                           CC14
[ G] BYTE                             FD2C
[ G] BYTECT                           FDAF
[ G] C1                               FCC4
[ G] CDEBCYLL                         E35D
[ G] CDEBCYLM                         E35E
[ G] CDEBSEHD                         E35F
[ G] CHANGE                           FC64
[ G] CHAR                             CC18
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DFBE
[ G] CHKWT                            DAB2
[ G] CHKWT2                           DABF
[ G] CHKWT4                           DAC6
[ G] CHPR                             C700
[ G] CINIT                            DF4B
[ G] CKSM                             FDAE
[ G] CLASS                            CFE7
[ G] CLASS2                           CFFF
[ G] CLASS4                           D005
[ G] CLD                              D413
[ G] CLER                             0016
[ G] CLOS32                           DB06
[ G] CLOS35                           DB0E
[ G] CLOSE                            DADB
[ G] CLOSE1                           DAE3
[ G] CLOSE2                           DAEB
[ G] CLOSE3                           DAF5
[ G] CLOSE4                           DB10
[ G] CLRFC2                           D545
[ G] CLRFCB                           D53C
[ G] CLRLRN                           D747
[ G] CLROFS                           D228
[ G] CLRTRY                           D671
[ G] CMFLG                            CC28
[ G] CMND                             D47F
[ G] CMND1                            D487
[ G] CMND15                           D49D
[ G] CMND2                            D4AB
[ G] CMND3                            D4B0
[ G] CMND4                            D4B4
[ G] CMND5                            D4BC
[ G] CMND7                            D4C8
[ G] CMND8                            D4CA
[ G] CMPNA1                           D563
[ G] CMPNA4                           D577
[ G] CMPNAM                           D55E
[ G] CODTBL                           D4D2
[ G] COLCNT                           CC04
[ G] COLDS                            CD00
[ G] COLMN                            CC29
[ G] COMTBL                           CC8A
[ G] CONTBL                           CC97
[ G] CONTRL                           FC0B
[ G] COPNA2                           D553
[ G] COPNAM                           D54E
[ G] COUNT                            CC49
[ G] CP                               CC2F
[ G] CPUTYP                           CC31
[ G] CRSAVE                           CC3D
[ G] CUD                              D415
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] CURFCB                           D40B
[ G] DADDBX                           CD36
[ G] DAER                             000E
[ G] DATAPT                           D40F
[ G] DATE                             CC0E
[ G] DATPNT                           CC3F
[ G] DCHECK                           DE0F
[ G] DCLASS                           CD21
[ G] DDOCMD                           CD4B
[ G] DDRIVE                           DE0C
[ G] DEBCYLL                          E360
[ G] DEBCYLM                          E361
[ G] DEBSEHD                          E362
[ G] DELC                             0018
[ G] DELDEV                           DE9A
[ G] DELET2                           DC1D
[ G] DELET4                           DC31
[ G] DELET5                           DC49
[ G] DELET6                           DC51
[ G] DELET7                           DC52
[ G] DELET8                           DC56
[ G] DELET9                           DC58
[ G] DELETE                           DBEE
[ G] DELNA2                           DBC6
[ G] DELNAM                           DBBF
[ G] DEVARE                           DE98
[ G] DFER                             0007
[ G] DFILSP                           CD2D
[ G] DGETCH                           CD15
[ G] DGETHX                           CD42
[ G] DINBUF                           CD1B
[ G] DINDEC                           CD48
[ G] DINIT                            DE15
[ G] DIRDN                            D417
[ G] DISPLAY_CRLF                     FD81
[ G] DLOAD                            CD30
[ G] DNER                             000F
[ G] DNEXTC                           CD27
[ G] DOCMD                            D333
[ G] DOFMS                            D1F1
[ G] DOFMS4                           D20D
[ G] DOFMS6                           D214
[ G] DOS                              CD90
[ G] DOS2                             CD9D
[ G] DOS3                             CDAB
[ G] DOS4                             CDB2
[ G] DOS6                             CDCD
[ G] DOS8                             CDD0
[ G] DOSTA4                           DADA
[ G] DOSTAT                           DAC9
[ G] DOUTAD                           CD45
[ G] DOUTDE                           CD39
[ G] DOUTHE                           CD3C
[ G] DPCRLF                           CD24
[ G] DPER                             000C
[ G] DPSTRN                           CD1E
[ G] DPUTCH                           CD18
[ G] DQUICK                           DE12
[ G] DREAD                            DE00
[ G] DRER                             0005
[ G] DRESTOR                          DE09
[ G] DRIVE                            DF78
[ G] DRIVE1                           DF88
[ G] DRIVEERR                         DF83
[ G] DRPTER                           CD3F
[ G] DRVADDRESS                       DE27
[ G] DRVINFO                          D436
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEC                             0005
[ G] DSEEK                            DE1B
[ G] DSETEX                           CD33
[ G] DSKERS                           CC6D
[ G] DSPR2                            CD51
[ G] DSPR3                            CD54
[ G] DSTAT                            CD4E
[ G] DTRK                             0000
[ G] DUMP                             FC3B
[ G] DUMP_LINE                        FCC7
[ G] DUMP_LINE_INVALID                FCF3
[ G] DUMP_LINE_LOOP                   FCD1
[ G] DUMP_LINE_LOOPA                  FCE3
[ G] DUMP_LINE_VALID                  FCF8
[ G] DUMP_LOOP                        FC4E
[ G] DVERFY                           DE06
[ G] DWARM                            DE18
[ G] DWRITE                           DE03
[ G] EFER                             0008
[ G] ENDOFFLEX                        DEFF
[ G] ENTRY                            CD67
[ G] ENTRY2                           CD8B
[ G] EOT                              0004
[ G] ERNM                             CC9F
[ G] ERRTYP                           CC20
[ G] ERRVEC                           CC2B
[ G] ETRIES                           D411
[ G] EXCLS                            D45D
[ G] EXCLS1                           D460
[ G] EXTTBL                           D10C
[ G] FAS                              0002
[ G] FBER                             0002
[ G] FCBBAS                           D409
[ G] FCBSTR                           D40B
[ G] FCD                              002F
[ G] FCS                              001E
[ G] FDI                              0022
[ G] FDN                              0003
[ G] FDT                              0019
[ G] FEA                              0013
[ G] FEER                             0003
[ G] FES                              0001
[ G] FFC                              0000
[ G] FFD                              0032
[ G] FFN                              0004
[ G] FID                              000F
[ G] FIER                             0014
[ G] FILEKO                           CC2D
[ G] FILIN                            CC26
[ G] FILIO                            CF1B
[ G] FILIO2                           CF23
[ G] FILIO4                           CF29
[ G] FILIO6                           CF32
[ G] FILOUT                           CC24
[ G] FLP                              001C
[ G] FLR                              0035
[ G] FMP                              0017
[ G] FMS                              D406
[ G] FMSBSY                           CC2E
[ G] FMSCLS                           D403
[ G] FMSINT                           D400
[ G] FMX                              003C
[ G] FNDENT                           DEB5
[ G] FNDFC3                           D52A
[ G] FNDFC4                           D532
[ G] FNDFC6                           D538
[ G] FNDFCB                           D521
[ G] FNDN04                           D8B4
[ G] FNDN06                           D8C5
[ G] FNDN08                           D8CF
[ G] FNDNA1                           D8DD
[ G] FNDNA2                           D8E9
[ G] FNDNA3                           D8F4
[ G] FNDNA4                           D8F5
[ G] FNDNA6                           D900
[ G] FNDNA8                           D908
[ G] FNDNA9                           D90A
[ G] FNDNAM                           D89C
[ G] FNE                              000C
[ G] FNK                              0038
[ G] FNU                              0010
[ G] FRI                              0023
[ G] FRN                              0020
[ G] FRQVECP                          FFF6
[ G] FSA                              0011
[ G] FSB                              0040
[ G] FSC                              003B
[ G] FSECMP                           D790
[ G] FSER                             0017
[ G] FSP                              003C
[ G] FSZ                              0015
[ G] FWB                              0024
[ G] GET                              D219
[ G] GETAV2                           D933
[ G] GETAV3                           D93D
[ G] GETAV4                           D93F
[ G] GETAVL                           D921
[ G] GETCH4                           CF0F
[ G] GETCH5                           CF14
[ G] GETCH6                           CF17
[ G] GETCHR                           CEF5
[ G] GETCUR                           D667
[ G] GETDI2                           D950
[ G] GETDIS                           D940
[ G] GETF35                           D071
[ G] GETFI2                           D059
[ G] GETFI3                           D06E
[ G] GETFI4                           D073
[ G] GETFI5                           D076
[ G] GETFIL                           D030
[ G] GETFS2                           D78F
[ G] GETFSM                           DDB8
[ G] GETFST                           D78B
[ G] GETHE2                           D13F
[ G] GETHE4                           D14C
[ G] GETHE6                           D160
[ G] GETHE8                           D166
[ G] GETHE9                           D169
[ G] GETHEX                           D13C
[ G] GETIR                            D841
[ G] GETIR1                           D85C
[ G] GETIR2                           D867
[ G] GETIR4                           D86F
[ G] GETIR8                           D87F
[ G] GETOP2                           D25E
[ G] GETOP4                           D278
[ G] GETOPN                           D252
[ G] GETRAN                           D578
[ G] GETS1                            DDC3
[ G] GETS2                            DDC5
[ G] GO                               FC59
[ G] GOTFIL                           CC4A
[ G] HSTBUF                           E363
[ G] ICER                             0001
[ G] IDE_ABORT                        E004
[ G] IDE_CONVERT_SECTOR               E295
[ G] IDE_INITA                        E026
[ G] IDE_PPIDETECT                    E0C4
[ G] IDE_PRINT_INFO                   E00D
[ G] IDE_READ                         E2B9
[ G] IDE_READ_BUFFER                  E222
[ G] IDE_READ_INFO                    E075
[ G] IDE_READ_INFO_ABORT              E0B2
[ G] IDE_READ_INFO_OK                 E0BE
[ G] IDE_READ_NO_SETUP                E2BC
[ G] IDE_READ_RAW_SECTOR              E0F8
[ G] IDE_READ_SECTOR                  E0D2
[ G] IDE_READ_SECTOR_DIRTY            E116
[ G] IDE_READ_SECTOR_DIRTY1           E11B
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E143
[ G] IDE_READ_SECTOR_ERROR            E0F6
[ G] IDE_SETUP_LBA                    E252
[ G] IDE_WAIT_DRQ                     E1F2
[ G] IDE_WAIT_DRQ1                    E1FC
[ G] IDE_WAIT_DRQ2                    E21E
[ G] IDE_WAIT_DRQ3                    E220
[ G] IDE_WAIT_DRQE                    E219
[ G] IDE_WAIT_NOT_BUSY                E1C9
[ G] IDE_WAIT_NOT_BUSY1               E1D3
[ G] IDE_WAIT_NOT_BUSY2               E1ED
[ G] IDE_WAIT_NOT_BUSY3               E1EF
[ G] IDE_WRITE                        E2DE
[ G] IDE_WRITE_BUFFER                 E23A
[ G] IDE_WRITE_SECTOR                 E146
[ G] IDE_WRITE_SECTOR_ERROR           E191
[ G] IDEBUFRD                         E226
[ G] IDEBUFWT                         E23E
[ G] IFER                             000D
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] IHNDLRP                          D3E7
[ G] IN1HG                            FD1D
[ G] INBU65                           CE6B
[ G] INBUF                            CE2A
[ G] INBUF2                           CE30
[ G] INBUF3                           CE49
[ G] INBUF4                           CE4E
[ G] INBUF6                           CE55
[ G] INBUF7                           CE70
[ G] INCH                             CD09
[ G] INCH2                            CD0C
[ G] INCHNE                           DE6D
[ G] INCHNL                           CC23
[ G] INDEC                            D185
[ G] INDEC2                           D188
[ G] INDEX                            CC3B
[ G] INER                             0015
[ G] INHEX                            FD01
[ G] INIT                             D43A
[ G] INIT1                            CD5B
[ G] INIT2                            D450
[ G] INIT4                            D455
[ G] INITI                            CD57
[ G] IOF_CONINW                       FD9E
[ G] IOTEMP                           CC45
[ G] IRER                             0013
[ G] IRFAS                            0004
[ G] IRL                              0018
[ G] IRQLL                            DEB6
[ G] IRQVEC                           FDAB
[ G] IRQVECP                          D3EB
[ G] IRS                              0010
[ G] ISEC                             0003
[ G] LBL                              0080
[ G] LC400                            C400
[ G] LD0AE                            D0AC
[ G] LD20B                            D20A
[ G] LD287                            D286
[ G] LD3E1                            D3E1
[ G] LD9D6                            D9D7
[ G] LGO                              D238
[ G] LGO2                             D24A
[ G] LINBUF                           C080
[ G] LINE                             CC1A
[ G] LKNAM                            CE00
[ G] LKNAM3                           CE04
[ G] LKNAM4                           CE0C
[ G] LKNAM6                           CE18
[ G] LKNAM8                           CE24
[ G] LOAD                             D1AF
[ G] LOAD11                           FCAC
[ G] LOAD15                           FCBA
[ G] LOAD19                           FCBF
[ G] LOAD2                            D1B2
[ G] LOAD21                           FCC4
[ G] LOAD3                            FC8D
[ G] LOAD4                            D1CD
[ G] LOAD6                            D1E2
[ G] LOADADDR                         C400
[ G] LOCK                             C709
[ G] LSTFC                            0016
[ G] LSTSEC                           000F
[ G] LSTTRK                           004C
[ G] LSTTRM                           CC11
[ G] MAIN                             FC00
[ G] MAIND                            0005
[ G] MAPUP                            CC47
[ G] MAXSP                            007F
[ G] MESSAGE1                         E31C
[ G] MESSAGE2                         E324
[ G] MESSAGE3                         E32B
[ G] MESSAGE4                         E338
[ G] MESSAGE5                         E349
[ G] MESSAGE6                         E35A
[ G] MEXIT                            D355
[ G] MEXIT2                           D35E
[ G] MLOAD                            FC38
[ G] MONITR                           DE33
[ G] MONLOAD                          FC8D
[ G] MONOUTHL                         FD47
[ G] MONOUTHR                         FD4B
[ G] MONSTACK                         C000
[ G] MONUART0                         FE68
[ G] MONUART1                         FE69
[ G] MONUART2                         FE6A
[ G] MONUART3                         FE6B
[ G] MONUART4                         FE6C
[ G] MONUART5                         FE6D
[ G] MONUART6                         FE6E
[ G] MONUART7                         FE6F
[ G] NEXTS                            DA9F
[ G] NEXTS4                           DAB1
[ G] NFER                             0004
[ G] NFERR                            CDD3
[ G] NFERR1                           CDD8
[ G] NFERR2                           CDDB
[ G] NFERR4                           CDDE
[ G] NL                               000B
[ G] NMIVECP                          FFFC
[ G] NODEV                            DEA4
[ G] NODR                             0004
[ G] NOER                             0000
[ G] NONMER                           D32D
[ G] NONMST                           CC63
[ G] NOTRST                           CC54
[ G] NRER                             0010
[ G] NTRST                            CC7A
[ G] NUL                              0000
[ G] NXTCH                            D008
[ G] NXTCH3                           D013
[ G] NXTCH4                           D02C
[ G] NXTRD2                           DDE9
[ G] NXTRD4                           DDEC
[ G] NXTRD6                           DDEF
[ G] NXTRDY                           DDD6
[ G] OFFSET                           CC1B
[ G] OPNCLD                           D826
[ G] OPNCUD                           D820
[ G] OPNDIR                           D826
[ G] OPNERR                           D9D9
[ G] OPNIR                            D82E
[ G] OPNR12                           D9BD
[ G] OPNR15                           D9D0
[ G] OPNRD                            D990
[ G] OPNRD1                           D9AA
[ G] OPNRD2                           D9D2
[ G] OPNRD3                           D9D3
[ G] OPNRW                            DB11
[ G] OPNSIR                           D819
[ G] OPNW85                           DA75
[ G] OPNWT                            D9E3
[ G] OPNWT3                           D9F2
[ G] OPNWT4                           DA0A
[ G] OPNWT5                           DA14
[ G] OPNWT8                           DA57
[ G] OPNWT9                           DA78
[ G] OUT2H                            FD58
[ G] OUT2HS                           FD7A
[ G] OUTADDR                          FD63
[ G] OUTADR                           CFCA
[ G] OUTCH                            CD0F
[ G] OUTCH2                           CD12
[ G] OUTCHN                           CC22
[ G] OUTDE4                           CF90
[ G] OUTDEC                           CF80
[ G] OUTDI2                           CFA0
[ G] OUTDI5                           CFAC
[ G] OUTDI6                           CFC3
[ G] OUTDI8                           CFC8
[ G] OUTDIG                           CF9D
[ G] OUTHEX                           CFCE
[ G] OUTHL                            CFD6
[ G] OUTHR                            CFDA
[ G] OUTHR1                           FD55
[ G] OUTHR2                           CFE4
[ G] OUTNUM                           CC48
[ G] OUTS                             FD7C
[ G] PCHK                             CCD8
[ G] PCRL15                           CED1
[ G] PCRL18                           CED6
[ G] PCRL19                           CED8
[ G] PCRLF                            CEAF
[ G] PCRLF1                           CECA
[ G] PCRLF2                           CEDB
[ G] PCRLF4                           CEEA
[ G] PCRLF6                           CEF0
[ G] PCRLF8                           CEF2
[ G] PCRLF9                           CEF4
[ G] PDATA1                           CE7B
[ G] PINIT                            CCC0
[ G] POSI05                           DD27
[ G] POSI65                           DD93
[ G] POSI68                           DD98
[ G] POSI75                           DDAF
[ G] POSI82                           DDB5
[ G] POSI85                           DDB7
[ G] POSIT                            DD14
[ G] POSIT0                           DD23
[ G] POSIT1                           DD28
[ G] POSIT2                           DD34
[ G] POSIT3                           DD3B
[ G] POSIT4                           DD4F
[ G] POSIT5                           DD69
[ G] POSIT6                           DD7B
[ G] POSIT7                           DD9E
[ G] POSIT8                           DDB3
[ G] POUT                             CCE4
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       DFD9
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      E02A
[ G] PPIDE_PROBE_FAIL                 E072
[ G] PPIDE_PROBE_SUCCESS              E074
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E19E
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DFD4
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DFD5
[ G] PPIDEWORKVAR                     DFD7
[ G] PPRD_IDE_8255                    0092
[ G] PPRMPT                           CC4C
[ G] PPWR_IDE_8255                    0080
[ G] PR0                              CCF8
[ G] PR1                              CCFC
[ G] PRCNT                            CC32
[ G] PRINT                            FC7B
[ G] PRINT2                           FC84
[ G] PRMPT                            CCAA
[ G] PRMTUSR                          CE25
[ G] PRSPL2                           C703
[ G] PRSPL3                           C706
[ G] PRSPL4                           C709
[ G] PRSPL5                           C70C
[ G] PRSPL6                           C70F
[ G] PRSPLI                           C700
[ G] PRTM                             D07A
[ G] PRTM1                            D092
[ G] PRTM2                            D097
[ G] PRTM3                            D0A5
[ G] PRTM5                            D0BE
[ G] PRTM6                            D0C1
[ G] PRTM7                            D0C4
[ G] PRVCHR                           CC19
[ G] PSTRNG                           CE79
[ G] PUTAV2                           D961
[ G] PUTAVL                           D951
[ G] PUTC68                           CF70
[ G] PUTC75                           CF7D
[ G] PUTCH2                           CF49
[ G] PUTCH4                           CF5E
[ G] PUTCH6                           CF60
[ G] PUTCH7                           CF7A
[ G] PUTCHR                           CF3B
[ G] PUTIR                            D880
[ G] PUTIR2                           D88B
[ G] PUTNXT                           D586
[ G] PUTRA2                           D5B5
[ G] PUTRA4                           D5B8
[ G] PUTRAN                           D599
[ G] PUTSP2                           D705
[ G] PUTSP4                           D715
[ G] PUTSP6                           D71C
[ G] PUTSPC                           D6FB
[ G] QCNT                             C71B
[ G] QUICK                            DFC9
[ G] RDER                             0009
[ G] RDNEX1                           D623
[ G] RDNEX2                           D629
[ G] RDNEX3                           D641
[ G] RDNEX4                           D645
[ G] RDNEX6                           D647
[ G] RDNEX8                           D649
[ G] RDNEXT                           D615
[ G] RDSEQ                            D5FE
[ G] RDSEQ0                           D609
[ G] RDSEQ1                           D610
[ G] READ                             DEBB
[ G] READERR                          DED1
[ G] READFLOPPY                       DED6
[ G] READIDE                          DEE1
[ G] READS2                           D654
[ G] READS4                           D65E
[ G] READS6                           D666
[ G] READSS                           D64A
[ G] REMFC2                           D519
[ G] REMFCB                           D510
[ G] RENAM1                           DB52
[ G] RENAM4                           DB71
[ G] RENAM5                           DB75
[ G] RENAM6                           DB76
[ G] RENAME                           DB44
[ G] RENTER                           CD06
[ G] RESETV                           FFFE
[ G] RESTIO                           CDE4
[ G] RESTORE                          DF5D
[ G] RESTOREERR                       DF6F
[ G] RESTOREFLOPPY                    DF73
[ G] RESTOREIDE                       DF75
[ G] RETADR                           CC41
[ G] RETRN                            D345
[ G] RETRNR                           CC16
[ G] RETRY                            D679
[ G] RETRY2                           D68E
[ G] RETRY4                           D6A2
[ G] RETRY6                           D6A5
[ G] REWIN2                           D5F9
[ G] REWIND                           D5EB
[ G] RMER                             0019
[ G] RNFMSK                           0010
[ G] RPTE44                           D2F5
[ G] RPTE85                           D313
[ G] RPTER1                           D2A3
[ G] RPTER2                           D2B3
[ G] RPTER4                           D2E1
[ G] RPTER6                           D2F7
[ G] RPTER7                           D2FF
[ G] RPTER9                           D328
[ G] RPTERR                           D289
[ G] RRER                             0018
[ G] RS                               0004
[ G] RSC                              0007
[ G] RST_DLY                          E1BC
[ G] RSTNA2                           DDCB
[ G] RSTNAM                           DDC6
[ G] RSTRIO                           CD2A
[ G] RTC                              0005
[ G] RTS                              CDFF
[ G] SBC                              0037
[ G] SCC                              0009
[ G] SCMSK                            007F
[ G] SECMAP                           D41D
[ G] SEEK                             DF2E
[ G] SEEKERR                          DF42
[ G] SEEKFLOPPY                       DF46
[ G] SEEKIDE                          DF48
[ G] SERIAL_INCHW1                    FD9E
[ G] SERIALINIT                       FD8C
[ G] SET_PPI_RD                       E300
[ G] SET_PPI_WR                       E30E
[ G] SETEX4                           D0FA
[ G] SETEX5                           D103
[ G] SETEX6                           D10A
[ G] SETEXT                           D0E5
[ G] SETFC2                           D507
[ G] SETFCB                           D4FE
[ G] SETFD                            D90F
[ G] SETFD2                           D920
[ G] SETMA2                           DCF0
[ G] SETMAX                           DCD9
[ G] SETST                            DA8E
[ G] SINDIR                           D41A
[ G] SKPSP2                           D0D4
[ G] SKPSP4                           D0DE
[ G] SKPSPC                           D0CE
[ G] SL                               0100
[ G] SP                               FDAC
[ G] SPARES                           CC33
[ G] SPC                              0020
[ G] SPCLS                            CC21
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] SRDSE2                           D5CB
[ G] SRDSE6                           D5E5
[ G] SRDSE7                           D5E8
[ G] SRDSE8                           D5EA
[ G] SRDSEQ                           D5BD
[ G] STACK                            C07F
[ G] STAR                             C400
[ G] STAR0                            C407
[ G] STARTOFFLEX                      C000
[ G] STAT                             DE5D
[ G] STER                             0012
[ G] STKSTR                           CC43
[ G] STRIES                           D412
[ G] SW1VECP                          FFFA
[ G] SW2VECP                          FFF4
[ G] SWAP                             DB7B
[ G] SWAP2                            DB83
[ G] SWAP4                            DB9D
[ G] SWAP6                            DBA7
[ G] SWIVEC                           FDAB
[ G] SWIVECP                          D3E9
[ G] SWPNM                            DBAB
[ G] SWPNM2                           DBAD
[ G] SWPNM4                           DBB9
[ G] SWPNM5                           DBBA
[ G] SWTSE2                           D6EE
[ G] SWTSE4                           D6F3
[ G] SWTSE6                           D6F8
[ G] SWTSEQ                           D6D8
[ G] SYSDAY                           CC0F
[ G] SYSDRV                           CC0B
[ G] SYSFCB                           C840
[ G] SYSFLG                           CC0D
[ G] SYSMTH                           CC0E
[ G] SYSYR                            CC10
[ G] TADR                             CC1E
[ G] TAPPTR                           DEB9
[ G] Temp                             CC4B
[ G] TEMP                             D40D
[ G] TINIT                            DE3F
[ G] TMER                             0006
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TMRFLG                           CC2A
[ G] TREDIR                           DE68
[ G] TRMSK                            007F
[ G] TSTHE2                           D172
[ G] TSTHE3                           D17E
[ G] TSTHE4                           D182
[ G] TSTHEX                           D16C
[ G] TSTNAM                           D22E
[ G] TSTSTR                           D3FD
[ G] TTYBE                            CC07
[ G] TTYBS                            CC00
[ G] TTYDEL                           CC01
[ G] TTYDP                            CC03
[ G] TTYEJ                            CC08
[ G] TTYEOL                           CC02
[ G] TTYESC                           CC0A
[ G] TTYNL                            CC05
[ G] TTYPS                            CC09
[ G] TTYTB                            CC06
[ G] TX_BUSYLP                        FD8F
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNLOCK                           C70C
[ G] UPDF75                           DC9A
[ G] UPDFS2                           DC67
[ G] UPDFS4                           DC7B
[ G] UPDFS6                           DC92
[ G] UPDFS7                           DC97
[ G] UPDFS8                           DC9F
[ G] UPDFS9                           DCAF
[ G] UPDFSM                           DC5B
[ G] USEDSKYNG                        0000
[ G] USRTBL                           CC12
[ G] VERIFY                           DF11
[ G] VERIFYERR                        DF25
[ G] VERIFYFLOPPY                     DF29
[ G] VERIFYIDE                        DF2B
[ G] Vers                             C402
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] VRFYFG                           D435
[ G] WARM                             DF54
[ G] WARMS                            CD03
[ G] WHATST                           CC4E
[ G] WPER                             000B
[ G] WRITE                            DEEF
[ G] WRITEERR                         DF05
[ G] WRITEFLOPPY                      DF0A
[ G] WRITEIDE                         DF0C
[ G] WRITIT                           DBD1
[ G] WRITS2                           D6B2
[ G] WRITS4                           D6C6
[ G] WRITS6                           D6D2
[ G] WRITS7                           D6D3
[ G] WRITS8                           D6D5
[ G] WRITSS                           D6A8
[ G] WRKDRV                           CC0C
[ G] WRSER1                           FD8D
[ G] WRTDI2                           D98D
[ G] WRTDI4                           D98F
[ G] WRTDIR                           D973
[ G] WRTER1                           DBE5
[ G] WRTER2                           DBE9
[ G] WRTER3                           DBEB
[ G] WRTER4                           DBED
[ G] WRTERR                           DBD9
[ G] WTAPP                            DB1F
[ G] WTAPP2                           DB37
[ G] WTAPP4                           DB3E
[ G] WTAPP6                           DB3F
[ G] WTER                             000A
[ G] WTFSM                            DCB0
[ G] WTFSM2                           DCC4
[ G] WTNEX1                           D77B
[ G] WTNEXT                           D754
[ G] WTSEQ                            D71D
[ G] WTSEQ2                           D737
[ G] WTSEQ4                           D746
[ G] XFR                              CC1D
[ G] XHI                              FDB0
[ G] XLOW                             FDB1
[ G] XTEMP                            CC39
[ G] ZC43A                            C41E
[ G] ZC47E                            C43C
[ G] ZC488                            C446
[ G] ZC4A0                            C45E
[ G] ZC4AE                            C470
[ G] ZC4B0                            C472
[ G] ZC4B2                            C474
[ G] ZC4BB                            C47D
[ G] ZC4C4                            C486
[ G] ZC4CA                            C48C
[ G] ZC4D6                            C498
[ G] ZC555                            C49E
[ G] ZC810                            C4B1
[ G] ZC82B                            C4D5
[ G] ZC82E                            C4DE
[ G] ZC951                            C505
