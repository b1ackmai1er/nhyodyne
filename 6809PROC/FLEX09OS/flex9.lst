                      (        flex9.asm):00001                 NAM     flex9.asm
                      (        flex9.asm):00002                 OPT     pag
                      (        flex9.asm):00003                 PAG
                      (        flex9.asm):00004                 PRAGMA CD
                      (        flex9.asm):00005         
                      (        flex9.asm):00006                         include "init.asm"
                      (         init.asm):00001                 NAM     INIT.TXT
                      (         init.asm):00002                 OPT     pag
                      (         init.asm):00003                 PAG
                      (         init.asm):00004                 PRAGMA CD
                      (         init.asm):00005         *************************************************
                      (         init.asm):00006         *                                               *
                      (         init.asm):00007         *       flex 2.9:1 initialization code          *
                      (         init.asm):00008         *                                               *
                      (         init.asm):00009         *************************************************
     C000             (         init.asm):00010         STARTOFFLEX     equ     $C000
     DEFF             (         init.asm):00011         ENDOFFLEX       equ     $DEFF
                      (         init.asm):00012         
                      (         init.asm):00013         ;LNBUFF  equ     $C080
                      (         init.asm):00014         ;STARTR  equ     $C100
                      (         init.asm):00015         
                      (         init.asm):00016         ;SMONTH  equ     $CC0E
                      (         init.asm):00017         ;LNBUFP  equ     $CC14
                      (         init.asm):00018         ;ESCRTN  equ     $CC16
                      (         init.asm):00019         ;PROMPT  equ     $CC4E
                      (         init.asm):00020         
                      (         init.asm):00021         ;COLDST  equ     $CD00
                      (         init.asm):00022         ;WARMST  equ     $CD03
                      (         init.asm):00023         ;RENTER  equ     $CD06
                      (         init.asm):00024         ;INCH    equ     $CD09
                      (         init.asm):00025         ;INCH2   equ     $CD0C
                      (         init.asm):00026         ;OUTCH   equ     $CD0F
                      (         init.asm):00027         ;OUTCH2  equ     $CD12
                      (         init.asm):00028         ;INBUFF  equ     $CD1B
                      (         init.asm):00029         ;PSTRNG  equ     $CD1E
                      (         init.asm):00030         ;PRCRLF  equ     $CD24
                      (         init.asm):00031         ;INDECM  equ     $CD48
                      (         init.asm):00032         ;STAT    equ     $CD4E
                      (         init.asm):00033         
                      (         init.asm):00034         ;ZD0F0   equ     $D0F0
                      (         init.asm):00035         ;ZD0F1   equ     $D0F1
                      (         init.asm):00036         
     D370             (         init.asm):00037         STIME   equ     $D370
                      (         init.asm):00038         
                      (         init.asm):00039         ;IHNDLR  equ     $D3E7
                      (         init.asm):00040         ;TIMOFF  equ     $D3ED
                      (         init.asm):00041         ;TIMON   equ     $D3EF
                      (         init.asm):00042         ;TMINIT  equ     $D3F1
                      (         init.asm):00043         ;TRMINT  equ     $D3F5
                      (         init.asm):00044         ;TRMCHK  equ     $D3F7
                      (         init.asm):00045         ;TIMOUT  equ     $D3F9
                      (         init.asm):00046         ;TIMINE  equ     $D3FB
                      (         init.asm):00047         ;ZD3FD   equ     $D3FD
                      (         init.asm):00048         
                      (         init.asm):00049         ;FMSCAL  equ     $D406
                      (         init.asm):00050         
                      (         init.asm):00051         ;ZDFD0   equ     $DFD0
                      (         init.asm):00052         ;ZDFDC   equ     $DFDC
                      (         init.asm):00053         ;ZDFDD   equ     $DFDD
                      (         init.asm):00054         
                      (         init.asm):00055         ;ZE005   equ     $E005
                      (         init.asm):00056         ;ZE045   equ     $E045
                      (         init.asm):00057         ;ZE085   equ     $E085
                      (         init.asm):00058         ;ZE090   equ     $E090
                      (         init.asm):00059         ;ZE0C5   equ     $E0C5
                      (         init.asm):00060         
                      (         init.asm):00061         ;ZF810   equ     $F810
                      (         init.asm):00062         ;ZFFF0   equ     $FFF0
                      (         init.asm):00063         ;ZFFFC   equ     $FFFC
                      (         init.asm):00064         ;ZFFFD   equ     $FFFD
                      (         init.asm):00065         
                      (         init.asm):00066                 page
                      (         init.asm):00067         
                      (         init.asm):00068         ****************************************************
                      (         init.asm):00069         
                      (         init.asm):00070         
                      (         init.asm):00071         *
                      (         init.asm):00072         * STARTUp rouTINE
                      (         init.asm):00073         * THIS RoutinE INITIALIZES CERTAIN PARAMETERS, GETS
                      (         init.asm):00074         * DATE From uSER, AND EXECUTES A STARTUP.TXT FILE.
                      (         init.asm):00075         
                      (         init.asm):00076                 org     $C400
                      (         init.asm):00077         
C400                  (         init.asm):00078         LOADADDR
C400 2005             (         init.asm):00079 [3]     STAR    bra     STAR0
C402 822E893A81       (         init.asm):00080         Vers    fcb     $82,$2E,$89,$3A,$81
                      (         init.asm):00081         
C407 8639             (         init.asm):00082 [2]     STAR0   lda     #$39            ;SET UP RTS
C409 B7D3FD           (         init.asm):00083 [5]             sta     >TSTSTR          ;disable re-entry to this code
C40C CCCD03           (         init.asm):00084 [3]             ldd     #$CD03          ;setup 'escape routine' address
C40F FDCC16           (         init.asm):00085 [6]             std     >RETRNR         ;ESCRTN
                      (         init.asm):00086         
C412 CCBFFF           (         init.asm):00087 [3]             LDD     #$BFFF
C415 FDCC2B           (         init.asm):00088 [6]             STD     MEMEND
                      (         init.asm):00089         ;
                      (         init.asm):00090         ;        ldd     >TRMCHK         ;get address of terminal status check routine
                      (         init.asm):00091         ;        std     >DSTAT+1         ;set in FLEX status check jump
                      (         init.asm):00092         ;                                ;
                      (         init.asm):00093         ;        ldd     >TIMOUT         ;get address of terminal output routine
                      (         init.asm):00094         ;        std     >OUTCH+1        ;set in FLEX out char jump
                      (         init.asm):00095         ;        std     >OUTCH2+1       ;set in FLEX alternate out char jump
                      (         init.asm):00096         ;                                ;
                      (         init.asm):00097         ;        ldd     >TIMINE         ;get address of terminal input routine
                      (         init.asm):00098         ;        std     >INCH+1         ;set in FLEX in char jump
                      (         init.asm):00099         ;        std     >INCH2+1        ;set in FLEX alt in char jump
                      (         init.asm):00100         ;
                      (         init.asm):00101         
C418 AD9FD3F5         (         init.asm):00102 [7+5]           jsr     [TINITP]         ;do terminal init
                      (         init.asm):00103         
C41C 8EC4F1           (         init.asm):00104 [3]             ldx     #ZC810          ;point to Flex version signon
C41F BDCE79           (         init.asm):00105 [8]             jsr     >PSTRNG         ;print to terminal
C422 BDCD24           (         init.asm):00106 [8]             jsr     >DPCRLF         ;and CRLF
                      (         init.asm):00107                                         ;
                      (         init.asm):00108         
C425 FCCC4E           (         init.asm):00109 [6]     ZC43A   ldd     >PPRMPT         ;PROMPT get  current prompt pointer
C428 3406             (         init.asm):00110 [5+2]           pshs    b,a             ;save it
C42A 8EC522           (         init.asm):00111 [3]             ldx     #ZC82E          ;request for date - PROMPT FOR IT
C42D BFCC4E           (         init.asm):00112 [6]             stx     >PPRMPT         ;set new prompt pointer
C430 BDCE79           (         init.asm):00113 [8]             jsr     >PSTRNG         ;do prompt
C433 BDCD1B           (         init.asm):00114 [8]             jsr     >DINBUF         ;get date
C436 3506             (         init.asm):00115 [5+2]           puls    b,a             ;restore prompt pointer
C438 FDCC4E           (         init.asm):00116 [6]             std     >PPRMPT         ;
C43B 108ECC0E         (         init.asm):00117 [4]             ldy     #SYSMTH         ;SMONTH point Y reg to date regs
C43F 8D5D             (         init.asm):00118 [7]             bsr     ZC4A0           ;convert month from ascii
C441 25E2             (         init.asm):00119 [3]             bcs     ZC43A           ;no good - retry
                      (         init.asm):00120                                         ;
C443 8D59             (         init.asm):00121 [7]             bsr     ZC4A0           ;convert day from ascii
C445 25DE             (         init.asm):00122 [3]             bcs     ZC43A           ;no good - retry
                      (         init.asm):00123                                         ;
C447 8D55             (         init.asm):00124 [7]             bsr     ZC4A0           ;convert year from ascii
C449 25DA             (         init.asm):00125 [3]             bcs     ZC43A           ;no good - retry
                      (         init.asm):00126                                         ;
C44B 108ED370         (         init.asm):00127 [4]             ldy     #STIME          ;point Y reg to system time regs
C44F 8D4D             (         init.asm):00128 [7]             bsr     ZC4A0           ;
C451 25D2             (         init.asm):00129 [3]             bcs     ZC43A           ;no good - retry
                      (         init.asm):00130                                         ;
C453 8D49             (         init.asm):00131 [7]             bsr     ZC4A0           ;
C455 25CE             (         init.asm):00132 [3]             bcs     ZC43A           ;no good - retry
                      (         init.asm):00133                                         ;
C457 8D45             (         init.asm):00134 [7]             bsr     ZC4A0           ;
C459 25CA             (         init.asm):00135 [3]             bcs     ZC43A           ;no good - retry
C45B 7FD373           (         init.asm):00136 [7]             clr     STIME+3         ;clear tick counter
                      (         init.asm):00137         
C45E BDCD24           (         init.asm):00138 [8]             jsr     >DPCRLF         ;do CRLF
                      (         init.asm):00139         
C461 BDDE18           (         init.asm):00140 [8]             jsr     >WARM          ;init the disk drivers
C464 8EC840           (         init.asm):00141 [3]             ldx     #SYSFCB         ;point to STARTUP.TXT FCB
C467 BDDE0F           (         init.asm):00142 [8]             jsr     >CHKRDY         ;do disk check
C46A 8601             (         init.asm):00143 [2]             lda     #$01            ;set for read operation
C46C A784             (         init.asm):00144 [4+0]           sta     ,x              ;
C46E BDD406           (         init.asm):00145 [8]             jsr     >FMS            ;D406
C471 2709             (         init.asm):00146 [3]             beq     ZC47E           ;no error
                      (         init.asm):00147                                         ;
C473 A601             (         init.asm):00148 [4+1]           lda     $01,x           ;
C475 8104             (         init.asm):00149 [2]             cmpa    #$04            ;file not found error?
C477 263B             (         init.asm):00150 [3]             bne     ZC4B2           ;no -
                      (         init.asm):00151                                         ;
C479 7ECD03           (         init.asm):00152 [4]             jmp     >WARMS         ;yes - ignore file
                      (         init.asm):00153                                         ;
C47C 108EC080         (         init.asm):00154 [4]     ZC47E   ldy     #LINBUF         ;init line buffer pointer
C480 10BFCC14         (         init.asm):00155 [7]             sty     >BUFPNT         ;LNBUFP
C484 C680             (         init.asm):00156 [2]             ldb     #$80            ;set byte count to move
                      (         init.asm):00157                                         ;
C486 BDD406           (         init.asm):00158 [8]     ZC488   jsr     >FMS            ;get byte from startup.txt
                      (         init.asm):00159         
C489 2629             (         init.asm):00160 [3]             bne     ZC4B2           ;error
C48B 5A               (         init.asm):00161 [2]             decb                    ;decrement count
C48C 2726             (         init.asm):00162 [3]             beq     ZC4B2           ;done
                      (         init.asm):00163                                         ;
C48E A7A0             (         init.asm):00164 [4+2]           sta     ,y+             ;put character in line buffer
C490 810D             (         init.asm):00165 [2]             cmpa    #$0D            ;see if EOL character
C492 26F2             (         init.asm):00166 [3]             bne     ZC488           ;no - loop
                      (         init.asm):00167                                         ;
C494 8604             (         init.asm):00168 [2]             lda     #$04            ;yes - close file
C496 A784             (         init.asm):00169 [4+0]           sta     ,x              ;
C498 BDD406           (         init.asm):00170 [8]             jsr     >FMS            ;
                      (         init.asm):00171         
C49B 7ECD06           (         init.asm):00172 [4]             jmp     >RENTER         ;re-enter FLEX with command in line buffer
                      (         init.asm):00173                                         ;
                      (         init.asm):00174         *       convert ascii to decimal;
                      (         init.asm):00175                                         ;
C49E BDCD48           (         init.asm):00176 [8]     ZC4A0   jsr     >DINDEC         ;
C4A1 3410             (         init.asm):00177 [5+2]           pshs    x               ;
C4A3 250D             (         init.asm):00178 [3]             bcs     ZC4B0           ;
C4A5 A6A4             (         init.asm):00179 [4+0]           lda     ,y              ;
C4A7 5D               (         init.asm):00180 [2]             tstb                    ;see if any valid decimal digits entered
C4A8 1A01             (         init.asm):00181 [3]             orcc    #$01            ;set carry flag for error
C4AA 2704             (         init.asm):00182 [3]             beq     ZC4AE           ;no - return error
                      (         init.asm):00183                                         ;
C4AC A661             (         init.asm):00184 [4+1]           lda     $01,s           ;yes - get returned byte
C4AE 1CFE             (         init.asm):00185 [3]             andcc   #$FE            ;set carry flag = 0 if no error
C4B0 A7A0             (         init.asm):00186 [4+2]   ZC4AE   sta     ,y+             ;put in callers buffer
C4B2 3586             (         init.asm):00187 [5+4]   ZC4B0   puls    pc,b,a          ;return
                      (         init.asm):00188         
                      (         init.asm):00189         *       error in startup file - report it
                      (         init.asm):00190         
C4B4 8EC4DE           (         init.asm):00191 [3]     ZC4B2   ldx     #ZC555          ;can't run startup message
                      (         init.asm):00192         
C4B7 BDCE79           (         init.asm):00193 [8]             jsr     >PSTRNG
                      (         init.asm):00194         
C4BA 7ECD03           (         init.asm):00195 [4]             jmp     >WARMS
                      (         init.asm):00196         
                      (         init.asm):00197         *       fix up number of K of memory available message
                      (         init.asm):00198         
C4BD 3414             (         init.asm):00199 [5+3]   ZC4BB   pshs    x,b
C4BF 8EC519           (         init.asm):00200 [3]             ldx     #ZC82B          ;'K' message
C4C2 8604             (         init.asm):00201 [2]             lda     #$04
C4C4 2006             (         init.asm):00202 [3]             bra     ZC4CA
                      (         init.asm):00203         
                      (         init.asm):00204         *
                      (         init.asm):00205         
C4C6 800A             (         init.asm):00206 [2]     ZC4C4   suba    #$0A
C4C8 A784             (         init.asm):00207 [4+0]           sta     ,x
C4CA 8601             (         init.asm):00208 [2]             lda     #$01
                      (         init.asm):00209         
                      (         init.asm):00210         *
                      (         init.asm):00211         
C4CC AB82             (         init.asm):00212 [4+2]   ZC4CA   adda    ,-x
C4CE 8A30             (         init.asm):00213 [2]             ora     #$30
C4D0 A784             (         init.asm):00214 [4+0]           sta     ,x
C4D2 8139             (         init.asm):00215 [2]             cmpa    #$39
C4D4 22F0             (         init.asm):00216 [3]             bhi     ZC4C4
C4D6 3594             (         init.asm):00217 [5+5]           puls    pc,x,b
                      (         init.asm):00218         
                      (         init.asm):00219         *       return status that no no RTC is available
                      (         init.asm):00220         *       but mPT does exist
                      (         init.asm):00221         
C4D8 BDDE3E           (         init.asm):00222 [8]     ZC4D6   jsr     TMINT           ;init timer
C4DB 8602             (         init.asm):00223 [2]             lda     #$02            ;set flag for MPT
C4DD 39               (         init.asm):00224 [5]             rts
                      (         init.asm):00225         
                      (         init.asm):00226         *       startup file error message
                      (         init.asm):00227         
C4DE 43616E2774207275 (         init.asm):00228         ZC555   fcc     "Can't run STARTUP."
     6E20535441525455
     502E
C4F0 04               (         init.asm):00229                 fcb     $04
                      (         init.asm):00230         
                      (         init.asm):00231         *       flex startup signon message
                      (         init.asm):00232         
C4F1                  (         init.asm):00233         ZC810   ;fcb     $1A               ; purpose?
C4F1 464C455820666F72 (         init.asm):00234                 fcc     "FLEX for NHYODYNE 6809 Version 2.9:2 "
     204E48594F44594E
     4520363830392056
     657273696F6E2032
     2E393A3220
C516 043438           (         init.asm):00235                 fcb     $04,$34,$38   ; purpose?
                      (         init.asm):00236         
C519 34384B2072616D   (         init.asm):00237         ZC82B   fcc     "48K ram"
C520 04               (         init.asm):00238                 fcb     $04        ; purpose?
C521 04               (         init.asm):00239                 fcb     $04
                      (         init.asm):00240         
                      (         init.asm):00241         *       date prompt
                      (         init.asm):00242         
C522 4461746520616E64 (         init.asm):00243         ZC82E   fcc     "Date and TIME (MM/DD/YY HH/MM/SS)? "
     2054494D4520284D
     4D2F44442F595920
     48482F4D4D2F5353
     293F20
C545 04               (         init.asm):00244                 fcb     $04
                      (         init.asm):00245         
                      (         init.asm):00246         ;        org     SYSFCB         ; same data in FLX29CPP
                      (         init.asm):00247         
                      (         init.asm):00248         ;        fcb     $FF
                      (         init.asm):00249         ;        fcb     $00
                      (         init.asm):00250         ;        fcb     $00
                      (         init.asm):00251         ;        fcb     $00
                      (         init.asm):00252         ;        fcc     "startup"
                      (         init.asm):00253         ;        fcb     $00
                      (         init.asm):00254         ;        fcc     "txt"
                      (         init.asm):00255         ;        fcb     $00
                      (         init.asm):00256         
                      (         init.asm):00257         *************************************************
                      (         init.asm):00258         *                                               *
                      (         init.asm):00259         *       flex entry point after boot             *
                      (         init.asm):00260         *                                               *
                      (         init.asm):00261         *         this must start at $C850              *
                      (         init.asm):00262         *       N8VEM doesn't use this!                 *
                      (         init.asm):00263         *************************************************
                      (         init.asm):00264         ;               org $c850
                      (         init.asm):00265         ;COLDSTART
                      (         init.asm):00266         ;SFRES1  orcc    #$50
                      (         init.asm):00267                 ;lds     #LNBUF
                      (         init.asm):00268                 ;ldd     >ZDFDC
                      (         init.asm):00269                 ;ldx     >ZD0F0
                      (         init.asm):00270                 ;pshs    x,b,a
                      (         init.asm):00271                 ;ldx     #$99AA
                      (         init.asm):00272                 ;ldy     #STARTR+256
                      (         init.asm):00273                 ;ldb     #$FF
                      (         init.asm):00274         
                      (         init.asm):00275         ;ZC867   lbsr    ZC91A
                      (         init.asm):00276                 ;stx     >ZD0F0
                      (         init.asm):00277                 ;cmpx    >ZD0F0
                      (         init.asm):00278                 ;bne     ZC888
                      (         init.asm):00279                 ;pshs    b
                      (         init.asm):00280         
                      (         init.asm):00281         ;ZC874   lbsr    ZC91A
                      (         init.asm):00282                 ;stb     >ZD0F1
                      (         init.asm):00283                 ;subb    #$01
                      (         init.asm):00284                 ;bcc     ZC874
                      (         init.asm):00285         
                      (         init.asm):00286                 ;puls    b
                      (         init.asm):00287                 ;lbsr    ZC91A
                      (         init.asm):00288                 ;cmpb    >ZD0F1
                      (         init.asm):00289                 ;beq     ZC889
                      (         init.asm):00290         ;ZC888   clra
                      (         init.asm):00291         
                      (         init.asm):00292         ;ZC889   sta     ,-y
                      (         init.asm):00293                 ;beq     ZC890
                      (         init.asm):00294                 ;lbsr    ZC4BB
                      (         init.asm):00295         
                      (         init.asm):00296         ;ZC890   subb    #$01
                      (         init.asm):00297                 ;bcc     ZC867
                      (         init.asm):00298         
                      (         init.asm):00299                 ;puls    x,b,a
                      (         init.asm):00300                 ;std     >ZFFFC
                      (         init.asm):00301                 ;stx     >ZD0F0
                      (         init.asm):00302                 ;clra
                      (         init.asm):00303                 ;ldx     #STARTR
                      (         init.asm):00304                 ;ldb     >ZDFDC
                      (         init.asm):00305                 ;eorb    #$0F
                      (         init.asm):00306                 ;clr     d,x
                      (         init.asm):00307                 ;ldb     >ZDFDD
                      (         init.asm):00308                 ;eorb    #$0F
                      (         init.asm):00309                 ;clr     d,x
                      (         init.asm):00310                 ;bsr     ZC922
                      (         init.asm):00311                 ;tstb
                      (         init.asm):00312                 ;beq     ZC8B8
                      (         init.asm):00313         
                      (         init.asm):00314         ;ZC8B3   clr     ,y+
                      (         init.asm):00315                 ;decb
                      (         init.asm):00316                 ;bne     ZC8B3
                      (         init.asm):00317         
                      (         init.asm):00318         ;ZC8B8   leay    -$0C,y
                      (         init.asm):00319                 ;ldx     #ZFFF0
                      (         init.asm):00320                 ;ldb     #$10
                      (         init.asm):00321         
                      (         init.asm):00322         ;ZC8BF   lda     ,y+
                      (         init.asm):00323                 ;sta     ,x+
                      (         init.asm):00324                 ;decb
                      (         init.asm):00325                 ;bne     ZC8BF
                      (         init.asm):00326                 ;lda     >MEMEND
                      (         init.asm):00327                 ;asla
                      (         init.asm):00328                 ;asla
                      (         init.asm):00329                 ;asla
                      (         init.asm):00330                 ;asla
                      (         init.asm):00331                 ;clrb
                      (         init.asm):00332                 ;subd    #$0001
                      (         init.asm):00333                 ;std     >MEMEND
                      (         init.asm):00334                 ;lbsr    ZC4D6
                      (         init.asm):00335                 ;ora     >CPUTYP
                      (         init.asm):00336                 ;ldb     >ZDFD0
                      (         init.asm):00337                 ;bitb    #$F0
                      (         init.asm):00338                 ;beq     ZC8E3
                      (         init.asm):00339                 ;ora     #$01
                      (         init.asm):00340         
                      (         init.asm):00341         ;ZC8E3   ldb     >ZE005
                      (         init.asm):00342                 ;beq     ZC8FD
                      (         init.asm):00343                 ;cmpb    #$FF
                      (         init.asm):00344                 ;beq     ZC8FD
                      (         init.asm):00345                 ;cmpb    >ZE0C5
                      (         init.asm):00346                 ;bne     ZC8FD
                      (         init.asm):00347                 ;cmpb    >ZE045
                      (         init.asm):00348                 ;bne     ZC8FD
                      (         init.asm):00349                 ;cmpb    >ZE085
                      (         init.asm):00350                 ;bne     ZC8FD
                      (         init.asm):00351                 ;ora     #$04
                      (         init.asm):00352         
                      (         init.asm):00353         ;ZC8FD   ldx     >$E800
                      (         init.asm):00354                 ;pshs    x
                      (         init.asm):00355                 ;ldx     #$99AA
                      (         init.asm):00356                 ;stx     >$E800
                      (         init.asm):00357                 ;cmpx    >$E800
                      (         init.asm):00358                 ;puls    x
                      (         init.asm):00359                 ;bne     ZC911
                      (         init.asm):00360                 ;ora     #$10
                      (         init.asm):00361         
                      (         init.asm):00362         ;ZC911   stx     >$E800
                      (         init.asm):00363                 ;sta     >CPUTYP
C546 7EC400           (         init.asm):00364 [4]             jmp     >STAR
                      (         init.asm):00365         
                      (         init.asm):00366         *
                      (         init.asm):00367         
                      (         init.asm):00368         ;ZC91A   tfr     b,a
                      (         init.asm):00369                 ;eora    #$0F
                      (         init.asm):00370                 ;sta     >ZFFFD
                      (         init.asm):00371                 ;rts
                      (         init.asm):00372         
                      (         init.asm):00373         ;*
                      (         init.asm):00374         
                      (         init.asm):00375         ;ZC922   ldb     #$0C
                      (         init.asm):00376                 ;ldy     #ZDFD0
                      (         init.asm):00377         ;*       ldx     #STARTR+16
                      (         init.asm):00378                 ;ldx     #STARTR
                      (         init.asm):00379         
                      (         init.asm):00380         ;ZC92B   cmpx    #STARTR+256
                      (         init.asm):00381                 ;beq     ZC93D
                      (         init.asm):00382                 ;lda     ,x+
                      (         init.asm):00383                 ;beq     ZC92B
                      (         init.asm):00384                 ;sta     ,y+
                      (         init.asm):00385                 ;inc     >MEMEND
                      (         init.asm):00386                 ;decb
                      (         init.asm):00387                 ;bne     ZC92B
                      (         init.asm):00388                 ;rts
                      (         init.asm):00389         
                      (         init.asm):00390         ;ZC93D   ldx     #STARTR
                      (         init.asm):00391         
                      (         init.asm):00392         ;ZC940   cmpx    #STARTR+16
                      (         init.asm):00393                 ;beq     ZC951
                      (         init.asm):00394                 ;lda     ,x+
                      (         init.asm):00395                 ;beq     ZC940
                      (         init.asm):00396                 ;sta     ,y+
                      (         init.asm):00397                 ;inc     >MEMEND
                      (         init.asm):00398                 ;decb
                      (         init.asm):00399                 ;bne     ZC940
                      (         init.asm):00400         
C549 39               (         init.asm):00401 [5]     ZC951   rts
                      (        flex9.asm):00007                         include "spooler.asm"
                      (      spooler.asm):00001                 NAM     SPOOLER.TXT
                      (      spooler.asm):00002                 OPT     pag
                      (      spooler.asm):00003         *       LEN     96
                      (      spooler.asm):00004                 PAG
                      (      spooler.asm):00005                 PRAGMA CD
                      (      spooler.asm):00006         
                      (      spooler.asm):00007         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00008         ;
                      (      spooler.asm):00009         ;       FLEX Spooler STUB (No spooler support on Nhyodyne)
                      (      spooler.asm):00010         ;
                      (      spooler.asm):00011         ;       DWERNER 8/14/2022
                      (      spooler.asm):00012         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00013         
                      (      spooler.asm):00014                         ORG $C700               ; JUMP TABLE STARTS AT $C700
                      (      spooler.asm):00015         
C700 393939           (      spooler.asm):00016         PRSPLI          FCB $39,$39,$39         ; REPLACE THE FIRST BYTE
C703 393939           (      spooler.asm):00017         PRSPL2          FCB $39,$39,$39         ; OF EACH ENTRY WITH AN
C706 393939           (      spooler.asm):00018         PRSPL3          FCB $39,$39,$39         ; RTS ($39) AND THE SECOND
C709 393939           (      spooler.asm):00019         PRSPL4          FCB $39,$39,$39         ; TWO BYTES WITH ANYTHING
C70C 393939           (      spooler.asm):00020         PRSPL5          FCB $39,$39,$39
C70F 393939           (      spooler.asm):00021         PRSPL6          FCB $39,$39,$39
                      (      spooler.asm):00022         
                      (      spooler.asm):00023                         ORG $C71B               ; QUEUE COUNT IS AT $C71B
C71B 00               (      spooler.asm):00024         QCNT            FCB 0                   ; FORCE QUEUE COUNT TO ZERO
                      (        flex9.asm):00008                         include "flx29ccp.asm"
                      (     flx29ccp.asm):00001                 OPT PAG
                      (     flx29ccp.asm):00002                 TTL 6809 FILE MANAGEMENT SYSTEM
                      (     flx29ccp.asm):00003                 PAG
                      (     flx29ccp.asm):00004                 PRAGMA CD
                      (     flx29ccp.asm):00005         *
                      (     flx29ccp.asm):00006         * TSC 6809 DISK OPERATING SYSTEM
                      (     flx29ccp.asm):00007         *
                      (     flx29ccp.asm):00008         * COPYRIGHT (C) 1979 BY
                      (     flx29ccp.asm):00009         *
                      (     flx29ccp.asm):00010         * TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29ccp.asm):00011         * PO BOX 2570
                      (     flx29ccp.asm):00012         * WEST LAFAYETTE, INDIANA  47906
                      (     flx29ccp.asm):00013         *
                      (     flx29ccp.asm):00014         
                      (     flx29ccp.asm):00015         *
                      (     flx29ccp.asm):00016         * GLOBAL VARIABLE STARAGE
                      (     flx29ccp.asm):00017         *
                      (     flx29ccp.asm):00018         
     C080             (     flx29ccp.asm):00019         LINBUF  equ     $C080
     D40B             (     flx29ccp.asm):00020         CURFCB  equ     $D40B
                      (     flx29ccp.asm):00021         
                      (     flx29ccp.asm):00022         * ASCII CODE EQUATES
                      (     flx29ccp.asm):00023         
     0000             (     flx29ccp.asm):00024         NUL     equ     $00
     0004             (     flx29ccp.asm):00025         EOT     equ     $04
                      (     flx29ccp.asm):00026         
                      (     flx29ccp.asm):00027         * EXTERNAL LABEL EQUATES
                      (     flx29ccp.asm):00028         
     C07F             (     flx29ccp.asm):00029         STACK   equ     $C07F
     C400             (     flx29ccp.asm):00030         LC400   equ     $C400
     C700             (     flx29ccp.asm):00031         CHPR    equ     $C700
                      (     flx29ccp.asm):00032         
                      (     flx29ccp.asm):00033         
                      (     flx29ccp.asm):00034         
                      (     flx29ccp.asm):00035                 org     $C840
                      (     flx29ccp.asm):00036         
C840                  (     flx29ccp.asm):00037         SYSFCB
C840 FF000000         (     flx29ccp.asm):00038                         fcb     $FF,0,0,0
C844 72746172747570   (     flx29ccp.asm):00039                         fcc     "rtartup"       ; SYSTEM HANGS WHEN TRYING TO EXECUTE STARTUP.TXT
C84B 00               (     flx29ccp.asm):00040                         fcb             0
C84C 747874           (     flx29ccp.asm):00041                         fcc             "txt"
C84F 00               (     flx29ccp.asm):00042                         fcb             0
                      (     flx29ccp.asm):00043         
                      (     flx29ccp.asm):00044         *************************************************
                      (     flx29ccp.asm):00045         *                                               *
                      (     flx29ccp.asm):00046         *       flex entry point after boot             *
                      (     flx29ccp.asm):00047         *                                               *
                      (     flx29ccp.asm):00048         *         this must start at $C850              *
                      (     flx29ccp.asm):00049         *       N8VEM doesn't use this!                 *
                      (     flx29ccp.asm):00050         *************************************************
                      (     flx29ccp.asm):00051                         org $c850
C850 7EC407           (     flx29ccp.asm):00052 [4]                     jmp         STAR0
                      (     flx29ccp.asm):00053         
     0080             (     flx29ccp.asm):00054         LBL     equ     128         ;LINE BUFFER LENGTH
                      (     flx29ccp.asm):00055         
                      (     flx29ccp.asm):00056                 org     $CC00
                      (     flx29ccp.asm):00057         
CC00 08               (     flx29ccp.asm):00058         TTYBS   fcb     $08         ;$CC00   ;BACK SPACE (^H)
CC01 18               (     flx29ccp.asm):00059         TTYDEL  fcb     $18         ;$CC01   ;DELETE CHARACTER (^X)
CC02 3A               (     flx29ccp.asm):00060         TTYEOL  fcb     $3A         ;$CC02   ;END OF LINE CHAR (:)
CC03 18               (     flx29ccp.asm):00061         TTYDP   fcb     24         ;$CC03   ;LINES PER SCREEN
CC04 50               (     flx29ccp.asm):00062         COLCNT  fcb     80         ;$CC04   ;COLUMNS PER LINE
CC05 00               (     flx29ccp.asm):00063         TTYNL   fcb     $00         ;$CC05   ;LINE PADDING NULLS
CC06 00               (     flx29ccp.asm):00064         TTYTB   fcb     $00         ;$CC06   ;TAB CHARACTER
CC07 08               (     flx29ccp.asm):00065         TTYBE   fcb     $08         ;$CC07   ;BACK SPACE ECHO
CC08 00               (     flx29ccp.asm):00066         TTYEJ   fcb     $00         ;$CC08   ;EJECT LENGTH
CC09 00               (     flx29ccp.asm):00067         TTYPS   fcb     $00         ;$CC09   ;PAUSE CONTROL
CC0A 1B               (     flx29ccp.asm):00068         TTYESC  fcb     $1B         ;$CC0A   ;ESCAPE CHARACTER
CC0B 00               (     flx29ccp.asm):00069         SYSDRV  fcb     $00         ;$CC0B   ;SYSTEM DRIVE
CC0C 01               (     flx29ccp.asm):00070         WRKDRV  fcb     $01         ;$CC0C   ;WORKING DRIVE
CC0D 00               (     flx29ccp.asm):00071         SYSFLG  fcb     $00         ;$CC0D   ;SYSTEM FLAG
CC0E 00               (     flx29ccp.asm):00072         SYSMTH  fcb     $00         ;$CC0E   ;SYSTEM DATE
CC0F 00               (     flx29ccp.asm):00073         SYSDAY  fcb     $00         ;$CC0F   ;
CC10 00               (     flx29ccp.asm):00074         SYSYR   fcb     $00         ;$CC10   ;
CC11 00               (     flx29ccp.asm):00075         LSTTRM  fcb     $00         ;$CC11   ;LAST TERMINATOR
CC12 0000             (     flx29ccp.asm):00076         USRTBL  fdb     $0000       ;$CC12   ;USER COMMAND TABLE
CC14 0000             (     flx29ccp.asm):00077         BUFPNT  fdb     $0000       ;$CC14   ;LINE BUFFER POINTER
CC16 0000             (     flx29ccp.asm):00078         RETRNR  fdb     $0000       ;$CC16   ;ESCAPE RETURN REG
CC18 00               (     flx29ccp.asm):00079         CHAR    fcb     $00         ;$CC18   ;CHARACTER
CC19 00               (     flx29ccp.asm):00080         PRVCHR  fcb     $00         ;$CC19   ;PREVIOUS CHARACTER
CC1A 00               (     flx29ccp.asm):00081         LINE    fcb     $00         ;$CC1A   ;CURRENT LINE NUMBER
CC1B 0000             (     flx29ccp.asm):00082         OFFSET  fdb     $0000       ;$CC1B   ;LOADER ADR OFFSET
CC1D 00               (     flx29ccp.asm):00083         XFR     fcb     $00         ;$CC1D   ;TRANSFER FLAG
CC1E 0000             (     flx29ccp.asm):00084         TADR    fdb     $0000       ;$CC1E   ;TRANSFER ADDRESS
CC20 00               (     flx29ccp.asm):00085         ERRTYP  fcb     $00         ;$CC20   ;ERROR TYPE
CC21 00               (     flx29ccp.asm):00086         SPCLS   fcb     $00         ;$CC21   ;SPECIAL IO FLAG
CC22 00               (     flx29ccp.asm):00087         OUTCHN  fcb     $00         ;$CC22   ;OUTPUT CHANNEL BYTE
CC23 00               (     flx29ccp.asm):00088         INCHNL  fcb     $00         ;$CC23   ;INPUT CHANNEL BYTE
CC24 0000             (     flx29ccp.asm):00089         FILOUT  fdb     $0000       ;$CC24   ;OUTPUT FILE ADDRESS
CC26 0000             (     flx29ccp.asm):00090         FILIN   fdb     $0000       ;$CC26   ;INPUT FILE ADDRESS
CC28 00               (     flx29ccp.asm):00091         CMFLG   fcb     $00         ;$CC28   ;COMMAND FLAG
CC29 00               (     flx29ccp.asm):00092         COLMN   fcb     $00         ;$CC29   ;CURRENT OUTPUT COL.
CC2A 00               (     flx29ccp.asm):00093         TMRFLG  fcb     $00         ;$CC2A   ;TIMER FLAG UNUSED NOW
CC2B 0000             (     flx29ccp.asm):00094         MEMEND  FDB      $0000      ;$CC2B   MEMORY END
CC2D 0000             (     flx29ccp.asm):00095         ERRVEC  fdb     $0000       ;$CC2D   ;ERROR NAME VECTOR
CC2F 01               (     flx29ccp.asm):00096         FILEKO  fcb     $01         ;$CC2F   ;FILE INPUT ECHO
CC30 00               (     flx29ccp.asm):00097         FMSBSY  fcb     $00         ;$CC30   ;FMS IS BUSY FLAG
CC31 0000             (     flx29ccp.asm):00098         CP      fdb     $0000       ;$CC31   ;
CC33 00               (     flx29ccp.asm):00099         CPUTYP  fcb     $00         ;$CC33   ;
CC34 00               (     flx29ccp.asm):00100         PRCNT   fcb     $00         ;$CC34   ;UNUSED NOW
CC35 000000000000     (     flx29ccp.asm):00101         SPARES  fdb     0,0,0       ;$CC35   ;SPARE BYTES
CC3B                  (     flx29ccp.asm):00102         XTEMP   rmb     2           ;$CC3B   ;INDEX TEMP
CC3D                  (     flx29ccp.asm):00103         INDEX   rmb     2           ;$CC3D   ;INDEX TEMP STORAGE
CC3F                  (     flx29ccp.asm):00104         CRSAVE  rmb     2           ;$CC3F   ;INDEX SAVE
CC41                  (     flx29ccp.asm):00105         DATPNT  rmb     2           ;$CC41   ;DATA POINTER
CC43                  (     flx29ccp.asm):00106         RETADR  rmb     2           ;$CC43   ;RETURN ADDRESS
CC45                  (     flx29ccp.asm):00107         STKSTR  rmb     2           ;$CC45   ;STACK STORAGE
CC47                  (     flx29ccp.asm):00108         IOTEMP  rmb     2           ;$CC47   ;IO TEMP STORE
                      (     flx29ccp.asm):00109         
                      (     flx29ccp.asm):00110         * SET MAPUP TO $FF TO DISABLE MAPPING
                      (     flx29ccp.asm):00111         
CC49 60               (     flx29ccp.asm):00112         MAPUP   fcb     $60         ;$CC49   ;MAP FILENAMES TO UPPER
CC4A                  (     flx29ccp.asm):00113         OUTNUM  rmb     1           ;$CC4A   ;0 SUPPRESSION FLAG
CC4B                  (     flx29ccp.asm):00114         COUNT   rmb     1           ;$CC4B   ;SPARE COUNT REGISTER
CC4C                  (     flx29ccp.asm):00115         GOTFIL  rmb     1           ;$CC4C   ;FILE INDICATOR
CC4D                  (     flx29ccp.asm):00116         Temp    rmb     1           ;$CC4D   ;TEMPORARY REGISTER
                      (     flx29ccp.asm):00117         
CC4E CCAC             (     flx29ccp.asm):00118         PPRMPT  fdb     PRMPT
                      (     flx29ccp.asm):00119         
CC50 574841543F       (     flx29ccp.asm):00120         WHATST  fcc     "WHAT?"
CC55 04               (     flx29ccp.asm):00121                         fcb             EOT
CC56 43414E2754205452 (     flx29ccp.asm):00122         NOTRST  fcc     "CAN'T TRANSFER"
     414E53464552
CC64 04               (     flx29ccp.asm):00123                         fcb             EOT
CC65 4E4F5420464F554E (     flx29ccp.asm):00124         NONMST  fcc     "NOT FOUND"
     44
CC6E 04               (     flx29ccp.asm):00125                         fcb             EOT
CC6F 4449534B20455252 (     flx29ccp.asm):00126         DSKERS  fcc     "DISK ERROR #"
     4F522023
CC7B 04               (     flx29ccp.asm):00127                         fcb             EOT
CC7C 4452495645204E4F (     flx29ccp.asm):00128         NTRST   fcc     "DRIVE NOT READY"
     54205245414459
CC8B 04               (     flx29ccp.asm):00129                         fcb             EOT
CC8C 474554           (     flx29ccp.asm):00130         COMTBL  fcc     "GET"
CC8F 00               (     flx29ccp.asm):00131                         fcb             0
CC90 D21A             (     flx29ccp.asm):00132                 fdb     GET
CC92 4D4F4E           (     flx29ccp.asm):00133                 fcc     "MON"
CC95 00               (     flx29ccp.asm):00134                 fcb             0
CC96 D356             (     flx29ccp.asm):00135                 fdb     MEXIT
CC98 00               (     flx29ccp.asm):00136                 fcb     $00
                      (     flx29ccp.asm):00137         
CC99 2710             (     flx29ccp.asm):00138         CONTBL  fdb     10000
CC9B 03E8             (     flx29ccp.asm):00139                 fdb     1000
CC9D 0064             (     flx29ccp.asm):00140                 fdb     100
CC9F 000A             (     flx29ccp.asm):00141                 fdb     10
                      (     flx29ccp.asm):00142         
CCA1 6572726F7273     (     flx29ccp.asm):00143         ERNM    fcc     "errors"
CCA7 0000             (     flx29ccp.asm):00144                         fcb     0,0
CCA9 737973           (     flx29ccp.asm):00145                         fcc             "sys"
                      (     flx29ccp.asm):00146         
CCAC 2B2B2B           (     flx29ccp.asm):00147         PRMPT   fcc     "+++"
CCAF 04               (     flx29ccp.asm):00148                         fcb             EOT
                      (     flx29ccp.asm):00149         
                      (     flx29ccp.asm):00150                 org     $CCC0
                      (     flx29ccp.asm):00151         
CCC0 39               (     flx29ccp.asm):00152 [5]     PINIT   rts
                      (     flx29ccp.asm):00153         
                      (     flx29ccp.asm):00154                 org     $CCD8
                      (     flx29ccp.asm):00155         
CCD8 39               (     flx29ccp.asm):00156 [5]     PCHK    rts
                      (     flx29ccp.asm):00157         
                      (     flx29ccp.asm):00158                 org     $CCE4
                      (     flx29ccp.asm):00159         
CCE4 39               (     flx29ccp.asm):00160 [5]     POUT    rts
                      (     flx29ccp.asm):00161         
                      (     flx29ccp.asm):00162                 org     $CCF8
                      (     flx29ccp.asm):00163         
CCF8 01000000         (     flx29ccp.asm):00164         PR0     fcb     $01,$00,$00,$00
CCFC 00000000         (     flx29ccp.asm):00165         PR1     fcb     $00,$00,$00,$00
                      (     flx29ccp.asm):00166         
CD00 7ECD57           (     flx29ccp.asm):00167 [4]     COLDS   jmp     INITI       ;GO INITIALIZE
CD03 7ECD67           (     flx29ccp.asm):00168 [4]     WARMS   jmp     ENTRY       ;WARM ENTRY POINT
CD06 7ECDAB           (     flx29ccp.asm):00169 [4]     RENTER  jmp     DOS3        ;RE-ENTER DOS
CD09 7EDE43           (     flx29ccp.asm):00170 [4]     INCH    jmp     VINCH       ;INPUT ROUTINE
CD0C 7EDE43           (     flx29ccp.asm):00171 [4]     INCH2   jmp     VINCH       ;TERMINAL INPUT
CD0F 7EDE4C           (     flx29ccp.asm):00172 [4]     OUTCH   jmp     VOUTCH      ;OUTPUT CHARACTER
CD12 7EDE4C           (     flx29ccp.asm):00173 [4]     OUTCH2  jmp     VOUTCH      ;TERMINAL OUTPUT
CD15 7ECEF7           (     flx29ccp.asm):00174 [4]     DGETCH  jmp     GETCHR      ;GET CHARACTER
CD18 7ECF3D           (     flx29ccp.asm):00175 [4]     DPUTCH  jmp     PUTCHR      ;PUT CHARACTER
CD1B 7ECE2A           (     flx29ccp.asm):00176 [4]     DINBUF  jmp     INBUF       ;INPUT TO BUFFER
CD1E 7ECE79           (     flx29ccp.asm):00177 [4]     DPSTRN  jmp     PSTRNG      ;PRINT STRING
CD21 7ECFE9           (     flx29ccp.asm):00178 [4]     DCLASS  jmp     CLASS       ;CLASSIFY CHARACTER
CD24 7ECEB1           (     flx29ccp.asm):00179 [4]     DPCRLF  jmp     PCRLF       ;PRINT CR AND LF
CD27 7ED00A           (     flx29ccp.asm):00180 [4]     DNEXTC  jmp     NXTCH       ;NEXT BUFFER CHAR
CD2A 7ECDE4           (     flx29ccp.asm):00181 [4]     RSTRIO  jmp     RESTIO      ;RESTORE IO VECTORS
CD2D 7ED032           (     flx29ccp.asm):00182 [4]     DFILSP  jmp     GETFIL      ;GET FILE SPEC
CD30 7ED1B0           (     flx29ccp.asm):00183 [4]     DLOAD   jmp     LOAD        ;FILE LOADER
CD33 7ED0E7           (     flx29ccp.asm):00184 [4]     DSETEX  jmp     SETEXT      ;SET NAME EXTENSION
CD36 7ED354           (     flx29ccp.asm):00185 [4]     DADDBX  jmp     ADDBX       ;ADD B TO X
CD39 7ECF82           (     flx29ccp.asm):00186 [4]     DOUTDE  jmp     OUTDEC      ;OUTPUT DECIMAL
CD3C 7ECFD0           (     flx29ccp.asm):00187 [4]     DOUTHE  jmp     OUTHEX      ;OUT HEX CHARACTER
CD3F 7ED28A           (     flx29ccp.asm):00188 [4]     DRPTER  jmp     RPTERR      ;REPORT ERROR
CD42 7ED13D           (     flx29ccp.asm):00189 [4]     DGETHX  jmp     GETHEX      ;GET HEX NUMBER
CD45 7ECFCC           (     flx29ccp.asm):00190 [4]     DOUTAD  jmp     OUTADR      ;OUT HEX ADDRESS
CD48 7ED186           (     flx29ccp.asm):00191 [4]     DINDEC  jmp     INDEC       ;GET DECIMAL NUMBER
CD4B 7ED334           (     flx29ccp.asm):00192 [4]     DDOCMD  jmp     DOCMD       ;DO COMMAND LINE
CD4E 7EDE5D           (     flx29ccp.asm):00193 [4]     DSTAT   jmp     STAT        ;TERMINAL INPUT STATUS
CD51 7ECDFF           (     flx29ccp.asm):00194 [4]     DSPR2   jmp     RTS
CD54 7ECDFF           (     flx29ccp.asm):00195 [4]     DSPR3   jmp     RTS
                      (     flx29ccp.asm):00196         
                      (     flx29ccp.asm):00197         * INIT
                      (     flx29ccp.asm):00198         *
                      (     flx29ccp.asm):00199         * INIT IS THE INITIALIZATION ROUTINE.
                      (     flx29ccp.asm):00200         * ALL SYSTEM VARIABLES ARE SET HERE.
                      (     flx29ccp.asm):00201         
CD57 10CEC07F         (     flx29ccp.asm):00202 [4]     INITI    lds     #STACK      ;SET STACK
CD5B 7FCC11           (     flx29ccp.asm):00203 [7]     INIT1   clr     LSTTRM      ;CLEAR TERM BYTE
CD5E BDD400           (     flx29ccp.asm):00204 [8]             jsr     FMSINT      ;INIT SYSTEM
                      (     flx29ccp.asm):00205         
CD61 7FCC28           (     flx29ccp.asm):00206 [7]             clr     CMFLG       ;CLEAR FLAG
CD64 BDD3FD           (     flx29ccp.asm):00207 [8]             jsr     TSTSTR      ;CHECK FOR STARTUP
                      (     flx29ccp.asm):00208         
                      (     flx29ccp.asm):00209         
                      (     flx29ccp.asm):00210         * ENTRY
                      (     flx29ccp.asm):00211         *
                      (     flx29ccp.asm):00212         * ENTRY IS THE WARM START ENTRY POINT.
                      (     flx29ccp.asm):00213         * THE STACK IS RESET HERE.
                      (     flx29ccp.asm):00214         
CD67 10CEC07F         (     flx29ccp.asm):00215 [4]     ENTRY   lds     #STACK      ;SET STACK
CD6B BDDE18           (     flx29ccp.asm):00216 [8]             jsr     WARM        ;DO USER WARMSTART ROUTINE
CD6E 8ECD03           (     flx29ccp.asm):00217 [3]             ldx     #WARMS      ;POINT TO WARM START
CD71 BFCC16           (     flx29ccp.asm):00218 [6]             stx     RETRNR      ;SET RETURN REG
CD74 8EC700           (     flx29ccp.asm):00219 [3]             ldx     #CHPR       ;SET SWI3 VECTOR
CD77 AF9FD3E9         (     flx29ccp.asm):00220 [5+5]           stx     [SWIVECP]    ;
CD7B BED3E7           (     flx29ccp.asm):00221 [6]             ldx     IHNDLRP      ;SET IRQ VECTOR
CD7E AF9FD3EB         (     flx29ccp.asm):00222 [5+5]           stx     [IRQVECP]    ;
CD82 8ECCF8           (     flx29ccp.asm):00223 [3]             ldx     #PR0        ;SET PR # 0
CD85 BFCC31           (     flx29ccp.asm):00224 [6]             stx     CP          ;
CD88 7FCC34           (     flx29ccp.asm):00225 [7]             clr     PRCNT       ;SET STATUS
CD8B 7FCC4C           (     flx29ccp.asm):00226 [7]     ENTRY2  clr     GOTFIL      ;CLEAR FILE DESIG.
CD8E 8D54             (     flx29ccp.asm):00227 [7]             bsr     RESTIO      ;RESTORE IO
                      (     flx29ccp.asm):00228         
                      (     flx29ccp.asm):00229         * DOS
                      (     flx29ccp.asm):00230         *
                      (     flx29ccp.asm):00231         * DOS IS THE MAIN DOS LOOP
                      (     flx29ccp.asm):00232         
CD90 B6CC11           (     flx29ccp.asm):00233 [5]     DOS     lda     LSTTRM      ;CHECK TERMINATOR
CD93 B1CC02           (     flx29ccp.asm):00234 [5]             cmpa    TTYEOL      ;WAS IT EOL?
                      (     flx29ccp.asm):00235         
CD96 2605             (     flx29ccp.asm):00236 [3]             bne     DOS2        ;
CD98 7CCC15           (     flx29ccp.asm):00237 [7]             inc     BUFPNT+1    ;RESET BUFPNT
CD9B 200E             (     flx29ccp.asm):00238 [3]             bra     DOS3        ;
                      (     flx29ccp.asm):00239                                     ;
CD9D 7DCC28           (     flx29ccp.asm):00240 [7]     DOS2    tst     CMFLG       ;TEST FLAG
                      (     flx29ccp.asm):00241         
CDA0 102605A2         (     flx29ccp.asm):00242 [5+?]           lbne    RETRN       ;DO CMD RETURN
CDA4 BDD403           (     flx29ccp.asm):00243 [8]             jsr     FMSCLS      ;CLOSE ALL
                      (     flx29ccp.asm):00244         
CDA7 26B2             (     flx29ccp.asm):00245 [3]             bne     INIT1       ;ERRORS?
CDA9 8D7A             (     flx29ccp.asm):00246 [7]             bsr     PRMTUSR     ;POINT TO PROMPT
                      (     flx29ccp.asm):00247                                     ;
CDAB BDD0D0           (     flx29ccp.asm):00248 [8]     DOS3    jsr     SKPSPC      ;SKIP SPACES
CDAE 810D             (     flx29ccp.asm):00249 [2]             cmpa    #$0D        ;LONE CARRIAGE RET?
CDB0 27EB             (     flx29ccp.asm):00250 [3]             beq     DOS2        ;
                      (     flx29ccp.asm):00251                                     ;
CDB2 8EC840           (     flx29ccp.asm):00252 [3]     DOS4    ldx     #SYSFCB     ;POINT TO SYSTEM FCB
CDB5 7CCC0D           (     flx29ccp.asm):00253 [7]             inc     SYSFLG      ;SET SYSTEM DRIVE
CDB8 BDD032           (     flx29ccp.asm):00254 [8]             jsr     GETFIL      ;GET FILE NAME
CDBB 2516             (     flx29ccp.asm):00255 [3]             bcs     NFERR       ;ERROR?
CDBD 8ECC8C           (     flx29ccp.asm):00256 [3]             ldx     #COMTBL     ;POINT TO TABLE
CDC0 8D3E             (     flx29ccp.asm):00257 [7]             bsr     LKNAM       ;LOOK FOR NAME
CDC2 2709             (     flx29ccp.asm):00258 [3]             beq     DOS6        ;FIND?
                      (     flx29ccp.asm):00259         
CDC4 BECC12           (     flx29ccp.asm):00260 [6]             ldx     USRTBL      ;CHECK USER TABLE
CDC7 2707             (     flx29ccp.asm):00261 [3]             beq     DOS8        ;IS THERE ONE?
                      (     flx29ccp.asm):00262         
CDC9 8D35             (     flx29ccp.asm):00263 [7]             bsr     LKNAM       ;LOOK FOR NAME
CDCB 2603             (     flx29ccp.asm):00264 [3]             bne     DOS8        ;FIND?
                      (     flx29ccp.asm):00265                                     ;
CDCD 6E9801           (     flx29ccp.asm):00266 [3+4]   DOS6    jmp     [1,x]       ;JUMP TO COM ADDRESS
                      (     flx29ccp.asm):00267                                     ;
CDD0 BDD239           (     flx29ccp.asm):00268 [8]     DOS8    jsr     LGO         ;DO LOAD & GO
                      (     flx29ccp.asm):00269                                     ;
                      (     flx29ccp.asm):00270         * NFERR                     ;
                      (     flx29ccp.asm):00271                                     ;
CDD3 8ECC50           (     flx29ccp.asm):00272 [3]     NFERR   ldx     #WHATST     ;POINT TO STRING
CDD6 8615             (     flx29ccp.asm):00273 [2]             lda     #$15        ;SET ERROR TYPE
CDD8 B7CC20           (     flx29ccp.asm):00274 [5]     NFERR1  sta     ERRTYP      ;
CDDB BDCE79           (     flx29ccp.asm):00275 [8]     NFERR2  jsr     PSTRNG      ;OUTPUT IT
CDDE 7FCC11           (     flx29ccp.asm):00276 [7]     NFERR4  clr     LSTTRM      ;CLEAR TERM
CDE1 7ECD67           (     flx29ccp.asm):00277 [4]             jmp     ENTRY       ;RESTART
                      (     flx29ccp.asm):00278         
                      (     flx29ccp.asm):00279         * RESTIO
                      (     flx29ccp.asm):00280         *
                      (     flx29ccp.asm):00281         * RESTIO RESTORES THE SYSTEM IO JUMP
                      (     flx29ccp.asm):00282         * VECTORS FOR INPUT, OUTPUT, & INIT.
                      (     flx29ccp.asm):00283         
CDE4 BECD13           (     flx29ccp.asm):00284 [6]     RESTIO  ldx     OUTCH2+1    ;SET OUTPUT
CDE7 BFCD10           (     flx29ccp.asm):00285 [6]             stx     OUTCH+1     ;
CDEA BECD0D           (     flx29ccp.asm):00286 [6]             ldx     INCH2+1     ;SET INPUT
CDED BFCD0A           (     flx29ccp.asm):00287 [6]             stx     INCH+1      ;
CDF0 7FCC23           (     flx29ccp.asm):00288 [7]             clr     INCHNL      ;
CDF3 7FCC22           (     flx29ccp.asm):00289 [7]             clr     OUTCHN      ;CLEAR OUT CHAN
CDF6 7FCC21           (     flx29ccp.asm):00290 [7]             clr     SPCLS       ;SET SPECIALS
CDF9 7FCC26           (     flx29ccp.asm):00291 [7]             clr     FILIN       ;CLEAR FILES
CDFC 7FCC24           (     flx29ccp.asm):00292 [7]             clr     FILOUT
CDFF 39               (     flx29ccp.asm):00293 [5]     RTS     rts
                      (     flx29ccp.asm):00294         
                      (     flx29ccp.asm):00295         * LKNAM
                      (     flx29ccp.asm):00296         *
                      (     flx29ccp.asm):00297         * LKNAM looks FOR A COMMAND
                      (     flx29ccp.asm):00298         * NAME In a tABLE
                      (     flx29ccp.asm):00299         *
                      (     flx29ccp.asm):00300         *   ENTRy: x POINTS TO TABLE
                      (     flx29ccp.asm):00301         *   EXIT:  eq IF FOUND
                      (     flx29ccp.asm):00302         *          x+1 POINTS TO ADR
                      (     flx29ccp.asm):00303         
CE00 108EC844         (     flx29ccp.asm):00304 [4]     LKNAM   ldy     #SYSFCB+4   ;SET POINTER
CE04 A6A0             (     flx29ccp.asm):00305 [4+2]   LKNAM3  lda     ,y+        ;GET A NAME CHAR
CE06 815F             (     flx29ccp.asm):00306 [2]             cmpa    #$5F        ;CHECK IF UPPER CASE
CE08 2302             (     flx29ccp.asm):00307 [3]             bls     LKNAM4      ;SKIP IF NOT
CE0A 8020             (     flx29ccp.asm):00308 [2]             suba    #$20        ;MAKE UPPER
                      (     flx29ccp.asm):00309                                     ;
CE0C A180             (     flx29ccp.asm):00310 [4+2]   LKNAM4  cmpa    ,x+        ;CHECK AGAINST TABLE
CE0E 2608             (     flx29ccp.asm):00311 [3]             bne     LKNAM6      ;BRANCH IF NO MATCH
CE10 6D84             (     flx29ccp.asm):00312 [6+0]           tst     ,x         ;CHECK IF END
CE12 26F0             (     flx29ccp.asm):00313 [3]             bne     LKNAM3      ;LOOP IF NOT
                      (     flx29ccp.asm):00314                                     ;
CE14 6DA4             (     flx29ccp.asm):00315 [6+0]           tst     ,y         ;AT END OF NAME
CE16 270C             (     flx29ccp.asm):00316 [3]             beq     LKNAM8      ;GOT COMMAND IF SO
                      (     flx29ccp.asm):00317                                     ;
CE18 6D80             (     flx29ccp.asm):00318 [6+2]   LKNAM6  tst     ,x+        ;END OF WORD?
CE1A 26FC             (     flx29ccp.asm):00319 [3]             bne     LKNAM6      ;LOOP TIL SO
CE1C 3002             (     flx29ccp.asm):00320 [4+1]           leax    2,x         ;BUMP PAST ADDRESS
CE1E 6D84             (     flx29ccp.asm):00321 [6+0]           tst     ,x         ;END OF TABLE?
CE20 26DE             (     flx29ccp.asm):00322 [3]             bne     LKNAM       ;REPEAT IF NOT
CE22 1CFB             (     flx29ccp.asm):00323 [3]             andcc   #$FB        ;CLZ SET NOT EQUAL
CE24 39               (     flx29ccp.asm):00324 [5]     LKNAM8  rts
                      (     flx29ccp.asm):00325         
CE25 BECC4E           (     flx29ccp.asm):00326 [6]     PRMTUSR ldx     PPRMPT
CE28 8D4F             (     flx29ccp.asm):00327 [7]             bsr     PSTRNG
                      (     flx29ccp.asm):00328         
                      (     flx29ccp.asm):00329         * INBUF
                      (     flx29ccp.asm):00330         *
                      (     flx29ccp.asm):00331         * INBUF inputS A LINE INTO THE LINE
                      (     flx29ccp.asm):00332         * BUFFER. delETE AND BACK SPACE
                      (     flx29ccp.asm):00333         * CHARACters ARE CHECKED HERE.
                      (     flx29ccp.asm):00334         *
                      (     flx29ccp.asm):00335         *   ENTRy: noNE
                      (     flx29ccp.asm):00336         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00337         
CE2A 8EC080           (     flx29ccp.asm):00338 [3]     INBUF   ldx     #LINBUF     ;POINT TO BUFFER
CE2D BFCC14           (     flx29ccp.asm):00339 [6]             stx     BUFPNT      ;SET POINTER
CE30 BDCEF7           (     flx29ccp.asm):00340 [8]     INBUF2  jsr     GETCHR      ;GO GET A CHARACTER
CE33 B1CC01           (     flx29ccp.asm):00341 [5]             cmpa    TTYDEL      ;IS IT DELETE?
CE36 27ED             (     flx29ccp.asm):00342 [3]             beq     PRMTUSR     ;
CE38 B1CC00           (     flx29ccp.asm):00343 [5]             cmpa    TTYBS       ;IS IT BACK SPACE?
CE3B 2718             (     flx29ccp.asm):00344 [3]             beq     INBUF6      ;
CE3D 810D             (     flx29ccp.asm):00345 [2]             cmpa    #$0D        ;IS IT CARRIAGE RET?
CE3F 270D             (     flx29ccp.asm):00346 [3]             beq     INBUF4      ;
CE41 810A             (     flx29ccp.asm):00347 [2]             cmpa    #$0A        ;IS IT LF?
CE43 272B             (     flx29ccp.asm):00348 [3]             beq     INBUF7      ;
CE45 811F             (     flx29ccp.asm):00349 [2]             cmpa    #$1F        ;IS IT CONTROL?
CE47 23E7             (     flx29ccp.asm):00350 [3]             bls     INBUF2      ;IGNORE IF SO
CE49 8CC0FF           (     flx29ccp.asm):00351 [4]     INBUF3  cmpx    #LINBUF+LBL-1
CE4C 27E2             (     flx29ccp.asm):00352 [3]             beq     INBUF2
CE4E A780             (     flx29ccp.asm):00353 [4+2]   INBUF4  sta     ,x+        ;PUT CHAR IN BUFFER
CE50 810D             (     flx29ccp.asm):00354 [2]             cmpa    #$0D        ;IS IT RETURN?
CE52 26DC             (     flx29ccp.asm):00355 [3]             bne     INBUF2      ;REPEAT IF NOT
CE54 39               (     flx29ccp.asm):00356 [5]             rts                 ;
                      (     flx29ccp.asm):00357                                     ;
CE55 8CC080           (     flx29ccp.asm):00358 [4]     INBUF6  cmpx    #LINBUF     ;FRONT OF BUFFER?
CE58 27CB             (     flx29ccp.asm):00359 [3]             beq     PRMTUSR     ;
CE5A 301F             (     flx29ccp.asm):00360 [4+1]           leax    -1,x        ;DEC THE POINTER
CE5C B6CC07           (     flx29ccp.asm):00361 [5]             lda     TTYBE       ;GET ECHO CHAR
CE5F 8108             (     flx29ccp.asm):00362 [2]             cmpa    #8          ;IS IT ^H ?
CE61 2608             (     flx29ccp.asm):00363 [3]             bne     INBU65      ;
CE63 8620             (     flx29ccp.asm):00364 [2]             lda     #$20        ;SETUP SPACE
CE65 BDCF62           (     flx29ccp.asm):00365 [8]             jsr     PUTCH6      ;OUTPUT IT
CE68 B6CC07           (     flx29ccp.asm):00366 [5]             lda     TTYBE       ;GET CHAR
CE6B BDCF62           (     flx29ccp.asm):00367 [8]     INBU65  jsr     PUTCH6      ;OUTPUT IT
CE6E 20C0             (     flx29ccp.asm):00368 [3]             bra     INBUF2      ;REPEAT
                      (     flx29ccp.asm):00369                                     ;
CE70 860D             (     flx29ccp.asm):00370 [2]     INBUF7  lda     #$0D        ;OUTPUT CR
CE72 BDCF3D           (     flx29ccp.asm):00371 [8]             jsr     PUTCHR      ;
CE75 8620             (     flx29ccp.asm):00372 [2]             lda     #$20        ;SETUP SPACE
CE77 20D0             (     flx29ccp.asm):00373 [3]             bra     INBUF3
                      (     flx29ccp.asm):00374         
                      (     flx29ccp.asm):00375         * PSTRNG
                      (     flx29ccp.asm):00376         *
                      (     flx29ccp.asm):00377         * PSTRNG prinTS THE STRING POINTED
                      (     flx29ccp.asm):00378         * TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00379         *
                      (     flx29ccp.asm):00380         *   ENTRy: x POINTS TO STRING
                      (     flx29ccp.asm):00381         *   EXIT:  a & X CHANGED
                      (     flx29ccp.asm):00382         
CE79 8D36             (     flx29ccp.asm):00383 [7]     PSTRNG  bsr     PCRLF       ;OUTPUT CR & LF
                      (     flx29ccp.asm):00384         
CE7B A684             (     flx29ccp.asm):00385 [4+0]   PDATA1  lda     ,x         ;GET A CHARACTER
CE7D 8104             (     flx29ccp.asm):00386 [2]             cmpa    #4          ;IS IT TERM?
CE7F 2773             (     flx29ccp.asm):00387 [3]             beq     PCRLF8      ;
CE81 BDCF3D           (     flx29ccp.asm):00388 [8]             jsr     PUTCHR      ;GO PUT CHAR.
CE84 3001             (     flx29ccp.asm):00389 [4+1]           leax    1,x         ;BUMP THE POINTER
CE86 20F3             (     flx29ccp.asm):00390 [3]             bra     PDATA1      ;REPEAT IT
                      (     flx29ccp.asm):00391         
                      (     flx29ccp.asm):00392         * BREAK
                      (     flx29ccp.asm):00393         *
                      (     flx29ccp.asm):00394         * BREAK checkS FOR A CHARACTER ON INPUT CHANNEL,
                      (     flx29ccp.asm):00395         * RETURNs immEDIATELY IF NONE OR NOT ESCAPE.
                      (     flx29ccp.asm):00396         * IF ESCape, WAITS FOR ANOTHER OR FOR RETURN.
                      (     flx29ccp.asm):00397         
CE88 BDCD4E           (     flx29ccp.asm):00398 [8]     BREAK   jsr     DSTAT       ;ANY INPUT CHARACTER?
CE8B 2769             (     flx29ccp.asm):00399 [3]             beq     PCRLF9      ;EXIT IF NOT
                      (     flx29ccp.asm):00400                                     ;
CE8D AD9FD3E5         (     flx29ccp.asm):00401 [7+5]           jsr     [INCHNEP]   ;ELSE, GET THE CHARACTER
CE91 847F             (     flx29ccp.asm):00402 [2]             anda    #$7F        ;STRIP UPPER BIT
CE93 B1CC0A           (     flx29ccp.asm):00403 [5]             cmpa    TTYESC      ;AN ESCAPE?
CE96 265E             (     flx29ccp.asm):00404 [3]             bne     PCRLF9      ;EXIT IF NOT
                      (     flx29ccp.asm):00405                                     ;
CE98 7FCC1A           (     flx29ccp.asm):00406 [7]     BREAK1  clr     LINE        ;CLEAR LINE COUNT
CE9B AD9FD3E5         (     flx29ccp.asm):00407 [7+5]   BREAK2  jsr     [INCHNEP]   ;WAIT FOR A CHARACTER
CE9F 847F             (     flx29ccp.asm):00408 [2]             anda    #$7F        ;STRIP UPPER BIT
CEA1 B1CC0A           (     flx29ccp.asm):00409 [5]             cmpa    TTYESC      ;AN ESCAPE?
CEA4 2750             (     flx29ccp.asm):00410 [3]             beq     PCRLF9      ;CONTINUE IF SO
CEA6 810D             (     flx29ccp.asm):00411 [2]             cmpa    #$0D        ;IS IT A C.R.?
CEA8 26F1             (     flx29ccp.asm):00412 [3]             bne     BREAK2      ;LOOP IF NEITHER
CEAA 7FCC11           (     flx29ccp.asm):00413 [7]             clr     LSTTRM      ;CLEAR TERMINATOR
CEAD 6E9FCC16         (     flx29ccp.asm):00414 [3+5]           jmp     [RETRNR]    ;JUMP TO RETURN REG
                      (     flx29ccp.asm):00415         
                      (     flx29ccp.asm):00416         * PCRLF
                      (     flx29ccp.asm):00417         *
                      (     flx29ccp.asm):00418         * PCRLF outpuTS A CARRIAGE RETURN
                      (     flx29ccp.asm):00419         * AND A line FEED COMBINATION.
                      (     flx29ccp.asm):00420         *
                      (     flx29ccp.asm):00421         *   ENTRY: NONE
                      (     flx29ccp.asm):00422         *   EXIT:  A & B CHANGED
                      (     flx29ccp.asm):00423         
CEB1 7DCC21           (     flx29ccp.asm):00424 [7]     PCRLF   tst     SPCLS       ;TEST SPECIALS
CEB4 2627             (     flx29ccp.asm):00425 [3]             bne     PCRLF2      ;
                      (     flx29ccp.asm):00426                 ;bra     PCRLF2      ;
CEB6 8DD0             (     flx29ccp.asm):00427 [7]             bsr     BREAK       ;CHECK FOR BREAK
CEB8 B6CC03           (     flx29ccp.asm):00428 [5]             lda     TTYDP       ;GET COUNT
CEBB 2720             (     flx29ccp.asm):00429 [3]             beq     PCRLF2      ;IS IT OFF?
                      (     flx29ccp.asm):00430                                     ;
CEBD B1CC1A           (     flx29ccp.asm):00431 [5]             cmpa    LINE        ;CHECK COUNT
CEC0 2218             (     flx29ccp.asm):00432 [3]             bhi     PCRL19      ;
CEC2 7FCC1A           (     flx29ccp.asm):00433 [7]             clr     LINE        ;CLEAR COUNT
CEC5 7DCC09           (     flx29ccp.asm):00434 [7]             tst     TTYPS       ;PAUSE ON?
CEC8 2702             (     flx29ccp.asm):00435 [3]             beq     PCRLF1      ;
CECA 8DCC             (     flx29ccp.asm):00436 [7]             bsr     BREAK1      ;WAIT FOR ESC
                      (     flx29ccp.asm):00437                                     ;
CECC 3404             (     flx29ccp.asm):00438 [5+1]   PCRLF1  pshs    b           ;SAVE B
CECE F6CC08           (     flx29ccp.asm):00439 [5]             ldb     TTYEJ       ;CHECK COUNT
CED1 2705             (     flx29ccp.asm):00440 [3]             beq     PCRL18      ;
CED3 8D08             (     flx29ccp.asm):00441 [7]     PCRL15  bsr     PCRLF2      ;OUTPUT CR & LF
CED5 5A               (     flx29ccp.asm):00442 [2]             decb                ;DEC THE COUNT
CED6 26FB             (     flx29ccp.asm):00443 [3]             bne     PCRL15      ;
                      (     flx29ccp.asm):00444                                     ;
CED8 3504             (     flx29ccp.asm):00445 [5+1]   PCRL18  puls    b           ;RESTORE B
CEDA 7CCC1A           (     flx29ccp.asm):00446 [7]     PCRL19  inc     LINE        ;BUMP LINE COUNT
CEDD 860D             (     flx29ccp.asm):00447 [2]     PCRLF2  lda     #$0D        ;SET UP CR
CEDF 8D5C             (     flx29ccp.asm):00448 [7]             bsr     PUTCHR      ;OUTPUT IT
CEE1 860A             (     flx29ccp.asm):00449 [2]             lda     #$0A        ;SET UP LINE FEED
CEE3 8D58             (     flx29ccp.asm):00450 [7]             bsr     PUTCHR      ;OUTPUT IT
                      (     flx29ccp.asm):00451                 ;rts                                    ; !!!
CEE5 3404             (     flx29ccp.asm):00452 [5+1]           pshs    b           ;SAVE B
CEE7 F6CC05           (     flx29ccp.asm):00453 [5]             ldb     TTYNL       ;CHECK NULLS
CEEA 2706             (     flx29ccp.asm):00454 [3]             beq     PCRLF6      ;
CEEC 4F               (     flx29ccp.asm):00455 [2]     PCRLF4  clra                ;SET UP NULL
CEED 8D4E             (     flx29ccp.asm):00456 [7]             bsr     PUTCHR      ;OUTPUT IT
CEEF 5A               (     flx29ccp.asm):00457 [2]             decb                ;DEC THE COUNT
CEF0 26FA             (     flx29ccp.asm):00458 [3]             bne     PCRLF4      ;REPEAT?
                      (     flx29ccp.asm):00459                                     ;
CEF2 3504             (     flx29ccp.asm):00460 [5+1]   PCRLF6  puls    b           ;RESTORE B
CEF4 1CFE             (     flx29ccp.asm):00461 [3]     PCRLF8  andcc   #$FE        ;CLC  CLEAR ERRORS
CEF6 39               (     flx29ccp.asm):00462 [5]     PCRLF9  rts
                      (     flx29ccp.asm):00463         
                      (     flx29ccp.asm):00464         * GETCHR
                      (     flx29ccp.asm):00465         *
                      (     flx29ccp.asm):00466         * GETCHR gets A CHARACTER FROM EITHER
                      (     flx29ccp.asm):00467         * THE STandarD INPUT OR A FILE.
                      (     flx29ccp.asm):00468         *
                      (     flx29ccp.asm):00469         *   ENTRy: noNE
                      (     flx29ccp.asm):00470         *   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00471         
CEF7 7DCC23           (     flx29ccp.asm):00472 [7]     GETCHR  tst     INCHNL      ;CHECK CHAN
CEFA 261A             (     flx29ccp.asm):00473 [3]             bne     GETCH5      ;
CEFC 7DCC26           (     flx29ccp.asm):00474 [7]             tst     FILIN       ;FILE INPUT?
CEFF 2710             (     flx29ccp.asm):00475 [3]             beq     GETCH4      ;
CF01 8D1A             (     flx29ccp.asm):00476 [7]             bsr     FILIO       ;DO FILE INPUT
CF03 7DCC2F           (     flx29ccp.asm):00477 [7]             tst     FILEKO      ;ECHO CHARACTER?
CF06 2711             (     flx29ccp.asm):00478 [3]             beq     GETCH6      ;
CF08 7DCC24           (     flx29ccp.asm):00479 [7]             tst     FILOUT      ;OUTPUT FILE?
CF0B 270C             (     flx29ccp.asm):00480 [3]             beq     GETCH6      ;
CF0D 8D53             (     flx29ccp.asm):00481 [7]             bsr     PUTCH6      ;ECHO CHARACTER
CF0F 2008             (     flx29ccp.asm):00482 [3]             bra     GETCH6      ;
                      (     flx29ccp.asm):00483                                     ;
CF11 BDCD09           (     flx29ccp.asm):00484 [8]     GETCH4  jsr     INCH        ;GET CHAR
CF14 2003             (     flx29ccp.asm):00485 [3]             bra     GETCH6      ;
                      (     flx29ccp.asm):00486                                     ;
CF16 BDCD0C           (     flx29ccp.asm):00487 [8]     GETCH5  jsr     INCH2       ;TERMINAL INPUT
CF19 7FCC1A           (     flx29ccp.asm):00488 [7]     GETCH6  clr     LINE        ;CLEAR COUNTER
CF1C 39               (     flx29ccp.asm):00489 [5]             rts
                      (     flx29ccp.asm):00490         
                      (     flx29ccp.asm):00491         * FILIO
                      (     flx29ccp.asm):00492         *
                      (     flx29ccp.asm):00493         * FILIO dose A FMS CALL FOR CHARACTER
                      (     flx29ccp.asm):00494         * IO TRAnsfer. CONTROL RETURNED TO
                      (     flx29ccp.asm):00495         * WARM Start UPON ERROR.
                      (     flx29ccp.asm):00496         
CF1D BFCC47           (     flx29ccp.asm):00497 [6]     FILIO   stx     IOTEMP      ;SAVE INDEX
CF20 BECC26           (     flx29ccp.asm):00498 [6]             ldx     FILIN       ;GET INPUT FCB
CF23 2006             (     flx29ccp.asm):00499 [3]             bra     FILIO4      ;
                      (     flx29ccp.asm):00500                                     ;
CF25 BFCC47           (     flx29ccp.asm):00501 [6]     FILIO2  stx     IOTEMP      ;SAVE X
CF28 BECC24           (     flx29ccp.asm):00502 [6]             ldx     FILOUT      ;GET OUTPUT FCB
                      (     flx29ccp.asm):00503                                     ;
CF2B BDD406           (     flx29ccp.asm):00504 [8]     FILIO4  jsr     FMS         ;CALL FMS
CF2E 2604             (     flx29ccp.asm):00505 [3]             bne     FILIO6      ;ERROR?
CF30 BECC47           (     flx29ccp.asm):00506 [6]             ldx     IOTEMP      ;RESTORE INDEX
CF33 39               (     flx29ccp.asm):00507 [5]             rts                 ;
                      (     flx29ccp.asm):00508                                     ;
CF34 7FCC24           (     flx29ccp.asm):00509 [7]     FILIO6  clr     FILOUT      ;CLEAR CHAN
CF37 BDD28A           (     flx29ccp.asm):00510 [8]             jsr     RPTERR      ;REPORT ERROR
CF3A 7ECD03           (     flx29ccp.asm):00511 [4]             jmp     WARMS       ;DO WARM START
                      (     flx29ccp.asm):00512         
                      (     flx29ccp.asm):00513         * PUTCHR
                      (     flx29ccp.asm):00514         *
                      (     flx29ccp.asm):00515         * PUTCHR writES A CHARACTER TO EITHER
                      (     flx29ccp.asm):00516         * THE STandarD OUTPUT OR TO A FILE.
                      (     flx29ccp.asm):00517         *
                      (     flx29ccp.asm):00518         *   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00519         *   EXIT:  a MAY BE DESTROYED
                      (     flx29ccp.asm):00520         
CF3D 7DCC21           (     flx29ccp.asm):00521 [7]     PUTCHR  tst     SPCLS       ;CHECK SPECIALS
CF40 2620             (     flx29ccp.asm):00522 [3]             bne     PUTCH6      ;
CF42 811F             (     flx29ccp.asm):00523 [2]             cmpa    #$1F        ;IS IT CONTROL?
CF44 2205             (     flx29ccp.asm):00524 [3]             bhi     PUTCH2      ;
CF46 7FCC29           (     flx29ccp.asm):00525 [7]             clr     COLMN       ;CLEAR COL COUNT
CF49 2017             (     flx29ccp.asm):00526 [3]             bra     PUTCH6      ;JUMP AHEAD
                      (     flx29ccp.asm):00527                                     ;
CF4B 7CCC29           (     flx29ccp.asm):00528 [7]     PUTCH2  inc     COLMN       ;BUMP COUNTER
CF4E 3402             (     flx29ccp.asm):00529 [5+1]           pshs    a           ;SAVE CHARACTER
CF50 B6CC04           (     flx29ccp.asm):00530 [5]             lda     COLCNT      ;GET COUNT
CF53 270B             (     flx29ccp.asm):00531 [3]             beq     PUTCH4      ;IS IT 0?
CF55 B1CC29           (     flx29ccp.asm):00532 [5]             cmpa    COLMN       ;ENOUGH?
CF58 2406             (     flx29ccp.asm):00533 [3]             bcc     PUTCH4      ;
CF5A BDCEB1           (     flx29ccp.asm):00534 [8]             jsr     PCRLF       ;OUTPUT CR & LF
CF5D 7CCC29           (     flx29ccp.asm):00535 [7]             inc     COLMN       ;
                      (     flx29ccp.asm):00536                                     ;
CF60 3502             (     flx29ccp.asm):00537 [5+1]   PUTCH4  puls    a           ;RESTORE CHAR
CF62 3402             (     flx29ccp.asm):00538 [5+1]   PUTCH6  pshs    a           ;
CF64 7DCC22           (     flx29ccp.asm):00539 [7]             tst     OUTCHN      ;TEST CHANNEL
CF67 2613             (     flx29ccp.asm):00540 [3]             bne     PUTCH7      ;
CF69 7DCC24           (     flx29ccp.asm):00541 [7]             tst     FILOUT      ;FILE OUTPUT?
CF6C 2704             (     flx29ccp.asm):00542 [3]             beq     PUTC68      ;
CF6E 8DB5             (     flx29ccp.asm):00543 [7]             bsr     FILIO2      ;DO FMS CALL
CF70 200D             (     flx29ccp.asm):00544 [3]             bra     PUTC75      ;
                      (     flx29ccp.asm):00545                                     ;
CF72 7DCC26           (     flx29ccp.asm):00546 [7]     PUTC68  tst     FILIN       ;
CF75 2608             (     flx29ccp.asm):00547 [3]             bne     PUTC75      ;FILE INPUT?
CF77 BDCD0F           (     flx29ccp.asm):00548 [8]             jsr     OUTCH       ;OUTPUT IT
CF7A 2003             (     flx29ccp.asm):00549 [3]             bra     PUTC75      ;
                      (     flx29ccp.asm):00550                                     ;
CF7C BDCD12           (     flx29ccp.asm):00551 [8]     PUTCH7  jsr     OUTCH2      ;CHAN 2 OUTPUT
CF7F 3502             (     flx29ccp.asm):00552 [5+1]   PUTC75  puls    a           ;RESTORE CHAR
CF81 39               (     flx29ccp.asm):00553 [5]             rts
                      (     flx29ccp.asm):00554         
                      (     flx29ccp.asm):00555         * OUTDEC
                      (     flx29ccp.asm):00556         *
                      (     flx29ccp.asm):00557         * OUTPUT deciMAL NUMBER POINTED TO
                      (     flx29ccp.asm):00558         * BY X. the nS ENTRY PRINTS LEADING
                      (     flx29ccp.asm):00559         * ZEROES.
                      (     flx29ccp.asm):00560         *
                      (     flx29ccp.asm):00561         *   ENTRy: x POINTS TO NUMBER
                      (     flx29ccp.asm):00562         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00563         
CF82 7FCC4A           (     flx29ccp.asm):00564 [7]     OUTDEC  clr     OUTNUM      ;CLEAR FLAG
CF85 F7CC1D           (     flx29ccp.asm):00565 [5]             stb     XFR         ;SET SUP FLAG
CF88 8604             (     flx29ccp.asm):00566 [2]             lda     #4          ;SET COUNTER
CF8A B7CC4D           (     flx29ccp.asm):00567 [5]             sta     Temp        ;SAVE IT
CF8D EC84             (     flx29ccp.asm):00568 [5+0]           ldd     ,x         ;GET VALUE
CF8F 8ECC99           (     flx29ccp.asm):00569 [3]             ldx     #CONTBL     ;POINT TO CONSTANTS
                      (     flx29ccp.asm):00570                                     ;
CF92 8D0B             (     flx29ccp.asm):00571 [7]     OUTDE4  bsr     OUTDIG      ;OUTPUT DIGIT
CF94 3002             (     flx29ccp.asm):00572 [4+1]           leax    2,x         ;BUMP TO NEXT CONST.
CF96 7ACC4D           (     flx29ccp.asm):00573 [7]             dec     Temp        ;DEC THE COUNT
CF99 26F7             (     flx29ccp.asm):00574 [3]             bne     OUTDE4      ;
CF9B 1F98             (     flx29ccp.asm):00575 [6]             tfr     b,a         ;GET LS DIGIT
CF9D 203D             (     flx29ccp.asm):00576 [3]             bra     OUTHR       ;OUTPUT IT
                      (     flx29ccp.asm):00577         
                      (     flx29ccp.asm):00578         * OUTDIG
                      (     flx29ccp.asm):00579         *
                      (     flx29ccp.asm):00580         * OUTDIG outpUTS THE DIGITS PLACE
                      (     flx29ccp.asm):00581         * OF THE numbER IN A & B CORRESPONDING
                      (     flx29ccp.asm):00582         * TO THE consTANT POINTED TO BY X.
                      (     flx29ccp.asm):00583         *
                      (     flx29ccp.asm):00584         *   ENTRy: a & B CONTAIN NUMBER
                      (     flx29ccp.asm):00585         *          x POINTS TO CONSTANT
                      (     flx29ccp.asm):00586         *   EXIT:  alL REGISTERS PRESERVED
                      (     flx29ccp.asm):00587         
CF9F 7FCC4B           (     flx29ccp.asm):00588 [7]     OUTDIG  clr     COUNT       ;CLEAR COUNTER
CFA2 10A384           (     flx29ccp.asm):00589 [7+0]   OUTDI2  cmpd    ,x          ;COMPARE NUMBER
CFA5 2507             (     flx29ccp.asm):00590 [3]             bcs     OUTDI5      ;
CFA7 A384             (     flx29ccp.asm):00591 [6+0]           subd    ,x          ;SUB VALUE
CFA9 7CCC4B           (     flx29ccp.asm):00592 [7]             inc     COUNT       ;BUMP COUNTER
CFAC 20F4             (     flx29ccp.asm):00593 [3]             bra     OUTDI2      ;REPEAT
                      (     flx29ccp.asm):00594                                     ;
CFAE 3402             (     flx29ccp.asm):00595 [5+1]   OUTDI5  pshs    a           ;SAVE A
CFB0 B6CC4B           (     flx29ccp.asm):00596 [5]             lda     COUNT       ;GET TOTAL
CFB3 2610             (     flx29ccp.asm):00597 [3]             bne     OUTDI6      ;IS IT ZERO?
CFB5 7DCC4A           (     flx29ccp.asm):00598 [7]             tst     OUTNUM      ;SUPRESS ZEROES?
CFB8 260B             (     flx29ccp.asm):00599 [3]             bne     OUTDI6      ;NUMBER YET?
CFBA 7DCC1D           (     flx29ccp.asm):00600 [7]             tst     XFR         ;NULL OR SPACE?
CFBD 270B             (     flx29ccp.asm):00601 [3]             beq     OUTDI8      ;
CFBF 8620             (     flx29ccp.asm):00602 [2]             lda     #$20        ;SETUP SPACE
CFC1 8D23             (     flx29ccp.asm):00603 [7]             bsr     OUTHR2      ;OUTPUT IT
CFC3 2005             (     flx29ccp.asm):00604 [3]             bra     OUTDI8
                      (     flx29ccp.asm):00605         
CFC5 7CCC4A           (     flx29ccp.asm):00606 [7]     OUTDI6  inc     OUTNUM      ;SHOW NUMBER
CFC8 8D12             (     flx29ccp.asm):00607 [7]             bsr     OUTHR       ;OUTPUT DIGIT
                      (     flx29ccp.asm):00608         
CFCA 3582             (     flx29ccp.asm):00609 [5+3]   OUTDI8  puls    a,pc        ;RESTORE A & RETURN
                      (     flx29ccp.asm):00610         
                      (     flx29ccp.asm):00611         * OUTADR
                      (     flx29ccp.asm):00612         *
                      (     flx29ccp.asm):00613         * OUTPUT four HEX DIGITS POINTED
                      (     flx29ccp.asm):00614         * TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00615         
CFCC 8D02             (     flx29ccp.asm):00616 [7]     OUTADR  bsr     OUTHEX      ;OUT 2 DIGITS
CFCE 3001             (     flx29ccp.asm):00617 [4+1]           leax    1,x         ;BUMP POINTER
                      (     flx29ccp.asm):00618         
                      (     flx29ccp.asm):00619         * OUTHEX
                      (     flx29ccp.asm):00620         *
                      (     flx29ccp.asm):00621         * OUTHEX outpUTS THE BYTE IN HEX
                      (     flx29ccp.asm):00622         * POINTEd to BY X.
                      (     flx29ccp.asm):00623         *
                      (     flx29ccp.asm):00624         *   ENTRy: x POINTS TO BYTE
                      (     flx29ccp.asm):00625         *   EXIT:  b PRESERVED
                      (     flx29ccp.asm):00626         
CFD0 A684             (     flx29ccp.asm):00627 [4+0]   OUTHEX  lda     ,x          ;GET MSB
CFD2 8D04             (     flx29ccp.asm):00628 [7]             bsr     OUTHL       ;OUTPUT IT
CFD4 A684             (     flx29ccp.asm):00629 [4+0]           lda     ,x          ;DO LSB
CFD6 2004             (     flx29ccp.asm):00630 [3]             bra     OUTHR       ;OUTPUT IT
                      (     flx29ccp.asm):00631                                     ;
CFD8 44               (     flx29ccp.asm):00632 [2]     OUTHL   lsra                ;GET MSB TO LSB
CFD9 44               (     flx29ccp.asm):00633 [2]             lsra
CFDA 44               (     flx29ccp.asm):00634 [2]             lsra
CFDB 44               (     flx29ccp.asm):00635 [2]             lsra
                      (     flx29ccp.asm):00636         
CFDC 840F             (     flx29ccp.asm):00637 [2]     OUTHR   anda    #$0F        ;MASK OFF MSB
CFDE 8B30             (     flx29ccp.asm):00638 [2]             adda    #$30        ;ADD IN BIAS
CFE0 8139             (     flx29ccp.asm):00639 [2]             cmpa    #$39        ;OVER NUMBERS?
CFE2 2302             (     flx29ccp.asm):00640 [3]             bls     OUTHR2
                      (     flx29ccp.asm):00641         
CFE4 8B07             (     flx29ccp.asm):00642 [2]             adda    #7          ;FINISH BIAS
                      (     flx29ccp.asm):00643         
CFE6 7ECF3D           (     flx29ccp.asm):00644 [4]     OUTHR2  jmp     PUTCHR      ;OUTPUT IT
                      (     flx29ccp.asm):00645         
                      (     flx29ccp.asm):00646         * CLASS
                      (     flx29ccp.asm):00647         *
                      (     flx29ccp.asm):00648         * CLASS will CLASSIFY THE CHARACTER IN A.
                      (     flx29ccp.asm):00649         *
                      (     flx29ccp.asm):00650         *   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00651         *   EXIT:  cs IF NOT 0-9 OR A-Z
                      (     flx29ccp.asm):00652         
CFE9 8130             (     flx29ccp.asm):00653 [2]     CLASS   cmpa    #$30        ;IS IT 0?
CFEB 2514             (     flx29ccp.asm):00654 [3]             bcs     CLASS2      ;REPORT
CFED 8139             (     flx29ccp.asm):00655 [2]             cmpa    #$39        ;COMPARE TO 9
CFEF 2316             (     flx29ccp.asm):00656 [3]             bls     CLASS4      ;IS IT NUMBER?
CFF1 8141             (     flx29ccp.asm):00657 [2]             cmpa    #$41        ;COMPARE TO A
CFF3 250C             (     flx29ccp.asm):00658 [3]             bcs     CLASS2      ;REPORT
CFF5 815A             (     flx29ccp.asm):00659 [2]             cmpa    #$5A        ;COMPARE TO Z
CFF7 230E             (     flx29ccp.asm):00660 [3]             bls     CLASS4      ;IS IT LETTER?
CFF9 8161             (     flx29ccp.asm):00661 [2]             cmpa    #$61        ;CHECK FOR LOWER
CFFB 2504             (     flx29ccp.asm):00662 [3]             bcs     CLASS2      ;REPORT
CFFD 817A             (     flx29ccp.asm):00663 [2]             cmpa    #$7A        ;UPPER LIMIT
CFFF 2306             (     flx29ccp.asm):00664 [3]             bls     CLASS4
                      (     flx29ccp.asm):00665         
D001 1A01             (     flx29ccp.asm):00666 [3]     CLASS2  orcc    #1          ;SEC  SET FOR NOT
D003 B7CC11           (     flx29ccp.asm):00667 [5]             sta     LSTTRM
D006 39               (     flx29ccp.asm):00668 [5]             rts
                      (     flx29ccp.asm):00669         
D007 1CFE             (     flx29ccp.asm):00670 [3]     CLASS4  andcc   #$FE        ;CLC  SHOW ALPHANUMERIC
D009 39               (     flx29ccp.asm):00671 [5]             rts
                      (     flx29ccp.asm):00672         
                      (     flx29ccp.asm):00673         * NXTCH
                      (     flx29ccp.asm):00674         *
                      (     flx29ccp.asm):00675         * NXTCH gets THE NEXT CHARACTER FROM
                      (     flx29ccp.asm):00676         * THE LIne buFFER.
                      (     flx29ccp.asm):00677         *
                      (     flx29ccp.asm):00678         *   ENTRy: noNE
                      (     flx29ccp.asm):00679         *   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00680         
D00A 3410             (     flx29ccp.asm):00681 [5+2]   NXTCH   pshs    x
D00C BECC14           (     flx29ccp.asm):00682 [6]             ldx     BUFPNT      ;GET POINTER
D00F B6CC18           (     flx29ccp.asm):00683 [5]             lda     CHAR        ;GET OLD CHAR
D012 B7CC19           (     flx29ccp.asm):00684 [5]             sta     PRVCHR      ;SAVE AS PREVIOUS
D015 A680             (     flx29ccp.asm):00685 [4+2]   NXTCH3  lda     ,x+        ;GET THE CHARACTER
D017 B7CC18           (     flx29ccp.asm):00686 [5]             sta     CHAR        ;SAVE CHAR
D01A 810D             (     flx29ccp.asm):00687 [2]             cmpa    #$0D        ;IS IT RETURN?
D01C 2710             (     flx29ccp.asm):00688 [3]             beq     NXTCH4      ;
D01E B1CC02           (     flx29ccp.asm):00689 [5]             cmpa    TTYEOL      ;IS IT EOL?
D021 270B             (     flx29ccp.asm):00690 [3]             beq     NXTCH4      ;
D023 BFCC14           (     flx29ccp.asm):00691 [6]             stx     BUFPNT      ;SAVE NEW POSITION
D026 8120             (     flx29ccp.asm):00692 [2]             cmpa    #$20        ;CHECK FOR SPACE
D028 2604             (     flx29ccp.asm):00693 [3]             bne     NXTCH4      ;
D02A A184             (     flx29ccp.asm):00694 [4+0]           cmpa    ,x          ;NEXT CHAR SPACE?
D02C 27E7             (     flx29ccp.asm):00695 [3]             beq     NXTCH3      ;SKIP IF SO
                      (     flx29ccp.asm):00696                                     ;
D02E 8DB9             (     flx29ccp.asm):00697 [7]     NXTCH4  bsr     CLASS       ;GO CLASSIFY
D030 3590             (     flx29ccp.asm):00698 [5+4]           puls    x,pc        ;RESTORE REG. & RETURN
                      (     flx29ccp.asm):00699         
                      (     flx29ccp.asm):00700         * GETFIL
                      (     flx29ccp.asm):00701         *
                      (     flx29ccp.asm):00702         * GETFIL gets A FILE SPECIFICATION FROM
                      (     flx29ccp.asm):00703         * THE INput sTREAM.
                      (     flx29ccp.asm):00704         *
                      (     flx29ccp.asm):00705         *   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):00706         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00707         
D032 8615             (     flx29ccp.asm):00708 [2]     GETFIL  lda     #21         ;SET PRE ERROR
D034 A701             (     flx29ccp.asm):00709 [4+1]           sta     1,x         ;
D036 86FF             (     flx29ccp.asm):00710 [2]             lda     #$FF        ;SET DRIVE NEG
D038 A703             (     flx29ccp.asm):00711 [4+1]           sta     3,x         ;
D03A 6F04             (     flx29ccp.asm):00712 [6+1]           clr     4,x         ;
D03C 6F0C             (     flx29ccp.asm):00713 [6+1]           clr     12,x        ;CLEAR EXTENSION
D03E BDD0D0           (     flx29ccp.asm):00714 [8]             jsr     SKPSPC      ;SKIP SPACES
D041 8608             (     flx29ccp.asm):00715 [2]             lda     #8          ;SET UP COUNT
D043 B7CC4B           (     flx29ccp.asm):00716 [5]             sta     COUNT       ;SAVE IT
D046 8D34             (     flx29ccp.asm):00717 [7]             bsr     PRTM        ;PROCESS ITEM
D048 252E             (     flx29ccp.asm):00718 [3]             bcs     GETFI5      ;ERROR?
D04A 260F             (     flx29ccp.asm):00719 [3]             bne     GETFI2      ;CHECK TERM
D04C 8D2E             (     flx29ccp.asm):00720 [7]             bsr     PRTM        ;PROCESS ITEM
D04E 2528             (     flx29ccp.asm):00721 [3]             bcs     GETFI5      ;ERROR?
D050 2609             (     flx29ccp.asm):00722 [3]             bne     GETFI2      ;CHECK TERM
D052 BCCC3F           (     flx29ccp.asm):00723 [7]             cmpx    CRSAVE      ;CHECK ERROR?
D055 276C             (     flx29ccp.asm):00724 [3]             beq     PRTM6       ;
D057 8D23             (     flx29ccp.asm):00725 [7]             bsr     PRTM        ;PROCESS ITEM
D059 2368             (     flx29ccp.asm):00726 [3]             bls     PRTM6       ;ERROR?
                      (     flx29ccp.asm):00727                                     ;
D05B BECC3F           (     flx29ccp.asm):00728 [6]     GETFI2  ldx     CRSAVE      ;RESTORE POINTER
D05E 6D04             (     flx29ccp.asm):00729 [6+1]           tst     4,x         ;IS NAME NULL?
D060 2761             (     flx29ccp.asm):00730 [3]             beq     PRTM6       ;
D062 6D03             (     flx29ccp.asm):00731 [6+1]           tst     3,x         ;CHECK DRIVE NUMBER
D064 2A0F             (     flx29ccp.asm):00732 [3]             bpl     GETFI4      ;SET YET?
D066 7DCC0D           (     flx29ccp.asm):00733 [7]             tst     SYSFLG      ;SYSTEM DRIVE?
D069 2705             (     flx29ccp.asm):00734 [3]             beq     GETFI3      ;
D06B B6CC0B           (     flx29ccp.asm):00735 [5]             lda     SYSDRV      ;GET SYSTEM DRIVE
D06E 2003             (     flx29ccp.asm):00736 [3]             bra     GETF35      ;
                      (     flx29ccp.asm):00737                                     ;
D070 B6CC0C           (     flx29ccp.asm):00738 [5]     GETFI3  lda     WRKDRV      ;GET WORK DRIVE
D073 A703             (     flx29ccp.asm):00739 [4+1]   GETF35  sta     3,x         ;SET DRIVE NUMBER
D075 7FCC0D           (     flx29ccp.asm):00740 [7]     GETFI4  clr     SYSFLG      ;CLEAR FLAG
D078 BECC3F           (     flx29ccp.asm):00741 [6]     GETFI5  ldx     CRSAVE      ;RESTORE FCB
D07B 39               (     flx29ccp.asm):00742 [5]             rts
                      (     flx29ccp.asm):00743         
                      (     flx29ccp.asm):00744         * PRTM
                      (     flx29ccp.asm):00745         *
                      (     flx29ccp.asm):00746         * PRTM ProcesSES AN ITEM OF THE FILE SPEC
                      (     flx29ccp.asm):00747         
D07C 8D8C             (     flx29ccp.asm):00748 [7]     PRTM    bsr     NXTCH       ;GET NEXT CHAR
D07E 2543             (     flx29ccp.asm):00749 [3]             bcs     PRTM6       ;ERROR?
D080 8139             (     flx29ccp.asm):00750 [2]             cmpa    #$39        ;CHECK IF NUMBER
D082 2215             (     flx29ccp.asm):00751 [3]             bhi     PRTM2       ;
D084 BECC3F           (     flx29ccp.asm):00752 [6]             ldx     CRSAVE      ;RESTORE POINTER
D087 6D03             (     flx29ccp.asm):00753 [6+1]           tst     3,x         ;CHECK FOR DRIVE NO
D089 2A38             (     flx29ccp.asm):00754 [3]             bpl     PRTM6       ;ERROR?
D08B 8403             (     flx29ccp.asm):00755 [2]             anda    #3          ;MASK DRIVE
D08D A703             (     flx29ccp.asm):00756 [4+1]           sta     3,x         ;SET DRIVE NUM
D08F BDD00A           (     flx29ccp.asm):00757 [8]             jsr     NXTCH       ;GET NEXT CHAR
D092 242F             (     flx29ccp.asm):00758 [3]             bcc     PRTM6       ;ERROR?
                      (     flx29ccp.asm):00759                                     ;
D094 812E             (     flx29ccp.asm):00760 [2]     PRTM1   cmpa    #$2E        ;CHECK TERM
D096 1CFE             (     flx29ccp.asm):00761 [3]             andcc   #$FE        ;CLC  CLEAR ERROR
D098 39               (     flx29ccp.asm):00762 [5]             rts                 ;
                      (     flx29ccp.asm):00763                                     ;
D099 F6CC4B           (     flx29ccp.asm):00764 [5]     PRTM2   ldb     COUNT       ;GET COUNT
D09C 2B25             (     flx29ccp.asm):00765 [3]             bmi     PRTM6       ;ERROR?
D09E 3404             (     flx29ccp.asm):00766 [5+1]           pshs    b           ;SAVE COUNT
D0A0 C005             (     flx29ccp.asm):00767 [2]             subb    #5          ;SET NEW COUNT
D0A2 F7CC4B           (     flx29ccp.asm):00768 [5]             stb     COUNT       ;SAVE IT
D0A5 3504             (     flx29ccp.asm):00769 [5+1]           puls    b           ;RESTORE OLD
                      (     flx29ccp.asm):00770                                     ;
D0A7 B1CC49           (     flx29ccp.asm):00771 [5]     PRTM3   cmpa    MAPUP       ;CHECK FOR LOWER CASE
D0AA 2502             (     flx29ccp.asm):00772 [3]             bcs     LD0AE       ;SKIP IF NOT
D0AC 8020             (     flx29ccp.asm):00773 [2]             suba    #$20        ;CONVERT TO UPPER
                      (     flx29ccp.asm):00774                                     ;
D0AE A704             (     flx29ccp.asm):00775 [4+1]   LD0AE   sta     4,x         ;PUT CHARACTER
D0B0 3001             (     flx29ccp.asm):00776 [4+1]           leax    1,x         ;BUMP THE POINTER
D0B2 5A               (     flx29ccp.asm):00777 [2]             decb                ;DEC THE COUNT
D0B3 BDD00A           (     flx29ccp.asm):00778 [8]             jsr     NXTCH       ;GET NEXT CHAR
D0B6 2408             (     flx29ccp.asm):00779 [3]             bcc     PRTM5       ;TERM CHAR?
D0B8 812D             (     flx29ccp.asm):00780 [2]             cmpa    #$2D        ;IS IT HYPHEN?
D0BA 2704             (     flx29ccp.asm):00781 [3]             beq     PRTM5       ;
                      (     flx29ccp.asm):00782                                     ;
D0BC 815F             (     flx29ccp.asm):00783 [2]             cmpa    #$5F        ;IS IT UNDER SCORE?
D0BE 2606             (     flx29ccp.asm):00784 [3]             bne     PRTM7       ;
                      (     flx29ccp.asm):00785                                     ;
D0C0 5D               (     flx29ccp.asm):00786 [2]     PRTM5   tstb                ;CHECK COUNT
D0C1 26E4             (     flx29ccp.asm):00787 [3]             bne     PRTM3       ;REPEAT
                      (     flx29ccp.asm):00788                                     ;
D0C3 1A01             (     flx29ccp.asm):00789 [3]     PRTM6   orcc    #1          ;SEC  SET ERROR
D0C5 39               (     flx29ccp.asm):00790 [5]             rts                 ;
                      (     flx29ccp.asm):00791                                     ;
D0C6 5D               (     flx29ccp.asm):00792 [2]     PRTM7   tstb                ;CHECK COUNT
D0C7 27CB             (     flx29ccp.asm):00793 [3]             beq     PRTM1       ;FINISHED?
                      (     flx29ccp.asm):00794                                     ;
D0C9 6F04             (     flx29ccp.asm):00795 [6+1]           clr     4,x         ;CLEAR REST
D0CB 3001             (     flx29ccp.asm):00796 [4+1]           leax    1,x         ;BUMP POINTER
D0CD 5A               (     flx29ccp.asm):00797 [2]             decb                ;DEC THE COUNT
D0CE 20F6             (     flx29ccp.asm):00798 [3]             bra     PRTM7       ;REPEAT
                      (     flx29ccp.asm):00799         
                      (     flx29ccp.asm):00800         * SKPSPC
                      (     flx29ccp.asm):00801         *
                      (     flx29ccp.asm):00802         * SKPSPC skipS SPACES IN THE BUFFER
                      (     flx29ccp.asm):00803         *
                      (     flx29ccp.asm):00804         *   ENTRy: noNE
                      (     flx29ccp.asm):00805         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00806         
D0D0 BFCC3F           (     flx29ccp.asm):00807 [6]     SKPSPC  stx     CRSAVE      ;SAVE INDEX
D0D3 BECC14           (     flx29ccp.asm):00808 [6]             ldx     BUFPNT      ;GET POINTER
                      (     flx29ccp.asm):00809                                     ;
D0D6 A684             (     flx29ccp.asm):00810 [4+0]   SKPSP2  lda      ,x          ;GET CHARACTER
D0D8 8120             (     flx29ccp.asm):00811 [2]             cmpa    #$20        ;IS IT SPACE?
D0DA 2604             (     flx29ccp.asm):00812 [3]             bne     SKPSP4      ;
                      (     flx29ccp.asm):00813                                     ;
D0DC 3001             (     flx29ccp.asm):00814 [4+1]           leax    1,x         ;BUMP TO NEXT
D0DE 20F6             (     flx29ccp.asm):00815 [3]             bra     SKPSP2      ;REPEAT
                      (     flx29ccp.asm):00816                                     ;
D0E0 BFCC14           (     flx29ccp.asm):00817 [6]     SKPSP4  stx     BUFPNT      ;SET POINTER
D0E3 BECC3F           (     flx29ccp.asm):00818 [6]             ldx     CRSAVE      ;RESTORE REGISTER
D0E6 39               (     flx29ccp.asm):00819 [5]             rts
                      (     flx29ccp.asm):00820         
                      (     flx29ccp.asm):00821         * SETEXT
                      (     flx29ccp.asm):00822         *
                      (     flx29ccp.asm):00823         * SETEXT sets A DEFAULT NAME EXTENSION
                      (     flx29ccp.asm):00824         * IF THE exteNSION IS NULL. IT IS SET
                      (     flx29ccp.asm):00825         * ACCORDing tO THE CODE IN A.
                      (     flx29ccp.asm):00826         *
                      (     flx29ccp.asm):00827         *   ENTRy: a HAS CODE
                      (     flx29ccp.asm):00828         *          x POINTS TO FCB
                      (     flx29ccp.asm):00829         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00830         
D0E7 3430             (     flx29ccp.asm):00831 [5+4]   SETEXT  pshs    x,y         ;SAVE REGISTERS
D0E9 E60C             (     flx29ccp.asm):00832 [4+1]           ldb     12,x        ;GET FIRST EXT
D0EB 261E             (     flx29ccp.asm):00833 [3]             bne     SETEX6      ;NULL?
                      (     flx29ccp.asm):00834                                     ;
                      (     flx29ccp.asm):00835                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;leay    <EXTTBL,pc  ;POINT TO TABLE
D0ED 318C1D           (     flx29ccp.asm):00836                 FCB     $31,$8C,$1D             ; ASSEMBLER ERROR??
D0F0 810F             (     flx29ccp.asm):00837 [2]             cmpa    #$0F        ;CHECK RANGE
D0F2 2217             (     flx29ccp.asm):00838 [3]             bhi     SETEX6      ;
D0F4 C603             (     flx29ccp.asm):00839 [2]             ldb     #3          ;GET TO DESIRED EXT.
D0F6 3D               (     flx29ccp.asm):00840 [11]            mul                 ;
D0F7 31AB             (     flx29ccp.asm):00841 [4+4]           leay    d,y         ;
D0F9 C603             (     flx29ccp.asm):00842 [2]             ldb     #3          ;GET EXTENSION LENGTH
                      (     flx29ccp.asm):00843                                     ;
D0FB A6A0             (     flx29ccp.asm):00844 [4+2]   SETEX4  lda     ,y+        ;GET CHAR
D0FD B1CC49           (     flx29ccp.asm):00845 [5]             cmpa    MAPUP       ;IS IT LOWER CASE?
D100 2502             (     flx29ccp.asm):00846 [3]             bcs     SETEX5      ;NO
D102 8020             (     flx29ccp.asm):00847 [2]             suba    #$20        ;YES - MAKE UPPER CASE
                      (     flx29ccp.asm):00848                                     ;
D104 A70C             (     flx29ccp.asm):00849 [4+1]   SETEX5  sta     12,x        ;PUT IN EXT
D106 3001             (     flx29ccp.asm):00850 [4+1]           leax    1,x         ;BUMP POINTER
D108 5A               (     flx29ccp.asm):00851 [2]             decb                ;THE COUNT
D109 26F0             (     flx29ccp.asm):00852 [3]             bne     SETEX4      ;FINISHED?
                      (     flx29ccp.asm):00853                                     ;
D10B 35B0             (     flx29ccp.asm):00854 [5+6]   SETEX6  puls    x,y,pc      ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):00855         
                      (     flx29ccp.asm):00856         * EXTTBL
                      (     flx29ccp.asm):00857         *
                      (     flx29ccp.asm):00858         * EXTENSion cODE TABLE
                      (     flx29ccp.asm):00859         
D10D 62696E           (     flx29ccp.asm):00860         EXTTBL  fcc     "bin"   ;CODE 0
D110 747874           (     flx29ccp.asm):00861                 fcc     "txt"   ;CODE 1
D113 636D64           (     flx29ccp.asm):00862                 fcc     "cmd"   ;CODE 2
D116 626173           (     flx29ccp.asm):00863                 fcc     "bas"   ;CODE 3
D119 737973           (     flx29ccp.asm):00864                 fcc     "sys"   ;CODE 4
D11C 62616B           (     flx29ccp.asm):00865                 fcc     "bak"   ;CODE 5
D11F 736372           (     flx29ccp.asm):00866                 fcc     "scr"   ;CODE 6
D122 646174           (     flx29ccp.asm):00867                 fcc     "dat"   ;CODE 7
D125 626163           (     flx29ccp.asm):00868                 fcc     "bac"   ;CODE 8
D128 646972           (     flx29ccp.asm):00869                 fcc     "dir"   ;CODE 9
D12B 707274           (     flx29ccp.asm):00870                 fcc     "prt"   ;CODE 10
D12E 6F7574           (     flx29ccp.asm):00871                 fcc     "out"   ;CODE 11
D131 72656C           (     flx29ccp.asm):00872                 fcc     "rel"   ;CODE 12
D134 726669           (     flx29ccp.asm):00873                 fcc     "rfi"   ;CODE 13
D137 646576           (     flx29ccp.asm):00874                 fcc     "dev"   ;CODE 14
D13A 617263           (     flx29ccp.asm):00875                 fcc     "arc"   ;CODE 15
                      (     flx29ccp.asm):00876         
                      (     flx29ccp.asm):00877         * GETHEX
                      (     flx29ccp.asm):00878         *
                      (     flx29ccp.asm):00879         * GETHEX gets A HEX VALUE FROM THE
                      (     flx29ccp.asm):00880         * INPUT buffeR.  B IS NON ZERO IF
                      (     flx29ccp.asm):00881         * THERE was a NUMBER.
                      (     flx29ccp.asm):00882         *
                      (     flx29ccp.asm):00883         *   ENTRy: noNE
                      (     flx29ccp.asm):00884         *   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):00885         *          vaLUE IN X
                      (     flx29ccp.asm):00886         
D13D BDD229           (     flx29ccp.asm):00887 [8]     GETHEX  jsr     CLROFS      ;CLEAR SPACE & B REG
D140 BDD00A           (     flx29ccp.asm):00888 [8]     GETHE2  jsr     NXTCH       ;GET CHARACTER
D143 2522             (     flx29ccp.asm):00889 [3]             bcs     GETHE8      ;GRAPHICS?
                      (     flx29ccp.asm):00890                                     ;
D145 8D26             (     flx29ccp.asm):00891 [7]             bsr     TSTHEX      ;TEST FOR HEX
D147 2518             (     flx29ccp.asm):00892 [3]             bcs     GETHE6      ;ERROR?
                      (     flx29ccp.asm):00893                                     ;
D149 3404             (     flx29ccp.asm):00894 [5+1]           pshs    b           ;SAVE IND
D14B C604             (     flx29ccp.asm):00895 [2]             ldb     #4          ;SET UP COUNT
                      (     flx29ccp.asm):00896                                     ;
D14D 78CC1C           (     flx29ccp.asm):00897 [7]     GETHE4  asl     OFFSET+1    ;SHIFT OVER 4
D150 79CC1B           (     flx29ccp.asm):00898 [7]             rol     OFFSET      ;
D153 5A               (     flx29ccp.asm):00899 [2]             decb                ;DEC THE COUNT
D154 26F7             (     flx29ccp.asm):00900 [3]             bne     GETHE4      ;LOOP TIL DONE
                      (     flx29ccp.asm):00901                                     ;
D156 3504             (     flx29ccp.asm):00902 [5+1]           puls    b           ;RESTORE IND
D158 BBCC1C           (     flx29ccp.asm):00903 [5]             adda    OFFSET+1    ;
D15B B7CC1C           (     flx29ccp.asm):00904 [5]             sta     OFFSET+1    ;SET NEW DIGIT
D15E 5C               (     flx29ccp.asm):00905 [2]             incb                ;SET INDICATOR
D15F 20DF             (     flx29ccp.asm):00906 [3]             bra     GETHE2      ;
                      (     flx29ccp.asm):00907                                     ;
D161 BDD00A           (     flx29ccp.asm):00908 [8]     GETHE6  jsr     NXTCH       ;GET CHARACTER
D164 24FB             (     flx29ccp.asm):00909 [3]             bcc     GETHE6      ;WAIT FOR TERM
D166 39               (     flx29ccp.asm):00910 [5]             rts                 ;
                      (     flx29ccp.asm):00911                                     ;
D167 BECC1B           (     flx29ccp.asm):00912 [6]     GETHE8  ldx     OFFSET      ;GET VALUE
D16A 1CFE             (     flx29ccp.asm):00913 [3]     GETHE9  andcc   #$FE        ;CLC  CLEAR ERRORS
D16C 39               (     flx29ccp.asm):00914 [5]             rts
                      (     flx29ccp.asm):00915         
                      (     flx29ccp.asm):00916         * TSTHEX
                      (     flx29ccp.asm):00917         *
                      (     flx29ccp.asm):00918         * TEST For vaLID HEX CHARACTER
                      (     flx29ccp.asm):00919         
D16D 815F             (     flx29ccp.asm):00920 [2]     TSTHEX  cmpa    #$5F
D16F 2302             (     flx29ccp.asm):00921 [3]             bls     TSTHE2
D171 8020             (     flx29ccp.asm):00922 [2]             suba    #$20
                      (     flx29ccp.asm):00923         
D173 8047             (     flx29ccp.asm):00924 [2]     TSTHE2  suba    #$47        ;REMOVE BIAS
D175 2A0C             (     flx29ccp.asm):00925 [3]             bpl     TSTHE4      ;
                      (     flx29ccp.asm):00926                                     ;
D177 8B06             (     flx29ccp.asm):00927 [2]             adda    #6          ;CHECK RANGE
D179 2A04             (     flx29ccp.asm):00928 [3]             bpl     TSTHE3      ;ERROR?
                      (     flx29ccp.asm):00929                                     ;
D17B 8B07             (     flx29ccp.asm):00930 [2]             adda    #7          ;ADD BACK IN
D17D 2A04             (     flx29ccp.asm):00931 [3]             bpl     TSTHE4      ;ERROR?
                      (     flx29ccp.asm):00932                                     ;
D17F 8B0A             (     flx29ccp.asm):00933 [2]     TSTHE3  adda    #$0A        ;FINAL BIAS
D181 2AE7             (     flx29ccp.asm):00934 [3]             bpl     GETHE9      ;NO ERROR
                      (     flx29ccp.asm):00935         
D183 1A01             (     flx29ccp.asm):00936 [3]     TSTHE4  orcc    #1
D185 39               (     flx29ccp.asm):00937 [5]             rts
                      (     flx29ccp.asm):00938         
                      (     flx29ccp.asm):00939         * INDEC
                      (     flx29ccp.asm):00940         *
                      (     flx29ccp.asm):00941         * INPUT decimAL NUMBER.
                      (     flx29ccp.asm):00942         *
                      (     flx29ccp.asm):00943         *   ENTRy: noNE
                      (     flx29ccp.asm):00944         *   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):00945         *          vaLUE IN X
                      (     flx29ccp.asm):00946         *          b=0 IF NO NUMBER
                      (     flx29ccp.asm):00947         
D186 BDD229           (     flx29ccp.asm):00948 [8]     INDEC   jsr     CLROFS      ;CLEAR SPACE & B REG.
D189 BDD00A           (     flx29ccp.asm):00949 [8]     INDEC2  jsr     NXTCH       ;GET CHARACTER
D18C 25D9             (     flx29ccp.asm):00950 [3]             bcs     GETHE8      ;TERM?
D18E 8139             (     flx29ccp.asm):00951 [2]             cmpa    #$39        ;CHECK FOR NUMBER
D190 22CF             (     flx29ccp.asm):00952 [3]             bhi     GETHE6      ;
D192 840F             (     flx29ccp.asm):00953 [2]             anda    #$0F        ;MASK NUMBER
D194 3404             (     flx29ccp.asm):00954 [5+1]           pshs    b           ;SAVE COUNT
D196 3402             (     flx29ccp.asm):00955 [5+1]           pshs    a           ;SAVE NUMBER
D198 FCCC1B           (     flx29ccp.asm):00956 [6]             ldd     OFFSET      ;GET VALUE
D19B 58               (     flx29ccp.asm):00957 [2]             aslb                ;DO TIMES 8
D19C 49               (     flx29ccp.asm):00958 [2]             rola                ;
D19D 58               (     flx29ccp.asm):00959 [2]             aslb                ;
D19E 49               (     flx29ccp.asm):00960 [2]             rola                ;
D19F F3CC1B           (     flx29ccp.asm):00961 [7]             addd    OFFSET      ;PLUS TIMES 2
D1A2 58               (     flx29ccp.asm):00962 [2]             aslb                ;
D1A3 49               (     flx29ccp.asm):00963 [2]             rola                ;
D1A4 EBE0             (     flx29ccp.asm):00964 [4+2]           addb    ,s+        ;ADD IN NEW DIGIT
D1A6 8900             (     flx29ccp.asm):00965 [2]             adca    #0          ;
D1A8 FDCC1B           (     flx29ccp.asm):00966 [6]             std     OFFSET      ;SAVE RESULT
D1AB 3504             (     flx29ccp.asm):00967 [5+1]           puls    b           ;GET COUNT
D1AD 5C               (     flx29ccp.asm):00968 [2]             incb                ;BUMP COUNT
D1AE 20D9             (     flx29ccp.asm):00969 [3]             bra     INDEC2      ;REPEAT
                      (     flx29ccp.asm):00970         
                      (     flx29ccp.asm):00971         * LOAD
                      (     flx29ccp.asm):00972         *
                      (     flx29ccp.asm):00973         * LOAD Is the SYSTEM BINARY LOADER
                      (     flx29ccp.asm):00974         *
                      (     flx29ccp.asm):00975         *   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):00976         *   EXIT:  waRMS IF ERROR
                      (     flx29ccp.asm):00977         *          alL RGISTERS CHANGED
                      (     flx29ccp.asm):00978         
D1B0 7FCC1D           (     flx29ccp.asm):00979 [7]     LOAD    clr     XFR         ;CLEAR TRANSFER FLAG
D1B3 8D3D             (     flx29ccp.asm):00980 [7]     LOAD2   bsr     DOFMS       ;DO READ
D1B5 8102             (     flx29ccp.asm):00981 [2]             cmpa    #2          ;BEGIN DESIGNATOR?
D1B7 2715             (     flx29ccp.asm):00982 [3]             beq     LOAD4       ;YES - GET DATA COUNT
                      (     flx29ccp.asm):00983                                     ;
D1B9 8116             (     flx29ccp.asm):00984 [2]             cmpa    #$16        ;TRANSFER DESIG?
D1BB 26F6             (     flx29ccp.asm):00985 [3]             bne     LOAD2       ;
D1BD 8D33             (     flx29ccp.asm):00986 [7]             bsr     DOFMS       ;GET NEXT CHAR
D1BF B7CC1E           (     flx29ccp.asm):00987 [5]             sta     TADR        ;SET TRANSFER ADR
D1C2 8D2E             (     flx29ccp.asm):00988 [7]             bsr     DOFMS       ;GET LSB
D1C4 B7CC1F           (     flx29ccp.asm):00989 [5]             sta     TADR+1      ;SAVE IT
D1C7 8601             (     flx29ccp.asm):00990 [2]             lda     #1          ;SET NON ZERO
D1C9 B7CC1D           (     flx29ccp.asm):00991 [5]             sta     XFR         ;SET TRANSFER FLAG
D1CC 20E5             (     flx29ccp.asm):00992 [3]             bra     LOAD2       ;REPEAT
                      (     flx29ccp.asm):00993                                     ;
D1CE 8D22             (     flx29ccp.asm):00994 [7]     LOAD4   bsr     DOFMS       ;GET NEXT CHAR
D1D0 1F89             (     flx29ccp.asm):00995 [6]             tfr     a,b         ;SAVE IT
D1D2 8D1E             (     flx29ccp.asm):00996 [7]             bsr     DOFMS       ;GET REST
D1D4 1E89             (     flx29ccp.asm):00997 [8]             exg     a,b         ;PUT IN ORDER
D1D6 F3CC1B           (     flx29ccp.asm):00998 [7]             addd    OFFSET      ;OFFSET + ADDRESS
D1D9 FDCC3D           (     flx29ccp.asm):00999 [6]             std     INDEX       ;SAVE POINTER
D1DC 8D14             (     flx29ccp.asm):01000 [7]             bsr     DOFMS       ;GET DATA COUNT
D1DE 1F89             (     flx29ccp.asm):01001 [6]             tfr     a,b         ;MOVE TO B
D1E0 4D               (     flx29ccp.asm):01002 [2]             tsta                ;ZERO COUNT?
D1E1 27D0             (     flx29ccp.asm):01003 [3]             beq     LOAD2       ;YES -
                      (     flx29ccp.asm):01004                                     ;
D1E3 8D0D             (     flx29ccp.asm):01005 [7]     LOAD6   bsr     DOFMS       ;GET CHARACTER
D1E5 BECC3D           (     flx29ccp.asm):01006 [6]             ldx     INDEX       ;GET POINTER
D1E8 A780             (     flx29ccp.asm):01007 [4+2]           sta     ,x+        ;SAVE IN MEMORY
D1EA BFCC3D           (     flx29ccp.asm):01008 [6]             stx     INDEX       ;SAVE POINTER
D1ED 5A               (     flx29ccp.asm):01009 [2]             decb                ;DEC THE COUNT
D1EE 26F3             (     flx29ccp.asm):01010 [3]             bne     LOAD6       ;FINISHED?
D1F0 20C1             (     flx29ccp.asm):01011 [3]             bra     LOAD2       ;REPEAT
                      (     flx29ccp.asm):01012         
                      (     flx29ccp.asm):01013         * DOFMS
                      (     flx29ccp.asm):01014         *
                      (     flx29ccp.asm):01015         * DOFMS does AN IO TRANSFER TO THE
                      (     flx29ccp.asm):01016         * FILE Mgmnt SYSTEM.
                      (     flx29ccp.asm):01017         *
                      (     flx29ccp.asm):01018         *   ENTRy: noNE
                      (     flx29ccp.asm):01019         *   EXIT:  saME AS FMS COMMAND
                      (     flx29ccp.asm):01020         
D1F2 8EC840           (     flx29ccp.asm):01021 [3]     DOFMS   ldx     #SYSFCB     ;POINT TO FCB
D1F5 BDD406           (     flx29ccp.asm):01022 [8]             jsr     FMS         ;DO COMMAND
D1F8 2711             (     flx29ccp.asm):01023 [3]             beq     LD20B       ;ERROR?
                      (     flx29ccp.asm):01024                                     ;
D1FA A601             (     flx29ccp.asm):01025 [4+1]           lda     1,x         ;GET ERROR CODE
D1FC 8108             (     flx29ccp.asm):01026 [2]             cmpa    #8          ;IS IT EOF?
D1FE 260E             (     flx29ccp.asm):01027 [3]             bne     DOFMS4      ;
                      (     flx29ccp.asm):01028                                     ;
D200 3262             (     flx29ccp.asm):01029 [4+1]           leas    2,s         ;FIX STACK
D202 8604             (     flx29ccp.asm):01030 [2]             lda     #4          ;SET CMND
D204 A784             (     flx29ccp.asm):01031 [4+0]           sta     ,x          ;
D206 BDD406           (     flx29ccp.asm):01032 [8]             jsr     FMS         ;CALL FMS
D209 260A             (     flx29ccp.asm):01033 [3]             bne     DOFMS6      ;ERROR?
                      (     flx29ccp.asm):01034                                     ;
D20B 1CFE             (     flx29ccp.asm):01035 [3]     LD20B   andcc   #$FE        ;CLC  CLEAR ERROR
D20D 39               (     flx29ccp.asm):01036 [5]             rts                 ;
                      (     flx29ccp.asm):01037                                     ;
D20E B7CC20           (     flx29ccp.asm):01038 [5]     DOFMS4  sta     ERRTYP      ;SET TYPE
D211 8104             (     flx29ccp.asm):01039 [2]             cmpa    #4          ;NO FILE ERROR?
D213 2772             (     flx29ccp.asm):01040 [3]             beq     LD287       ;YES -
                      (     flx29ccp.asm):01041                                     ;
D215 8D73             (     flx29ccp.asm):01042 [7]     DOFMS6  bsr     RPTERR      ;REPORT ERROR
D217 7ECDDE           (     flx29ccp.asm):01043 [4]             jmp     NFERR4      ;DO WARM START
                      (     flx29ccp.asm):01044         
                      (     flx29ccp.asm):01045         * GET
                      (     flx29ccp.asm):01046         *
                      (     flx29ccp.asm):01047         * GET IS the DOS COMMAND USED TO
                      (     flx29ccp.asm):01048         * LOAD Binary FILES INTO MEMORY.
                      (     flx29ccp.asm):01049         *
                      (     flx29ccp.asm):01050         *   ENTRy: noNE
                      (     flx29ccp.asm):01051         *   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):01052         
D21A 8600             (     flx29ccp.asm):01053 [2]     GET     lda     #0          ;SET DEFAULT CODE
D21C 8D35             (     flx29ccp.asm):01054 [7]             bsr     GETOPN      ;GET & OPEN FILE
D21E 250F             (     flx29ccp.asm):01055 [3]             bcs     TSTNAM      ;NO NAME?
D220 8D07             (     flx29ccp.asm):01056 [7]             bsr     CLROFS      ;CLEAR OFFSET
D222 7CCC4C           (     flx29ccp.asm):01057 [7]             inc     GOTFIL      ;SET FILE INDIC.
D225 8D89             (     flx29ccp.asm):01058 [7]             bsr     LOAD        ;GO DO LOAD
D227 20F1             (     flx29ccp.asm):01059 [3]             bra     GET         ;REPEAT PROCESS
                      (     flx29ccp.asm):01060         
                      (     flx29ccp.asm):01061         * CLROFS
                      (     flx29ccp.asm):01062         *
                      (     flx29ccp.asm):01063         * CLEARS storAGE LOC. OFFSET
                      (     flx29ccp.asm):01064         
D229 4F               (     flx29ccp.asm):01065 [2]     CLROFS  clra
D22A 5F               (     flx29ccp.asm):01066 [2]             clrb
D22B FDCC1B           (     flx29ccp.asm):01067 [6]             std     OFFSET
D22E 39               (     flx29ccp.asm):01068 [5]             rts
                      (     flx29ccp.asm):01069         
                      (     flx29ccp.asm):01070         * TSTNAM
                      (     flx29ccp.asm):01071         *
                      (     flx29ccp.asm):01072         * TSTNAM testS TO SEE IF ANY NAMES HAVE
                      (     flx29ccp.asm):01073         * BEEN ProcesSED YET.
                      (     flx29ccp.asm):01074         
D22F F6CC4C           (     flx29ccp.asm):01075 [5]     TSTNAM  ldb     GOTFIL      ;CHECK FLAG
D232 1027FB9D         (     flx29ccp.asm):01076 [5+?]           lbeq    NFERR       ;REPORT ERROR
D236 7ECD03           (     flx29ccp.asm):01077 [4]             jmp     WARMS       ;ALL DONE
                      (     flx29ccp.asm):01078         
                      (     flx29ccp.asm):01079         * LGO
                      (     flx29ccp.asm):01080         *
                      (     flx29ccp.asm):01081         * LGO IS the SYSTEM LOAD AND GO MODULE.
                      (     flx29ccp.asm):01082         *
                      (     flx29ccp.asm):01083         *   ENTRy: noNE
                      (     flx29ccp.asm):01084         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01085         
D239 8602             (     flx29ccp.asm):01086 [2]     LGO     lda     #2          ;SET DEFAULT CODE
D23B 8D22             (     flx29ccp.asm):01087 [7]             bsr     GETOP2      ;OPEN FILE
D23D 8DEA             (     flx29ccp.asm):01088 [7]             bsr     CLROFS      ;CLEAR OFFSET
D23F BDD1B0           (     flx29ccp.asm):01089 [8]             jsr     LOAD        ;GO DO LOAD
                      (     flx29ccp.asm):01090                 ;                    ;
D242 F6CC1D           (     flx29ccp.asm):01091 [5]             ldb     XFR         ;CHECK FOR TRANSFER ADR
D245 2704             (     flx29ccp.asm):01092 [3]             beq     LGO2        ;
D247 6E9FCC1E         (     flx29ccp.asm):01093 [3+5]           jmp     [TADR]      ;JUMP TO XFR ADR
                      (     flx29ccp.asm):01094                                     ;
D24B 8ECC56           (     flx29ccp.asm):01095 [3]     LGO2    ldx     #NOTRST     ;POINT TO STRING
D24E 8681             (     flx29ccp.asm):01096 [2]             lda     #$81        ;SET TYPE
D250 7ECDD8           (     flx29ccp.asm):01097 [4]             jmp     NFERR1      ;REPORT
                      (     flx29ccp.asm):01098         
                      (     flx29ccp.asm):01099         * GETOPN
                      (     flx29ccp.asm):01100         *
                      (     flx29ccp.asm):01101         * GETOPN gets THE FILES NAME FROM
                      (     flx29ccp.asm):01102         * THE INput bUFFER AND OPENS THE FILE
                      (     flx29ccp.asm):01103         *
                      (     flx29ccp.asm):01104         *   ENTRy: a HAS DEFAULT CODE
                      (     flx29ccp.asm):01105         *   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01106         
D253 3402             (     flx29ccp.asm):01107 [5+1]   GETOPN  pshs    a           ;SAVE CODE
D255 8EC840           (     flx29ccp.asm):01108 [3]             ldx     #SYSFCB     ;POINT TO FCB
D258 BDD032           (     flx29ccp.asm):01109 [8]             jsr     GETFIL      ;GET FILE SPEC
D25B 3502             (     flx29ccp.asm):01110 [5+1]           puls    a           ;RESTORE CODE
D25D 251A             (     flx29ccp.asm):01111 [3]             bcs     GETOP4      ;ERROR?
                      (     flx29ccp.asm):01112                                     ;
D25F 8EC840           (     flx29ccp.asm):01113 [3]     GETOP2  ldx     #SYSFCB     ;POINT TO FCB
D262 BDD0E7           (     flx29ccp.asm):01114 [8]             jsr     SETEXT      ;SET EXTENSION
D265 8EC840           (     flx29ccp.asm):01115 [3]             ldx     #SYSFCB     ;POINT TO FCB
D268 8601             (     flx29ccp.asm):01116 [2]             lda     #1          ;SET OPEN CODE
D26A A784             (     flx29ccp.asm):01117 [4+0]           sta     ,x          ;SET COMMAND
D26C BDD1F2           (     flx29ccp.asm):01118 [8]             jsr     DOFMS       ;GO DO FMS
D26F 102500BB         (     flx29ccp.asm):01119 [5+?]           lbcs    NONMER      ;REPORT ANY ERROR
D273 86FF             (     flx29ccp.asm):01120 [2]             lda     #$FF        ;SET NEG
D275 A7883B           (     flx29ccp.asm):01121 [4+1]           sta     59,x        ;SET FOR NO SPC COMP
D278 39               (     flx29ccp.asm):01122 [5]             rts                 ;
                      (     flx29ccp.asm):01123                                     ;
D279 B6CC11           (     flx29ccp.asm):01124 [5]     GETOP4  lda     LSTTRM      ;GET TERM
D27C 810D             (     flx29ccp.asm):01125 [2]             cmpa    #$0D        ;IS TERM CR?
D27E 2707             (     flx29ccp.asm):01126 [3]             beq     LD287       ;YES -
                      (     flx29ccp.asm):01127                                     ;
D280 B1CC02           (     flx29ccp.asm):01128 [5]             cmpa    TTYEOL      ;IS IT EOL?
D283 1026FB4C         (     flx29ccp.asm):01129 [5+?]           lbne    NFERR       ;ERROR IF NEITHER
                      (     flx29ccp.asm):01130                                     ;
D287 1A01             (     flx29ccp.asm):01131 [3]     LD287   orcc    #1          ;SEC  SET TERM INDICATOR
D289 39               (     flx29ccp.asm):01132 [5]             rts
                      (     flx29ccp.asm):01133         
                      (     flx29ccp.asm):01134         * RPTERR
                      (     flx29ccp.asm):01135         *
                      (     flx29ccp.asm):01136         * RPTERR repoRTS FMS ERRORS
                      (     flx29ccp.asm):01137         
D28A 3430             (     flx29ccp.asm):01138 [5+4]   RPTERR  pshs    x,y         ;SAVE REGISTERS
D28C A601             (     flx29ccp.asm):01139 [4+1]           lda     1,x         ;GET ERR NUM
D28E B7CC20           (     flx29ccp.asm):01140 [5]             sta     ERRTYP      ;SAVE IT
D291 2763             (     flx29ccp.asm):01141 [3]             beq     RPTE44      ;
D293 BDCDE4           (     flx29ccp.asm):01142 [8]             jsr     RESTIO      ;RESTORE IO
D296 10BECC2D         (     flx29ccp.asm):01143 [7]             ldy     ERRVEC      ;GET ERR VECTOR
D29A 2608             (     flx29ccp.asm):01144 [3]             bne     RPTER1      ;
D29C 8110             (     flx29ccp.asm):01145 [2]             cmpa    #$10        ;NOT READY ERROR
D29E 2758             (     flx29ccp.asm):01146 [3]             beq     RPTER6      ;
D2A0 108ECCA1         (     flx29ccp.asm):01147 [4]             ldy     #ERNM       ;POINT TO STRING
                      (     flx29ccp.asm):01148                                     ;
D2A4 8EC840           (     flx29ccp.asm):01149 [3]     RPTER1  ldx     #SYSFCB     ;POINT TO FCB
D2A7 6D02             (     flx29ccp.asm):01150 [6+1]           tst     2,x         ;
D2A9 2709             (     flx29ccp.asm):01151 [3]             beq     RPTER2      ;
                      (     flx29ccp.asm):01152                                     ;
D2AB 8604             (     flx29ccp.asm):01153 [2]             lda     #4          ;CLOSE FILE IN FCB
D2AD A784             (     flx29ccp.asm):01154 [4+0]           sta     ,x          ;
D2AF BDD406           (     flx29ccp.asm):01155 [8]             jsr     FMS         ;CALL FMS
D2B2 262E             (     flx29ccp.asm):01156 [3]             bne     RPTER4      ;
                      (     flx29ccp.asm):01157                                     ;
D2B4 8EC838           (     flx29ccp.asm):01158 [3]     RPTER2  ldx     #SYSFCB-8   ;SET TO FCB
D2B7 C60B             (     flx29ccp.asm):01159 [2]             ldb     #$0B        ;SET COUNT
D2B9 8D6E             (     flx29ccp.asm):01160 [7]             bsr     RPTER9      ;COPY NAME TO FCB
D2BB 8EC840           (     flx29ccp.asm):01161 [3]             ldx     #SYSFCB     ;
D2BE B6CC0B           (     flx29ccp.asm):01162 [5]             lda     SYSDRV      ;SET ALL DRIVES ** CHANGED TO SYS ** 2-25-79
D2C1 A703             (     flx29ccp.asm):01163 [4+1]           sta     3,x         ;
D2C3 8601             (     flx29ccp.asm):01164 [2]             lda     #1          ;SET EXTENSION
D2C5 A784             (     flx29ccp.asm):01165 [4+0]           sta     ,x          ;OPEN FOR READ
D2C7 BDD406           (     flx29ccp.asm):01166 [8]             jsr     FMS         ;
D2CA 2616             (     flx29ccp.asm):01167 [3]             bne     RPTER4      ;ERROR?
                      (     flx29ccp.asm):01168                                     ;
D2CC B6CC20           (     flx29ccp.asm):01169 [5]             lda     ERRTYP      ;GET ERROR NUM
D2CF 4A               (     flx29ccp.asm):01170 [2]             deca                ;CALCULATE REC NUM
D2D0 47               (     flx29ccp.asm):01171 [2]             asra                ;
D2D1 47               (     flx29ccp.asm):01172 [2]             asra                ;
D2D2 4C               (     flx29ccp.asm):01173 [2]             inca                ;
D2D3 6F8820           (     flx29ccp.asm):01174 [6+1]           clr     32,x        ;SET LRN IN FCB
D2D6 A78821           (     flx29ccp.asm):01175 [4+1]           sta     33,x        ;
D2D9 8615             (     flx29ccp.asm):01176 [2]             lda     #21         ;
D2DB A784             (     flx29ccp.asm):01177 [4+0]           sta     ,x          ;DO POSITION
D2DD BDD406           (     flx29ccp.asm):01178 [8]             jsr     FMS         ;
D2E0 271E             (     flx29ccp.asm):01179 [3]             beq     RPTER7      ;
                      (     flx29ccp.asm):01180                                     ;
D2E2 8ECC6F           (     flx29ccp.asm):01181 [3]     RPTER4  ldx     #DSKERS     ;POINT TO STRING
D2E5 BDCE79           (     flx29ccp.asm):01182 [8]             jsr     PSTRNG      ;OUTPUT IT
D2E8 BECC3F           (     flx29ccp.asm):01183 [6]             ldx     CRSAVE      ;RESTORE TO FCB
D2EB B6CC20           (     flx29ccp.asm):01184 [5]             lda     ERRTYP      ;GET ERR NUM
D2EE A701             (     flx29ccp.asm):01185 [4+1]           sta     1,x         ;
D2F0 6F84             (     flx29ccp.asm):01186 [6+0]           clr     ,x          ;
D2F2 5F               (     flx29ccp.asm):01187 [2]             clrb                ;
D2F3 BDCF82           (     flx29ccp.asm):01188 [8]             jsr     OUTDEC      ;OUTPUT NUMBER
                      (     flx29ccp.asm):01189                                     ;
D2F6 35B0             (     flx29ccp.asm):01190 [5+6]   RPTE44  puls    x,y,pc      ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):01191                                     ;
D2F8 8ECC7C           (     flx29ccp.asm):01192 [3]     RPTER6  ldx     #NTRST      ;POINT TO STRING
D2FB BDCE79           (     flx29ccp.asm):01193 [8]             jsr     PSTRNG      ;OUTPUT IT
D2FE 20F6             (     flx29ccp.asm):01194 [3]             bra     RPTE44      ;
                      (     flx29ccp.asm):01195                                     ;
D300 BDCEB1           (     flx29ccp.asm):01196 [8]     RPTER7  jsr     PCRLF       ;OUTPUT CR & LF
D303 8EC840           (     flx29ccp.asm):01197 [3]             ldx     #SYSFCB     ;SET TO FCB
D306 B6CC20           (     flx29ccp.asm):01198 [5]             lda     ERRTYP      ;GET ERROR
D309 4A               (     flx29ccp.asm):01199 [2]             deca                ;FIND RECORD IN FCB
D30A 8403             (     flx29ccp.asm):01200 [2]             anda    #3          ;MASK NUMBER
D30C C63F             (     flx29ccp.asm):01201 [2]             ldb     #63         ;GET MESSAGE LENGTH
D30E 3D               (     flx29ccp.asm):01202 [11]            mul                 ;GET TO DESIRED MESSAGE
D30F CB04             (     flx29ccp.asm):01203 [2]             addb    #4          ;ADD IN BIAS
D311 E78822           (     flx29ccp.asm):01204 [4+1]           stb     34,x        ;SET FDI IN FCB
                      (     flx29ccp.asm):01205                                     ;
D314 BDD406           (     flx29ccp.asm):01206 [8]     RPTE85  jsr     FMS         ;GET CHARACTER
D317 26C9             (     flx29ccp.asm):01207 [3]             bne     RPTER4      ;ERROR?
D319 BDCF3D           (     flx29ccp.asm):01208 [8]             jsr     PUTCHR      ;OUTPUT CHARACTER
D31C 810D             (     flx29ccp.asm):01209 [2]             cmpa    #$0D        ;IS IT CR?
D31E 26F4             (     flx29ccp.asm):01210 [3]             bne     RPTE85      ;REPEAT
                      (     flx29ccp.asm):01211                                     ;
D320 8604             (     flx29ccp.asm):01212 [2]             lda     #4          ;CLOSE FILE
D322 A784             (     flx29ccp.asm):01213 [4+0]           sta     ,x          ;
D324 BDD406           (     flx29ccp.asm):01214 [8]             jsr     FMS         ;CALL FMS
D327 20CD             (     flx29ccp.asm):01215 [3]             bra     RPTE44      ;EXIT
                      (     flx29ccp.asm):01216                                     ;
D329 3430             (     flx29ccp.asm):01217 [5+4]   RPTER9  pshs    x,y         ;SAVE REGISTERS
D32B 7ED0FB           (     flx29ccp.asm):01218 [4]             jmp     SETEX4      ;GO COPY
                      (     flx29ccp.asm):01219         
                      (     flx29ccp.asm):01220         * NONMER
                      (     flx29ccp.asm):01221         *
                      (     flx29ccp.asm):01222         * REPORT no nAME ERROR
                      (     flx29ccp.asm):01223         
D32E 8ECC65           (     flx29ccp.asm):01224 [3]     NONMER  ldx     #NONMST     ;POINT TO STRING
D331 7ECDDB           (     flx29ccp.asm):01225 [4]             jmp     NFERR2      ;REPORT IT
                      (     flx29ccp.asm):01226         
                      (     flx29ccp.asm):01227         * DOCMD
                      (     flx29ccp.asm):01228         *
                      (     flx29ccp.asm):01229         * DO COMmand LINE
                      (     flx29ccp.asm):01230         
D334 3506             (     flx29ccp.asm):01231 [5+2]   DOCMD   puls    a,b         ;GET RET ADR
D336 FDCC43           (     flx29ccp.asm):01232 [6]             std     RETADR      ;SAVE ADDRESS
D339 10FFCC45         (     flx29ccp.asm):01233 [7]             sts     STKSTR      ;SAVE STACK PNTR
D33D 7FCC20           (     flx29ccp.asm):01234 [7]             clr     ERRTYP      ;CLEAR FLAG
D340 7CCC28           (     flx29ccp.asm):01235 [7]             inc     CMFLG       ;SET MODE
D343 7ECDB2           (     flx29ccp.asm):01236 [4]             jmp     DOS4        ;GO DO LINE
                      (     flx29ccp.asm):01237         
                      (     flx29ccp.asm):01238         * RETRN
                      (     flx29ccp.asm):01239         *
                      (     flx29ccp.asm):01240         * RETRN returNS FROM DOCMD
                      (     flx29ccp.asm):01241         
D346 7FCC28           (     flx29ccp.asm):01242 [7]     RETRN   clr     CMFLG       ;CLEAR MODE
D349 10FECC45         (     flx29ccp.asm):01243 [7]             lds     STKSTR      ;RESTORE STACK
D34D F6CC20           (     flx29ccp.asm):01244 [5]             ldb     ERRTYP      ;GET STATUS
D350 6E9FCC43         (     flx29ccp.asm):01245 [3+5]           jmp     [RETADR]    ;DO RETURN
                      (     flx29ccp.asm):01246         
                      (     flx29ccp.asm):01247         * ADDBX
                      (     flx29ccp.asm):01248         * ADDS ContenTS OF B TO X
                      (     flx29ccp.asm):01249         
D354 3A               (     flx29ccp.asm):01250 [3]     ADDBX   abx
D355 39               (     flx29ccp.asm):01251 [5]             rts
                      (     flx29ccp.asm):01252         
                      (     flx29ccp.asm):01253         * MEXIT
                      (     flx29ccp.asm):01254         *
                      (     flx29ccp.asm):01255         * MONITOr exiT CHECK
                      (     flx29ccp.asm):01256         
D356 7DCCFC           (     flx29ccp.asm):01257 [7]     MEXIT   tst     PR1         ;CHECK PROCESS 1
D359 2604             (     flx29ccp.asm):01258 [3]             bne     MEXIT2      ;
D35B 6E9FD3F3         (     flx29ccp.asm):01259 [3+5]           jmp     [MONITRP]    ;JUMP TO MONITOR
                      (     flx29ccp.asm):01260                                     ;
D35F 8EC840           (     flx29ccp.asm):01261 [3]     MEXIT2  ldx     #SYSFCB     ;POINT TO FCB
D362 861B             (     flx29ccp.asm):01262 [2]             lda     #27         ;
D364 A701             (     flx29ccp.asm):01263 [4+1]           sta     1,x         ;SET ERROR
D366 BDD28A           (     flx29ccp.asm):01264 [8]             jsr     RPTERR      ;REPORT ERROR
D369 7ECD67           (     flx29ccp.asm):01265 [4]             jmp     ENTRY       ;GO BACK
                      (        flex9.asm):00009                         include "flx29fms.asm"
                      (     flx29fms.asm):00001                 OPT PAG
                      (     flx29fms.asm):00002                 TTL 6809 FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00003                 PAG
                      (     flx29fms.asm):00004                 PRAGMA CD
                      (     flx29fms.asm):00005         *
                      (     flx29fms.asm):00006         * TSC 6809 DISK FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00007         *
                      (     flx29fms.asm):00008         * COPYRIGHT (C) 1979 BY
                      (     flx29fms.asm):00009         *
                      (     flx29fms.asm):00010         * TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29fms.asm):00011         * BOX 2574
                      (     flx29fms.asm):00012         * WEST LAFAYETTE, INDIANA 47906
                      (     flx29fms.asm):00013         * (317) 463-2502
                      (     flx29fms.asm):00014         *
                      (     flx29fms.asm):00015         * NOTE:
                      (     flx29fms.asm):00016         * AS OF 11/79 THE POINTS IN FMS WHICH LOAD A REGISTER
                      (     flx29fms.asm):00017         * WITH THE SECTOR LENGTH HAVE BEEN CHANGED TO SIMPLY
                      (     flx29fms.asm):00018         * CLEAR THE REGISTER (SINCE LDB #256 = LDB #0).
                      (     flx29fms.asm):00019         * ALL POINTS AFFECTED BY THIS CHANGE ARE FLAGGED WITH
                      (     flx29fms.asm):00020         * FOUR BACKSLASHES IN THE COMMENT FIELD (\\\\).
                      (     flx29fms.asm):00021         *
                      (     flx29fms.asm):00022         * CORRECTED WRITE FILE SECTOR MAP ROUTINE (WTFSM) 2/4/80.
                      (     flx29fms.asm):00023         
                      (     flx29fms.asm):00024         *
                      (     flx29fms.asm):00025         * THE FILE MANAGEMENT SYSTEM (FMS) RELIES
                      (     flx29fms.asm):00026         * ON THE USER DEFINITIONS OF FILE CONTROL
                      (     flx29fms.asm):00027         * BLOCKS (FCB) FOR EACH FILE OPENED.
                      (     flx29fms.asm):00028         * THE FCB STRUCTURE IS AS FOLLOWS:
                      (     flx29fms.asm):00029         *
                      (     flx29fms.asm):00030         * EACH FCB CONSUMES 320 BYTES OF RAM.
                      (     flx29fms.asm):00031         * EACH BYTE IS USED AS FOLLOWS:
                      (     flx29fms.asm):00032         *
                      (     flx29fms.asm):00033         * NAME  OFFSET FUNCTION
                      (     flx29fms.asm):00034         * ----  ------ --------
                      (     flx29fms.asm):00035         
     0000             (     flx29fms.asm):00036         FFC     equ     0           ;FUNCTION OP CODE
     0001             (     flx29fms.asm):00037         FES     equ     1           ;ERROR STATUS BYTE
     0002             (     flx29fms.asm):00038         FAS     equ     2           ;ACTIVITY STATUS
     0003             (     flx29fms.asm):00039         FDN     equ     3           ;DRIVE NUMBER
     0004             (     flx29fms.asm):00040         FFN     equ     4           ;- 11 FILE NAME
     000C             (     flx29fms.asm):00041         FNE     equ     12          ;- 14 NAME EXTENSION
     000F             (     flx29fms.asm):00042         FID     equ     15          ;IDENTIFIER BYTE
     0010             (     flx29fms.asm):00043         FNU     equ     16          ;FILE NUMBER
     0011             (     flx29fms.asm):00044         FSA     equ     17          ;- 18 START DISK ADR.
     0013             (     flx29fms.asm):00045         FEA     equ     19          ;- 20 END DISK ADDRESS
     0015             (     flx29fms.asm):00046         FSZ     equ     21          ;- 22 FILE SIZE
     0017             (     flx29fms.asm):00047         FMP     equ     23          ;- 24 FILE SECTOR MAP
     0019             (     flx29fms.asm):00048         FDT     equ     25          ;- 27 CREATION DATE
     001C             (     flx29fms.asm):00049         FLP     equ     28          ;- 29 FCB LIST POINTER
     001E             (     flx29fms.asm):00050         FCS     equ     30          ;- 31 CURRENT SECTOR
     0020             (     flx29fms.asm):00051         FRN     equ     32          ;- 33 RECORD NUMBER
     0022             (     flx29fms.asm):00052         FDI     equ     34          ;DATA INDEX
     0023             (     flx29fms.asm):00053         FRI     equ     35          ;RANDOM INDEX
     0024             (     flx29fms.asm):00054         FWB     equ     36          ;- 46 NAME WORK BUFFER
     002F             (     flx29fms.asm):00055         FCD     equ     47          ;- 49 CURRENT DIR. ADR.
     0032             (     flx29fms.asm):00056         FFD     equ     50          ;- 52 FIRST DELETED DIR.
     0035             (     flx29fms.asm):00057         FLR     equ     53          ;- 55 LAST RECORD PNTR
     0038             (     flx29fms.asm):00058         FNK     equ     56          ;- 58 NEXT KEY POINTER
     003B             (     flx29fms.asm):00059         FSC     equ     59          ;SPACE COMP. CNTR
     003C             (     flx29fms.asm):00060         FSP     equ     60          ;- 63 SPARE BYTES
     0040             (     flx29fms.asm):00061         FSB     equ     64          ;- 319 SECTOR BUFFER
                      (     flx29fms.asm):00062         
     003C             (     flx29fms.asm):00063         FMX equ FSP                             ;MAX SECTOR NUMBER
     0037             (     flx29fms.asm):00064         SBC equ FLR+2                           ;SEQ. BLOCK COUNT
                      (     flx29fms.asm):00065         
                      (     flx29fms.asm):00066         *
                      (     flx29fms.asm):00067         * ALL DRIVER ROUTINES ARE REFERENCED
                      (     flx29fms.asm):00068         * THROUGH THIS TABLE.
                      (     flx29fms.asm):00069         
                      (     flx29fms.asm):00070         ;DREAD   equ     $DE00       ;DISK READ ROUTINE
                      (     flx29fms.asm):00071         ;DWRITE  equ     $DE03       ;DISK WRITE ROUTINE
                      (     flx29fms.asm):00072         ;RESTOR  equ     $DE09       ;HEAD RESTORE ROUTINE
                      (     flx29fms.asm):00073         ;VERIFY  equ     $DE06       ;WRITE VERIFY ROUTINE
                      (     flx29fms.asm):00074         ;DRIVE   equ     $DE0C       ;DRIVE SELECT
                      (     flx29fms.asm):00075         ;CHECK   equ     $DE0F       ;CHECK READY
                      (     flx29fms.asm):00076         ;QUKCHK  equ     $DE12       ;QUICK READY CHECK
                      (     flx29fms.asm):00077         ;DINIT   equ     $DE15       ;INITIALIZE DRIVERS
                      (     flx29fms.asm):00078         ;DWARM   equ     $DE18       ;USER WARMSTART ROUTINE
                      (     flx29fms.asm):00079         ;DSEEK   equ     $DE1B       ;SEEK TO TRACK ROUTINE
                      (     flx29fms.asm):00080         
                      (     flx29fms.asm):00081         * ALL LOW LEVEL SYSTEM VARIABLES
                      (     flx29fms.asm):00082         * AND CONSTANTS ARE IN THIS AREA.
                      (     flx29fms.asm):00083         *
                      (     flx29fms.asm):00084         * SYSTEM CONSTANTS
                      (     flx29fms.asm):00085         
     0100             (     flx29fms.asm):00086         SL      equ     256         ;SECTOR LENGTH
     000B             (     flx29fms.asm):00087         NL      equ     11          ;NAME LENGTH
     0005             (     flx29fms.asm):00088         RTC     equ     5           ;RETRY COUNT
     0007             (     flx29fms.asm):00089         RSC     equ     7           ;SEEK RETRY COUNT
     0004             (     flx29fms.asm):00090         RS      equ     4           ;RECORD START
     0010             (     flx29fms.asm):00091         IRS     equ     16          ;INFO RECORD START
     0018             (     flx29fms.asm):00092         IRL     equ     24          ;INFO RECORD LENGTH
     0004             (     flx29fms.asm):00093         IRFAS   equ     $04         ;INFO MASK
     0016             (     flx29fms.asm):00094         LSTFC   equ     22          ;LAST FUNCTION CODE
     007F             (     flx29fms.asm):00095         MAXSP   equ     $7F         ;MAX SPACE COUNT
     0020             (     flx29fms.asm):00096         SPC     equ     $20         ;ASCII SPACE
     0009             (     flx29fms.asm):00097         SCC     equ     9           ;SPACE COMPRESSION CHAR.
     0018             (     flx29fms.asm):00098         DELC    equ     $18         ;DELETE CHARACTER
     0004             (     flx29fms.asm):00099         NODR    equ     4           ;NUMBER OF DRIVES
     0000             (     flx29fms.asm):00100         DTRK    equ     0           ;DIRECTORY START TRACK
     0005             (     flx29fms.asm):00101         DSEC    equ     5           ;DIR. START SECTOR
     0003             (     flx29fms.asm):00102         ISEC    equ     3           ;INFO SECTOR NUMBER
     007F             (     flx29fms.asm):00103         TRMSK   equ     $7F         ;TRACK MASK
     007F             (     flx29fms.asm):00104         SCMSK   equ     $7F         ;SECTOR MASK
     004C             (     flx29fms.asm):00105         LSTTRK  equ     76          ;LAST TRACK NUMBER
     000F             (     flx29fms.asm):00106         LSTSEC  equ     15          ;LAST SECTOR NUMBER
     0010             (     flx29fms.asm):00107         RNFMSK  equ     $10         ;REC NOT FOUND MASK
     0005             (     flx29fms.asm):00108         MAIND   equ     $0005       ;MAIN DIRECTORY ADDRESS
                      (     flx29fms.asm):00109         
                      (     flx29fms.asm):00110         * DOS CONSTANTS
                      (     flx29fms.asm):00111         
     CC0E             (     flx29fms.asm):00112         DATE    equ     $CC0E       ;SYSTEM DATA
     C709             (     flx29fms.asm):00113         LOCK    equ     $C709       ;LOCK FMS
     C70C             (     flx29fms.asm):00114         UNLOCK  equ     $C70C       ;UNLOCK FMS
                      (     flx29fms.asm):00115         ;PR1     equ     $CCFC       ;PROCESS 1 REGISTER
                      (     flx29fms.asm):00116         
                      (     flx29fms.asm):00117         * SYSTEM ERROR NUMBER DEFINITIONS
                      (     flx29fms.asm):00118         *
                      (     flx29fms.asm):00119         * NAME  NUMBER MEANING
                      (     flx29fms.asm):00120         * ----  ------ -------
                      (     flx29fms.asm):00121         
     0000             (     flx29fms.asm):00122         NOER    equ     0           ;NO ERROR
     0001             (     flx29fms.asm):00123         ICER    equ     1           ;ILLEGAL FUNCTION CODE
     0002             (     flx29fms.asm):00124         FBER    equ     2           ;FILE BUSY
     0003             (     flx29fms.asm):00125         FEER    equ     3           ;FILE EXISTS
     0004             (     flx29fms.asm):00126         NFER    equ     4           ;NO SUCH FILE
     0005             (     flx29fms.asm):00127         DRER    equ     5           ;DIRECTORY ERROR
     0006             (     flx29fms.asm):00128         TMER    equ     6           ;TOO MANY FILES
     0007             (     flx29fms.asm):00129         DFER    equ     7           ;DISK FULL
     0008             (     flx29fms.asm):00130         EFER    equ     8           ;END OF FILE
     0009             (     flx29fms.asm):00131         RDER    equ     9           ;READ ERROR (CRC)
     000A             (     flx29fms.asm):00132         WTER    equ     10          ;WRITE ERROR (CRC)
     000B             (     flx29fms.asm):00133         WPER    equ     11          ;WRITE PROTECTED
     000C             (     flx29fms.asm):00134         DPER    equ     12          ;DELETE PROTECTED
     000D             (     flx29fms.asm):00135         IFER    equ     13          ;ILLEGAL FCB
     000E             (     flx29fms.asm):00136         DAER    equ     14          ;ILLEGAL DISK ADDRESS
     000F             (     flx29fms.asm):00137         DNER    equ     15          ;DRIVE NUMBER ERROR
     0010             (     flx29fms.asm):00138         NRER    equ     16          ;NOT READY
     0011             (     flx29fms.asm):00139         ADER    equ     17          ;ACCESS DENIED
     0012             (     flx29fms.asm):00140         STER    equ     18          ;STATUS ERROR
     0013             (     flx29fms.asm):00141         IRER    equ     19          ;INDEX RANGE ERROR
     0014             (     flx29fms.asm):00142         FIER    equ     20          ;FMS INACTIVE
     0015             (     flx29fms.asm):00143         INER    equ     21          ;ILLEGAL FILE NAME
     0016             (     flx29fms.asm):00144         CLER    equ     22          ;CLOSE ERROR
     0017             (     flx29fms.asm):00145         FSER    equ     23          ;FSM OVERFLOW ERROR
     0018             (     flx29fms.asm):00146         RRER    equ     24          ;RECORD RANGE ERROR
     0019             (     flx29fms.asm):00147         RMER    equ     25          ;RECORD MATCH ERROR
                      (     flx29fms.asm):00148         
                      (     flx29fms.asm):00149         ;
                      (     flx29fms.asm):00150         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (     flx29fms.asm):00151         ;_____________________________________________________________________________________________________
                      (     flx29fms.asm):00152                         ORG     $D3E1       ; TABLE STARTS AT $D3E1
                      (     flx29fms.asm):00153         
D3E1 DE8E             (     flx29fms.asm):00154         LD3E1           FDB     ADDDEV      ; add an IRQ handler to table
D3E3 DE9A             (     flx29fms.asm):00155                         FDB     DELDEV      ; delete an IRQ handler from table
                      (     flx29fms.asm):00156         
D3E5 DE6D             (     flx29fms.asm):00157         INCHNEP         FDB     INCHNE      ; INPUT CHARACTER W/O ECHO
D3E7 DE7A             (     flx29fms.asm):00158         IHNDLRP         FDB     IHNDLR      ; IRQ INTERRUPT HANDLER
D3E9 FDAB             (     flx29fms.asm):00159         SWIVECP         FDB     SWIVEC      ; SWI3 VECTOR LOCATION
D3EB FDAB             (     flx29fms.asm):00160         IRQVECP         FDB     IRQVEC      ; IRQ VECTOR LOCATION
D3ED DE3E             (     flx29fms.asm):00161                         FDB     TMOFF       ; TIMER OFF ROUTINE
D3EF DE3E             (     flx29fms.asm):00162                         FDB     TMON        ; TIMER ON ROUTINE
D3F1 DE3E             (     flx29fms.asm):00163                         FDB     TMINT       ; TIMER INITIALIZATION
D3F3 DE33             (     flx29fms.asm):00164         MONITRP         FDB     MONITR      ; MONITOR ENTRY ADDRESS
D3F5 DE3F             (     flx29fms.asm):00165         TINITP          FDB     TINIT       ; TERMINAL INITIALIZATION
D3F7 DE5D             (     flx29fms.asm):00166                         FDB     STAT        ; CHECK TERMINAL STATUS
D3F9 DE4C             (     flx29fms.asm):00167                         FDB     VOUTCH      ; OUTPUT CHARACTER
D3FB DE43             (     flx29fms.asm):00168                         FDB     VINCH       ; INPUT CHARACTER W/ ECHO
                      (     flx29fms.asm):00169         
                      (     flx29fms.asm):00170         
                      (     flx29fms.asm):00171                 org     $D3FD
D3FD 7EC400           (     flx29fms.asm):00172 [4]     TSTSTR  jmp     STAR
                      (     flx29fms.asm):00173         
                      (     flx29fms.asm):00174                 org $D400
                      (     flx29fms.asm):00175         
                      (     flx29fms.asm):00176         * FMS JUMP TABLES
                      (     flx29fms.asm):00177         *
                      (     flx29fms.asm):00178         * ALL CALLS TO THE FMS SHOULD ENTER
                      (     flx29fms.asm):00179         * THROUGH ONE OF THESE THREE POINTS.
                      (     flx29fms.asm):00180         
D400 7ED43A           (     flx29fms.asm):00181 [4]     FMSINT  jmp     INIT        ;FMS INITIALIZATION  $D400
D403 7ED45D           (     flx29fms.asm):00182 [4]     FMSCLS  jmp     EXCLS       ;FMS CLOSURE         $D403
D406 7ED47F           (     flx29fms.asm):00183 [4]     FMS     jmp     CMND        ;FMS COMMAND ENTRY   $D406
                      (     flx29fms.asm):00184         
                      (     flx29fms.asm):00185         * GLOBAL VARIABLE STORAGE
                      (     flx29fms.asm):00186         
D409                  (     flx29fms.asm):00187         FCBBAS  rmb     2           ;FCB BASE POINTER        $D409
D40B                  (     flx29fms.asm):00188         FCBSTR  rmb     2           ;CURRENT FCB             $D40B
D40D                  (     flx29fms.asm):00189         TEMP    rmb     2           ;TEMPORARY INDEX         $D40D
D40F                  (     flx29fms.asm):00190         DATAPT  rmb     2           ;DATA POINTER            $D40F
D411                  (     flx29fms.asm):00191         ETRIES  rmb     1           ;ERROR TRY COUNT         $D411
D412                  (     flx29fms.asm):00192         STRIES  rmb     1           ;SEEK TRY COUNT          $D412
D413                  (     flx29fms.asm):00193         CLD     rmb     2           ;CURRENT LOOK UP DIR     $D413
D415                  (     flx29fms.asm):00194         CUD     rmb     2           ;CURRENT USER DIR        $D415
D417                  (     flx29fms.asm):00195         DIRDN   rmb     1           ;DIRECTORY DRIVE NUM     $D417
D418                  (     flx29fms.asm):00196         BKLN    rmb     2           ;BACK LINK               $D418
D41A                  (     flx29fms.asm):00197         SINDIR  rmb     1           ;SINGLE DIR SEARCH       $D41A
D41B                  (     flx29fms.asm):00198         AVLPNT  rmb     2           ;AVAIL POINTER           $D41B
D41D                  (     flx29fms.asm):00199         SECMAP  rmb     NODR*6      ;SECTOR MAPS             $D41D
                      (     flx29fms.asm):00200         
                      (     flx29fms.asm):00201                 org     $D435
                      (     flx29fms.asm):00202         
D435 FF               (     flx29fms.asm):00203         VRFYFG  fcb     $FF         ;VERIFY FLAG
                      (     flx29fms.asm):00204         
D436 00000000         (     flx29fms.asm):00205         DRVINFO fcb     $00,$00,$00,$00
                      (     flx29fms.asm):00206         
                      (     flx29fms.asm):00207         * SYSTEM ENTRY ROUTINES
                      (     flx29fms.asm):00208         *
                      (     flx29fms.asm):00209         * THE FOLLOWING THREE ROUTINES SHOULD
                      (     flx29fms.asm):00210         * BE ACCESSED THROUGH THE SYSTEM JUMP
                      (     flx29fms.asm):00211         * TABLE.
                      (     flx29fms.asm):00212         
                      (     flx29fms.asm):00213         * INIT
                      (     flx29fms.asm):00214         *
                      (     flx29fms.asm):00215         * INIT IS THE FMS INITIALIZATION ROUTINE.
                      (     flx29fms.asm):00216         * NO ERRORS CAN OCCUR FROM THIS ROUTINE
                      (     flx29fms.asm):00217         * AND THE SYSTEM ASSUMES NO FILES ARE OPEN.
                      (     flx29fms.asm):00218         
D43A BDDE15           (     flx29fms.asm):00219 [8]     INIT    jsr     CINIT       ;INITIALIZE DRIVERS
D43D 8ED409           (     flx29fms.asm):00220 [3]             ldx     #FCBBAS     ;SET POINTER
D440 C60A             (     flx29fms.asm):00221 [2]             ldb     #10         ;SET COUNT
D442 8D11             (     flx29fms.asm):00222 [7]             bsr     INIT4       ;CLEAR SPACE
D444 8E0005           (     flx29fms.asm):00223 [3]             ldx     #MAIND      ;SET MAIN DIRECTORY
D447 BFD413           (     flx29fms.asm):00224 [6]             stx     CLD         ;
D44A BFD415           (     flx29fms.asm):00225 [6]             stx     CUD         ;
D44D 7FD41A           (     flx29fms.asm):00226 [7]             clr     SINDIR      ;CLEAR SINGLE DIR
                      (     flx29fms.asm):00227                                     ;
D450 8ED41B           (     flx29fms.asm):00228 [3]     INIT2   ldx     #AVLPNT     ;POINT TO FMS SPC
D453 C61A             (     flx29fms.asm):00229 [2]             ldb     #26         ;SET COUNTER
                      (     flx29fms.asm):00230                                     ;
D455 6F80             (     flx29fms.asm):00231 [6+2]   INIT4   clr     ,x+        ;CLEAR BYTE
D457 5A               (     flx29fms.asm):00232 [2]             decb                ;DEC THE COUNT
D458 26FB             (     flx29fms.asm):00233 [3]             bne     INIT4       ;REPEAT?
D45A 7EC70C           (     flx29fms.asm):00234 [4]             jmp     UNLOCK
                      (     flx29fms.asm):00235         
                      (     flx29fms.asm):00236         * EXCLS
                      (     flx29fms.asm):00237         *
                      (     flx29fms.asm):00238         * EXCLS IS THE FMS EXIT ROUTINE.
                      (     flx29fms.asm):00239         * EXECUTION OF THIS ROUTINE TELLS THE
                      (     flx29fms.asm):00240         * SYSTEM TO CLOSE ALL OPEN FILES.
                      (     flx29fms.asm):00241         
D45D BDC709           (     flx29fms.asm):00242 [8]     EXCLS   jsr     LOCK        ;LOCK FMS
D460 BED409           (     flx29fms.asm):00243 [6]     EXCLS1  ldx     FCBBAS      ;GET LINK BASE
D463 27EB             (     flx29fms.asm):00244 [3]             beq     INIT2       ;ANY FCBS LEFT?
D465 3088E4           (     flx29fms.asm):00245 [4+1]           leax    -FLP,x      ;
D468 BFD40B           (     flx29fms.asm):00246 [6]             stx     FCBSTR      ;SET ACT. FCB
D46B 3420             (     flx29fms.asm):00247 [5+2]           pshs    y           ;SAVE REGISTER
D46D BDDADA           (     flx29fms.asm):00248 [8]             jsr     CLOSE       ;GO CLOSE FILE
D470 3520             (     flx29fms.asm):00249 [5+2]           puls    y           ;RESTORE REGISTER
D472 24EC             (     flx29fms.asm):00250 [3]             bcc     EXCLS1      ;REPEAT
                      (     flx29fms.asm):00251                                     ;
D474 BED40B           (     flx29fms.asm):00252 [6]             ldx     FCBSTR      ;SET TO FCB
D477 6F02             (     flx29fms.asm):00253 [6+1]           clr     2,x         ;CLEAR FAS
D479 BDC70C           (     flx29fms.asm):00254 [8]             jsr     UNLOCK      ;UNLOCK FMS
D47C C6FF             (     flx29fms.asm):00255 [2]             ldb     #$FF        ;SET ERROR
D47E 39               (     flx29fms.asm):00256 [5]             rts
                      (     flx29fms.asm):00257         
                      (     flx29fms.asm):00258         * CMND
                      (     flx29fms.asm):00259         *
                      (     flx29fms.asm):00260         * CMND IS THE FMS COMMAND INTERPRETER.
                      (     flx29fms.asm):00261         * ALL COMMAND CALLS TO FMS SHOULD BE
                      (     flx29fms.asm):00262         * THROUGH THIS ROUTINE.
                      (     flx29fms.asm):00263         
D47F 7DCCFC           (     flx29fms.asm):00264 [7]     CMND    tst     PR1         ;PROCESS ACTIVE?
D482 2703             (     flx29fms.asm):00265 [3]             beq     CMND1       ;
D484 BDC709           (     flx29fms.asm):00266 [8]             jsr     LOCK        ;LOCK FMS
                      (     flx29fms.asm):00267                                     ;
D487 3424             (     flx29fms.asm):00268 [5+3]   CMND1   pshs    b,y         ;SAVE REGISTERS
D489 BFD40B           (     flx29fms.asm):00269 [6]             stx     FCBSTR      ;SET FCB STORAGE
D48C 6F01             (     flx29fms.asm):00270 [6+1]           clr     FES,x       ;CLEAR ERRORS
D48E E684             (     flx29fms.asm):00271 [4+0]           ldb     FFC,x       ;GET FUNCTION CODE
D490 2622             (     flx29fms.asm):00272 [3]             bne     CMND4       ;IO CODE?
                      (     flx29fms.asm):00273                                     ;
D492 E602             (     flx29fms.asm):00274 [4+1]           ldb     FAS,x       ;GET ACTIVITY BYTE
D494 271A             (     flx29fms.asm):00275 [3]             beq     CMND3       ;
                      (     flx29fms.asm):00276                                     ;
D496 C102             (     flx29fms.asm):00277 [2]             cmpb    #2          ;IS IT WRITE?
D498 2711             (     flx29fms.asm):00278 [3]             beq     CMND2       ;
D49A BDD5BC           (     flx29fms.asm):00279 [8]             jsr     SRDSEQ      ;GO DO READ
D49D BED40B           (     flx29fms.asm):00280 [6]     CMND15  ldx     FCBSTR      ;RESTORE X
D4A0 2526             (     flx29fms.asm):00281 [3]             bcs     CMND7       ;ERROR?
D4A2 7DCCFC           (     flx29fms.asm):00282 [7]             tst     PR1         ;PR 1 ACTIVE?
D4A5 2623             (     flx29fms.asm):00283 [3]             bne     CMND8       ;
D4A7 5F               (     flx29fms.asm):00284 [2]             clrb                ;CLEAR ERRORS
D4A8 3524             (     flx29fms.asm):00285 [5+3]           puls    b,y         ;RESTORE REGISTERS
D4AA 39               (     flx29fms.asm):00286 [5]             rts                 ;
                      (     flx29fms.asm):00287                                     ;jmp  $f82a
                      (     flx29fms.asm):00288         
D4AB BDD6D7           (     flx29fms.asm):00289 [8]     CMND2   jsr     SWTSEQ      ;GO DO WRITE
D4AE 20ED             (     flx29fms.asm):00290 [3]             bra     CMND15      ;
                      (     flx29fms.asm):00291                                     ;
D4B0 C612             (     flx29fms.asm):00292 [2]     CMND3   ldb     #STER       ;SET STATUS ERROR
D4B2 2014             (     flx29fms.asm):00293 [3]             bra     CMND7       ;REPORT ERROR
                      (     flx29fms.asm):00294                                     ;
D4B4 C116             (     flx29fms.asm):00295 [2]     CMND4   cmpb    #LSTFC      ;CHECK CODE
D4B6 2304             (     flx29fms.asm):00296 [3]             bls     CMND5       ;
D4B8 C601             (     flx29fms.asm):00297 [2]             ldb     #ICER       ;SET CODE ERROR
D4BA 200C             (     flx29fms.asm):00298 [3]             bra     CMND7       ;REPORT IT
                      (     flx29fms.asm):00299                                     ;
D4BC 5A               (     flx29fms.asm):00300 [2]     CMND5   decb                ;DEC THE CODE
D4BD 58               (     flx29fms.asm):00301 [2]             aslb                ;CODE TIMES 2
D4BE 8ED4D2           (     flx29fms.asm):00302 [3]             ldx     #CODTBL     ;POINT TO TABLE
D4C1 AD95             (     flx29fms.asm):00303 [7+4]           jsr     [b,x]       ;GO DO ROUTINE
D4C3 BED40B           (     flx29fms.asm):00304 [6]             ldx     FCBSTR      ;RESTORE FCB PNTR
D4C6 2402             (     flx29fms.asm):00305 [3]             bcc     CMND8       ;ERRORS?
                      (     flx29fms.asm):00306                                     ;
D4C8 E701             (     flx29fms.asm):00307 [4+1]   CMND7   stb     FES,x       ;SET ERROR
                      (     flx29fms.asm):00308                                     ;
D4CA BDC70C           (     flx29fms.asm):00309 [8]     CMND8   jsr     UNLOCK      ;
D4CD 6D01             (     flx29fms.asm):00310 [6+1]           tst     FES,x       ;TEST FOR ERROR
D4CF 3524             (     flx29fms.asm):00311 [5+3]           puls    b,y         ;RESTORE REGISTERS
D4D1 39               (     flx29fms.asm):00312 [5]             rts
                      (     flx29fms.asm):00313         
                      (     flx29fms.asm):00314         * CODTBL
                      (     flx29fms.asm):00315         *
                      (     flx29fms.asm):00316         * CODTBL IS THE SYSTEM TABLE OF
                      (     flx29fms.asm):00317         * FUNCTION CODE ROUTINE ADDRESSES.
                      (     flx29fms.asm):00318         
D4D2 D98F             (     flx29fms.asm):00319         CODTBL  fdb     OPNRD       ;OPNRD   OPEN FOR READ
D4D4 D9E2             (     flx29fms.asm):00320                 fdb     OPNWT       ;OPNWT   OPEN FOR WRITE
D4D6 DB10             (     flx29fms.asm):00321                 fdb     OPNRW       ;OPNRW   OPEN FOR READ WRITE
D4D8 DADA             (     flx29fms.asm):00322                 fdb     CLOSE       ;CLOSE   CLOSE FILE
D4DA D5EA             (     flx29fms.asm):00323                 fdb     REWIND      ;REWIND  REWIND FILE
D4DC D825             (     flx29fms.asm):00324                 fdb     OPNDIR      ;OPNDIR  OPEN DIRECTORY
D4DE D840             (     flx29fms.asm):00325                 fdb     GETIR       ;GETIR   GET INFO RECORD
D4E0 D87F             (     flx29fms.asm):00326                 fdb     PUTIR       ;PUTIR   PUT INFO RECORD
D4E2 D649             (     flx29fms.asm):00327                 fdb     READSS      ;READSS  READ SINGLE SECTOR
D4E4 D6A7             (     flx29fms.asm):00328                 fdb     WRITSS      ;WRITSS  WRITE SINGLE SECTOR
D4E6 D972             (     flx29fms.asm):00329                 fdb     WRTDIR      ;WRTDIR  WRITE DIRECTORY
D4E8 DBED             (     flx29fms.asm):00330                 fdb     DELETE      ;DELETE  DELETE FILE
D4EA DB43             (     flx29fms.asm):00331                 fdb     RENAME      ;RENAME  RENAME FILE
D4EC D6A1             (     flx29fms.asm):00332                 fdb     RETRY4      ;RETRY4  APPEND FILES
D4EE DA9E             (     flx29fms.asm):00333                 fdb     NEXTS       ;NEXTS   NEXT SEQU. SECTOR
D4F0 D818             (     flx29fms.asm):00334                 fdb     OPNSIR      ;OPNSIR  OPEN SYSTEM INFO
D4F2 D577             (     flx29fms.asm):00335                 fdb     GETRAN      ;GETRAN  GET RANDOM CHARACTER
D4F4 D598             (     flx29fms.asm):00336                 fdb     PUTRAN      ;PUTRAN  WRITE RANDOM CHARACTER
D4F6 DB1E             (     flx29fms.asm):00337                 fdb     WTAPP       ;WTAPP   OPEN WRITE APPEND
D4F8 DDD5             (     flx29fms.asm):00338                 fdb     NXTRDY      ;NXTRDY  FIND NEXT READY DRIVE
D4FA DD13             (     flx29fms.asm):00339                 fdb     POSIT       ;POSIT   POSITION TO RECORD N
D4FC DCFD             (     flx29fms.asm):00340                 fdb     BKREC       ;BKREC   BACKUP ONE RECORD
                      (     flx29fms.asm):00341         
                      (     flx29fms.asm):00342         *
                      (     flx29fms.asm):00343         * THE FOLLOWING ROUTINES ARE THE SYSTEM
                      (     flx29fms.asm):00344         * LEVEL ROUTINES USED BY THE FMS.
                      (     flx29fms.asm):00345         
                      (     flx29fms.asm):00346         * SETFCB
                      (     flx29fms.asm):00347         *
                      (     flx29fms.asm):00348         * SETFCB IS USED TO TELL THE SYSTEM
                      (     flx29fms.asm):00349         * WHERE THE NEW FCB IS LOCATED.
                      (     flx29fms.asm):00350         * IT SETS UP A CHAINED STRUCTURE
                      (     flx29fms.asm):00351         * WITH FCBBAS AS THE BASE OF THE CHAIN.
                      (     flx29fms.asm):00352         *
                      (     flx29fms.asm):00353         *   ENTRY: NONE
                      (     flx29fms.asm):00354         *   EXIT:  CS IF FCB EXISTS
                      (     flx29fms.asm):00355         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00356         
D4FE 8D20             (     flx29fms.asm):00357 [7]     SETFCB  bsr     FNDFCB      ;FIND FCB
D500 2605             (     flx29fms.asm):00358 [3]             bne     SETFC2      ;ERROR?
D502 C602             (     flx29fms.asm):00359 [2]             ldb     #FBER       ;FILE BUSY
D504 1A01             (     flx29fms.asm):00360 [3]             orcc    #1          ;SEC SHOW ERROR
D506 39               (     flx29fms.asm):00361 [5]             rts                 ;
                      (     flx29fms.asm):00362                                     ;
D507 ED84             (     flx29fms.asm):00363 [5+0]   SETFC2  std     ,x         ;SET FCB
D509 AE84             (     flx29fms.asm):00364 [5+0]           ldx     ,x         ;GET FCB POS
D50B 6F84             (     flx29fms.asm):00365 [6+0]           clr     ,x         ;CLEAR LAST LINK
D50D 6F01             (     flx29fms.asm):00366 [6+1]           clr     1,x         ;ALSO SHOWS NO ERROR
D50F 39               (     flx29fms.asm):00367 [5]             rts
                      (     flx29fms.asm):00368         
                      (     flx29fms.asm):00369         * REMFCB
                      (     flx29fms.asm):00370         *
                      (     flx29fms.asm):00371         * REMFCB IS USED TO REMOVE AN ACTIVE
                      (     flx29fms.asm):00372         * FCB FROM THE SYSTEM FCB LIST.
                      (     flx29fms.asm):00373         *
                      (     flx29fms.asm):00374         *   ENTRY: NONE
                      (     flx29fms.asm):00375         *   EXIT:  CS IF FCB NOT FOUND
                      (     flx29fms.asm):00376         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00377         
D510 8D0E             (     flx29fms.asm):00378 [7]     REMFCB  bsr     FNDFCB      ;FIND FCB
D512 2705             (     flx29fms.asm):00379 [3]             beq     REMFC2      ;ERROR?
D514 C60D             (     flx29fms.asm):00380 [2]             ldb     #IFER       ;SET ERROR CODE
D516 1A01             (     flx29fms.asm):00381 [3]             orcc    #1          ;SEC SHOW ERROR
D518 39               (     flx29fms.asm):00382 [5]             rts                 ;
                      (     flx29fms.asm):00383                                     ;
D519 EC94             (     flx29fms.asm):00384 [5+3]   REMFC2  ldd     [,x]       ;GET NEXT LINK
D51B ED84             (     flx29fms.asm):00385 [5+0]           std     ,x         ;SAVE NEW VALUE
D51D 1CFE             (     flx29fms.asm):00386 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D51F 39               (     flx29fms.asm):00387 [5]             rts
                      (     flx29fms.asm):00388         
                      (     flx29fms.asm):00389         * FNDFCB
                      (     flx29fms.asm):00390         *
                      (     flx29fms.asm):00391         * FNDFCB TRIES TO FIND THE FCB IN
                      (     flx29fms.asm):00392         * FCBSTR IN THE SYSTEM TABLE.
                      (     flx29fms.asm):00393         *
                      (     flx29fms.asm):00394         *   ENTRY: NONE
                      (     flx29fms.asm):00395         *   EXIT:  NE IF NOT FOUND
                      (     flx29fms.asm):00396         *          A & B DESTROYED
                      (     flx29fms.asm):00397         *          X POINTS TO FCB
                      (     flx29fms.asm):00398         
D520 FCD40B           (     flx29fms.asm):00399 [6]     FNDFCB  ldd     FCBSTR      ;PICKUP FCB
D523 C3001C           (     flx29fms.asm):00400 [4]             addd    #FLP        ;SET TO LIST PNTR
D526 8ED409           (     flx29fms.asm):00401 [3]             ldx     #FCBBAS     ;GET BASE LOC.
D529 10AE84           (     flx29fms.asm):00402 [6+0]   FNDFC3  ldy     ,x         ;CHECK FOR LIST END
D52C 2603             (     flx29fms.asm):00403 [3]             bne     FNDFC4      ;
D52E 1CFB             (     flx29fms.asm):00404 [3]             andcc   #$FB        ;SET NE BIT
D530 39               (     flx29fms.asm):00405 [5]             rts                 ;
                      (     flx29fms.asm):00406                                     ;
D531 10A384           (     flx29fms.asm):00407 [7+0]   FNDFC4  cmpd    ,x         ;COMPARE VALUE
D534 2601             (     flx29fms.asm):00408 [3]             bne     FNDFC6      ;
D536 39               (     flx29fms.asm):00409 [5]             rts                 ;RET WITH EQ
                      (     flx29fms.asm):00410                                     ;
D537 AE84             (     flx29fms.asm):00411 [5+0]   FNDFC6  ldx     ,x         ;MOVE TO NEXT FCB
D539 20EE             (     flx29fms.asm):00412 [3]             bra     FNDFC3      ;REPEAT
                      (     flx29fms.asm):00413         
                      (     flx29fms.asm):00414         * CLRFCB
                      (     flx29fms.asm):00415         *
                      (     flx29fms.asm):00416         * CLRFCB CLEARS SELECTED SECTIONS OF
                      (     flx29fms.asm):00417         * THE CURRENT FCB.
                      (     flx29fms.asm):00418         *
                      (     flx29fms.asm):00419         *   ENTRY: NONE
                      (     flx29fms.asm):00420         *   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00421         
D53B BED40B           (     flx29fms.asm):00422 [6]     CLRFCB  ldx     FCBSTR      ;GET FCB
D53E 4F               (     flx29fms.asm):00423 [2]             clra                ;CLEAR A BYTE
D53F 5F               (     flx29fms.asm):00424 [2]             clrb                ;GET SECTOR LENGTH \\\\
D540 8D02             (     flx29fms.asm):00425 [7]             bsr     CLRFC2      ;CLEAR OUT
D542 C62F             (     flx29fms.asm):00426 [2]             ldb     #FSB-FSA    ;
D544 A78811           (     flx29fms.asm):00427 [4+1]   CLRFC2  sta     FSA,x       ;CLEAR BYTE
D547 3001             (     flx29fms.asm):00428 [4+1]           leax    1,x         ;BUMP THE POINTER
D549 5A               (     flx29fms.asm):00429 [2]             decb                ;DEC THE COUNT
D54A 26F8             (     flx29fms.asm):00430 [3]             bne     CLRFC2      ;LOOP TIL DONE
D54C 39               (     flx29fms.asm):00431 [5]             rts
                      (     flx29fms.asm):00432         
                      (     flx29fms.asm):00433         * COPNAM
                      (     flx29fms.asm):00434         *
                      (     flx29fms.asm):00435         * COPNAM WILL COPY THE NAME (NL BYTES)
                      (     flx29fms.asm):00436         * FROM FCB AREA FFN (FILE NAME) TO THE
                      (     flx29fms.asm):00437         * AREA FWB (WORK BUFFER).
                      (     flx29fms.asm):00438         *
                      (     flx29fms.asm):00439         *   ENTRY: NONE
                      (     flx29fms.asm):00440         *   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00441         
D54D BED40B           (     flx29fms.asm):00442 [6]     COPNAM  ldx     FCBSTR      ;PICKUP FCB
D550 C60B             (     flx29fms.asm):00443 [2]             ldb     #NL         ;SET NAME LENGTH
D552 A604             (     flx29fms.asm):00444 [4+1]   COPNA2  lda     FFN,x       ;GET CHARACTER
D554 A78824           (     flx29fms.asm):00445 [4+1]           sta     FWB,x       ;MOVE IT
D557 3001             (     flx29fms.asm):00446 [4+1]           leax    1,x         ;BUMP THE POINTER
D559 5A               (     flx29fms.asm):00447 [2]             decb                ;DEC THE COUNTER
D55A 26F6             (     flx29fms.asm):00448 [3]             bne     COPNA2
D55C 39               (     flx29fms.asm):00449 [5]             rts
                      (     flx29fms.asm):00450         
                      (     flx29fms.asm):00451         * CMPNAM
                      (     flx29fms.asm):00452         *
                      (     flx29fms.asm):00453         * CMPNAM WILL COMPARE THE NAME (NL
                      (     flx29fms.asm):00454         * BYTES LONG) IN THE FCB AREA FWB
                      (     flx29fms.asm):00455         * (WORK BUFFER) TO THE CONTENTS OF
                      (     flx29fms.asm):00456         * FCB AREA FFN (FILE NAME).
                      (     flx29fms.asm):00457         *
                      (     flx29fms.asm):00458         *   ENTRY: NONE
                      (     flx29fms.asm):00459         *   EXIT:  NE IF NOT EQUAL
                      (     flx29fms.asm):00460         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00461         
D55D BED40B           (     flx29fms.asm):00462 [6]     CMPNAM  ldx     FCBSTR      ;PICKUP FCB
D560 C60B             (     flx29fms.asm):00463 [2]             ldb     #NL         ;SET LENGTH
                      (     flx29fms.asm):00464                                     ;
D562 A604             (     flx29fms.asm):00465 [4+1]   CMPNA1  lda     FFN,x       ;GET CHARACTER
D564 8A20             (     flx29fms.asm):00466 [2]             ora     #$20        ;MAKE LOWERCASE
D566 3402             (     flx29fms.asm):00467 [5+1]           pshs    a           ;
D568 A68824           (     flx29fms.asm):00468 [4+1]           lda     FWB,x       ;GET 2ND CHARACTER
D56B 8A20             (     flx29fms.asm):00469 [2]             ora     #$20        ;MAKE LOWERCASE
D56D A1E0             (     flx29fms.asm):00470 [4+2]           cmpa    ,s+         ;COMPARE THEM
D56F 2605             (     flx29fms.asm):00471 [3]             bne     CMPNA4      ;NOT EQUAL?
                      (     flx29fms.asm):00472                                     ;
D571 3001             (     flx29fms.asm):00473 [4+1]           leax    1,x         ;BUMP THE POINTER
D573 5A               (     flx29fms.asm):00474 [2]             decb                ;DEC THE COUNTER
D574 26EC             (     flx29fms.asm):00475 [3]             bne     CMPNA1      ;REPEAT
D576 39               (     flx29fms.asm):00476 [5]     CMPNA4  rts
                      (     flx29fms.asm):00477         
                      (     flx29fms.asm):00478         * GETRAN   * FFC #17 *
                      (     flx29fms.asm):00479         *
                      (     flx29fms.asm):00480         * GETRAN GETS A RANDOM CHARACTER FROM
                      (     flx29fms.asm):00481         * THE CURRENT FSB.
                      (     flx29fms.asm):00482         *
                      (     flx29fms.asm):00483         *   ENTRY: FRI CONTAINS DESIRED INDEX
                      (     flx29fms.asm):00484         *   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00485         *          A CONTAINS CHARACTER
                      (     flx29fms.asm):00486         *          B & X CHANGED
                      (     flx29fms.asm):00487         
D577 BED40B           (     flx29fms.asm):00488 [6]     GETRAN  ldx     FCBSTR      ;GET FCB
D57A E602             (     flx29fms.asm):00489 [4+1]           ldb     FAS,x       ;GET STATUS
D57C 54               (     flx29fms.asm):00490 [2]             lsrb                ;CHECK IF R OR RW
D57D 2479             (     flx29fms.asm):00491 [3]             bcc     REWIN2      ;GO SET ERROR
D57F E68823           (     flx29fms.asm):00492 [4+1]           ldb     FRI,x       ;GET RANDOM INDEX
D582 7ED608           (     flx29fms.asm):00493 [4]             jmp     RDSEQ0
                      (     flx29fms.asm):00494         
                      (     flx29fms.asm):00495         * PUTNXT
                      (     flx29fms.asm):00496         *
                      (     flx29fms.asm):00497         * PUTNXT PUTS THE CHARACTER IN A INTO
                      (     flx29fms.asm):00498         * THE NEXT AVAILABLE FSB LOCATION
                      (     flx29fms.asm):00499         * POINTED TO BY THE FDI.
                      (     flx29fms.asm):00500         *
                      (     flx29fms.asm):00501         *   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00502         *   EXIT:  CS IF LAST FSB POS. USED
                      (     flx29fms.asm):00503         *          B & X CHANGED
                      (     flx29fms.asm):00504         
D585 BED40B           (     flx29fms.asm):00505 [6]     PUTNXT  ldx     FCBSTR      ;PICKUP FCB
D588 E68822           (     flx29fms.asm):00506 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D58B 6C8822           (     flx29fms.asm):00507 [6+1]           inc     FDI,x       ;BUMP FDI
D58E 3A               (     flx29fms.asm):00508 [3]             abx                 ;ADD IN INDEX
D58F A78840           (     flx29fms.asm):00509 [4+1]           sta     FSB,x       ;PUT THE CHARACTER
D592 5C               (     flx29fms.asm):00510 [2]             incb                ;BUMP IT
D593 261F             (     flx29fms.asm):00511 [3]             bne     PUTRA2      ;OVER END OF FSB?
D595 1A01             (     flx29fms.asm):00512 [3]             orcc    #1          ;SEC OVER END!
D597 39               (     flx29fms.asm):00513 [5]             rts
                      (     flx29fms.asm):00514         
                      (     flx29fms.asm):00515         * PUTRAN   * FFC #18 *
                      (     flx29fms.asm):00516         *
                      (     flx29fms.asm):00517         * PUTRAN PUTS THE CHARACTER IN A
                      (     flx29fms.asm):00518         * IN THE FSB LOCATION INDEXED BY
                      (     flx29fms.asm):00519         * THE FRI.
                      (     flx29fms.asm):00520         *
                      (     flx29fms.asm):00521         *   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00522         *          FRI CONTAINS INDEX
                      (     flx29fms.asm):00523         *   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00524         *          B & X CHANGED
                      (     flx29fms.asm):00525         
D598 BED40B           (     flx29fms.asm):00526 [6]     PUTRAN  ldx     FCBSTR      ;GET FCB
D59B E602             (     flx29fms.asm):00527 [4+1]           ldb     FAS,x       ;CHECK IF RW
D59D C403             (     flx29fms.asm):00528 [2]             andb    #3          ;MASK OFF
D59F C103             (     flx29fms.asm):00529 [2]             cmpb    #3          ;IS IT RW?
D5A1 2655             (     flx29fms.asm):00530 [3]             bne     REWIN2      ;SKIP IF ERROR
D5A3 CA80             (     flx29fms.asm):00531 [2]             orb     #$80        ;SET UPDATE BIT
D5A5 E702             (     flx29fms.asm):00532 [4+1]           stb     FAS,x       ;SAVE IT
D5A7 E60F             (     flx29fms.asm):00533 [4+1]           ldb     FID,x       ;CHECK WP
D5A9 C580             (     flx29fms.asm):00534 [2]             bitb    #$80        ;
D5AB 260A             (     flx29fms.asm):00535 [3]             bne     PUTRA4      ;
D5AD E68823           (     flx29fms.asm):00536 [4+1]           ldb     FRI,x       ;GET RANDOM INDEX
D5B0 3A               (     flx29fms.asm):00537 [3]             abx                 ;ADD IN INDEX
D5B1 A78840           (     flx29fms.asm):00538 [4+1]           sta     64,x        ;FSB,x PUT CHARACTER
                      (     flx29fms.asm):00539                                     ;
D5B4 1CFE             (     flx29fms.asm):00540 [3]     PUTRA2  andcc   #$FE        ;CLC CLEAR ERROR
D5B6 39               (     flx29fms.asm):00541 [5]             rts                 ;
                      (     flx29fms.asm):00542                                     ;
D5B7 C60B             (     flx29fms.asm):00543 [2]     PUTRA4  ldb     #WPER       ;SET WP ERROR
D5B9 1A01             (     flx29fms.asm):00544 [3]             orcc    #1          ;SEC SET ERROR
D5BB 39               (     flx29fms.asm):00545 [5]             rts
                      (     flx29fms.asm):00546         
                      (     flx29fms.asm):00547         * SRDSEQ
                      (     flx29fms.asm):00548         *
                      (     flx29fms.asm):00549         * SRDSEQ IS THE HIGH LEVEL READ
                      (     flx29fms.asm):00550         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00551         * CONTROL CHARACTERS AND SPACE
                      (     flx29fms.asm):00552         * EXPANSION ARE HANDLED HERE UNLESS
                      (     flx29fms.asm):00553         * FSC IS NEGATIVE.
                      (     flx29fms.asm):00554         *
                      (     flx29fms.asm):00555         *   ENTRY: NONE
                      (     flx29fms.asm):00556         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00557         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00558         *          A & X CHANGED
                      (     flx29fms.asm):00559         
D5BC A6883B           (     flx29fms.asm):00560 [4+1]   SRDSEQ  lda     FSC,x       ;CHECK FOR SP. EXP.
D5BF 2B3C             (     flx29fms.asm):00561 [3]             bmi     RDSEQ       ;CONTROL IGNORE?
D5C1 2707             (     flx29fms.asm):00562 [3]             beq     SRDSE2      ;ACTIVE EXPANSION?
D5C3 6A883B           (     flx29fms.asm):00563 [6+1]           dec     FSC,x       ;DEC THE SPACE COUNT
D5C6 8620             (     flx29fms.asm):00564 [2]             lda     #SPC        ;SETUP SPACE
D5C8 201D             (     flx29fms.asm):00565 [3]             bra     SRDSE7      ;FINISH UP
                      (     flx29fms.asm):00566                                     ;
D5CA 8D31             (     flx29fms.asm):00567 [7]     SRDSE2  bsr     RDSEQ       ;READ NEXT CHAR
D5CC 251B             (     flx29fms.asm):00568 [3]             bcs     SRDSE8      ;ERRORS?
D5CE 8118             (     flx29fms.asm):00569 [2]             cmpa    #DELC       ;IS IT DELETED?
D5D0 2215             (     flx29fms.asm):00570 [3]             bhi     SRDSE7      ;SKIP ALL SPECIALS
D5D2 27F6             (     flx29fms.asm):00571 [3]             beq     SRDSE2      ;
D5D4 8109             (     flx29fms.asm):00572 [2]             cmpa    #SCC        ;SPACE COMP CHAR?
D5D6 260C             (     flx29fms.asm):00573 [3]             bne     SRDSE6      ;
D5D8 8D23             (     flx29fms.asm):00574 [7]             bsr     RDSEQ       ;GO GET COUNT
D5DA 250D             (     flx29fms.asm):00575 [3]             bcs     SRDSE8      ;ERROR?
D5DC BED40B           (     flx29fms.asm):00576 [6]             ldx     FCBSTR      ;RESTORE POINTER
D5DF A7883B           (     flx29fms.asm):00577 [4+1]           sta     FSC,x       ;SAVE COUNT
D5E2 20D8             (     flx29fms.asm):00578 [3]             bra     SRDSEQ      ;REPEAT
                      (     flx29fms.asm):00579                                     ;
D5E4 4D               (     flx29fms.asm):00580 [2]     SRDSE6  tsta                ;IS CHAR NULL?
D5E5 27E3             (     flx29fms.asm):00581 [3]             beq     SRDSE2      ;IGNORE IF SO
                      (     flx29fms.asm):00582                                     ;
D5E7 1CFE             (     flx29fms.asm):00583 [3]     SRDSE7  andcc   #$FE        ;CLC CLEAR ERROR
D5E9 39               (     flx29fms.asm):00584 [5]     SRDSE8  rts
                      (     flx29fms.asm):00585         
                      (     flx29fms.asm):00586         * REWIND   * FFC #5 *
                      (     flx29fms.asm):00587         *
                      (     flx29fms.asm):00588         * REWIND WILL LOGICALLY REWIND THE
                      (     flx29fms.asm):00589         * FILE SPECIFIED IN THE FCB.
                      (     flx29fms.asm):00590         *
                      (     flx29fms.asm):00591         *   ENTRY: NONE
                      (     flx29fms.asm):00592         *   EXIT:  SAME AS RDNEXT
                      (     flx29fms.asm):00593         
D5EA BDDAC8           (     flx29fms.asm):00594 [8]     REWIND  jsr     DOSTAT      ;CHECK STATUS
D5ED 2509             (     flx29fms.asm):00595 [3]             bcs     REWIN2      ;ERROR?
D5EF 8501             (     flx29fms.asm):00596 [2]             bita    #1          ;CHECK FOR R BIT
D5F1 2705             (     flx29fms.asm):00597 [3]             beq     REWIN2      ;ERROR?
D5F3 A784             (     flx29fms.asm):00598 [4+0]           sta     FFC,x       ;SET FFC
D5F5 7ED9A9           (     flx29fms.asm):00599 [4]             jmp     OPNRD1      ;GO SETUP FILE
                      (     flx29fms.asm):00600                                     ;
D5F8 C612             (     flx29fms.asm):00601 [2]     REWIN2  ldb     #STER       ;SET ERROR CODE
D5FA 1A01             (     flx29fms.asm):00602 [3]             orcc    #1          ;SEC SHOW ERROR
D5FC 39               (     flx29fms.asm):00603 [5]             rts
                      (     flx29fms.asm):00604         
                      (     flx29fms.asm):00605         * RDSEQ
                      (     flx29fms.asm):00606         *
                      (     flx29fms.asm):00607         * RDSEQ IS THE LOW LEVEL GET
                      (     flx29fms.asm):00608         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00609         *
                      (     flx29fms.asm):00610         *   ENTRY: NONE
                      (     flx29fms.asm):00611         *   EXIT:  CHAR IN A
                      (     flx29fms.asm):00612         *          CS IF ERROR
                      (     flx29fms.asm):00613         *          B & X DESTROYED
                      (     flx29fms.asm):00614         
D5FD BED40B           (     flx29fms.asm):00615 [6]     RDSEQ   ldx     FCBSTR      ;PICKUP FCB
D600 E68822           (     flx29fms.asm):00616 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D603 270A             (     flx29fms.asm):00617 [3]             beq     RDSEQ1      ;
D605 6C8822           (     flx29fms.asm):00618 [6+1]           inc     FDI,x       ;BUMP DATA INDEX
                      (     flx29fms.asm):00619                                     ;
D608 3A               (     flx29fms.asm):00620 [3]     RDSEQ0  abx                 ;ADD IN OFFSET
D609 A68840           (     flx29fms.asm):00621 [4+1]           lda     FSB,x       ;GET CHARACTER
D60C 1CFE             (     flx29fms.asm):00622 [3]             andcc   #$FE        ;CLC
D60E 39               (     flx29fms.asm):00623 [5]             rts                 ;
                      (     flx29fms.asm):00624                                     ;
D60F 8D03             (     flx29fms.asm):00625 [7]     RDSEQ1  bsr     RDNEXT      ;GET NEXT RECORD
D611 24EA             (     flx29fms.asm):00626 [3]             bcc     RDSEQ       ;ERRORS?
D613 39               (     flx29fms.asm):00627 [5]             rts
                      (     flx29fms.asm):00628         
                      (     flx29fms.asm):00629         * RDNEXT
                      (     flx29fms.asm):00630         *
                      (     flx29fms.asm):00631         * RDNEXT READS THE NEXT SEQUENTIAL
                      (     flx29fms.asm):00632         * RECORD IF IT EXISTS.
                      (     flx29fms.asm):00633         *
                      (     flx29fms.asm):00634         *   ENTRY: NONE
                      (     flx29fms.asm):00635         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00636         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00637         *          A & X CHANGED
                      (     flx29fms.asm):00638         
D614 BED40B           (     flx29fms.asm):00639 [6]     RDNEXT  ldx     FCBSTR      ;PICKUP FCB
D617 EC8840           (     flx29fms.asm):00640 [5+1]           ldd     FSB,x       ;GET TRACK & SECTOR
D61A 6C8821           (     flx29fms.asm):00641 [6+1]           inc     FRN+1,x     ;BUMP REC NUM
D61D 2603             (     flx29fms.asm):00642 [3]             bne     RDNEX1      ;
D61F 6C8820           (     flx29fms.asm):00643 [6+1]           inc     FRN,x       ;
                      (     flx29fms.asm):00644                                     ;
D622 10830000         (     flx29fms.asm):00645 [5]     RDNEX1  cmpd    #$0000      ;TEST IF 0 LINK
D626 271C             (     flx29fms.asm):00646 [3]             beq     RDNEX4      ;END OF FILE?
D628 ED881E           (     flx29fms.asm):00647 [5+1]   RDNEX2  std     FCS,x       ;SET CURRENT ADR.
D62B 3402             (     flx29fms.asm):00648 [5+1]           pshs    a           ;
D62D 8604             (     flx29fms.asm):00649 [2]             lda     #RS         ;SET RECORD START
D62F A78822           (     flx29fms.asm):00650 [4+1]           sta     FDI,x       ;SAVE IT
D632 3502             (     flx29fms.asm):00651 [5+1]           puls    a           ;
D634 8D13             (     flx29fms.asm):00652 [7]             bsr     READSS      ;GO DO READ
D636 2410             (     flx29fms.asm):00653 [3]             bcc     RDNEX8      ;ERRORS?
D638 C580             (     flx29fms.asm):00654 [2]             bitb    #$80        ;CHECK NOT READY
D63A 2704             (     flx29fms.asm):00655 [3]             beq     RDNEX3      ;
D63C C610             (     flx29fms.asm):00656 [2]             ldb     #NRER       ;SET ERROR
D63E 2006             (     flx29fms.asm):00657 [3]             bra     RDNEX6      ;
                      (     flx29fms.asm):00658                                     ;
D640 C609             (     flx29fms.asm):00659 [2]     RDNEX3  ldb     #RDER       ;SET READ ERROR
D642 2002             (     flx29fms.asm):00660 [3]             bra     RDNEX6      ;
                      (     flx29fms.asm):00661                                     ;
D644 C608             (     flx29fms.asm):00662 [2]     RDNEX4  ldb     #EFER       ;SET EOF ERROR
D646 1A01             (     flx29fms.asm):00663 [3]     RDNEX6  orcc    #1          ;SEC SHOW ERROR
D648 39               (     flx29fms.asm):00664 [5]     RDNEX8  rts
                      (     flx29fms.asm):00665         
                      (     flx29fms.asm):00666         * READSS   * FFC #9 *
                      (     flx29fms.asm):00667         *
                      (     flx29fms.asm):00668         * READSS READS A SINGLE RECORD (SECTOR)
                      (     flx29fms.asm):00669         * FROM THE DISK.
                      (     flx29fms.asm):00670         *
                      (     flx29fms.asm):00671         *   ENTRY: NONE
                      (     flx29fms.asm):00672         *   EXIT:  CS IF READ ERROR
                      (     flx29fms.asm):00673         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00674         
D649 8D25             (     flx29fms.asm):00675 [7]     READSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS
D64B BED40B           (     flx29fms.asm):00676 [6]             ldx     FCBSTR      ;SET POINTER
D64E BDDE0C           (     flx29fms.asm):00677 [8]             jsr     DRIVE       ;DO DRIVE SEL
D651 2512             (     flx29fms.asm):00678 [3]             bcs     READS6      ;
                      (     flx29fms.asm):00679                                     ;
D653 8D11             (     flx29fms.asm):00680 [7]     READS2  bsr     GETCUR      ;GET DISK ADDRESS
D655 BDDE00           (     flx29fms.asm):00681 [8]             jsr     READ        ;GO READ RECORD
D658 2603             (     flx29fms.asm):00682 [3]             bne     READS4      ;ERRORS?
D65A 1CFE             (     flx29fms.asm):00683 [3]             andcc   #$FE        ;CLC CLEAR ERROR
D65C 39               (     flx29fms.asm):00684 [5]             rts                 ;
                      (     flx29fms.asm):00685                                     ;
D65D 3404             (     flx29fms.asm):00686 [5+1]   READS4  pshs    b           ;SAVE B
D65F 8D17             (     flx29fms.asm):00687 [7]             bsr     RETRY       ;CHECK IF RETRY
D661 3504             (     flx29fms.asm):00688 [5+1]           puls    b           ;RESTORE B
D663 24EE             (     flx29fms.asm):00689 [3]             bcc     READS2      ;TRY AGAIN?
                      (     flx29fms.asm):00690         
D665 39               (     flx29fms.asm):00691 [5]     READS6  rts
                      (     flx29fms.asm):00692         
                      (     flx29fms.asm):00693         * GETCUR
                      (     flx29fms.asm):00694         *
                      (     flx29fms.asm):00695         * GETCUR GETS THE CURRENT RECORD ADDRESS
                      (     flx29fms.asm):00696         * (TRACK AND SECTOR) INTO A & B.
                      (     flx29fms.asm):00697         * IF ILLEGAL ADDRESS, CARRY IS SET.
                      (     flx29fms.asm):00698         *
                      (     flx29fms.asm):00699         *   ENTRY: NONE
                      (     flx29fms.asm):00700         *   EXIT:  CS IF ILLEGAL ADR.
                      (     flx29fms.asm):00701         *          A = TRACK NUMBER
                      (     flx29fms.asm):00702         *          B = SECTOR NUMBER
                      (     flx29fms.asm):00703         *          X POINTS TO FSB
                      (     flx29fms.asm):00704         
D666 BED40B           (     flx29fms.asm):00705 [6]     GETCUR  ldx     FCBSTR      ;PICKUP FCB
D669 EC881E           (     flx29fms.asm):00706 [5+1]           ldd     FCS,x       ;GET TRACK & SECTOR
D66C 308840           (     flx29fms.asm):00707 [4+1]           leax    FSB,x       ;ADD FSB BIAS
D66F 39               (     flx29fms.asm):00708 [5]             rts
                      (     flx29fms.asm):00709         
                      (     flx29fms.asm):00710         * CLRTRY
                      (     flx29fms.asm):00711         *
                      (     flx29fms.asm):00712         * CLRTRY CLEARS THE ERROR TRY COUNTERS
                      (     flx29fms.asm):00713         *
                      (     flx29fms.asm):00714         *   ENTRY: NONE
                      (     flx29fms.asm):00715         *   EXIT:  A CLEARED
                      (     flx29fms.asm):00716         
D670 4F               (     flx29fms.asm):00717 [2]     CLRTRY  clra                ;CLEAR A
D671 B7D411           (     flx29fms.asm):00718 [5]             sta     ETRIES      ;CLEAR COUNTERS
D674 B7D412           (     flx29fms.asm):00719 [5]             sta     STRIES
D677 39               (     flx29fms.asm):00720 [5]             rts
                      (     flx29fms.asm):00721         
                      (     flx29fms.asm):00722         * RETRY
                      (     flx29fms.asm):00723         *
                      (     flx29fms.asm):00724         * RETRY WILL TEST THE TRY COUNTERS
                      (     flx29fms.asm):00725         * ETRIES AND STRIES TO SEE IF THEY
                      (     flx29fms.asm):00726         * ARE AT MAXIMUM.
                      (     flx29fms.asm):00727         * A RESTORE OPERATION IS PERFORMED
                      (     flx29fms.asm):00728         * IF NECESSARY.
                      (     flx29fms.asm):00729         *
                      (     flx29fms.asm):00730         *   ENTRY: NONE
                      (     flx29fms.asm):00731         *   EXIT:  CS IF NO MORE TRIES LEFT
                      (     flx29fms.asm):00732         
D678 C510             (     flx29fms.asm):00733 [2]     RETRY   bitb    #$10        ;CHECK IF SEEK ERROR
D67A 2611             (     flx29fms.asm):00734 [3]             bne     RETRY2      ;
D67C C580             (     flx29fms.asm):00735 [2]             bitb    #$80        ;CHECK NOT READY
D67E 2624             (     flx29fms.asm):00736 [3]             bne     RETRY6      ;
D680 F6D411           (     flx29fms.asm):00737 [5]             ldb     ETRIES      ;CHECK ERROR CNTR
D683 5C               (     flx29fms.asm):00738 [2]             incb                ;BUMP IT ONE
D684 C105             (     flx29fms.asm):00739 [2]             cmpb    #RTC        ;IS IT MAXIMUM?
D686 2705             (     flx29fms.asm):00740 [3]             beq     RETRY2      ;
                      (     flx29fms.asm):00741                                     ;
D688 F7D411           (     flx29fms.asm):00742 [5]             stb     ETRIES      ;SAVE COUNT
D68B 2014             (     flx29fms.asm):00743 [3]             bra     RETRY4      ;
                      (     flx29fms.asm):00744                                     ;
D68D 7FD411           (     flx29fms.asm):00745 [7]     RETRY2  clr     ETRIES      ;CLEAR COUNTER
D690 F6D412           (     flx29fms.asm):00746 [5]             ldb     STRIES      ;CHECK SEEK CNTR
D693 5C               (     flx29fms.asm):00747 [2]             incb                ;BUMP IT
D694 C107             (     flx29fms.asm):00748 [2]             cmpb    #RSC        ;IS IT MAXIMUM?
D696 270C             (     flx29fms.asm):00749 [3]             beq     RETRY6      ;
D698 F7D412           (     flx29fms.asm):00750 [5]             stb     STRIES      ;SAVE COUNTER
D69B BED40B           (     flx29fms.asm):00751 [6]             ldx     FCBSTR      ;
D69E BDDE09           (     flx29fms.asm):00752 [8]             jsr     RESTORE     ;GO RESTORE
                      (     flx29fms.asm):00753                                     ;
D6A1 1CFE             (     flx29fms.asm):00754 [3]     RETRY4  andcc   #$FE        ;CLC CLEAR ERROR
D6A3 39               (     flx29fms.asm):00755 [5]             rts                 ;
                      (     flx29fms.asm):00756                                     ;
D6A4 1A01             (     flx29fms.asm):00757 [3]     RETRY6  orcc    #1          ;SEC SET ERROR
D6A6 39               (     flx29fms.asm):00758 [5]             rts
                      (     flx29fms.asm):00759         
                      (     flx29fms.asm):00760         * WRITSS   * FFC #10 *
                      (     flx29fms.asm):00761         *
                      (     flx29fms.asm):00762         * WRITSS IS THE SYSTEM WRITE SINGLE
                      (     flx29fms.asm):00763         * SECTOR ROUTINE.
                      (     flx29fms.asm):00764         *
                      (     flx29fms.asm):00765         *   ENTRY: NONE
                      (     flx29fms.asm):00766         *   EXIT:  CS IF WRITE ERROR
                      (     flx29fms.asm):00767         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00768         
D6A7 8DC7             (     flx29fms.asm):00769 [7]     WRITSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS
D6A9 BED40B           (     flx29fms.asm):00770 [6]             ldx     FCBSTR      ;SET POINTER
D6AC BDDE0C           (     flx29fms.asm):00771 [8]             jsr     DRIVE       ;DO DRIVE SEL
D6AF 2520             (     flx29fms.asm):00772 [3]             bcs     WRITS6      ;
                      (     flx29fms.asm):00773                                     ;
D6B1 BED40B           (     flx29fms.asm):00774 [6]     WRITS2  ldx     FCBSTR      ;SET POINTER
D6B4 8DB0             (     flx29fms.asm):00775 [7]             bsr     GETCUR      ;GET CURRENT SEC
D6B6 BDDE03           (     flx29fms.asm):00776 [8]             jsr     WRITE      ;DO ACTUAL WRITE
D6B9 260A             (     flx29fms.asm):00777 [3]             bne     WRITS4      ;ERRORS?
                      (     flx29fms.asm):00778                                     ;
D6BB B6D435           (     flx29fms.asm):00779 [5]             lda     VRFYFG      ;VERIFY SECTOR?
D6BE 2737             (     flx29fms.asm):00780 [3]             beq     SWTSE6      ;NO VERIFY
                      (     flx29fms.asm):00781                                     ;
D6C0 BDDE06           (     flx29fms.asm):00782 [8]             jsr     VERIFY      ;GO DO VERIFY
D6C3 2732             (     flx29fms.asm):00783 [3]             beq     SWTSE6      ;ERROR?
                      (     flx29fms.asm):00784                                     ;
D6C5 C540             (     flx29fms.asm):00785 [2]     WRITS4  bitb    #$40        ;CHECK IF W.P.
D6C7 260B             (     flx29fms.asm):00786 [3]             bne     WRITS8      ;
                      (     flx29fms.asm):00787                                     ;
D6C9 3404             (     flx29fms.asm):00788 [5+1]           pshs    b           ;SAVE STATUS
D6CB 8DAB             (     flx29fms.asm):00789 [7]             bsr     RETRY       ;RETRY?
D6CD 3504             (     flx29fms.asm):00790 [5+1]           puls    b           ;RESTORE STATUS
D6CF 24E0             (     flx29fms.asm):00791 [3]             bcc     WRITS2      ;TRY AGAIN
D6D1 39               (     flx29fms.asm):00792 [5]     WRITS6  rts                 ;ERROR RETURN
                      (     flx29fms.asm):00793                                     ;
D6D2 C620             (     flx29fms.asm):00794 [2]     WRITS7  ldb     #$20        ;SET ERROR
D6D4 1A01             (     flx29fms.asm):00795 [3]     WRITS8  orcc    #1          ;SHOW ERROR
D6D6 39               (     flx29fms.asm):00796 [5]             rts                 ;ERROR RETURN
                      (     flx29fms.asm):00797         
                      (     flx29fms.asm):00798         * SWTSEQ
                      (     flx29fms.asm):00799         *
                      (     flx29fms.asm):00800         * SWTSEQ IS THE HIGH LEVEL WRITE
                      (     flx29fms.asm):00801         * SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00802         * SPACE COMPRESSION IS HANDLED HERE
                      (     flx29fms.asm):00803         * UNLESS FSC IS NEGATIVE.
                      (     flx29fms.asm):00804         *
                      (     flx29fms.asm):00805         *   ENTRY: NONE
                      (     flx29fms.asm):00806         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00807         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00808         *          A & X CHANGED
                      (     flx29fms.asm):00809         
D6D7 BED40B           (     flx29fms.asm):00810 [6]     SWTSEQ  ldx     FCBSTR      ;PICKUP FCB
D6DA E6883B           (     flx29fms.asm):00811 [4+1]           ldb     FSC,x       ;GET SPC COUNT
D6DD 2B3D             (     flx29fms.asm):00812 [3]             bmi     WTSEQ       ;WRITE IF NEG.
D6DF 8120             (     flx29fms.asm):00813 [2]             cmpa    #SPC        ;IS CHARACTER SPACE?
D6E1 260F             (     flx29fms.asm):00814 [3]             bne     SWTSE4      ;
D6E3 5C               (     flx29fms.asm):00815 [2]             incb                ;BUMP THE COUNT
D6E4 E7883B           (     flx29fms.asm):00816 [4+1]           stb     FSC,x       ;SAVE IT
D6E7 C17F             (     flx29fms.asm):00817 [2]             cmpb    #MAXSP      ;MAXIMUM?
D6E9 260C             (     flx29fms.asm):00818 [3]             bne     SWTSE6      ;
D6EB 200D             (     flx29fms.asm):00819 [3]             bra     PUTSPC      ;** FIX FOR 128 SPACES **
                      (     flx29fms.asm):00820                                     ;
D6ED 8D0B             (     flx29fms.asm):00821 [7]     SWTSE2  bsr     PUTSPC      ;GO PUT SPACES
D6EF 24E6             (     flx29fms.asm):00822 [3]             bcc     SWTSEQ      ;ERRORS?
D6F1 39               (     flx29fms.asm):00823 [5]             rts                 ;
                      (     flx29fms.asm):00824                                     ;
D6F2 5D               (     flx29fms.asm):00825 [2]     SWTSE4  tstb                ;COUNT ZERO?
D6F3 2727             (     flx29fms.asm):00826 [3]             beq     WTSEQ       ;
D6F5 20F6             (     flx29fms.asm):00827 [3]             bra     SWTSE2      ;DO SPACES
                      (     flx29fms.asm):00828                                     ;
D6F7 1CFE             (     flx29fms.asm):00829 [3]     SWTSE6  andcc   #$FE        ;CLC CLEAR ERRORS
D6F9 39               (     flx29fms.asm):00830 [5]             rts
                      (     flx29fms.asm):00831         
                      (     flx29fms.asm):00832         * PUTSPC
                      (     flx29fms.asm):00833         *
                      (     flx29fms.asm):00834         * PUTSPC IS THE ROUTINE WHICH WRITES
                      (     flx29fms.asm):00835         * THE SPACE COMPRESSION CODE AND THE
                      (     flx29fms.asm):00836         * SPACE COUNT.
                      (     flx29fms.asm):00837         *
                      (     flx29fms.asm):00838         *   ENTRY: B HAS COUNT
                      (     flx29fms.asm):00839         *   EXIT:  A PRESERVED
                      (     flx29fms.asm):00840         
D6FA 3402             (     flx29fms.asm):00841 [5+1]   PUTSPC  pshs    a           ;SAVE CHAR
D6FC C101             (     flx29fms.asm):00842 [2]             cmpb    #1          ;IS COUNT 1?
D6FE 2604             (     flx29fms.asm):00843 [3]             bne     PUTSP2      ;
D700 8620             (     flx29fms.asm):00844 [2]             lda     #$20        ;SETUP SPACE
D702 2010             (     flx29fms.asm):00845 [3]             bra     PUTSP4      ;GO WRITE
                      (     flx29fms.asm):00846                                     ;
D704 8609             (     flx29fms.asm):00847 [2]     PUTSP2  lda     #SCC        ;SETUP SCC
D706 8D14             (     flx29fms.asm):00848 [7]             bsr     WTSEQ       ;WRITE IT OUT
D708 3502             (     flx29fms.asm):00849 [5+1]           puls    a           ;
D70A 250F             (     flx29fms.asm):00850 [3]             bcs     PUTSP6      ;ERROR?
D70C 3402             (     flx29fms.asm):00851 [5+1]           pshs    a           ;SAVE CHAR
D70E BED40B           (     flx29fms.asm):00852 [6]             ldx     FCBSTR      ;PICKUP FCB
D711 A6883B           (     flx29fms.asm):00853 [4+1]           lda     FSC,x       ;GET COUNT
D714 6F883B           (     flx29fms.asm):00854 [6+1]   PUTSP4  clr     FSC,x           ;CLEAR COUNT
D717 8D03             (     flx29fms.asm):00855 [7]             bsr     WTSEQ       ;WRITE COUNT
D719 3502             (     flx29fms.asm):00856 [5+1]           puls    a           ;RESTORE CHAR
D71B 39               (     flx29fms.asm):00857 [5]     PUTSP6  rts
                      (     flx29fms.asm):00858         
                      (     flx29fms.asm):00859         * WTSEQ
                      (     flx29fms.asm):00860         *
                      (     flx29fms.asm):00861         * WTSEQ WRITES THE NEXT CHARACTER TO
                      (     flx29fms.asm):00862         * THE FSB AREA OF THE FCB.
                      (     flx29fms.asm):00863         *
                      (     flx29fms.asm):00864         *   ENTRY: A HAS CHARACTER
                      (     flx29fms.asm):00865         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00866         *          B HAS ERROR NUMBER
                      (     flx29fms.asm):00867         *          X CHANGED
                      (     flx29fms.asm):00868         
D71C BED40B           (     flx29fms.asm):00869 [6]     WTSEQ   ldx     FCBSTR      ;GET FCB POINTER
D71F E602             (     flx29fms.asm):00870 [4+1]           ldb     FAS,x       ;GET ACTIVE STATUS
D721 C102             (     flx29fms.asm):00871 [2]             cmpb    #2          ;IS IT WRITE?
D723 1026FED1         (     flx29fms.asm):00872 [5+?]           lbne    REWIN2      ;ERROR IF NOT
D727 E68822           (     flx29fms.asm):00873 [4+1]           ldb     FDI,x       ;GET INDEX
D72A C104             (     flx29fms.asm):00874 [2]             cmpb    #RS         ;IS IT BEGINNING?
D72C 2608             (     flx29fms.asm):00875 [3]             bne     WTSEQ2      ;
D72E 3402             (     flx29fms.asm):00876 [5+1]           pshs    a           ;SAVE CHAR.
D730 8D21             (     flx29fms.asm):00877 [7]             bsr     WTNEXT      ;GO WRITE RECORD
D732 3502             (     flx29fms.asm):00878 [5+1]           puls    a           ;RESTORE CHAR.
D734 250F             (     flx29fms.asm):00879 [3]             bcs     WTSEQ4      ;ERRORS?
                      (     flx29fms.asm):00880                                     ;
D736 BDD585           (     flx29fms.asm):00881 [8]     WTSEQ2  jsr     PUTNXT      ;PUT CHARACTER
D739 240A             (     flx29fms.asm):00882 [3]             bcc     WTSEQ4      ;LAST SPACE USED?
D73B C604             (     flx29fms.asm):00883 [2]             ldb     #RS         ;SET RECORD START
D73D BED40B           (     flx29fms.asm):00884 [6]             ldx     FCBSTR      ;POINT TO FCB
D740 E78822           (     flx29fms.asm):00885 [4+1]           stb     FDI,x       ;SET INDEX
D743 1CFE             (     flx29fms.asm):00886 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D745 39               (     flx29fms.asm):00887 [5]     WTSEQ4  rts
                      (     flx29fms.asm):00888         
                      (     flx29fms.asm):00889         * CLRLRN
                      (     flx29fms.asm):00890         
D746 BED40B           (     flx29fms.asm):00891 [6]     CLRLRN  ldx     FCBSTR      ;GET POINTER
D749 4F               (     flx29fms.asm):00892 [2]             clra                ;
D74A 5F               (     flx29fms.asm):00893 [2]             clrb                ;
D74B ED8820           (     flx29fms.asm):00894 [5+1]           std     FRN,x       ;CLEAR LRN
D74E ED8842           (     flx29fms.asm):00895 [5+1]           std     FSB+2,x     ;CLEAR ACTUAL RN
D751 2027             (     flx29fms.asm):00896 [3]             bra     WTNEX1      ;GO WRITE NEXT
                      (     flx29fms.asm):00897         
                      (     flx29fms.asm):00898         * WTNEXT
                      (     flx29fms.asm):00899         *
                      (     flx29fms.asm):00900         * WTNEXT WRITES THE NEXT RECORD.
                      (     flx29fms.asm):00901         *
                      (     flx29fms.asm):00902         *   ENTRY: X = FCB
                      (     flx29fms.asm):00903         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00904         *          REGISTERS CHANGED
                      (     flx29fms.asm):00905         
D753 E68812           (     flx29fms.asm):00906 [4+1]   WTNEXT  ldb     FSA+1,x     ;FIRST RECORD?
D756 2622             (     flx29fms.asm):00907 [3]             bne     WTNEX1      ;
D758 E68817           (     flx29fms.asm):00908 [4+1]           ldb     FMP,x       ;CHECK FOR RANDOM
D75B 2744             (     flx29fms.asm):00909 [3]             beq     ASNNXT      ;
D75D 6F8817           (     flx29fms.asm):00910 [6+1]           clr     FMP,x       ;CLEAR FLAG
D760 8D3F             (     flx29fms.asm):00911 [7]             bsr     ASNNXT      ;GO ASSIGN
D762 252A             (     flx29fms.asm):00912 [3]             bcs     GETFS2      ;ERROR?
D764 8DE0             (     flx29fms.asm):00913 [7]             bsr     CLRLRN      ;CLEAR LRN
D766 2526             (     flx29fms.asm):00914 [3]             bcs     GETFS2      ;ERROR?
D768 8DDC             (     flx29fms.asm):00915 [7]             bsr     CLRLRN      ;CLEAR NEXT
D76A 2522             (     flx29fms.asm):00916 [3]             bcs     GETFS2      ;ERROR?
D76C BED40B           (     flx29fms.asm):00917 [6]             ldx     FCBSTR      ;GET FCB
D76F C602             (     flx29fms.asm):00918 [2]             ldb     #2          ;SET FSM COUNT
D771 E78817           (     flx29fms.asm):00919 [4+1]           stb     FMP,x       ;
D774 EC8811           (     flx29fms.asm):00920 [5+1]           ldd     FSA,x       ;GET START ADDR
D777 7EDC99           (     flx29fms.asm):00921 [4]             jmp     UPDF75      ;GO DO UPDATE
                      (     flx29fms.asm):00922                                     ;
D77A 8D0E             (     flx29fms.asm):00923 [7]     WTNEX1  bsr     GETFST      ;GET FIRST AVAIL
D77C BED40B           (     flx29fms.asm):00924 [6]             ldx     FCBSTR      ;SET FCB PNTR
D77F ED8840           (     flx29fms.asm):00925 [5+1]           std     FSB,x       ;SET FORWARD LINK
D782 BDD6A7           (     flx29fms.asm):00926 [8]             jsr     WRITSS      ;WRITE RECORD
D785 241A             (     flx29fms.asm):00927 [3]             bcc     ASNNXT      ;ERROR?
D787 7EDBD8           (     flx29fms.asm):00928 [4]             jmp     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):00929         
                      (     flx29fms.asm):00930         * GETFST
                      (     flx29fms.asm):00931         *
                      (     flx29fms.asm):00932         * GETFST LOADS THE FIRST AVAILABLE
                      (     flx29fms.asm):00933         * SECTOR ADDRESS INTO A & B.
                      (     flx29fms.asm):00934         *
                      (     flx29fms.asm):00935         *   ENTRY: NONE
                      (     flx29fms.asm):00936         *   EXIT:  EQ IF FSTAVL = 00
                      (     flx29fms.asm):00937         *          X UNCHANGED
                      (     flx29fms.asm):00938         *          A & B = FSTAVL H & L
                      (     flx29fms.asm):00939         
D78A 8D03             (     flx29fms.asm):00940 [7]     GETFST  bsr     FSECMP      ;FIND SECTOR MAP
D78C EC84             (     flx29fms.asm):00941 [5+0]           ldd     ,x         ;GET FIRST AVAIL.
D78E 39               (     flx29fms.asm):00942 [5]     GETFS2  rts
                      (     flx29fms.asm):00943         
                      (     flx29fms.asm):00944         * FSECMP
                      (     flx29fms.asm):00945         *
                      (     flx29fms.asm):00946         * FSECMP FINDS THE SECTOR MAP
                      (     flx29fms.asm):00947         * CORRESPONDING TO THE CURRENT
                      (     flx29fms.asm):00948         * DRIVE SELECTED IN THE FCB.
                      (     flx29fms.asm):00949         *
                      (     flx29fms.asm):00950         *   ENTRY: NONE
                      (     flx29fms.asm):00951         *   EXIT:  EQ IF AVAIL NOT SET
                      (     flx29fms.asm):00952         *          X POINTS TO SECTOR MAP
                      (     flx29fms.asm):00953         
D78F BED40B           (     flx29fms.asm):00954 [6]     FSECMP  ldx     FCBSTR      ;PICKUP FCB
D792 E603             (     flx29fms.asm):00955 [4+1]           ldb     FDN,x       ;GET DRIVE NUMBER
D794 8606             (     flx29fms.asm):00956 [2]             lda     #6          ;MULTIPLY TIMES 6
D796 3D               (     flx29fms.asm):00957 [11]            mul                 ;
D797 8ED41D           (     flx29fms.asm):00958 [3]             ldx     #SECMAP     ;POINT TO MAPS
D79A 3A               (     flx29fms.asm):00959 [3]             abx                 ;FIX POINTER
D79B BFD41B           (     flx29fms.asm):00960 [6]             stx     AVLPNT      ;SET POINTER
D79E 6D84             (     flx29fms.asm):00961 [6+0]           tst     ,x         ;IS AVAIL EMPTY?
D7A0 39               (     flx29fms.asm):00962 [5]             rts
                      (     flx29fms.asm):00963         
                      (     flx29fms.asm):00964         * ASNNXT
                      (     flx29fms.asm):00965         *
                      (     flx29fms.asm):00966         * ASNNXT ASSIGNS THE NEXT AVAILABLE
                      (     flx29fms.asm):00967         * RECORD TO THE CURRENT OPEN WRITE
                      (     flx29fms.asm):00968         * FILE POINTED TO BY THE FCB.
                      (     flx29fms.asm):00969         *
                      (     flx29fms.asm):00970         *   ENTRY: NONE
                      (     flx29fms.asm):00971         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00972         *          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00973         
D7A1 8DE7             (     flx29fms.asm):00974 [7]     ASNNXT  bsr     GETFST      ;GET FSTAVL
D7A3 2605             (     flx29fms.asm):00975 [3]             bne     ASNNX2      ;IS IT ZERO?
D7A5 C607             (     flx29fms.asm):00976 [2]             ldb     #DFER       ;DISK FULL!
D7A7 1A01             (     flx29fms.asm):00977 [3]     ASNNX1  orcc    #1          ;SEC SET ERROR
D7A9 39               (     flx29fms.asm):00978 [5]             rts                 ;
                      (     flx29fms.asm):00979                                     ;
D7AA BED40B           (     flx29fms.asm):00980 [6]     ASNNX2  ldx     FCBSTR      ;GET FCB POINTER
D7AD ED8813           (     flx29fms.asm):00981 [5+1]           std     FEA,x       ;SET END ADDRESS
D7B0 6D8812           (     flx29fms.asm):00982 [6+1]           tst     FSA+1,x     ;IS THIS FIRST?
D7B3 2603             (     flx29fms.asm):00983 [3]             bne     ASNNX4      ;JUMP AHEAD IF NOT
D7B5 ED8811           (     flx29fms.asm):00984 [5+1]           std     FSA,x       ;SET START ADDRESS
                      (     flx29fms.asm):00985                                     ;
D7B8 6C8816           (     flx29fms.asm):00986 [6+1]   ASNNX4  inc     FSZ+1,x     ;BUMP FILE SIZE
D7BB 2603             (     flx29fms.asm):00987 [3]             bne     ASNNX6      ;
D7BD 6C8815           (     flx29fms.asm):00988 [6+1]           inc     FSZ,x       ;FIX MSB
                      (     flx29fms.asm):00989                                     ;
D7C0 6D8817           (     flx29fms.asm):00990 [6+1]   ASNNX6  tst     FMP,x       ;CHECK FOR RANDOM
D7C3 270B             (     flx29fms.asm):00991 [3]             beq     ASNN65      ;
D7C5 BDDC5A           (     flx29fms.asm):00992 [8]             jsr     UPDFSM      ;UPDATE FSM ENTRY
D7C8 25DD             (     flx29fms.asm):00993 [3]             bcs     ASNNX1      ;ERROR?
D7CA BED40B           (     flx29fms.asm):00994 [6]             ldx     FCBSTR      ;GET FCB
D7CD EC8813           (     flx29fms.asm):00995 [5+1]           ldd     FEA,x       ;GET END ADDRESS
                      (     flx29fms.asm):00996                                     ;
D7D0 BDD628           (     flx29fms.asm):00997 [8]     ASNN65  jsr     RDNEX2      ;READ NEXT RECORD
D7D3 25D2             (     flx29fms.asm):00998 [3]             bcs     ASNNX1      ;READ ERROR?
D7D5 BED40B           (     flx29fms.asm):00999 [6]             ldx     FCBSTR      ;POINT TO FCB
D7D8 EC8840           (     flx29fms.asm):01000 [5+1]           ldd     FSB,x       ;GET FOR. LINK
D7DB 3406             (     flx29fms.asm):01001 [5+2]           pshs    a,b         ;SAVE LINK
D7DD 8DB0             (     flx29fms.asm):01002 [7]             bsr     FSECMP      ;FIND SECTOR MAP
D7DF 3506             (     flx29fms.asm):01003 [5+2]           puls    a,b         ;RESTORE LINK
D7E1 ED84             (     flx29fms.asm):01004 [5+0]           std     ,x         ;SET FIRST AVAIL
D7E3 260A             (     flx29fms.asm):01005 [3]             bne     ASNNX7      ;FULL DISK??
                      (     flx29fms.asm):01006                                     ;
D7E5 6F02             (     flx29fms.asm):01007 [6+1]           clr     2,x         ;CLEAR OUT REST
D7E7 6F03             (     flx29fms.asm):01008 [6+1]           clr     3,x         ;
D7E9 6F04             (     flx29fms.asm):01009 [6+1]           clr     4,x         ;
D7EB 6F05             (     flx29fms.asm):01010 [6+1]           clr     5,x         ;
D7ED 2008             (     flx29fms.asm):01011 [3]             bra     ASNNX8      ;GO AHEAD
                      (     flx29fms.asm):01012                                     ;
D7EF 10AE04           (     flx29fms.asm):01013 [6+1]   ASNNX7  ldy     4,x         ;GET SEC COUNT
D7F2 313F             (     flx29fms.asm):01014 [4+1]           leay    -1,y        ;DEC BY 1
D7F4 10AF04           (     flx29fms.asm):01015 [6+1]           sty     4,x         ;SAVE RESULT
                      (     flx29fms.asm):01016                                     ;
D7F7 4F               (     flx29fms.asm):01017 [2]     ASNNX8  clra                ;CLEAR REGISTER
D7F8 BED40B           (     flx29fms.asm):01018 [6]             ldx     FCBSTR      ;SET POINTER
D7FB 6C8821           (     flx29fms.asm):01019 [6+1]           inc     FRN+1,x     ;INC LRN
D7FE 2603             (     flx29fms.asm):01020 [3]             bne     ASNN85      ;
D800 6C8820           (     flx29fms.asm):01021 [6+1]           inc     FRN,x       ;
                      (     flx29fms.asm):01022                                     ;
D803 5F               (     flx29fms.asm):01023 [2]     ASNN85  clrb                ;GET SECTOR LENGTH \\\\
D804 A78840           (     flx29fms.asm):01024 [4+1]   ASNNX9  sta     FSB,x       ;CLEAR LOCATION
D807 3001             (     flx29fms.asm):01025 [4+1]           leax    1,x         ;BUMP POINTER
D809 5A               (     flx29fms.asm):01026 [2]             decb                ;DEC THE COUNTER
D80A 26F8             (     flx29fms.asm):01027 [3]             bne     ASNNX9      ;REPEAT?
                      (     flx29fms.asm):01028                                     ;
D80C BED40B           (     flx29fms.asm):01029 [6]             ldx     FCBSTR      ;GET FCB PNTR
D80F EC8820           (     flx29fms.asm):01030 [5+1]           ldd     FRN,x       ;GET LRN
D812 ED8842           (     flx29fms.asm):01031 [5+1]           std     FSB+2,x     ;SAVE IN DATA
D815 1CFE             (     flx29fms.asm):01032 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D817 39               (     flx29fms.asm):01033 [5]             rts
                      (     flx29fms.asm):01034         
                      (     flx29fms.asm):01035         * OPN - SIR, DIR
                      (     flx29fms.asm):01036         *
                      (     flx29fms.asm):01037         * OPNIR OPENS EITHER THE SYSTEM IR
                      (     flx29fms.asm):01038         * OR THE DIRECTORY IR, DEPENDING ON
                      (     flx29fms.asm):01039         * THE ENTRY POINT.
                      (     flx29fms.asm):01040         *
                      (     flx29fms.asm):01041         *   ENTRY: NONE
                      (     flx29fms.asm):01042         *   EXIT:  B & X DESTROYED
                      (     flx29fms.asm):01043         
D818 5F               (     flx29fms.asm):01044 [2]     OPNSIR  clrb                ;SET TRACK 0
D819 3404             (     flx29fms.asm):01045 [5+1]           pshs    b
D81B C603             (     flx29fms.asm):01046 [2]             ldb     #ISEC       ;GET SECTOR
D81D 200E             (     flx29fms.asm):01047 [3]             bra     OPNIR
                      (     flx29fms.asm):01048         
                      (     flx29fms.asm):01049         * ------- No Path to this code
                      (     flx29fms.asm):01050         
D81F BED415           (     flx29fms.asm):01051 [6]     OPNCUD  ldx     CUD         ;GET CUD
D822 BFD413           (     flx29fms.asm):01052 [6]             stx     CLD         ;SAVE AS LOOKUP
                      (     flx29fms.asm):01053                                     ;
                      (     flx29fms.asm):01054         * -------                   ;
                      (     flx29fms.asm):01055         
D825                  (     flx29fms.asm):01056         OPNDIR:                     ;
D825 F6D413           (     flx29fms.asm):01057 [5]     OPNCLD  ldb     CLD         ;GET TRACK
D828 3404             (     flx29fms.asm):01058 [5+1]           pshs    b           ;SAVE IT
D82A F6D414           (     flx29fms.asm):01059 [5]             ldb     CLD+1       ;GET SECTOR
                      (     flx29fms.asm):01060                                     ;
                      (     flx29fms.asm):01061                                     ;
D82D BED40B           (     flx29fms.asm):01062 [6]     OPNIR   ldx     FCBSTR      ;SET FCB POINTER
D830 E78841           (     flx29fms.asm):01063 [4+1]           stb     FSB+1,x     ;SAVE SECTOR
D833 3504             (     flx29fms.asm):01064 [5+1]           puls    b           ;GET TRACK
D835 E78840           (     flx29fms.asm):01065 [4+1]           stb     FSB,x       ;SET SECTOR PNTR
D838 7FD418           (     flx29fms.asm):01066 [7]             clr     BKLN        ;CLEAR BACK LINK
D83B 5F               (     flx29fms.asm):01067 [2]             clrb                ;GET SECTOR LENGTH \\\\
D83C E78822           (     flx29fms.asm):01068 [4+1]           stb     FDI,x       ;SAVE IT
D83F 39               (     flx29fms.asm):01069 [5]             rts
                      (     flx29fms.asm):01070         
                      (     flx29fms.asm):01071         * GETIR
                      (     flx29fms.asm):01072         *
                      (     flx29fms.asm):01073         * GETIR GETS THE NEXT INFORMATION
                      (     flx29fms.asm):01074         * RECORD (IR) FROM THE FSB.
                      (     flx29fms.asm):01075         *
                      (     flx29fms.asm):01076         *   ENTRY: X = FCB
                      (     flx29fms.asm):01077         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01078         
D840 BED40B           (     flx29fms.asm):01079 [6]     GETIR   ldx     FCBSTR      ;SET FCB POINTER
D843 E68822           (     flx29fms.asm):01080 [4+1]           ldb     FDI,x       ;GET DATA INDEX
D846 261E             (     flx29fms.asm):01081 [3]             bne     GETIR2      ;NEXT SECTOR?
                      (     flx29fms.asm):01082                                     ;
D848 BDD614           (     flx29fms.asm):01083 [8]             jsr     RDNEXT      ;GET NEXT SECTOR
D84B 2531             (     flx29fms.asm):01084 [3]             bcs     GETIR8      ;ERROR?
                      (     flx29fms.asm):01085                                     ;
D84D BED40B           (     flx29fms.asm):01086 [6]             ldx     FCBSTR      ;GET FCB POINTER
D850 7DD418           (     flx29fms.asm):01087 [7]             tst     BKLN        ;TEST BACK LINK
D853 2606             (     flx29fms.asm):01088 [3]             bne     GETIR1      ;IS IT SET?
                      (     flx29fms.asm):01089                                     ;
D855 CC0005           (     flx29fms.asm):01090 [3]             ldd     #$0005          ;< OLD Code
                      (     flx29fms.asm):01091         *       ldd     FSB+4,x         ;GET NEW BL  <- CORRECTED
D858 FDD418           (     flx29fms.asm):01092 [6]             std     BKLN        ;SAVE IT
                      (     flx29fms.asm):01093                                     ;
D85B 8610             (     flx29fms.asm):01094 [2]     GETIR1  lda     #IRS        ;SET START INDEX
D85D A78822           (     flx29fms.asm):01095 [4+1]           sta     FDI,x       ;
D860 EC881E           (     flx29fms.asm):01096 [5+1]           ldd     FCS,x       ;GET CURRENT SEC ADR
D863 ED882F           (     flx29fms.asm):01097 [5+1]           std     FCD,x       ;SET CURRENT IR
                      (     flx29fms.asm):01098                                     ;
D866 A68822           (     flx29fms.asm):01099 [4+1]   GETIR2  lda     FDI,x       ;GET CURRENT INDEX
D869 A78831           (     flx29fms.asm):01100 [4+1]           sta     FCD+2,x     ;SAVE IT
D86C C618             (     flx29fms.asm):01101 [2]             ldb     #IRL        ;SET LENGTH
                      (     flx29fms.asm):01102                                     ;
D86E 3414             (     flx29fms.asm):01103 [5+3]   GETIR4  pshs    b,x         ;SAVE VALUES
D870 BDD5FD           (     flx29fms.asm):01104 [8]             jsr     RDSEQ       ;READ NEXT CHAR
D873 3514             (     flx29fms.asm):01105 [5+3]           puls    b,x         ;RESTORE VALUES
D875 A704             (     flx29fms.asm):01106 [4+1]           sta     FFN,x       ;PUT THE CHAR
D877 3001             (     flx29fms.asm):01107 [4+1]           leax    1,x         ;BUMP THE POINTER
D879 5A               (     flx29fms.asm):01108 [2]             decb                ;DEC THE COUNT
D87A 26F2             (     flx29fms.asm):01109 [3]             bne     GETIR4      ;FINISHED?
                      (     flx29fms.asm):01110         *       clrb                ;CLEAR ERRORS
D87C 1CFE             (     flx29fms.asm):01111 [3]             andcc   #$FE        ;CLC CLEAR ERROR
D87E 39               (     flx29fms.asm):01112 [5]     GETIR8  rts
                      (     flx29fms.asm):01113         
                      (     flx29fms.asm):01114         * PUTIR
                      (     flx29fms.asm):01115         *
                      (     flx29fms.asm):01116         * PUTIR PUTS THE IR INTO THE FSB.
                      (     flx29fms.asm):01117         *
                      (     flx29fms.asm):01118         *   ENTRY: NONE
                      (     flx29fms.asm):01119         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01120         
D87F BED40B           (     flx29fms.asm):01121 [6]     PUTIR   ldx     FCBSTR      ;SET FCB POINTER
D882 A68831           (     flx29fms.asm):01122 [4+1]           lda     FCD+2,x     ;GET INDEX
D885 A78822           (     flx29fms.asm):01123 [4+1]           sta     FDI,x       ;SET IT
D888 C618             (     flx29fms.asm):01124 [2]             ldb     #IRL        ;SET LENGTH COUNT
                      (     flx29fms.asm):01125                                     ;
D88A 3414             (     flx29fms.asm):01126 [5+3]   PUTIR2  pshs    b,x         ;SAVE POINTERS
D88C A604             (     flx29fms.asm):01127 [4+1]           lda     FFN,x       ;GET THE CHAR
D88E BDD71C           (     flx29fms.asm):01128 [8]             jsr     WTSEQ       ;GO WRITE CHAR
D891 3514             (     flx29fms.asm):01129 [5+3]           puls    b,x         ;RESTORE POINTERS
D893 3001             (     flx29fms.asm):01130 [4+1]           leax    1,x         ;BUMP THE POINTER
D895 5A               (     flx29fms.asm):01131 [2]             decb                ;DEC THE COUNT
D896 26F2             (     flx29fms.asm):01132 [3]             bne     PUTIR2      ;REPEAT?
                      (     flx29fms.asm):01133                                     ;
D898 7ED6A7           (     flx29fms.asm):01134 [4]             jmp     WRITSS      ;GO WRITE SECTOR
                      (     flx29fms.asm):01135         
                      (     flx29fms.asm):01136         * FNDNAM
                      (     flx29fms.asm):01137         *
                      (     flx29fms.asm):01138         * FNDNAM TRIES TO FIND THE NAME IN
                      (     flx29fms.asm):01139         * FFN IN THE DIRECTORY.
                      (     flx29fms.asm):01140         *
                      (     flx29fms.asm):01141         *   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01142         *   EXIT:  EQ IF FOUND
                      (     flx29fms.asm):01143         *          CS IF ERROR ( IN B )
                      (     flx29fms.asm):01144         *          REGISTERS CHANGED
                      (     flx29fms.asm):01145         
D89B BED40B           (     flx29fms.asm):01146 [6]     FNDNAM  ldx     FCBSTR      ;GET FCB
D89E A603             (     flx29fms.asm):01147 [4+1]           lda     FDN,x       ;GET DRIVE NUM
D8A0 A78823           (     flx29fms.asm):01148 [4+1]           sta     FRI,x       ;SAVE IT IN TEMP
D8A3 B6D417           (     flx29fms.asm):01149 [5]             lda     DIRDN       ;GET DIR DRIVE NUM
D8A6 7DD41A           (     flx29fms.asm):01150 [7]             tst     SINDIR      ;SINGLE DIR ?
D8A9 2631             (     flx29fms.asm):01151 [3]             bne     FNDNA1      ;
                      (     flx29fms.asm):01152                                     ;
D8AB A703             (     flx29fms.asm):01153 [4+1]           sta     FDN,x       ;SET NEW DRIVE NUM
D8AD BED415           (     flx29fms.asm):01154 [6]             ldx     CUD         ;GET DIR POINTER
D8B0 BFD413           (     flx29fms.asm):01155 [6]             stx     CLD         ;SET CLD
                      (     flx29fms.asm):01156                                     ;
D8B3 8C0005           (     flx29fms.asm):01157 [4]     FNDN04  cmpx    #MAIND      ;IS IT MAIN?
D8B6 270C             (     flx29fms.asm):01158 [3]             beq     FNDN06      ;
D8B8 8D22             (     flx29fms.asm):01159 [7]             bsr     FNDNA1      ;SEARCH DIR
D8BA 2337             (     flx29fms.asm):01160 [3]             bls     FNDNA3      ;FIND OR ERROR?
D8BC BED418           (     flx29fms.asm):01161 [6]             ldx     BKLN        ;GET BACK LINK
D8BF BFD413           (     flx29fms.asm):01162 [6]             stx     CLD         ;SET CLD
D8C2 20EF             (     flx29fms.asm):01163 [3]             bra     FNDN04      ;REPEAT
                      (     flx29fms.asm):01164                                     ;
D8C4                  (     flx29fms.asm):01165         FNDN06
D8C4 BED40B           (     flx29fms.asm):01166 [6]             ldx     FCBSTR      ;SET POINTER
D8C7 A68823           (     flx29fms.asm):01167 [4+1]           lda     FRI,x       ;RESTORE DN
D8CA A703             (     flx29fms.asm):01168 [4+1]           sta     FDN,x       ;
D8CC 2A0E             (     flx29fms.asm):01169 [3]             bpl     FNDNA1      ;DRIVE SPECIFIC?
                      (     flx29fms.asm):01170                                     ;
D8CE BDDDD5           (     flx29fms.asm):01171 [8]     FNDN08  jsr     NXTRDY      ;GET NEXT RDY DRV
D8D1 2536             (     flx29fms.asm):01172 [3]             bcs     FNDNA9      ;ERROR?
D8D3 8D07             (     flx29fms.asm):01173 [7]             bsr     FNDNA1      ;DO SEARCH
D8D5 231C             (     flx29fms.asm):01174 [3]             bls     FNDNA3      ;FIND OR ERROR?
D8D7 BDDDC5           (     flx29fms.asm):01175 [8]             jsr     RSTNAM      ;RESTORE NAME
D8DA 20F2             (     flx29fms.asm):01176 [3]             bra     FNDN08      ;
                      (     flx29fms.asm):01177                                     ;
D8DC BED40B           (     flx29fms.asm):01178 [6]     FNDNA1  ldx     FCBSTR      ;SET POINTER
D8DF 7FD41A           (     flx29fms.asm):01179 [7]             clr     SINDIR      ;CLEAR MODE
D8E2 BDD54D           (     flx29fms.asm):01180 [8]             jsr     COPNAM      ;COPY NAME TO FWB
D8E5 BDD825           (     flx29fms.asm):01181 [8]             jsr     OPNDIR      ;OPEN DIRECTORY
                      (     flx29fms.asm):01182                                     ;
D8E8 BDD840           (     flx29fms.asm):01183 [8]     FNDNA2  jsr     GETIR       ;GET RECORD
D8EB 2407             (     flx29fms.asm):01184 [3]             bcc     FNDNA4      ;ERROR?
D8ED C108             (     flx29fms.asm):01185 [2]             cmpb    #EFER       ;END OF FILE?
D8EF 2718             (     flx29fms.asm):01186 [3]             beq     FNDNA9      ;
D8F1 1A01             (     flx29fms.asm):01187 [3]             orcc    #1          ;SEC SET ERROR
D8F3 39               (     flx29fms.asm):01188 [5]     FNDNA3  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01189                                     ;
D8F4 BED40B           (     flx29fms.asm):01190 [6]     FNDNA4  ldx     FCBSTR      ;POINT TO FCB
D8F7 A604             (     flx29fms.asm):01191 [4+1]           lda     FFN,x       ;GET CHAR
D8F9 270C             (     flx29fms.asm):01192 [3]             beq     FNDNA8      ;NO MORE?
D8FB 2A02             (     flx29fms.asm):01193 [3]             bpl     FNDNA6      ;DELETED NAME?
D8FD 8D0F             (     flx29fms.asm):01194 [7]             bsr     SETFD       ;SET DELETED
                      (     flx29fms.asm):01195                                     ;
D8FF BDD55D           (     flx29fms.asm):01196 [8]     FNDNA6  jsr     CMPNAM      ;COMPARE NAME
D902 26E4             (     flx29fms.asm):01197 [3]             bne     FNDNA2      ;EQUAL?
D904 1CFE             (     flx29fms.asm):01198 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D906 39               (     flx29fms.asm):01199 [5]             rts                 ;
                      (     flx29fms.asm):01200                                     ;
D907 8D05             (     flx29fms.asm):01201 [7]     FNDNA8  bsr     SETFD       ;
D909 1CFB             (     flx29fms.asm):01202 [3]     FNDNA9  andcc   #$FB        ;SHOW NO FIND
D90B 1CFE             (     flx29fms.asm):01203 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
D90D 39               (     flx29fms.asm):01204 [5]             rts                 ;
                      (     flx29fms.asm):01205                                     ;
D90E A68833           (     flx29fms.asm):01206 [4+1]   SETFD   lda     FFD+1,x     ;FIRST DELETED?
D911 260C             (     flx29fms.asm):01207 [3]             bne     SETFD2      ;
D913 EC882F           (     flx29fms.asm):01208 [5+1]           ldd     FCD,x       ;GET CURRENT ADR
D916 ED8832           (     flx29fms.asm):01209 [5+1]           std     FFD,x       ;SET FIRST DELETED
D919 A68831           (     flx29fms.asm):01210 [4+1]           lda     FCD+2,x     ;GET INDEX
D91C A78834           (     flx29fms.asm):01211 [4+1]           sta     FFD+2,x     ;SAVE IT
D91F 39               (     flx29fms.asm):01212 [5]     SETFD2  rts
                      (     flx29fms.asm):01213         
                      (     flx29fms.asm):01214         * GETAVL
                      (     flx29fms.asm):01215         *
                      (     flx29fms.asm):01216         * GETAVL SETS THE SECTOR MAP POINTERS
                      (     flx29fms.asm):01217         * IF THEY HAVE NOT BEEN SET.
                      (     flx29fms.asm):01218         *
                      (     flx29fms.asm):01219         *   ENTRY: NONE
                      (     flx29fms.asm):01220         *   EXIT:  CS SET IF ERROR
                      (     flx29fms.asm):01221         *          REGISTERS CHANGED
                      (     flx29fms.asm):01222         
D920 BDD78F           (     flx29fms.asm):01223 [8]     GETAVL  jsr     FSECMP      ;FIND MAP
D923 2617             (     flx29fms.asm):01224 [3]             bne     GETAV3      ;SET YET?
D925 8D18             (     flx29fms.asm):01225 [7]             bsr     GETDIS      ;READ IN DIS
D927 2515             (     flx29fms.asm):01226 [3]             bcs     GETAV4      ;ERROR?
                      (     flx29fms.asm):01227                                     ;
D929 C606             (     flx29fms.asm):01228 [2]             ldb     #6          ;SET COUNTER
D92B 10BED40B         (     flx29fms.asm):01229 [7]             ldy     FCBSTR      ;GET FCB
D92F BED41B           (     flx29fms.asm):01230 [6]             ldx     AVLPNT      ;POINT TO MAP
                      (     flx29fms.asm):01231         
D932 A6A85D           (     flx29fms.asm):01232 [4+1]   GETAV2  lda     FSB+FSA+IRS-4,y
D935 3121             (     flx29fms.asm):01233 [4+1]           leay    1,y
D937 A780             (     flx29fms.asm):01234 [4+2]           sta     ,x+
D939 5A               (     flx29fms.asm):01235 [2]             decb                ;DEC THE COUNT
D93A 26F6             (     flx29fms.asm):01236 [3]             bne     GETAV2      ;FINISHED?
                      (     flx29fms.asm):01237         
D93C 1CFE             (     flx29fms.asm):01238 [3]     GETAV3  andcc   #$FE        ;CLC CLEAR ERRORS
D93E 39               (     flx29fms.asm):01239 [5]     GETAV4  rts
                      (     flx29fms.asm):01240         
                      (     flx29fms.asm):01241         * GETDIS
                      (     flx29fms.asm):01242         *
                      (     flx29fms.asm):01243         * GETDIS READS IN THE DIS SECTOR.
                      (     flx29fms.asm):01244         *
                      (     flx29fms.asm):01245         *   ENTRY: NONE
                      (     flx29fms.asm):01246         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01247         *          REGISTERS CHANGED
                      (     flx29fms.asm):01248         
D93F BDD818           (     flx29fms.asm):01249 [8]     GETDIS  jsr     OPNSIR      ;OPEN THE DIS
D942 BDD614           (     flx29fms.asm):01250 [8]             jsr     RDNEXT      ;READ NEXT BLOCK
D945 2508             (     flx29fms.asm):01251 [3]             bcs     GETDI2      ;ERROR?
                      (     flx29fms.asm):01252                                     ;
D947 BED40B           (     flx29fms.asm):01253 [6]             ldx     FCBSTR      ;SET POINTER
D94A C610             (     flx29fms.asm):01254 [2]             ldb     #IRS        ;SET START POINT
D94C E78822           (     flx29fms.asm):01255 [4+1]           stb     FDI,x       ;SET INDEX
D94F 39               (     flx29fms.asm):01256 [5]     GETDI2  rts
                      (     flx29fms.asm):01257         
                      (     flx29fms.asm):01258         * PUTAVL
                      (     flx29fms.asm):01259         *
                      (     flx29fms.asm):01260         * PUTAVL UPDATES THE DIS SECTOR.
                      (     flx29fms.asm):01261         *
                      (     flx29fms.asm):01262         *   ENTRY: NONE
                      (     flx29fms.asm):01263         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01264         *          REGISTERS CHANGED
                      (     flx29fms.asm):01265         
D950 BDD78F           (     flx29fms.asm):01266 [8]     PUTAVL  jsr     FSECMP      ;FIND SECTOR MAP
D953 8DEA             (     flx29fms.asm):01267 [7]             bsr     GETDIS      ;GO GET DIS
D955 25F8             (     flx29fms.asm):01268 [3]             bcs     GETDI2      ;ERROR?
D957 C606             (     flx29fms.asm):01269 [2]             ldb     #6          ;SET UP COUNTER
D959 10BED40B         (     flx29fms.asm):01270 [7]             ldy     FCBSTR      ;GET FCB POINTER
D95D BED41B           (     flx29fms.asm):01271 [6]             ldx     AVLPNT      ;POINT TO MAP
                      (     flx29fms.asm):01272         
D960 A680             (     flx29fms.asm):01273 [4+2]   PUTAV2  lda     ,x+
D962 A7A85D           (     flx29fms.asm):01274 [4+1]           sta     FSB+FSA+IRS-4,y
D965 3121             (     flx29fms.asm):01275 [4+1]           leay    1,y
D967 5A               (     flx29fms.asm):01276 [2]             decb                ;DEC THE COUNT
D968 26F6             (     flx29fms.asm):01277 [3]             bne     PUTAV2      ;FINISHED?
                      (     flx29fms.asm):01278                                     ;
D96A BDD6A7           (     flx29fms.asm):01279 [8]             jsr     WRITSS      ;WRITE SECTOR
D96D 24E0             (     flx29fms.asm):01280 [3]             bcc     GETDI2      ;ERROR?
D96F 7EDBD8           (     flx29fms.asm):01281 [4]             jmp     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01282         
                      (     flx29fms.asm):01283         * WRTDIR
                      (     flx29fms.asm):01284         *
                      (     flx29fms.asm):01285         * WRTDIR UPDATES THE DISK DIRECTORY.
                      (     flx29fms.asm):01286         *
                      (     flx29fms.asm):01287         *   ENTRY: NONE
                      (     flx29fms.asm):01288         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01289         
D972 BED40B           (     flx29fms.asm):01290 [6]     WRTDIR  ldx     FCBSTR      ;POINT TO FCB
D975 8602             (     flx29fms.asm):01291 [2]             lda     #2          ;SET FOR WRITE
D977 A702             (     flx29fms.asm):01292 [4+1]           sta     FAS,x       ;
D979 EC882F           (     flx29fms.asm):01293 [5+1]           ldd     FCD,x       ;GET CURRENT DIR
D97C ED881E           (     flx29fms.asm):01294 [5+1]           std     FCS,x       ;SET CURRENT SECTOR
D97F BDD649           (     flx29fms.asm):01295 [8]             jsr     READSS      ;READ IN DIR
D982 2508             (     flx29fms.asm):01296 [3]             bcs     WRTDI2      ;ERROR?
D984 BDD87F           (     flx29fms.asm):01297 [8]             jsr     PUTIR       ;GO WRITE DIR
D987 2405             (     flx29fms.asm):01298 [3]             bcc     WRTDI4      ;
D989 7EDBD8           (     flx29fms.asm):01299 [4]             jmp     WRTERR      ;CHECK FOR WP ERR
                      (     flx29fms.asm):01300                                     ;
D98C C60A             (     flx29fms.asm):01301 [2]     WRTDI2  ldb     #WTER       ;SET ERROR
D98E 39               (     flx29fms.asm):01302 [5]     WRTDI4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01303         
                      (     flx29fms.asm):01304         * OPNRD
                      (     flx29fms.asm):01305         *
                      (     flx29fms.asm):01306         * OPNRD IS THE HIGH LEVEL SYSTEM
                      (     flx29fms.asm):01307         * ROUTINE WHICH OPENS A FILE FOR
                      (     flx29fms.asm):01308         * A READ OPERATION.
                      (     flx29fms.asm):01309         *
                      (     flx29fms.asm):01310         *   ENTRY: NONE
                      (     flx29fms.asm):01311         *   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01312         *          REGISTERS CHANGED
                      (     flx29fms.asm):01313         
D98F                  (     flx29fms.asm):01314         OPNRD
D98F BDD4FE           (     flx29fms.asm):01315 [8]             jsr     SETFCB      ;SET FCB POINTER
D992 253D             (     flx29fms.asm):01316 [3]             bcs     OPNRD2      ;ERROR?
D994 BDD89B           (     flx29fms.asm):01317 [8]             jsr     FNDNAM      ;LOOK UP NAME
D997 2538             (     flx29fms.asm):01318 [3]             bcs     OPNRD2      ;ERRORS?
                      (     flx29fms.asm):01319                                     ;
D999 263B             (     flx29fms.asm):01320 [3]             bne     LD9D6       ;WAS IT FOUND?
                      (     flx29fms.asm):01321                                     ;
D99B BED40B           (     flx29fms.asm):01322 [6]             ldx     FCBSTR      ;POINT TO FCB
D99E 7DD41A           (     flx29fms.asm):01323 [7]             tst     SINDIR      ;SINGLE DIR?
D9A1 2706             (     flx29fms.asm):01324 [3]             beq     OPNRD1      ;
D9A3 A60F             (     flx29fms.asm):01325 [4+1]           lda     FID,x       ;CHECK RP BIT
D9A5 8520             (     flx29fms.asm):01326 [2]             bita    #$20        ;IS IT SET?
D9A7 2629             (     flx29fms.asm):01327 [3]             bne     OPNRD3      ;REPORT ERROR
                      (     flx29fms.asm):01328                                     ;
D9A9 BDDCD8           (     flx29fms.asm):01329 [8]     OPNRD1  jsr     SETMAX      ;SET MAX SEC
D9AC 252A             (     flx29fms.asm):01330 [3]             bcs     OPNERR      ;ERROR?
D9AE EC8811           (     flx29fms.asm):01331 [5+1]           ldd     FSA,x       ;GET ADDRESS
D9B1 ED8840           (     flx29fms.asm):01332 [5+1]           std     FSB,x       ;SET FRWD LINK
D9B4 BDDA8D           (     flx29fms.asm):01333 [8]             jsr     SETST       ;SET STATUS
D9B7 E68817           (     flx29fms.asm):01334 [4+1]           ldb     FMP,x       ;CHECK RANDOM
D9BA 2713             (     flx29fms.asm):01335 [3]             beq     OPNR15      ;
                      (     flx29fms.asm):01336                                     ;
D9BC 3404             (     flx29fms.asm):01337 [5+1]   OPNR12  pshs    b           ;SAVE COUNT
D9BE BDD614           (     flx29fms.asm):01338 [8]             jsr     RDNEXT      ;GET NEXT SECTOR
D9C1 3504             (     flx29fms.asm):01339 [5+1]           puls    b           ;RESTORE COUNT
D9C3 250C             (     flx29fms.asm):01340 [3]             bcs     OPNRD2      ;ERROR?
                      (     flx29fms.asm):01341                                     ;
D9C5 5A               (     flx29fms.asm):01342 [2]             decb                ;DEC THE COUNT
D9C6 26F4             (     flx29fms.asm):01343 [3]             bne     OPNR12      ;
                      (     flx29fms.asm):01344                                     ;
D9C8 BED40B           (     flx29fms.asm):01345 [6]             ldx     FCBSTR      ;SET FCB PNTR
D9CB 5F               (     flx29fms.asm):01346 [2]             clrb                ;GET SECTOR LENGTH \\\\
D9CC E78822           (     flx29fms.asm):01347 [4+1]           stb     FDI,x       ;
                      (     flx29fms.asm):01348                                     ;
D9CF 1CFE             (     flx29fms.asm):01349 [3]     OPNR15  andcc   #$FE        ;CLC CLEAR ERRORS
D9D1                  (     flx29fms.asm):01350         OPNRD2
D9D1 39               (     flx29fms.asm):01351 [5]             rts                 ;
                      (     flx29fms.asm):01352                                     ;
D9D2 C611             (     flx29fms.asm):01353 [2]     OPNRD3  ldb     #ADER       ;READ ACC DENIED
D9D4 2002             (     flx29fms.asm):01354 [3]             bra     OPNERR      ;
                      (     flx29fms.asm):01355                                     ;
D9D6 C604             (     flx29fms.asm):01356 [2]     LD9D6   ldb     #NFER       ;FILE NOT FOUND
                      (     flx29fms.asm):01357         
                      (     flx29fms.asm):01358         * OPEN ERROR
                      (     flx29fms.asm):01359         
D9D8 3404             (     flx29fms.asm):01360 [5+1]   OPNERR  pshs    b           ;SAVE ERROR
D9DA BDD510           (     flx29fms.asm):01361 [8]             jsr     REMFCB      ;REMOVE FCB
D9DD 3504             (     flx29fms.asm):01362 [5+1]           puls    b           ;
D9DF 1A01             (     flx29fms.asm):01363 [3]             orcc    #1          ;SEC  SET ERROR
D9E1 39               (     flx29fms.asm):01364 [5]             rts
                      (     flx29fms.asm):01365         
                      (     flx29fms.asm):01366         * OPNWT
                      (     flx29fms.asm):01367         *
                      (     flx29fms.asm):01368         * OPNWT OPENS A FILE FOR WRITE.
                      (     flx29fms.asm):01369         *
                      (     flx29fms.asm):01370         *   ENTRY: NONE
                      (     flx29fms.asm):01371         *   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01372         *          REGISTERS CHANGED
                      (     flx29fms.asm):01373         
D9E2 BED40B           (     flx29fms.asm):01374 [6]     OPNWT   ldx     FCBSTR      ;SET POINTER
D9E5 6D03             (     flx29fms.asm):01375 [6+1]           tst     FDN,x       ;CHECK FOR ALL DRIVES
D9E7 2A08             (     flx29fms.asm):01376 [3]             bpl     OPNWT3      ;
D9E9 BDDDD5           (     flx29fms.asm):01377 [8]             jsr     NXTRDY      ;FIND READY
D9EC 2403             (     flx29fms.asm):01378 [3]             bcc     OPNWT3      ;FOUND ONE
D9EE C610             (     flx29fms.asm):01379 [2]             ldb     #NRER       ;NONE READY
D9F0 39               (     flx29fms.asm):01380 [5]             rts                 ;
                      (     flx29fms.asm):01381                                     ;
D9F1 BDD4FE           (     flx29fms.asm):01382 [8]     OPNWT3  jsr     SETFCB      ;SET FCB LINK
D9F4 25E2             (     flx29fms.asm):01383 [3]             bcs     OPNERR      ;ERROR?
D9F6 BDD53B           (     flx29fms.asm):01384 [8]             jsr     CLRFCB      ;CLEAR OUT FCB
D9F9 BDD920           (     flx29fms.asm):01385 [8]             jsr     GETAVL      ;SETUP SECTOR MAP
D9FC 25DA             (     flx29fms.asm):01386 [3]             bcs     OPNERR      ;ERROR?
D9FE BDD89B           (     flx29fms.asm):01387 [8]             jsr     FNDNAM      ;GO LOOK FOR NAME
DA01 25D5             (     flx29fms.asm):01388 [3]             bcs     OPNERR      ;ERROR?
DA03 2604             (     flx29fms.asm):01389 [3]             bne     OPNWT4      ;FIND?
DA05 C603             (     flx29fms.asm):01390 [2]             ldb     #FEER       ;FOUND - ERROR
DA07 20CF             (     flx29fms.asm):01391 [3]             bra     OPNERR      ;
                      (     flx29fms.asm):01392                                     ;
DA09 BDDCD8           (     flx29fms.asm):01393 [8]     OPNWT4  jsr     SETMAX      ;SET MAX SEC
DA0C 25CA             (     flx29fms.asm):01394 [3]             bcs     OPNERR      ;ERROR?
DA0E BED40B           (     flx29fms.asm):01395 [6]             ldx     FCBSTR      ;POINT TO FCB
DA11 C60A             (     flx29fms.asm):01396 [2]             ldb     #10         ;SET COUNT
DA13 6F0F             (     flx29fms.asm):01397 [6+1]   OPNWT5  clr     FID,x       ;CLEAR BLOCK
DA15 3001             (     flx29fms.asm):01398 [4+1]           leax    1,x         ;
DA17 5A               (     flx29fms.asm):01399 [2]             decb                ;DEC THE COUNT
DA18 26F9             (     flx29fms.asm):01400 [3]             bne     OPNWT5      ;
                      (     flx29fms.asm):01401                                     ;
DA1A BED40B           (     flx29fms.asm):01402 [6]             ldx     FCBSTR      ;
DA1D EC8832           (     flx29fms.asm):01403 [5+1]           ldd     FFD,x       ;GET FIRST DELETED
DA20 2734             (     flx29fms.asm):01404 [3]             beq     OPNWT8      ;EOF ER?
DA22 ED882F           (     flx29fms.asm):01405 [5+1]           std     FCD,x       ;SET CURRENT DIR
DA25 A68834           (     flx29fms.asm):01406 [4+1]           lda     FFD+2,x     ;GET INDEX
DA28 A78831           (     flx29fms.asm):01407 [4+1]           sta     FCD+2,x     ;SAVE IT
DA2B FCCC0E           (     flx29fms.asm):01408 [6]             ldd     DATE        ;GET DATE
DA2E ED8819           (     flx29fms.asm):01409 [5+1]           std     FDT,x       ;SET DATE
DA31 B6CC10           (     flx29fms.asm):01410 [5]             lda     DATE+2
DA34 A7881B           (     flx29fms.asm):01411 [4+1]           sta     FDT+2,x
                      (     flx29fms.asm):01412         
                      (     flx29fms.asm):01413         *       -- not in UniFLEX version
                      (     flx29fms.asm):01414         
DA37 A603             (     flx29fms.asm):01415 [4+1]           lda     FDN,x       ;GET DRIVE
DA39 8ED436           (     flx29fms.asm):01416 [3]             ldx     #DRVINFO    ;GET TABLE POINTER
DA3C A686             (     flx29fms.asm):01417 [4+1]           lda     a,x         ;GET DRIVE INFO
DA3E BED40B           (     flx29fms.asm):01418 [6]             ldx     FCBSTR      ;POINT TO FCB
DA41 A78818           (     flx29fms.asm):01419 [4+1]           sta     24,x        ;
                      (     flx29fms.asm):01420                                     ;
                      (     flx29fms.asm):01421         *       --                  ;
                      (     flx29fms.asm):01422                                     ;
DA44 BDDDC5           (     flx29fms.asm):01423 [8]             jsr     RSTNAM      ;RESTORE NAME
DA47 BDD972           (     flx29fms.asm):01424 [8]             jsr     WRTDIR      ;SET DIRECTORY
DA4A 258C             (     flx29fms.asm):01425 [3]             bcs     OPNERR      ;ERROR?
DA4C 8D3F             (     flx29fms.asm):01426 [7]             bsr     SETST       ;SET STATUS
DA4E 8604             (     flx29fms.asm):01427 [2]             lda     #RS         ;SET DATA POINTER
DA50 A78822           (     flx29fms.asm):01428 [4+1]           sta     FDI,x       ;
DA53 1CFE             (     flx29fms.asm):01429 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DA55 39               (     flx29fms.asm):01430 [5]             rts                 ;
                      (     flx29fms.asm):01431                                     ;
DA56 BED40B           (     flx29fms.asm):01432 [6]     OPNWT8  ldx     FCBSTR      ;POINT TO FCB
DA59 6F8817           (     flx29fms.asm):01433 [6+1]           clr     FMP,x       ;CLEAR FLAG
DA5C 6C8812           (     flx29fms.asm):01434 [6+1]           inc     FSA+1,x     ;SET FSA NON 0
DA5F EC882F           (     flx29fms.asm):01435 [5+1]           ldd     FCD,x       ;GET POSITION
DA62 BDD628           (     flx29fms.asm):01436 [8]             jsr     RDNEX2      ;READ SECTOR
DA65 250D             (     flx29fms.asm):01437 [3]             bcs     OPNW85      ;ERROR?
                      (     flx29fms.asm):01438                                     ;
DA67 BDD77A           (     flx29fms.asm):01439 [8]             jsr     WTNEX1      ;GO WRITE NEW
DA6A 2508             (     flx29fms.asm):01440 [3]             bcs     OPNW85      ;ERROR?
                      (     flx29fms.asm):01441                                     ;
DA6C BDD6A7           (     flx29fms.asm):01442 [8]             jsr     WRITSS      ;WRITE NEW SECTOR
DA6F 2406             (     flx29fms.asm):01443 [3]             bcc     OPNWT9      ;ERROR?
DA71 BDDBD8           (     flx29fms.asm):01444 [8]             jsr     WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01445                                     ;
DA74 7ED9D8           (     flx29fms.asm):01446 [4]     OPNW85  jmp     OPNERR      ;
                      (     flx29fms.asm):01447                                     ;
DA77 BED40B           (     flx29fms.asm):01448 [6]     OPNWT9  ldx     FCBSTR      ;SET POINTER
DA7A EC881E           (     flx29fms.asm):01449 [5+1]           ldd     FCS,x       ;GET CURRENT
DA7D ED8832           (     flx29fms.asm):01450 [5+1]           std     FFD,x       ;SET FIRST DELETED
DA80 8610             (     flx29fms.asm):01451 [2]             lda     #IRS        ;SET INDEX
DA82 A78834           (     flx29fms.asm):01452 [4+1]           sta     FFD+2,x     ;
DA85 BDD950           (     flx29fms.asm):01453 [8]             jsr     PUTAVL      ;UPDATE AVLS
DA88 25EA             (     flx29fms.asm):01454 [3]             bcs     OPNW85      ;
DA8A 7EDA09           (     flx29fms.asm):01455 [4]             jmp     OPNWT4      ;FINISH UP
                      (     flx29fms.asm):01456         
                      (     flx29fms.asm):01457         * SETST
                      (     flx29fms.asm):01458         *
                      (     flx29fms.asm):01459         * SETST SETS THE FCB STATUS AFTER
                      (     flx29fms.asm):01460         * AN OPEN FILE COMMAND.
                      (     flx29fms.asm):01461         *
                      (     flx29fms.asm):01462         *   ENTRY: NONE
                      (     flx29fms.asm):01463         *   EXIT:  A & X CHANGED
                      (     flx29fms.asm):01464         
DA8D BED40B           (     flx29fms.asm):01465 [6]     SETST   ldx     FCBSTR      ;POINT TO FCB
DA90 A684             (     flx29fms.asm):01466 [4+0]           lda     FFC,x       ;GET FUNCTION CODE
DA92 A702             (     flx29fms.asm):01467 [4+1]           sta     FAS,x       ;SET ACTIVITY STATUS
DA94 6F84             (     flx29fms.asm):01468 [6+0]           clr     FFC,x       ;CLEAR FUNCTION CODE
DA96 6F883B           (     flx29fms.asm):01469 [6+1]           clr     FSC,x       ;CLEAR SPC COMP
DA99 4F               (     flx29fms.asm):01470 [2]             clra                ;GET SECTOR LENGTH \\\\
DA9A A78822           (     flx29fms.asm):01471 [4+1]           sta     FDI,x       ;SET INDEX
DA9D 39               (     flx29fms.asm):01472 [5]             rts
                      (     flx29fms.asm):01473         
                      (     flx29fms.asm):01474         * NEXTS
                      (     flx29fms.asm):01475         *
                      (     flx29fms.asm):01476         * NEXTS IS THE SYSTEM ROUTINE TO
                      (     flx29fms.asm):01477         * ADVANCE TO THE NEXT SECTOR.
                      (     flx29fms.asm):01478         *
                      (     flx29fms.asm):01479         *   ENTRY: NONE
                      (     flx29fms.asm):01480         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01481         
DA9E 8D28             (     flx29fms.asm):01482 [7]     NEXTS   bsr     DOSTAT      ;CHECK STATUS
DAA0 250E             (     flx29fms.asm):01483 [3]             bcs     NEXTS4      ;ERROR?
DAA2 6F84             (     flx29fms.asm):01484 [6+0]           clr     ,x         ;
DAA4 44               (     flx29fms.asm):01485 [2]             lsra                ;READING?
DAA5 1025FB6B         (     flx29fms.asm):01486 [5+?]           lbcs    RDNEXT      ;READ NEXT
                      (     flx29fms.asm):01487                                     ;
DAA9 C604             (     flx29fms.asm):01488 [2]             ldb     #RS         ;SET START
DAAB E78822           (     flx29fms.asm):01489 [4+1]           stb     FDI,x       ;SET INDEX
DAAE 1CFE             (     flx29fms.asm):01490 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DAB0 39               (     flx29fms.asm):01491 [5]     NEXTS4  rts
                      (     flx29fms.asm):01492         
                      (     flx29fms.asm):01493         * CHKWT
                      (     flx29fms.asm):01494         *
                      (     flx29fms.asm):01495         * CHECK FOR WRITE SECTOR NECESSITY
                      (     flx29fms.asm):01496         *
                      (     flx29fms.asm):01497         *   ENTRY: NONE
                      (     flx29fms.asm):01498         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01499         
DAB1 BED40B           (     flx29fms.asm):01500 [6]     CHKWT   ldx     FCBSTR      ;GET FCB POINTER
DAB4 A602             (     flx29fms.asm):01501 [4+1]           lda     FAS,x       ;GET STATUS
DAB6 8183             (     flx29fms.asm):01502 [2]             cmpa    #$83        ;NEED WRITING?
DAB8 260B             (     flx29fms.asm):01503 [3]             bne     CHKWT4      ;
                      (     flx29fms.asm):01504                                     ;
DABA 8603             (     flx29fms.asm):01505 [2]             lda     #3          ;RESET STATUS
DABC A702             (     flx29fms.asm):01506 [4+1]           sta     FAS,x       ;
                      (     flx29fms.asm):01507                                     ;
DABE BDD6A7           (     flx29fms.asm):01508 [8]     CHKWT2  jsr     WRITSS      ;WRITE SECTOR
DAC1 10250113         (     flx29fms.asm):01509 [5+?]           lbcs    WRTERR      ;REPORT ERROR
                      (     flx29fms.asm):01510                                     ;
DAC5 1CFE             (     flx29fms.asm):01511 [3]     CHKWT4  andcc   #$FE        ;CLC CLEAR ERRORS
DAC7 39               (     flx29fms.asm):01512 [5]             rts
                      (     flx29fms.asm):01513         
                      (     flx29fms.asm):01514         * DOSTAT
                      (     flx29fms.asm):01515         *
                      (     flx29fms.asm):01516         * DOSTAT DOES FILE STATUS CHECKING
                      (     flx29fms.asm):01517         *
                      (     flx29fms.asm):01518         *   ENTRY: NONE
                      (     flx29fms.asm):01519         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01520         *          CS IF ERROR
                      (     flx29fms.asm):01521         
DAC8 8DE7             (     flx29fms.asm):01522 [7]     DOSTAT  bsr     CHKWT       ;CHECK FOR WRITE
DACA 250D             (     flx29fms.asm):01523 [3]             bcs     DOSTA4      ;ERRORS?
                      (     flx29fms.asm):01524                                     ;
DACC BED40B           (     flx29fms.asm):01525 [6]             ldx     FCBSTR      ;SET POINTER
DACF A602             (     flx29fms.asm):01526 [4+1]           lda     FAS,x       ;GET STATUS
DAD1 8103             (     flx29fms.asm):01527 [2]             cmpa    #3          ;IS IT RW?
DAD3 23F0             (     flx29fms.asm):01528 [3]             bls     CHKWT4      ;ERROR?
                      (     flx29fms.asm):01529                                     ;
DAD5 C612             (     flx29fms.asm):01530 [2]             ldb     #STER       ;SET ERROR
DAD7 1A01             (     flx29fms.asm):01531 [3]             orcc    #1          ;SEC
DAD9 39               (     flx29fms.asm):01532 [5]     DOSTA4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01533         
                      (     flx29fms.asm):01534         * CLOSE
                      (     flx29fms.asm):01535         *
                      (     flx29fms.asm):01536         * CLOSE A DISK FILE
                      (     flx29fms.asm):01537         *
                      (     flx29fms.asm):01538         *   ENTRY: NONE
                      (     flx29fms.asm):01539         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01540         
DADA 8DEC             (     flx29fms.asm):01541 [7]     CLOSE   bsr     DOSTAT      ;CHECK STATUS
DADC 2531             (     flx29fms.asm):01542 [3]             bcs     CLOSE4      ;ERROR?
DADE 8102             (     flx29fms.asm):01543 [2]             cmpa    #2          ;IS IT WRITE?
DAE0 2708             (     flx29fms.asm):01544 [3]             beq     CLOSE2      ;
                      (     flx29fms.asm):01545                                     ;
DAE2 BED40B           (     flx29fms.asm):01546 [6]     CLOSE1  ldx     FCBSTR      ;GET FCB
DAE5 6F02             (     flx29fms.asm):01547 [6+1]           clr     FAS,x       ;CLEAR STATUS
DAE7 7ED510           (     flx29fms.asm):01548 [4]             jmp     REMFCB      ;REMOVE FCB
                      (     flx29fms.asm):01549                                     ;
DAEA A68812           (     flx29fms.asm):01550 [4+1]   CLOSE2  lda     FSA+1,x     ;CHECK IF EMPTY
DAED 2605             (     flx29fms.asm):01551 [3]             bne     CLOSE3      ;EMPTY?
DAEF BDDBBE           (     flx29fms.asm):01552 [8]             jsr     DELNAM      ;DELETE NAME
DAF2 2019             (     flx29fms.asm):01553 [3]             bra     CLOS35      ;
                      (     flx29fms.asm):01554                                     ;
DAF4 8DC8             (     flx29fms.asm):01555 [7]     CLOSE3  bsr     CHKWT2      ;WRITE SECTOR
DAF6 2517             (     flx29fms.asm):01556 [3]             bcs     CLOSE4      ;ERROR?
DAF8 BED40B           (     flx29fms.asm):01557 [6]             ldx     FCBSTR      ;GET POINTER
DAFB 6D8817           (     flx29fms.asm):01558 [6+1]           tst     FMP,x       ;RANDOM?
DAFE 2705             (     flx29fms.asm):01559 [3]             beq     CLOS32      ;
                      (     flx29fms.asm):01560                                     ;
DB00 BDDCAF           (     flx29fms.asm):01561 [8]             jsr     WTFSM       ;WRITE FSM
DB03 250A             (     flx29fms.asm):01562 [3]             bcs     CLOSE4      ;ERROR?
                      (     flx29fms.asm):01563                                     ;
DB05 BDD972           (     flx29fms.asm):01564 [8]     CLOS32  jsr     WRTDIR      ;WRITE DIRECTORY
DB08 2505             (     flx29fms.asm):01565 [3]             bcs     CLOSE4      ;ERROR?
                      (     flx29fms.asm):01566                                     ;
DB0A BDD950           (     flx29fms.asm):01567 [8]             jsr     PUTAVL      ;SET AVL MAP
                      (     flx29fms.asm):01568                                     ;
DB0D 24D3             (     flx29fms.asm):01569 [3]     CLOS35  bcc     CLOSE1      ;ERRORS?
DB0F 39               (     flx29fms.asm):01570 [5]     CLOSE4  rts                 ;ERROR RETURN
                      (     flx29fms.asm):01571         
                      (     flx29fms.asm):01572         * OPNRW
                      (     flx29fms.asm):01573         *
                      (     flx29fms.asm):01574         * OPNRW OPENS A FILE FOR UPDATE
                      (     flx29fms.asm):01575         *
                      (     flx29fms.asm):01576         *   ENTRY: NONE
                      (     flx29fms.asm):01577         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01578         
DB10 BDD98F           (     flx29fms.asm):01579 [8]     OPNRW   jsr     OPNRD       ;OPEN AS READ
DB13 2528             (     flx29fms.asm):01580 [3]             bcs     WTAPP4      ;ERROR?
DB15 BDD614           (     flx29fms.asm):01581 [8]             jsr     RDNEXT      ;READ FIRST SEC
DB18 2523             (     flx29fms.asm):01582 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01583         
DB1A 8603             (     flx29fms.asm):01584 [2]             lda     #3          ;SET RW STATUS
DB1C 2018             (     flx29fms.asm):01585 [3]             bra     WTAPP2      ;FINISH UP
                      (     flx29fms.asm):01586         
                      (     flx29fms.asm):01587         * WTAPP
                      (     flx29fms.asm):01588         *
                      (     flx29fms.asm):01589         * WTAPP IS THE SYSTEM OPEN FILE
                      (     flx29fms.asm):01590         * FOR WRITE APPEND. THE FILE MUST
                      (     flx29fms.asm):01591         * EXIST AND NEW DATA IS WRITTEN ON
                      (     flx29fms.asm):01592         * THE END OF THE FILE.
                      (     flx29fms.asm):01593         *
                      (     flx29fms.asm):01594         *   ENTRY: NONE
                      (     flx29fms.asm):01595         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01596         
DB1E BDD98F           (     flx29fms.asm):01597 [8]     WTAPP   jsr     OPNRD       ;OPEN AS READ
DB21 251A             (     flx29fms.asm):01598 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01599                                     ;
DB23 BED40B           (     flx29fms.asm):01600 [6]             ldx     FCBSTR      ;GET FCB POINTER
DB26 A60F             (     flx29fms.asm):01601 [4+1]           lda     FID,x       ;GET ATT BYTE
DB28 8580             (     flx29fms.asm):01602 [2]             bita    #$80        ;CHECK WP BIT
DB2A 2612             (     flx29fms.asm):01603 [3]             bne     WTAPP6      ;
                      (     flx29fms.asm):01604                                     ;
DB2C EC8813           (     flx29fms.asm):01605 [5+1]           ldd     FEA,x       ;GET END ADDRESS
DB2F BDD628           (     flx29fms.asm):01606 [8]             jsr     RDNEX2      ;READ IN LAST
DB32 2509             (     flx29fms.asm):01607 [3]             bcs     WTAPP4      ;ERRORS?
                      (     flx29fms.asm):01608                                     ;
DB34 8602             (     flx29fms.asm):01609 [2]             lda     #2          ;SET WRITE STATUS
                      (     flx29fms.asm):01610                                     ;
DB36 BED40B           (     flx29fms.asm):01611 [6]     WTAPP2  ldx     FCBSTR      ;SET POINTER
DB39 A702             (     flx29fms.asm):01612 [4+1]           sta     FAS,x       ;SET STATUS
DB3B 1CFE             (     flx29fms.asm):01613 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DB3D 39               (     flx29fms.asm):01614 [5]     WTAPP4  rts                 ;
                      (     flx29fms.asm):01615                                     ;
DB3E C60B             (     flx29fms.asm):01616 [2]     WTAPP6  ldb     #WPER       ;SET ERROR
DB40 1A01             (     flx29fms.asm):01617 [3]             orcc    #1          ;SEC
DB42 39               (     flx29fms.asm):01618 [5]             rts
                      (     flx29fms.asm):01619         
                      (     flx29fms.asm):01620         * RENAME
                      (     flx29fms.asm):01621         *
                      (     flx29fms.asm):01622         * RENAME IS THE SYSTEM FILE RENAME
                      (     flx29fms.asm):01623         * ROUTINE.  THE NEW NAME MUST BE IN
                      (     flx29fms.asm):01624         * FCB+FLR.
                      (     flx29fms.asm):01625         *
                      (     flx29fms.asm):01626         *   ENTRY: SEE ABOVE
                      (     flx29fms.asm):01627         *   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01628         
DB43 8D35             (     flx29fms.asm):01629 [7]     RENAME  bsr     SWAP        ;SWAP NAMES
DB45 BDD89B           (     flx29fms.asm):01630 [8]             jsr     FNDNAM      ;GO LOOK FOR IT
DB48 252A             (     flx29fms.asm):01631 [3]             bcs     RENAM5      ;ERROR?
DB4A 2724             (     flx29fms.asm):01632 [3]             beq     RENAM4      ;ALREADY EXISTS?
                      (     flx29fms.asm):01633                                     ;
DB4C BED40B           (     flx29fms.asm):01634 [6]             ldx     FCBSTR      ;
DB4F C60B             (     flx29fms.asm):01635 [2]             ldb     #NL         ;SET COUNTER
                      (     flx29fms.asm):01636                                     ;
DB51 A68824           (     flx29fms.asm):01637 [4+1]   RENAM1  lda     FWB,x       ;GET CHAR
DB54 A704             (     flx29fms.asm):01638 [4+1]           sta     FFN,x       ;MOVE BACK
DB56 3001             (     flx29fms.asm):01639 [4+1]           leax    1,x         ;BUMP THE POINTER
DB58 5A               (     flx29fms.asm):01640 [2]             decb                ;DEC THE COUNT
DB59 26F6             (     flx29fms.asm):01641 [3]             bne     RENAM1      ;
DB5B 8D4D             (     flx29fms.asm):01642 [7]             bsr     SWPNM       ;SWAP AND FIND
DB5D 2515             (     flx29fms.asm):01643 [3]             bcs     RENAM5      ;ERROR?
DB5F BED40B           (     flx29fms.asm):01644 [6]             ldx     FCBSTR      ;GET POINTER
DB62 A60F             (     flx29fms.asm):01645 [4+1]           lda     FID,x       ;GET ATT BYTE
DB64 8580             (     flx29fms.asm):01646 [2]             bita    #$80        ;
DB66 26D6             (     flx29fms.asm):01647 [3]             bne     WTAPP6      ;
DB68 8560             (     flx29fms.asm):01648 [2]             bita    #$60        ;CHECK DP BIT
DB6A 2609             (     flx29fms.asm):01649 [3]             bne     RENAM6      ;
DB6C 8D0C             (     flx29fms.asm):01650 [7]             bsr     SWAP        ;SWAP NAMES
DB6E 2055             (     flx29fms.asm):01651 [3]             bra     DELNA2      ;WRITE DIRECTORY
                      (     flx29fms.asm):01652                                     ;
DB70 C603             (     flx29fms.asm):01653 [2]     RENAM4  ldb     #FEER       ;SET ERROR
DB72 1A01             (     flx29fms.asm):01654 [3]             orcc    #1          ;SEC SHOW ERROR
DB74 39               (     flx29fms.asm):01655 [5]     RENAM5  rts                 ;
                      (     flx29fms.asm):01656                                     ;
DB75 C60C             (     flx29fms.asm):01657 [2]     RENAM6  ldb     #DPER       ;SET ERROR
DB77 1A01             (     flx29fms.asm):01658 [3]             orcc    #1          ;SEC SHOW ERROR
DB79 39               (     flx29fms.asm):01659 [5]             rts
                      (     flx29fms.asm):01660         
                      (     flx29fms.asm):01661         * SWAP
                      (     flx29fms.asm):01662         *
                      (     flx29fms.asm):01663         * SWAP THE NAME IN FLR WITH FFN.
                      (     flx29fms.asm):01664         * IF FLR HAS NULL EXT SET AS FFN.
                      (     flx29fms.asm):01665         
DB7A BED40B           (     flx29fms.asm):01666 [6]     SWAP    ldx     FCBSTR      ;SET FCB POINTER
DB7D 860B             (     flx29fms.asm):01667 [2]             lda     #NL         ;SET COUNT
DB7F B7D411           (     flx29fms.asm):01668 [5]             sta     ETRIES      ;SAVE IT
                      (     flx29fms.asm):01669                                     ;
DB82 A604             (     flx29fms.asm):01670 [4+1]   SWAP2   lda     FFN,x       ;GET CHARACTER
DB84 E68835           (     flx29fms.asm):01671 [4+1]           ldb     FLR,x       ;GET OTHER
DB87 A78835           (     flx29fms.asm):01672 [4+1]           sta     FLR,x       ;SWAP THEM
DB8A E704             (     flx29fms.asm):01673 [4+1]           stb     FFN,x       ;
DB8C 3001             (     flx29fms.asm):01674 [4+1]           leax    1,x         ;BUMP TO NEXT
DB8E 7AD411           (     flx29fms.asm):01675 [7]             dec     ETRIES      ;DEC THE COUNT
DB91 26EF             (     flx29fms.asm):01676 [3]             bne     SWAP2       ;AGAIN?
                      (     flx29fms.asm):01677                                     ;
DB93 BED40B           (     flx29fms.asm):01678 [6]             ldx     FCBSTR      ;RESTORE POINTER
DB96 A60C             (     flx29fms.asm):01679 [4+1]           lda     FNE,x       ;GET IST CHAR
DB98 260C             (     flx29fms.asm):01680 [3]             bne     SWAP6       ;IS IT NULL?
DB9A C603             (     flx29fms.asm):01681 [2]             ldb     #3          ;SET COUNT
DB9C A6883D           (     flx29fms.asm):01682 [4+1]   SWAP4   lda     FLR+8,x     ;GET CHAR
DB9F A70C             (     flx29fms.asm):01683 [4+1]           sta     FNE,x       ;SAVE IT
DBA1 3001             (     flx29fms.asm):01684 [4+1]           leax    1,x         ;BUMP TO NEXT
DBA3 5A               (     flx29fms.asm):01685 [2]             decb                ;DEC THE COUNT
DBA4 26F6             (     flx29fms.asm):01686 [3]             bne     SWAP4       ;
DBA6 BED40B           (     flx29fms.asm):01687 [6]     SWAP6   ldx     FCBSTR      ;RESTORE POINTER
DBA9 39               (     flx29fms.asm):01688 [5]             rts
                      (     flx29fms.asm):01689         
                      (     flx29fms.asm):01690         * SWPNM
                      (     flx29fms.asm):01691         *
                      (     flx29fms.asm):01692         * SWAP NAMES AND DO FNDNAM
                      (     flx29fms.asm):01693         
DBAA 8DCE             (     flx29fms.asm):01694 [7]     SWPNM   bsr     SWAP        ;GO DO SWAP
DBAC BDD89B           (     flx29fms.asm):01695 [8]     SWPNM2  jsr     FNDNAM      ;FIND NAME
DBAF 2507             (     flx29fms.asm):01696 [3]             bcs     SWPNM4      ;ERROR?
DBB1 2606             (     flx29fms.asm):01697 [3]             bne     SWPNM5      ;NO FIND?
                      (     flx29fms.asm):01698                                     ;
DBB3 BED40B           (     flx29fms.asm):01699 [6]             ldx     FCBSTR      ;RESTORE POINTER
DBB6 1CFE             (     flx29fms.asm):01700 [3]             andcc   #$FE        ;CLC CLEAR ERRORS
DBB8 39               (     flx29fms.asm):01701 [5]     SWPNM4  rts                 ;
                      (     flx29fms.asm):01702                                     ;
DBB9 C604             (     flx29fms.asm):01703 [2]     SWPNM5  ldb     #NFER       ;SET ERROR
DBBB 1A01             (     flx29fms.asm):01704 [3]             orcc    #1          ;SEC
DBBD 39               (     flx29fms.asm):01705 [5]             rts
                      (     flx29fms.asm):01706         
                      (     flx29fms.asm):01707         * DELNAM
                      (     flx29fms.asm):01708         *
                      (     flx29fms.asm):01709         * DELETE FILE NAME IN DIR
                      (     flx29fms.asm):01710         
DBBE BED40B           (     flx29fms.asm):01711 [6]     DELNAM  ldx     FCBSTR      ;POINT TO FCB
DBC1 86FF             (     flx29fms.asm):01712 [2]             lda     #$FF        ;SET NEGATIVE
DBC3 A704             (     flx29fms.asm):01713 [4+1]           sta     FFN,x       ;SET VALUE
                      (     flx29fms.asm):01714                                     ;
DBC5 BDD972           (     flx29fms.asm):01715 [8]     DELNA2  jsr     WRTDIR      ;WRITE DIRECTORY
DBC8 BED40B           (     flx29fms.asm):01716 [6]             ldx     FCBSTR      ;SET POINTER
DBCB 8600             (     flx29fms.asm):01717 [2]             lda     #0          ;CLEAR STATUS
DBCD A702             (     flx29fms.asm):01718 [4+1]           sta     FAS,x
DBCF 39               (     flx29fms.asm):01719 [5]             rts
                      (     flx29fms.asm):01720         
                      (     flx29fms.asm):01721         * WRITIT
                      (     flx29fms.asm):01722         *
                      (     flx29fms.asm):01723         * WRITIT PUTS AND WRITES NEW
                      (     flx29fms.asm):01724         * FORWARD LINK IN SECTOR.
                      (     flx29fms.asm):01725         
DBD0 ED8840           (     flx29fms.asm):01726 [5+1]   WRITIT  std     FSB,x       ;SET NEW LINK
DBD3 BDD6A7           (     flx29fms.asm):01727 [8]             jsr     WRITSS      ;WRITE SECTOR
DBD6 2414             (     flx29fms.asm):01728 [3]             bcc     WRTER4      ;
                      (     flx29fms.asm):01729                                     ;
DBD8 C540             (     flx29fms.asm):01730 [2]     WRTERR  bitb    #$40        ;W.P. ?
DBDA 2608             (     flx29fms.asm):01731 [3]             bne     WRTER1      ;
DBDC C580             (     flx29fms.asm):01732 [2]             bitb    #$80        ;
DBDE 270A             (     flx29fms.asm):01733 [3]             beq     WRTER3      ;
DBE0 C610             (     flx29fms.asm):01734 [2]             ldb     #NRER       ;SET NOT READY
DBE2 2006             (     flx29fms.asm):01735 [3]             bra     WRTER3      ;
                      (     flx29fms.asm):01736                                     ;
DBE4 C60B             (     flx29fms.asm):01737 [2]     WRTER1  ldb     #WPER       ;SET WP ERROR
DBE6 2002             (     flx29fms.asm):01738 [3]             bra     WRTER3      ;
                      (     flx29fms.asm):01739                                     ;
                      (     flx29fms.asm):01740         * ---- No path to this code ;
                      (     flx29fms.asm):01741                                     ;
DBE8 C60A             (     flx29fms.asm):01742 [2]     WRTER2  ldb     #WTER       ;SET WRITE ERROR
                      (     flx29fms.asm):01743         
                      (     flx29fms.asm):01744         * ----
                      (     flx29fms.asm):01745         
DBEA 1A01             (     flx29fms.asm):01746 [3]     WRTER3  orcc    #1
DBEC 39               (     flx29fms.asm):01747 [5]     WRTER4  rts
                      (     flx29fms.asm):01748         
                      (     flx29fms.asm):01749         * DELETE
                      (     flx29fms.asm):01750         *
                      (     flx29fms.asm):01751         * DELETE A SYSTEM FILE RETURNING ITS
                      (     flx29fms.asm):01752         * SECTORS BACK TO THE LIST OF AVAIL.
                      (     flx29fms.asm):01753         *
                      (     flx29fms.asm):01754         *   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01755         *   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01756         *          CS IF ERROR
                      (     flx29fms.asm):01757         
DBED BDD920           (     flx29fms.asm):01758 [8]     DELETE   jsr     GETAVL      ;GET SEC MAP
DBF0 255E             (     flx29fms.asm):01759 [3]             bcs     DELET6      ;ERROR?
DBF2 8DB8             (     flx29fms.asm):01760 [7]             bsr     SWPNM2      ;FIND NAME
DBF4 255A             (     flx29fms.asm):01761 [3]             bcs     DELET6      ;ERROR?
                      (     flx29fms.asm):01762                                     ;
DBF6 BED40B           (     flx29fms.asm):01763 [6]             ldx     FCBSTR      ;GET POINTER
DBF9 A60F             (     flx29fms.asm):01764 [4+1]           lda     FID,x       ;GET ATT BYTE
DBFB 8580             (     flx29fms.asm):01765 [2]             bita    #$80        ;CHECK WP BIT
DBFD 2652             (     flx29fms.asm):01766 [3]             bne     DELET7      ;
                      (     flx29fms.asm):01767                                     ;
DBFF 8560             (     flx29fms.asm):01768 [2]             bita    #$60        ;CHECK DP BIT
DC01 2652             (     flx29fms.asm):01769 [3]             bne     DELET8      ;
                      (     flx29fms.asm):01770                                     ;
DC03 BDD78F           (     flx29fms.asm):01771 [8]             jsr     FSECMP      ;FIND SEC MAP
DC06 BED41B           (     flx29fms.asm):01772 [6]             ldx     AVLPNT      ;GET MAP POINTER
DC09 EC02             (     flx29fms.asm):01773 [5+1]           ldd     2,x         ;GET LAST AVAIL
DC0B 260F             (     flx29fms.asm):01774 [3]             bne     DELET2      ;IS IT NULL?
DC0D BED40B           (     flx29fms.asm):01775 [6]             ldx     FCBSTR      ;RESTORE POINTER
DC10 EC8811           (     flx29fms.asm):01776 [5+1]           ldd     FSA,x       ;GET START ADR
DC13 2733             (     flx29fms.asm):01777 [3]             beq     DELET5      ;
DC15 BED41B           (     flx29fms.asm):01778 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC18 ED84             (     flx29fms.asm):01779 [5+0]           std     ,x         ;SET NEW
DC1A 2014             (     flx29fms.asm):01780 [3]             bra     DELET4      ;JUMP AHEAD
                      (     flx29fms.asm):01781                                     ;
DC1C BED40B           (     flx29fms.asm):01782 [6]     DELET2  ldx     FCBSTR      ;SET POINTER
DC1F BDD628           (     flx29fms.asm):01783 [8]             jsr     RDNEX2      ;READ SECTOR
DC22 252C             (     flx29fms.asm):01784 [3]             bcs     DELET6      ;ERRORS?
DC24 BED40B           (     flx29fms.asm):01785 [6]             ldx     FCBSTR      ;RESTORE POINTER
DC27 EC8811           (     flx29fms.asm):01786 [5+1]           ldd     FSA,x       ;GET START ADR
DC2A 271C             (     flx29fms.asm):01787 [3]             beq     DELET5      ;
DC2C 8DA2             (     flx29fms.asm):01788 [7]             bsr     WRITIT      ;SET LINK
DC2E 2520             (     flx29fms.asm):01789 [3]             bcs     DELET6      ;ERROR?
                      (     flx29fms.asm):01790                                     ;
DC30 BED40B           (     flx29fms.asm):01791 [6]     DELET4  ldx     FCBSTR      ;SET FCB PNTR
DC33 EC8813           (     flx29fms.asm):01792 [5+1]           ldd     FEA,x       ;GET END ADR
DC36 BED41B           (     flx29fms.asm):01793 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC39 ED02             (     flx29fms.asm):01794 [5+1]           std     2,x         ;SET NEW LAST
DC3B BED40B           (     flx29fms.asm):01795 [6]             ldx     FCBSTR      ;SET POINTER
DC3E EC8815           (     flx29fms.asm):01796 [5+1]           ldd     FSZ,x       ;GET SIZE
DC41 BED41B           (     flx29fms.asm):01797 [6]             ldx     AVLPNT      ;POINT TO AVAILS
DC44 E304             (     flx29fms.asm):01798 [6+1]           addd    4,x         ;ADD IN SECTORS
DC46 ED04             (     flx29fms.asm):01799 [5+1]           std     4,x         ;SAVE NEW COUNT
                      (     flx29fms.asm):01800                                     ;
DC48 BDDBBE           (     flx29fms.asm):01801 [8]     DELET5  jsr     DELNAM      ;DELETE NAME
DC4B 2503             (     flx29fms.asm):01802 [3]             bcs     DELET6      ;ERROR?
DC4D BDD950           (     flx29fms.asm):01803 [8]             jsr     PUTAVL      ;WRITE AVAIL SEC
DC50 39               (     flx29fms.asm):01804 [5]     DELET6  rts                 ;
                      (     flx29fms.asm):01805                                     ;
DC51 C60B             (     flx29fms.asm):01806 [2]     DELET7  ldb     #WPER       ;SET ERROR
DC53 2002             (     flx29fms.asm):01807 [3]             bra     DELET9      ;
                      (     flx29fms.asm):01808                                     ;
DC55 C60C             (     flx29fms.asm):01809 [2]     DELET8  ldb     #DPER       ;SET ERROR
DC57 1A01             (     flx29fms.asm):01810 [3]     DELET9  orcc    #1          ;SEC SHOW ERROR
DC59 39               (     flx29fms.asm):01811 [5]             rts
                      (     flx29fms.asm):01812         
                      (     flx29fms.asm):01813         * UPDFSM
                      (     flx29fms.asm):01814         *
                      (     flx29fms.asm):01815         * UPDATE FILE SECTOR MAP
                      (     flx29fms.asm):01816         
DC5A EC881E           (     flx29fms.asm):01817 [5+1]   UPDFSM  ldd     FCS,x       ;GET CURRENT SEC
DC5D 5C               (     flx29fms.asm):01818 [2]             incb                            ;CHECK IF SEQUENTIAL
DC5E E1883C           (     flx29fms.asm):01819 [4+1]           cmpb    FMX,x       ;CHECK MAX
DC61 2303             (     flx29fms.asm):01820 [3]             bls     UPDFS2      ;
DC63 C601             (     flx29fms.asm):01821 [2]             ldb     #1          ;SET SECTOR 1
DC65 4C               (     flx29fms.asm):01822 [2]             inca                ;BUMP TRACK
DC66 10A38813         (     flx29fms.asm):01823 [7+1]   UPDFS2  cmpd    FEA,x       ;CHECK END
DC6A 260E             (     flx29fms.asm):01824 [3]             bne     UPDFS4      ;
DC6C A68837           (     flx29fms.asm):01825 [4+1]           lda     SBC,x       ;CHECK MAX COUNT
DC6F 81FF             (     flx29fms.asm):01826 [2]             cmpa    #$FF        ;IS IT MAX?
DC71 2707             (     flx29fms.asm):01827 [3]             beq     UPDFS4      ;
DC73 4C               (     flx29fms.asm):01828 [2]             inca                ;BUMP COUNT
DC74 A78837           (     flx29fms.asm):01829 [4+1]           sta     SBC,x       ;SAVE IT
DC77 1CFE             (     flx29fms.asm):01830 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DC79 39               (     flx29fms.asm):01831 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01832                                     ;
DC7A 8D33             (     flx29fms.asm):01833 [7]     UPDFS4  bsr     WTFSM       ;WRITE FSM
DC7C 2530             (     flx29fms.asm):01834 [3]             bcs     UPDFS9      ;ERROR?
DC7E BED40B           (     flx29fms.asm):01835 [6]             ldx     FCBSTR      ;SET POINTER
DC81 A6883A           (     flx29fms.asm):01836 [4+1]           lda     FNK+2,x     ;GET OFFSET
DC84 8B03             (     flx29fms.asm):01837 [2]             adda    #3          ;BUMP TO NEXT ENTRY
DC86 2616             (     flx29fms.asm):01838 [3]             bne     UPDFS8      ;END OF SECTOR?
DC88 EC881E           (     flx29fms.asm):01839 [5+1]           ldd     FCS,x       ;GET CURRENT
DC8B 10A38811         (     flx29fms.asm):01840 [7+1]           cmpd    FSA,x       ;START ADDR?
DC8F 2705             (     flx29fms.asm):01841 [3]             beq     UPDFS7      ;
DC91 C617             (     flx29fms.asm):01842 [2]     UPDFS6  ldb     #FSER       ;SET ERROR
DC93 1A01             (     flx29fms.asm):01843 [3]             orcc    #1                      ;sec
DC95 39               (     flx29fms.asm):01844 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01845                                     ;
DC96 EC8840           (     flx29fms.asm):01846 [5+1]   UPDFS7  ldd     FSB,x       ;GET LINK
DC99 ED8838           (     flx29fms.asm):01847 [5+1]   UPDF75  std     FNK,x       ;SET POINTER
DC9C 8604             (     flx29fms.asm):01848 [2]             lda     #4          ;SET INITIAL OFFSET
DC9E A7883A           (     flx29fms.asm):01849 [4+1]   UPDFS8  sta     FNK+2,x     ;
DCA1 EC8813           (     flx29fms.asm):01850 [5+1]           ldd     FEA,x       ;GET END ADDR
DCA4 ED8835           (     flx29fms.asm):01851 [5+1]           std     FLR,x       ;MARK POSITION
DCA7 8601             (     flx29fms.asm):01852 [2]             lda     #1          ;SET COUNT
DCA9 A78837           (     flx29fms.asm):01853 [4+1]           sta     SBC,x       ;
DCAC 1CFE             (     flx29fms.asm):01854 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DCAE 39               (     flx29fms.asm):01855 [5]     UPDFS9  rts                 ;RETURN
                      (     flx29fms.asm):01856         
                      (     flx29fms.asm):01857         * WTFSM
                      (     flx29fms.asm):01858         *
                      (     flx29fms.asm):01859         * WRITE FILE SECTOR MAP
                      (     flx29fms.asm):01860         
DCAF EC8838           (     flx29fms.asm):01861 [5+1]   WTFSM   ldd     FNK,x       ;GET RECORD
DCB2 BDD628           (     flx29fms.asm):01862 [8]             jsr     RDNEX2      ;READ SECTOR
DCB5 25F7             (     flx29fms.asm):01863 [3]             bcs     UPDFS9      ;ERROR?
DCB7 BED40B           (     flx29fms.asm):01864 [6]             ldx     FCBSTR
DCBA 1F12             (     flx29fms.asm):01865 [6]             tfr     x,y
DCBC E6883A           (     flx29fms.asm):01866 [4+1]           ldb     FNK+2,x
                      (     flx29fms.asm):01867         
                      (     flx29fms.asm):01868         * LEAX    B,x   < original code
                      (     flx29fms.asm):01869         * Add NOP and ABX
                      (     flx29fms.asm):01870         
DCBF 12               (     flx29fms.asm):01871 [2]             nop
DCC0 3A               (     flx29fms.asm):01872 [3]             abx                 ;CORRECTED 2/4/80
DCC1 C603             (     flx29fms.asm):01873 [2]             ldb     #3
DCC3 A6A835           (     flx29fms.asm):01874 [4+1]   WTFSM2  lda     FLR,y
DCC6 3121             (     flx29fms.asm):01875 [4+1]           leay    1,y
DCC8 A78840           (     flx29fms.asm):01876 [4+1]           sta     FSB,x
DCCB 3001             (     flx29fms.asm):01877 [4+1]           leax    1,x
DCCD 5A               (     flx29fms.asm):01878 [2]             decb                ;DEC THE COUNT
DCCE 26F3             (     flx29fms.asm):01879 [3]             bne     WTFSM2      ;
DCD0 BDD6A7           (     flx29fms.asm):01880 [8]             jsr     WRITSS      ;WRITE SECTOR
DCD3 24D9             (     flx29fms.asm):01881 [3]             bcc     UPDFS9      ;ERROR?
DCD5 7EDBD8           (     flx29fms.asm):01882 [4]             jmp     WRTERR      ;SET ERROR
                      (     flx29fms.asm):01883         
                      (     flx29fms.asm):01884         * SETMAX
                      (     flx29fms.asm):01885         *
                      (     flx29fms.asm):01886         * SET MAX SECTOR NUMBER
                      (     flx29fms.asm):01887         
DCD8 BDD818           (     flx29fms.asm):01888 [8]     SETMAX  jsr     OPNSIR      ;GET SECTOR
DCDB BDD614           (     flx29fms.asm):01889 [8]             jsr     RDNEXT      ;
DCDE 2546             (     flx29fms.asm):01890 [3]             bcs     POSI05      ;ERROR?
DCE0 BED40B           (     flx29fms.asm):01891 [6]             ldx     FCBSTR      ;SET FCB PNTR
DCE3 4F               (     flx29fms.asm):01892 [2]             clra                ;
DCE4 5F               (     flx29fms.asm):01893 [2]             clrb                ;
DCE5 ED8820           (     flx29fms.asm):01894 [5+1]           std     FRN,x       ;CLEAR REC NUM
DCE8 A68867           (     flx29fms.asm):01895 [4+1]           lda     FSB+39,x    ;GET MAX
DCEB A7883C           (     flx29fms.asm):01896 [4+1]           sta     FMX,x       ;SAVE MAX
DCEE 5F               (     flx29fms.asm):01897 [2]             clrb                ;GET SECTOR LENGTH \\\\
DCEF 6F8840           (     flx29fms.asm):01898 [6+1]   SETMA2  clr     FSB,x       ;CLEAR BYTES
DCF2 3001             (     flx29fms.asm):01899 [4+1]           leax    1,x         ;
DCF4 5A               (     flx29fms.asm):01900 [2]             decb                ;DEC THE COUNTER
DCF5 26F8             (     flx29fms.asm):01901 [3]             bne     SETMA2      ;
DCF7 BED40B           (     flx29fms.asm):01902 [6]             ldx     FCBSTR      ;RESTORE POINTER
DCFA 1CFE             (     flx29fms.asm):01903 [3]             andcc   #$fe        ;clc CLEAR ERRORS
DCFC 39               (     flx29fms.asm):01904 [5]             rts                 ;RETURN
                      (     flx29fms.asm):01905         
                      (     flx29fms.asm):01906         * BKREC
                      (     flx29fms.asm):01907         *
                      (     flx29fms.asm):01908         * BACK UP ONE RECORD
                      (     flx29fms.asm):01909         
DCFD BED40B           (     flx29fms.asm):01910 [6]     BKREC   ldx     FCBSTR      ;GET FCB
DD00 A68817           (     flx29fms.asm):01911 [4+1]           lda     FMP,x       ;RANDOM?
DD03 271D             (     flx29fms.asm):01912 [3]             beq     POSIT0      ;
DD05 EC8820           (     flx29fms.asm):01913 [5+1]           ldd     FRN,x       ;GET REC NUMBER
DD08 830001           (     flx29fms.asm):01914 [4]             subd    #1          ;DEC BY ONE
DD0B 2A03             (     flx29fms.asm):01915 [3]             bpl     BKREC2      ;UNDERFLOW?
DD0D 7EDDB2           (     flx29fms.asm):01916 [4]             jmp     POSIT8      ;
DD10 ED8820           (     flx29fms.asm):01917 [5+1]   BKREC2  std     FRN,x       ;SAVE NEW
                      (     flx29fms.asm):01918         
                      (     flx29fms.asm):01919         * POSIT
                      (     flx29fms.asm):01920         *
                      (     flx29fms.asm):01921         * POSITION TO FRN RECORD NUMBER
                      (     flx29fms.asm):01922         
DD13 BDDAC8           (     flx29fms.asm):01923 [8]     POSIT   jsr     DOSTAT      ;CHECK STATUS
DD16 250E             (     flx29fms.asm):01924 [3]             bcs     POSI05      ;ERROR?
DD18 46               (     flx29fms.asm):01925 [2]             rora                ;
DD19 2407             (     flx29fms.asm):01926 [3]             bcc     POSIT0      ;ERROR?
DD1B 6F84             (     flx29fms.asm):01927 [6+0]           clr     ,x         ;CLEAR FFC
DD1D A68817           (     flx29fms.asm):01928 [4+1]           lda     FMP,x       ;CHECK RANDOM
DD20 2605             (     flx29fms.asm):01929 [3]             bne     POSIT1      ;ERROR?
                      (     flx29fms.asm):01930                                     ;
DD22 C612             (     flx29fms.asm):01931 [2]     POSIT0  ldb     #STER       ;SET ERROR
DD24 1A01             (     flx29fms.asm):01932 [3]             orcc    #1                      ;sec
DD26 39               (     flx29fms.asm):01933 [5]     POSI05  rts                 ;RETURN
                      (     flx29fms.asm):01934                                     ;
DD27 7FD411           (     flx29fms.asm):01935 [7]     POSIT1  clr     ETRIES      ;CLEAR COUNT
DD2A EC8811           (     flx29fms.asm):01936 [5+1]           ldd     FSA,x       ;GET START ADDR
DD2D 10AE8820         (     flx29fms.asm):01937 [6+1]           ldy     FRN,x       ;CHECK FOR 0
DD31 276A             (     flx29fms.asm):01938 [3]             beq     POSIT7      ;GO DO ZERO
DD33 BDDDB7           (     flx29fms.asm):01939 [8]     POSIT2  jsr     GETFSM      ;GET FSM
DD36 25EE             (     flx29fms.asm):01940 [3]             bcs     POSI05      ;
DD38 4F               (     flx29fms.asm):01941 [2]             clra                ;CLEAR COUNT
DD39 5F               (     flx29fms.asm):01942 [2]             clrb                ;
DD3A 6D02             (     flx29fms.asm):01943 [6+1]   POSIT3  tst     2,x         ;CHECK FOR EOF
DD3C 2774             (     flx29fms.asm):01944 [3]             beq     POSIT8      ;
DD3E EB02             (     flx29fms.asm):01945 [4+1]           addb    2,x         ;ADD IN NEW
DD40 8900             (     flx29fms.asm):01946 [2]             adca    #0          ;
DD42 BFD40F           (     flx29fms.asm):01947 [6]             stx     DATAPT      ;
DD45 BED40B           (     flx29fms.asm):01948 [6]             ldx     FCBSTR      ;
DD48 10A38820         (     flx29fms.asm):01949 [7+1]           cmpd    FRN,x       ;CHECK NUMBER
DD4C 242C             (     flx29fms.asm):01950 [3]             bhs     POSIT6      ;
DD4E BED40F           (     flx29fms.asm):01951 [6]     POSIT4  ldx     DATAPT      ;RESTORE POINTER
DD51 3003             (     flx29fms.asm):01952 [4+1]           leax    3,x         ;BUMP TO NEXT
DD53 3402             (     flx29fms.asm):01953 [5+1]           pshs a              ;SAVE COUNT
DD55 B6D411           (     flx29fms.asm):01954 [5]             lda     ETRIES      ;
DD58 4C               (     flx29fms.asm):01955 [2]             inca                ;BUMP POSITION
DD59 B7D411           (     flx29fms.asm):01956 [5]             sta     ETRIES      ;SAVE RESULT
DD5C 8154             (     flx29fms.asm):01957 [2]             cmpa    #84         ;LAST RECORD?
DD5E 2708             (     flx29fms.asm):01958 [3]             beq     POSIT5      ;
DD60 81A8             (     flx29fms.asm):01959 [2]             cmpa    #168        ;
DD62 3502             (     flx29fms.asm):01960 [5+1]           puls a              ;RESTORE TOTAL
DD64 274C             (     flx29fms.asm):01961 [3]             beq     POSIT8      ;ERROR?
DD66 20D2             (     flx29fms.asm):01962 [3]             bra     POSIT3      ;REPEAT
DD68 3404             (     flx29fms.asm):01963 [5+1]   POSIT5  pshs b              ;
DD6A BED40B           (     flx29fms.asm):01964 [6]             ldx     FCBSTR      ;SET POINTER
DD6D EC8840           (     flx29fms.asm):01965 [5+1]           ldd     FSB,x       ;
DD70 8D45             (     flx29fms.asm):01966 [7]             bsr     GETFSM      ;GET FSM
DD72 253E             (     flx29fms.asm):01967 [3]             bcs     POSIT8      ;ERROR?
DD74 3504             (     flx29fms.asm):01968 [5+1]           puls b              ;
DD76 3502             (     flx29fms.asm):01969 [5+1]           puls a              ;RESTORE TOTAL
DD78 20C0             (     flx29fms.asm):01970 [3]             bra     POSIT3      ;REPEAT
DD7A A38820           (     flx29fms.asm):01971 [6+1]   POSIT6  subd    FRN,x       ;SUB REC NUM
DD7D BED40F           (     flx29fms.asm):01972 [6]             ldx     DATAPT      ;RESTORE POINTER
DD80 A602             (     flx29fms.asm):01973 [4+1]           lda     2,x         ;
DD82 3404             (     flx29fms.asm):01974 [5+1]           pshs b                          ; sba
DD84 A0E0             (     flx29fms.asm):01975 [4+2]                   suba ,s+            ;
DD86 4A               (     flx29fms.asm):01976 [2]             deca                ;FIX UP COUNT
DD87 1F89             (     flx29fms.asm):01977 [6]             tfr     a,b         ;
DD89 A684             (     flx29fms.asm):01978 [4+0]           lda     ,x         ;GET TRACK
DD8B EB01             (     flx29fms.asm):01979 [4+1]           addb    1,x         ;ADD IN SECTOR
DD8D BED40B           (     flx29fms.asm):01980 [6]             ldx     FCBSTR      ;
DD90 2505             (     flx29fms.asm):01981 [3]             bcs     POSI68      ;
DD92 E1883C           (     flx29fms.asm):01982 [4+1]   POSI65  cmpb    FMX,x       ;MAX?
DD95 2306             (     flx29fms.asm):01983 [3]             bls     POSIT7      ;
DD97 E0883C           (     flx29fms.asm):01984 [4+1]   POSI68  subb    FMX,x       ;FIX IF SO
DD9A 4C               (     flx29fms.asm):01985 [2]             inca                ;BUMP TRACK
DD9B 20F5             (     flx29fms.asm):01986 [3]             bra     POSI65      ;
DD9D BDD628           (     flx29fms.asm):01987 [8]     POSIT7  jsr     RDNEX2      ;READ NEXT
DDA0 2514             (     flx29fms.asm):01988 [3]             bcs     POSI85      ;ERROR?
DDA2 BED40B           (     flx29fms.asm):01989 [6]             ldx     FCBSTR      ;
DDA5 EC8842           (     flx29fms.asm):01990 [5+1]           ldd     FSB+2,x     ;GET LRN
DDA8 10A38820         (     flx29fms.asm):01991 [7+1]           cmpd    FRN,x       ;COMPARE TO FRN
DDAC 2714             (     flx29fms.asm):01992 [3]             beq     GETS1       ;
DDAE C619             (     flx29fms.asm):01993 [2]     POSI75  ldb     #RMER       ;SET ERROR
DDB0 2002             (     flx29fms.asm):01994 [3]             bra     POSI82      ;
DDB2 C618             (     flx29fms.asm):01995 [2]     POSIT8  ldb     #RRER       ;SET ERROR
DDB4 1A01             (     flx29fms.asm):01996 [3]     POSI82  orcc    #01                     ;sec
DDB6 39               (     flx29fms.asm):01997 [5]     POSI85  rts                             ;RETURN
                      (     flx29fms.asm):01998         
                      (     flx29fms.asm):01999         * GET FSM SECTOR
                      (     flx29fms.asm):02000         
DDB7 BDD628           (     flx29fms.asm):02001 [8]     GETFSM  jsr     RDNEX2      ;READ NEXT SEC
DDBA 2508             (     flx29fms.asm):02002 [3]             bcs     GETS2       ;ERROR?
DDBC BED40B           (     flx29fms.asm):02003 [6]             ldx     FCBSTR      ;SET INDEX
DDBF C644             (     flx29fms.asm):02004 [2]             ldb     #FSB+4      ;SET OFFSET
DDC1 3A               (     flx29fms.asm):02005 [3]             abx                 ;
DDC2 1CFE             (     flx29fms.asm):02006 [3]     GETS1   andcc   #$fe        ; clc CLEAR ERRORS
DDC4 39               (     flx29fms.asm):02007 [5]     GETS2   rts
                      (     flx29fms.asm):02008         
                      (     flx29fms.asm):02009         * RSTNAM
                      (     flx29fms.asm):02010         *
                      (     flx29fms.asm):02011         * RESTORE NAME FROM FWB TO FFN.
                      (     flx29fms.asm):02012         
DDC5 BED40B           (     flx29fms.asm):02013 [6]     RSTNAM  ldx     FCBSTR      ;SET FCB
DDC8 C60B             (     flx29fms.asm):02014 [2]             ldb     #NL         ;SET COUNTER
DDCA A68824           (     flx29fms.asm):02015 [4+1]   RSTNA2  lda     FWB,x       ;GET CHARACTER
DDCD A704             (     flx29fms.asm):02016 [4+1]           sta     FFN,x       ;PUT IT
DDCF 3001             (     flx29fms.asm):02017 [4+1]           leax    1,x           ;BUMP THE POINTER
DDD1 5A               (     flx29fms.asm):02018 [2]             decb                ;DEC THE COUNT
DDD2 26F6             (     flx29fms.asm):02019 [3]             bne     RSTNA2      ;
DDD4 39               (     flx29fms.asm):02020 [5]             rts                 ;RETURN
                      (     flx29fms.asm):02021         
                      (     flx29fms.asm):02022         * NXTRDY
                      (     flx29fms.asm):02023         *
                      (     flx29fms.asm):02024         * NXTRDY RETURNS THE DRIVE NUMBER IN
                      (     flx29fms.asm):02025         * FCB+FDN OF THE NEXT READY DRIVE.
                      (     flx29fms.asm):02026         * CS IF NO MORE READY DRIVES.
                      (     flx29fms.asm):02027         
DDD5 BED40B           (     flx29fms.asm):02028 [6]     NXTRDY  ldx     FCBSTR      ;GET FCB
DDD8 A603             (     flx29fms.asm):02029 [4+1]           lda     FDN,x       ;GET DRIVE NUMBER
DDDA 4C               (     flx29fms.asm):02030 [2]             inca                ;BUMP BY ONE
DDDB 8104             (     flx29fms.asm):02031 [2]             cmpa    #4          ;PAST RANGE?
DDDD 240F             (     flx29fms.asm):02032 [3]             bhs     NXTRD6      ;
DDDF A703             (     flx29fms.asm):02033 [4+1]           sta     FDN,x       ;SAVE NEW NUMBER
DDE1 2605             (     flx29fms.asm):02034 [3]             bne     NXTRD2      ;DRIVE 0 ?
DDE3 BDDE0F           (     flx29fms.asm):02035 [8]             jsr     CHKRDY      ;CHECK IF READY
DDE6 2003             (     flx29fms.asm):02036 [3]             bra     NXTRD4      ;
DDE8 BDDE12           (     flx29fms.asm):02037 [8]     NXTRD2  jsr     QUICK       ;QUICK CHECK
DDEB 25E8             (     flx29fms.asm):02038 [3]     NXTRD4  bcs     NXTRDY      ;CHECK NEXT DRIVE
DDED 39               (     flx29fms.asm):02039 [5]             rts                 ;RETURN
DDEE C610             (     flx29fms.asm):02040 [2]     NXTRD6  ldb     #NRER       ;SET ERROR
DDF0 1A01             (     flx29fms.asm):02041 [3]             orcc    #1                      ;sec
DDF2 39               (     flx29fms.asm):02042 [5]             rts                 ;RETURN
                      (        flex9.asm):00010                         include "drivers.asm"
                      (      drivers.asm):00001                         NAM     DRIVERS
                      (      drivers.asm):00002                         PAG
                      (      drivers.asm):00003                         PRAGMA CD
                      (      drivers.asm):00004         
     0000             (      drivers.asm):00005         USEDSKYNG   EQU     0
                      (      drivers.asm):00006         
                      (      drivers.asm):00007         
                      (      drivers.asm):00008         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00009         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00010         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00011         ;
                      (      drivers.asm):00012         ;  Harware Addresses
                      (      drivers.asm):00013         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00014         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00015         UART0           equ     $FE68           ; DATA IN/OUT
     FE69             (      drivers.asm):00016         UART1           equ     $FE69           ; CHECK RX
     FE6A             (      drivers.asm):00017         UART2           equ     $FE6A           ; INTERRUPTS
     FE6B             (      drivers.asm):00018         UART3           equ     $FE6B           ; LINE CONTROL
     FE6C             (      drivers.asm):00019         UART4           equ     $FE6C           ; MODEM CONTROL
     FE6D             (      drivers.asm):00020         UART5           equ     $FE6D           ; LINE STATUS
     FE6E             (      drivers.asm):00021         UART6           equ     $FE6E           ; MODEM STATUS
     FE6F             (      drivers.asm):00022         UART7           equ     $FE6F           ; SCRATCH REG.
                      (      drivers.asm):00023         
                      (      drivers.asm):00024         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00025         ;
                      (      drivers.asm):00026         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00027         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00028                         ORG     $DE00
                      (      drivers.asm):00029         
DE00 7EDEBB           (      drivers.asm):00030 [4]     READ            JMP     >DREAD       * DE00    READ      Read a single sector
DE03 7EDED4           (      drivers.asm):00031 [4]     WRITE           JMP     >DWRITE      * DE03    WRITE     Write a single sector
DE06 7EDEED           (      drivers.asm):00032 [4]     VERIFY          JMP     >DVERIFY     * DE06    VERIFY    Verify last sector written
DE09 7EDF1D           (      drivers.asm):00033 [4]     RESTORE         JMP     >DRESTORE    * DE09    RESTORE   Restore head to track #0
DE0C 7EDF33           (      drivers.asm):00034 [4]     DRIVE           JMP     >DDRIVE      * DE0C    DRIVE     Select the specified drive
DE0F 7EDF73           (      drivers.asm):00035 [4]     CHKRDY          JMP     >DCHKRDY     * DE0F    CHKRDY    Check for drive ready
DE12 7EDF74           (      drivers.asm):00036 [4]     QUICK           JMP     >DQUICK      * DE12    QUICK     Quick check for drive ready
DE15 7EDF15           (      drivers.asm):00037 [4]     CINIT           JMP     >DCINIT      * DE15    CINIT     Driver initialize (cold start)
DE18 7EDF19           (      drivers.asm):00038 [4]     WARM            JMP     >DWARM       * DE18    WARM      Driver initialize (warm start)
DE1B 7EDF01           (      drivers.asm):00039 [4]     SEEK            JMP     >DSEEK       * DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00040         
                      (      drivers.asm):00041         
                      (      drivers.asm):00042         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00043         ; Temp Storage Area
                      (      drivers.asm):00044         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00045         
                      (      drivers.asm):00046         
DE1E 00               (      drivers.asm):00047         CURDRV          FCB     $00
DE1F 00               (      drivers.asm):00048         CURDRVTYP       FCB     $00
DE20 00               (      drivers.asm):00049         CURDRVADDRESS   FCB     $00
DE21 0000             (      drivers.asm):00050         CURDRVSLICE     FDB     $0000
                      (      drivers.asm):00051         
DE23 02020202         (      drivers.asm):00052         DRVTYPES        FCB     $02,$02,$02,$02
                      (      drivers.asm):00053                         ;   $00 - INVALID
                      (      drivers.asm):00054                         ;   $01 - Floppy
                      (      drivers.asm):00055                         ;   $02 - IDE
DE27 01010101         (      drivers.asm):00056         DRVADDRESS      FCB     $01,$01,$01,$01
DE2B 0000000000000000 (      drivers.asm):00057         DRVSLICE        FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00058         
                      (      drivers.asm):00059         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00060         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00061         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00062         
                      (      drivers.asm):00063         
                      (      drivers.asm):00064         
                      (      drivers.asm):00065         
                      (      drivers.asm):00066         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00067         ;
                      (      drivers.asm):00068         ;       Monitor entry routine
                      (      drivers.asm):00069         ;_____________________________________________________________________________________________________
DE33 860A             (      drivers.asm):00070 [2]     MONITR          LDA     #$A
DE35 8D15             (      drivers.asm):00071 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00072 [2]                     LDA     #$D
DE39 8D11             (      drivers.asm):00073 [7]                     BSR     VOUTCH              * OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00074 [4]                     JMP     $FC0B               LOCATION OF MONITOR
                      (      drivers.asm):00075         
                      (      drivers.asm):00076         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00077         ;
                      (      drivers.asm):00078         ;       Timer Drivers
                      (      drivers.asm):00079         ;
                      (      drivers.asm):00080         ;       Timers not supported
                      (      drivers.asm):00081         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00082         TMOFF       ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00083         TMON        ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00084         TMINT       ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00085 [5]                     RTS
                      (      drivers.asm):00086         
                      (      drivers.asm):00087         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00088         ;
                      (      drivers.asm):00089         ;       Console Drivers
                      (      drivers.asm):00090         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00091         ;       Terminal init routine
DE3F 3402             (      drivers.asm):00092 [5+1]   TINIT           PSHS    A
                      (      drivers.asm):00093                         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00094                         ;       LDA             #$80            ;
                      (      drivers.asm):00095                         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00096                             ;   LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00097                             ;   STA             UART0           ; save baud rate
                      (      drivers.asm):00098                             ;   LDA             #00                     ;
                      (      drivers.asm):00099                             ;   STA             UART1           ;
                      (      drivers.asm):00100                             ;   LDA             #03                     ;
                      (      drivers.asm):00101                             ;   STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00102                             ;   STA             UART4           ;
DE41 3582             (      drivers.asm):00103 [5+3]                   PULS    PC,A
                      (      drivers.asm):00104         
                      (      drivers.asm):00105         
                      (      drivers.asm):00106         ;       Terminal input routine
                      (      drivers.asm):00107         
DE43 7DDEB9           (      drivers.asm):00108 [7]     VINCH           TST     >TAPPTR         ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00109 [3]                     BEQ     TREDIR          ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00110 [7+5]                   JSR     [TAPPTR]        ; redirect to alternate routine
                      (      drivers.asm):00111         
                      (      drivers.asm):00112         ;       Terminal output routine
                      (      drivers.asm):00113         
DE4C 3402             (      drivers.asm):00114 [5+1]   VOUTCH          PSHS    a
                      (      drivers.asm):00115         !
DE4E B6FE6D           (      drivers.asm):00116 [5]                             LDA             UART5                   ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00117 [2]                             ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00118 [2]                             CMPA    #$00
DE55 27F7             (      drivers.asm):00119 [3]                             BEQ             <                       ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00120 [5+1]                   PULS    A
DE59 B7FE68           (      drivers.asm):00121 [5]                             STA             UART0                   ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00122 [5]                     RTS
                      (      drivers.asm):00123         
                      (      drivers.asm):00124         
                      (      drivers.asm):00125         ;       Terminal status check routine
                      (      drivers.asm):00126         
DE5D 3402             (      drivers.asm):00127 [5+1]   STAT:           PSHS    A
DE5F B6FE6D           (      drivers.asm):00128 [5]                     LDA         UART5                       ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00129 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00130 [2]                             CMPA    #$00
DE66 3582             (      drivers.asm):00131 [5+3]                           PULS    PC,A
                      (      drivers.asm):00132         
                      (      drivers.asm):00133         
                      (      drivers.asm):00134         ;       Monitor terminal input character with echo
                      (      drivers.asm):00135         
DE68 BDDE6D           (      drivers.asm):00136 [8]     TREDIR          JSR     INCHNE
DE6B 20DF             (      drivers.asm):00137 [3]                     BRA     VOUTCH
                      (      drivers.asm):00138         
                      (      drivers.asm):00139         
                      (      drivers.asm):00140         ;       Monitor terminal input character without echo
                      (      drivers.asm):00141         
DE6D                  (      drivers.asm):00142         INCHNE
DE6D B6FE6D           (      drivers.asm):00143 [5]                             LDA         UART5                       ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00144 [2]                             ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00145 [2]                             CMPA    #$00
DE74 27F7             (      drivers.asm):00146 [3]                             BEQ         INCHNE              ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00147 [5]                             LDA         UART0                       ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00148 [5]                             RTS
                      (      drivers.asm):00149         
                      (      drivers.asm):00150         
                      (      drivers.asm):00151         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00152         ;
                      (      drivers.asm):00153         ;       Interupt handler
                      (      drivers.asm):00154         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00155         IHNDLR          ;leau    <IRQLL-4,pc         get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00156                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00157                         fcb     IRQLL-*-5
DE7D EE44             (      drivers.asm):00158 [5+1]   CHKNXT          ldu     4,u                 get a link
DE7F 270C             (      drivers.asm):00159 [3]                     beq     IHDONE              end of list
                      (      drivers.asm):00160         
DE81 A6D4             (      drivers.asm):00161 [4+3]                   lda     [,u]                get status from device
DE83 A546             (      drivers.asm):00162 [4+1]                   bita    6,u                 did it interrupt?
DE85 27F6             (      drivers.asm):00163 [3]                     beq     CHKNXT              no - check next
                      (      drivers.asm):00164         
DE87 10AEC4           (      drivers.asm):00165 [6+0]                   ldy     ,u                  yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00166 [3+4]                   jmp     [2,u]               go to device ISR
                      (      drivers.asm):00167         
DE8D 3B               (      drivers.asm):00168 [6+?]   IHDONE          rti                         return from interrupt
                      (      drivers.asm):00169         
                      (      drivers.asm):00170         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00171         ;       add a device to IRQ handler table
                      (      drivers.asm):00172         ;_____________________________________________________________________________________________________
DE8E 3470             (      drivers.asm):00173 [5+6]   ADDDEV          pshs    x,y,u
DE90 8D14             (      drivers.asm):00174 [7]                     bsr     SRCHLST             find link in chain
DE92 2704             (      drivers.asm):00175 [3]                     beq     DEVARE              already exists - exit
DE94 EF04             (      drivers.asm):00176 [5+1]                   stu     4,x                 set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00177 [5+1]                   stx     4,y                 link this one into prev blk
DE98 35F0             (      drivers.asm):00178 [5+8]   DEVARE          puls    pc,X,Y,U
                      (      drivers.asm):00179         
                      (      drivers.asm):00180         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00181         ;       delete a device from IRQ handler table
                      (      drivers.asm):00182         ;_____________________________________________________________________________________________________
DE9A 3470             (      drivers.asm):00183 [5+6]   DELDEV          pshs    x,y,u
DE9C 8D08             (      drivers.asm):00184 [7]                     bsr     SRCHLST             find link in chain
DE9E 2604             (      drivers.asm):00185 [3]                     bne     NODEV               not found - exit
DEA0 AE04             (      drivers.asm):00186 [5+1]                   ldx     4,x                 get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00187 [5+1]                   stx     4,u                 set in prev block
DEA4 35F0             (      drivers.asm):00188 [5+8]   NODEV           puls    pc,X,Y,U
                      (      drivers.asm):00189         
                      (      drivers.asm):00190         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00191         ;       search a linked list
                      (      drivers.asm):00192         ;
                      (      drivers.asm):00193         ;               entry: X = address of ISR control block
                      (      drivers.asm):00194         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00195         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00196         ;
                      (      drivers.asm):00197         ;               format of ISR control block:
                      (      drivers.asm):00198         ;
                      (      drivers.asm):00199         ;                       offset  description
                      (      drivers.asm):00200         ;                         0     address of I/O device
                      (      drivers.asm):00201         ;                         2     address of ISR
                      (      drivers.asm):00202         ;                         4     link to next ISR control block
                      (      drivers.asm):00203         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00204         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00205         SRCHLST         ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00206                         fcb     $33,$8c             Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00207                         fcb     IRQLL-*-5
DEA9 31C4             (      drivers.asm):00208 [4+0]   SRCHLP          leay    ,u
DEAB AC44             (      drivers.asm):00209 [6+1]                   cmpx    4,u                 X = link?
DEAD 2706             (      drivers.asm):00210 [3]                     beq     FNDENT              yes - return pointer in U
                      (      drivers.asm):00211         
DEAF EE44             (      drivers.asm):00212 [5+1]                   ldu     4,u                 no - get link in U
DEB1 26F6             (      drivers.asm):00213 [3]                     bne     SRCHLP              not end of chain - loop
DEB3 1CFB             (      drivers.asm):00214 [3]                     andcc   #$FB                clear Z flag in CC
                      (      drivers.asm):00215         
DEB5 39               (      drivers.asm):00216 [5]     FNDENT          rts                         return - not found
                      (      drivers.asm):00217         
                      (      drivers.asm):00218         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00219         
                      (      drivers.asm):00220         
DEB6 0000             (      drivers.asm):00221         IRQLL           fdb     0                   pointer to first entry in the table
DEB8 01               (      drivers.asm):00222                         fcb     1
                      (      drivers.asm):00223         
DEB9 0000             (      drivers.asm):00224         TAPPTR          fdb     0                   no terminal input redirection
                      (      drivers.asm):00225         
                      (      drivers.asm):00226         
                      (      drivers.asm):00227         
                      (      drivers.asm):00228         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00229         ;
                      (      drivers.asm):00230         ;       Disk Driver Dispatchers
                      (      drivers.asm):00231         ;
                      (      drivers.asm):00232         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00233         ;       driver for the device
                      (      drivers.asm):00234         ;
                      (      drivers.asm):00235         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00236         
                      (      drivers.asm):00237         
                      (      drivers.asm):00238         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00239         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00240         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00241         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00242         ;
                      (      drivers.asm):00243         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00244         ;                   (A) = Track Number
                      (      drivers.asm):00245         ;                   (B) = Sector Number
                      (      drivers.asm):00246         ;
                      (      drivers.asm):00247         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00248         ;                   (A) May be destroyed
                      (      drivers.asm):00249         ;                   (B) = Error condition
                      (      drivers.asm):00250         ;                   (Z) = 1 if no error
                      (      drivers.asm):00251         ;                       = 0 if an error
                      (      drivers.asm):00252         ;_____________________________________________________________________________________________________
DEBB                  (      drivers.asm):00253         DREAD
DEBB 3402             (      drivers.asm):00254 [5+1]                   PSHS     A
DEBD B6DE1F           (      drivers.asm):00255 [5]                     LDA     CURDRVTYP
DEC0 8101             (      drivers.asm):00256 [2]                     CMPA    #$01
DEC2 2709             (      drivers.asm):00257 [3]                     BEQ     READFLOPPY
DEC4 8102             (      drivers.asm):00258 [2]                     CMPA    #$02
DEC6 2707             (      drivers.asm):00259 [3]                     BEQ     READIDE
DEC8 C61F             (      drivers.asm):00260 [2]     READERR:        LDB     #$1F
DECA 57               (      drivers.asm):00261 [2]                     ASRB
DECB 3582             (      drivers.asm):00262 [5+3]                   PULS    PC,A
DECD                  (      drivers.asm):00263         READFLOPPY:
DECD 20F9             (      drivers.asm):00264 [3]                     BRA     READERR
DECF                  (      drivers.asm):00265         READIDE:
DECF 3502             (      drivers.asm):00266 [5+1]                   PULS    A
DED1 7EE085           (      drivers.asm):00267 [4]                     JMP     IDE_READ_SECTOR
                      (      drivers.asm):00268         
                      (      drivers.asm):00269         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00270         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00271         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00272         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00273         ;           in length.
                      (      drivers.asm):00274         ;
                      (      drivers.asm):00275         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00276         ;                         to be written to disk
                      (      drivers.asm):00277         ;                   (A) = Track Number
                      (      drivers.asm):00278         ;                   (B) = Sector Number
                      (      drivers.asm):00279         ;
                      (      drivers.asm):00280         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00281         ;                   (A) May be destroyed
                      (      drivers.asm):00282         ;                   (B) = Error condition
                      (      drivers.asm):00283         ;                   (Z) = 1 if no error
                      (      drivers.asm):00284         ;                       = 0 if an error
                      (      drivers.asm):00285         ;_____________________________________________________________________________________________________
DED4                  (      drivers.asm):00286         DWRITE
DED4 3402             (      drivers.asm):00287 [5+1]                   PSHS     A
DED6 B6DE1F           (      drivers.asm):00288 [5]                     LDA     CURDRVTYP
DED9 8101             (      drivers.asm):00289 [2]                     CMPA    #$01
DEDB 2709             (      drivers.asm):00290 [3]                     BEQ     WRITEFLOPPY
DEDD 8102             (      drivers.asm):00291 [2]                     CMPA    #$02
DEDF 2707             (      drivers.asm):00292 [3]                     BEQ     WRITEIDE
DEE1 C61F             (      drivers.asm):00293 [2]     WRITEERR:       LDB     #$1F
DEE3 57               (      drivers.asm):00294 [2]                     ASRB
DEE4 3582             (      drivers.asm):00295 [5+3]                   PULS    PC,A
DEE6                  (      drivers.asm):00296         WRITEFLOPPY:
DEE6 20F9             (      drivers.asm):00297 [3]                     BRA     WRITEERR
DEE8                  (      drivers.asm):00298         WRITEIDE:
DEE8 3502             (      drivers.asm):00299 [5+1]                   PULS    A
DEEA 7EE106           (      drivers.asm):00300 [4]                     JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00301         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00302         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00303         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00304         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00305         ;           single sector operation.
                      (      drivers.asm):00306         ;
                      (      drivers.asm):00307         ;           ENTRY - No entry parameters
                      (      drivers.asm):00308         ;
                      (      drivers.asm):00309         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00310         ;                   (A) May be destroyed
                      (      drivers.asm):00311         ;                   (B) = Error condition
                      (      drivers.asm):00312         ;                   (Z) = 1 if no error
                      (      drivers.asm):00313         ;                       = 0 if an error
                      (      drivers.asm):00314         ;_____________________________________________________________________________________________________
DEED                  (      drivers.asm):00315         DVERIFY
DEED B6DE1F           (      drivers.asm):00316 [5]                     LDA     CURDRVTYP
DEF0 8101             (      drivers.asm):00317 [2]                     CMPA    #$01
DEF2 2708             (      drivers.asm):00318 [3]                     BEQ     VERIFYFLOPPY
DEF4 8102             (      drivers.asm):00319 [2]                     CMPA    #$02
DEF6 2706             (      drivers.asm):00320 [3]                     BEQ     VERIFYIDE
DEF8 C61F             (      drivers.asm):00321 [2]     VERIFYERR:      LDB     #$1F
DEFA 57               (      drivers.asm):00322 [2]                     ASRB
DEFB 39               (      drivers.asm):00323 [5]                     RTS
DEFC                  (      drivers.asm):00324         VERIFYFLOPPY:
DEFC 20FA             (      drivers.asm):00325 [3]                     BRA     VERIFYERR
DEFE                  (      drivers.asm):00326         VERIFYIDE:
DEFE C600             (      drivers.asm):00327 [2]                     LDB     #$00
DF00 39               (      drivers.asm):00328 [5]                     RTS
                      (      drivers.asm):00329         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00330         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00331         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00332         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00333         ;
                      (      drivers.asm):00334         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00335         ;                   (B) = Sector Number
                      (      drivers.asm):00336         ;
                      (      drivers.asm):00337         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00338         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00339         ;                   (B) = Error condition
                      (      drivers.asm):00340         ;                   (Z) = 1 if no error
                      (      drivers.asm):00341         ;                       = 0 if an error
                      (      drivers.asm):00342         ;_____________________________________________________________________________________________________
DF01                  (      drivers.asm):00343         DSEEK
DF01 B6DE1F           (      drivers.asm):00344 [5]                     LDA     CURDRVTYP
DF04 8101             (      drivers.asm):00345 [2]                     CMPA    #$01
DF06 2708             (      drivers.asm):00346 [3]                     BEQ     SEEKFLOPPY
DF08 8102             (      drivers.asm):00347 [2]                     CMPA    #$02
DF0A 2706             (      drivers.asm):00348 [3]                     BEQ     SEEKIDE
DF0C C61F             (      drivers.asm):00349 [2]     SEEKERR:        LDB     #$1F
DF0E 57               (      drivers.asm):00350 [2]                     ASRB
DF0F 39               (      drivers.asm):00351 [5]                     RTS
DF10                  (      drivers.asm):00352         SEEKFLOPPY:
DF10 20FA             (      drivers.asm):00353 [3]                     BRA     SEEKERR
DF12                  (      drivers.asm):00354         SEEKIDE:
DF12 C600             (      drivers.asm):00355 [2]                     LDB     #$00
DF14 39               (      drivers.asm):00356 [5]                     RTS
                      (      drivers.asm):00357         
                      (      drivers.asm):00358         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00359         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00360         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00361         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00362         ;           can be done here.
                      (      drivers.asm):00363         ;
                      (      drivers.asm):00364         ;           ENTRY - No parameters
                      (      drivers.asm):00365         ;
                      (      drivers.asm):00366         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00367         ;_____________________________________________________________________________________________________
DF15                  (      drivers.asm):00368         DCINIT
DF15 BDDF7A           (      drivers.asm):00369 [8]                     JSR     PPIDE_INIT
DF18 39               (      drivers.asm):00370 [5]                     RTS
                      (      drivers.asm):00371         
                      (      drivers.asm):00372         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00373         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00374         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00375         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00376         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00377         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00378         ;           reset such that the controller would not function properly
                      (      drivers.asm):00379         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00380         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00381         ;
                      (      drivers.asm):00382         ;           ENTRY - No parameters
                      (      drivers.asm):00383         ;
                      (      drivers.asm):00384         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00385         ;_____________________________________________________________________________________________________
DF19                  (      drivers.asm):00386         DWARM
DF19 BDE17A           (      drivers.asm):00387 [8]                     JSR     PPIDE_RESET
DF1C 39               (      drivers.asm):00388 [5]                     RTS
                      (      drivers.asm):00389         
                      (      drivers.asm):00390         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00391         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00392         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00393         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00394         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00395         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00396         ;           operation.
                      (      drivers.asm):00397         ;
                      (      drivers.asm):00398         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00399         ;
                      (      drivers.asm):00400         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00401         ;                   (A) May be destroyed
                      (      drivers.asm):00402         ;                   (B) = Error condition
                      (      drivers.asm):00403         ;                   (Z) = 1 if no error
                      (      drivers.asm):00404         ;                       = 0 if an error
                      (      drivers.asm):00405         ;_____________________________________________________________________________________________________
DF1D                  (      drivers.asm):00406         DRESTORE
DF1D 8D14             (      drivers.asm):00407 [7]                     BSR     DDRIVE
DF1F B6DE1F           (      drivers.asm):00408 [5]                     LDA     CURDRVTYP
DF22 8101             (      drivers.asm):00409 [2]                     CMPA    #$01
DF24 2708             (      drivers.asm):00410 [3]                     BEQ     RESTOREFLOPPY
DF26 8102             (      drivers.asm):00411 [2]                     CMPA    #$02
DF28 2706             (      drivers.asm):00412 [3]                     BEQ     RESTOREIDE
DF2A C61F             (      drivers.asm):00413 [2]     RESTOREERR:     LDB     #$1F
DF2C 57               (      drivers.asm):00414 [2]                     ASRB
DF2D 39               (      drivers.asm):00415 [5]                     RTS
DF2E                  (      drivers.asm):00416         RESTOREFLOPPY:
DF2E 20FA             (      drivers.asm):00417 [3]                     BRA     RESTOREERR
DF30                  (      drivers.asm):00418         RESTOREIDE:
DF30 C600             (      drivers.asm):00419 [2]                     LDB     #$00
DF32 39               (      drivers.asm):00420 [5]                     RTS
                      (      drivers.asm):00421         
                      (      drivers.asm):00422         
                      (      drivers.asm):00423         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00424         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00425         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00426         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00427         ;
                      (      drivers.asm):00428         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00429         ;
                      (      drivers.asm):00430         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00431         ;                   (A) May be destroyed
                      (      drivers.asm):00432         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00433         ;                       = Error condition otherwise
                      (      drivers.asm):00434         ;                   (Z) = 1 if no error
                      (      drivers.asm):00435         ;                       = 0 if an error
                      (      drivers.asm):00436         ;                   (C) = 0 if no error
                      (      drivers.asm):00437         ;                       = 1 if an error
                      (      drivers.asm):00438         ;_____________________________________________________________________________________________________
DF33                  (      drivers.asm):00439         DDRIVE:
DF33 A603             (      drivers.asm):00440 [4+1]                   LDA     3,X             ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF35 8104             (      drivers.asm):00441 [2]                     CMPA    #4
DF37 2504             (      drivers.asm):00442 [3]                     BCS     DRIVE1
DF39                  (      drivers.asm):00443         DRIVEERR:
DF39 C61F             (      drivers.asm):00444 [2]                     LDB     #$1F
DF3B 57               (      drivers.asm):00445 [2]                     ASRB
DF3C 39               (      drivers.asm):00446 [5]                     RTS
                      (      drivers.asm):00447         
DF3D 8EDE23           (      drivers.asm):00448 [3]     DRIVE1          LDX     #DRVTYPES
DF40 3086             (      drivers.asm):00449 [4+1]                   LEAX    A,X             ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF42 E684             (      drivers.asm):00450 [4+0]                   LDB     ,X
DF44 C101             (      drivers.asm):00451 [2]                     CMPB    #$01            ; IF $01, OK
DF46 2706             (      drivers.asm):00452 [3]                     BEQ     >
DF48 C102             (      drivers.asm):00453 [2]                     CMPB    #$02            ; IF $02, OK
DF4A 2702             (      drivers.asm):00454 [3]                     BEQ     >
DF4C 20EB             (      drivers.asm):00455 [3]                     BRA     DRIVEERR
DF4E F7DE1F           (      drivers.asm):00456 [5]     !               STB     CURDRVTYP
DF51 B7DE1E           (      drivers.asm):00457 [5]                     STA     CURDRV
DF54 8EDE27           (      drivers.asm):00458 [3]                     LDX     #DRVADDRESS
DF57 3086             (      drivers.asm):00459 [4+1]                   LEAX    A,X             ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DF59 E684             (      drivers.asm):00460 [4+0]                   LDB     ,X
DF5B F7DE20           (      drivers.asm):00461 [5]                     STB     CURDRVADDRESS
DF5E 8EDE2B           (      drivers.asm):00462 [3]                     LDX     #DRVSLICE
DF61 48               (      drivers.asm):00463 [2]                     LSLA                    ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DF62 3086             (      drivers.asm):00464 [4+1]                   LEAX    A,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF64 E684             (      drivers.asm):00465 [4+0]                   LDB     ,X
DF66 F7DE21           (      drivers.asm):00466 [5]                     STB     CURDRVSLICE
DF69 3001             (      drivers.asm):00467 [4+1]                   LEAX    1,X             ; GET DRIVE SLICE FOR SELECTED DRIVE
DF6B E684             (      drivers.asm):00468 [4+0]                   LDB     ,X
DF6D F7DE22           (      drivers.asm):00469 [5]                     STB     CURDRVSLICE+1
DF70 C600             (      drivers.asm):00470 [2]                     LDB     #$00
DF72 39               (      drivers.asm):00471 [5]                     RTS
                      (      drivers.asm):00472         
                      (      drivers.asm):00473         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00474         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00475         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00476         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00477         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00478         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00479         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00480         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00481         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00482         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00483         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00484         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00485         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00486         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00487         ;
                      (      drivers.asm):00488         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00489         ;
                      (      drivers.asm):00490         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00491         ;                   (A) May be destroyed
                      (      drivers.asm):00492         ;                   (B) = Error condition
                      (      drivers.asm):00493         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00494         ;                       = 0 if not ready
                      (      drivers.asm):00495         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00496         ;                       = 1 if not ready
                      (      drivers.asm):00497         ;_____________________________________________________________________________________________________
DF73                  (      drivers.asm):00498         DCHKRDY
DF73 39               (      drivers.asm):00499 [5]                 RTS
                      (      drivers.asm):00500         
                      (      drivers.asm):00501         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00502         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00503         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00504         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00505         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00506         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00507         ;_____________________________________________________________________________________________________
DF74                  (      drivers.asm):00508         DQUICK
DF74 39               (      drivers.asm):00509 [5]                 RTS
                      (      drivers.asm):00510         
                      (      drivers.asm):00511         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00512                         INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       =       $FE60           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         =       PPIDE_PPI+0     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         =       PPIDE_PPI+1     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      =       PPIDE_PPI+2     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       =       PPIDE_PPI+3     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   =       $01             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   =       $02             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   =       $04             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  =       $08             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  =       $10             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   =       $20             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   =       $40             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  =       $80             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA              =       PPIDE_CS0_LINE
     0009             (   flexidedrv.asm):00028         PPIDE_ERR               =       PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   =       PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (   flexidedrv.asm):00030         PPIDE_LBALOW    =       PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (   flexidedrv.asm):00031         PPIDE_LBAMID    =       PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (   flexidedrv.asm):00032         PPIDE_LBAHI             =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (   flexidedrv.asm):00033         PPIDE_DEVICE    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (   flexidedrv.asm):00034         PPIDE_COMMAND   =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (   flexidedrv.asm):00035         PPIDE_STATUS    =       PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (   flexidedrv.asm):00036         PPIDE_CONTROL   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (   flexidedrv.asm):00037         PPIDE_ASTATUS   =       PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL =       $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  =       $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE =       $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  =       $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    =       $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN=     $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP=       $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   =       %10010010       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   =       %10000000       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DF75 00               (   flexidedrv.asm):00054         PPIDEINDEX:             .BYTE   $00
DF76 0000             (   flexidedrv.asm):00055         PPIDETIMEOUT:   .BYTE   $00,$00
DF78 0000             (   flexidedrv.asm):00056         PPIDEWORKVAR:   .BYTE   $00,$00
                      (   flexidedrv.asm):00057         
                      (   flexidedrv.asm):00058         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00059         ;
                      (   flexidedrv.asm):00060         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00061         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00062         ;
DF7A                  (   flexidedrv.asm):00063         PPIDE_INIT:
DF7A BDCEB1           (   flexidedrv.asm):00064 [8]                 JSR     >PCRLF         ; AND CRLF
DF7D BDCEB1           (   flexidedrv.asm):00065 [8]                 JSR     >PCRLF         ; AND CRLF
DF80 8EE312           (   flexidedrv.asm):00066 [3]             LDX     #MESSAGE1
DF83 BDCE7B           (   flexidedrv.asm):00067 [8]             JSR     >PDATA1         ; DO PROMPT
DF86 BDCEB1           (   flexidedrv.asm):00068 [8]             JSR     >PCRLF         ; AND CRLF
DF89 BDE077           (   flexidedrv.asm):00069 [8]                 JSR     IDE_PPIDETECT       ; TEST FOR PPI HARDWARE
DF8C 261D             (   flexidedrv.asm):00070 [3]             BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00071         ;
DF8E 8EE31A           (   flexidedrv.asm):00072 [3]             LDX     #MESSAGE2
DF91 BDCE7B           (   flexidedrv.asm):00073 [8]             JSR     >PDATA1         ; DO PROMPT
DF94 CCFE60           (   flexidedrv.asm):00074 [3]                 LDD     #PPIDE_PPI      ; GET BASE PORT
DF97 FDDF78           (   flexidedrv.asm):00075 [6]                     STD     PPIDEWORKVAR
DF9A 8EDF78           (   flexidedrv.asm):00076 [3]                     LDX     #PPIDEWORKVAR
DF9D BDCFCC           (   flexidedrv.asm):00077 [8]                 JSR     OUTADR                      ; PRINT BASE PORT
                      (   flexidedrv.asm):00078         ;
DFA0 BDE17A           (   flexidedrv.asm):00079 [8]                 JSR     PPIDE_RESET         ; RESET THE BUS
DFA3 BDDFD1           (   flexidedrv.asm):00080 [8]                 JSR     PPIDE_PROBE         ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
DFA6 2503             (   flexidedrv.asm):00081 [3]                 BCS         IDE_ABORT
DFA8 7EDFB4           (   flexidedrv.asm):00082 [4]                 JMP         IDE_PRINT_INFO
DFAB                  (   flexidedrv.asm):00083         IDE_ABORT:
DFAB 8EE321           (   flexidedrv.asm):00084 [3]             LDX     #MESSAGE3
DFAE BDCE7B           (   flexidedrv.asm):00085 [8]             JSR     >PDATA1         ; DO PROMPT
DFB1 7EDFCD           (   flexidedrv.asm):00086 [4]                 JMP         IDE_INITA
DFB4                  (   flexidedrv.asm):00087         IDE_PRINT_INFO:
DFB4 BDCEB1           (   flexidedrv.asm):00088 [8]                 JSR     >PCRLF         ; AND CRLF
DFB7 8EE32E           (   flexidedrv.asm):00089 [3]             LDX     #MESSAGE4
DFBA BDCE7B           (   flexidedrv.asm):00090 [8]             JSR     >PDATA1         ; DO PROMPT
DFBD 8600             (   flexidedrv.asm):00091 [2]                 LDA     #$00
DFBF BDE01C           (   flexidedrv.asm):00092 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
DFC2 8EE33F           (   flexidedrv.asm):00093 [3]             LDX     #MESSAGE5
DFC5 BDCE7B           (   flexidedrv.asm):00094 [8]             JSR     >PDATA1         ; DO PROMPT
DFC8 8601             (   flexidedrv.asm):00095 [2]                 LDA     #$01
DFCA BDE01C           (   flexidedrv.asm):00096 [8]                 JSR     IDE_READ_INFO       ; GET DRIVE INFO, ABORT IF ERROR
DFCD                  (   flexidedrv.asm):00097         IDE_INITA:
DFCD BDCEB1           (   flexidedrv.asm):00098 [8]                 JSR     >PCRLF         ; AND CRLF
DFD0 39               (   flexidedrv.asm):00099 [5]                 RTS                                 ; DONE
                      (   flexidedrv.asm):00100         ;
                      (   flexidedrv.asm):00101         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00102         ;
                      (   flexidedrv.asm):00103         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00104         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00105         ;
DFD1                  (   flexidedrv.asm):00106         PPIDE_PROBE:
                      (   flexidedrv.asm):00107         ;
                      (   flexidedrv.asm):00108                 ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00109                 ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00110                 ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00111                 ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00112                 ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00113                 ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00114                 ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00115                 ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00116         
DFD1 8600             (   flexidedrv.asm):00117 [2]             LDA     #$00
DFD3 B7FE60           (   flexidedrv.asm):00118 [5]             STA     PPIDELO                 ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00119         
DFD6 BDE1A5           (   flexidedrv.asm):00120 [8]             JSR         IDE_WAIT_NOT_BUSY   ; WAIT FOR BUSY TO CLEAR
DFD9 253E             (   flexidedrv.asm):00121 [3]             BCS     PPIDE_PROBE_FAIL        ; IF TIMEOUT, REPORT NO IDE PRESENT
DFDB 860F             (   flexidedrv.asm):00122 [2]             LDA         #PPIDE_STATUS               ; GET STATUS
DFDD BDE2A1           (   flexidedrv.asm):00123 [8]             JSR         IDE_READ
DFE0 1F18             (   flexidedrv.asm):00124 [6]         TFR     X,A
DFE2 8440             (   flexidedrv.asm):00125 [2]             ANDA    #%01000000
DFE4 8100             (   flexidedrv.asm):00126 [2]             CMPA    #$00
DFE6 2731             (   flexidedrv.asm):00127 [3]             BEQ     PPIDE_PROBE_FAIL        ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00128         
                      (   flexidedrv.asm):00129                 ; CHECK SIGNATURE
DFE8 860A             (   flexidedrv.asm):00130 [2]             LDA         #PPIDE_SEC_CNT
DFEA BDE2A1           (   flexidedrv.asm):00131 [8]             JSR         IDE_READ
DFED 1F18             (   flexidedrv.asm):00132 [6]         TFR     X,A
DFEF 8101             (   flexidedrv.asm):00133 [2]             CMPA    #$01
DFF1 2626             (   flexidedrv.asm):00134 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
DFF3 860B             (   flexidedrv.asm):00135 [2]             LDA         #PPIDE_LBALOW
DFF5 BDE2A1           (   flexidedrv.asm):00136 [8]             JSR         IDE_READ
DFF8 1F18             (   flexidedrv.asm):00137 [6]         TFR     X,A
DFFA 8101             (   flexidedrv.asm):00138 [2]             CMPA    #$01
DFFC 261B             (   flexidedrv.asm):00139 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '01' THEN REPORT NO IDE PRESENT
DFFE 860C             (   flexidedrv.asm):00140 [2]             LDA         #PPIDE_LBAMID
E000 BDE2A1           (   flexidedrv.asm):00141 [8]             JSR         IDE_READ
E003 1F18             (   flexidedrv.asm):00142 [6]         TFR     X,A
E005 8100             (   flexidedrv.asm):00143 [2]             CMPA    #$00
E007 2610             (   flexidedrv.asm):00144 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E009 860D             (   flexidedrv.asm):00145 [2]             LDA         #PPIDE_LBAHI
E00B BDE2A1           (   flexidedrv.asm):00146 [8]             JSR         IDE_READ
E00E 1F18             (   flexidedrv.asm):00147 [6]         TFR     X,A
E010 8100             (   flexidedrv.asm):00148 [2]             CMPA    #$00
E012 2605             (   flexidedrv.asm):00149 [3]             BNE     PPIDE_PROBE_FAIL        ; IF NOT '00' THEN REPORT NO IDE PRESENT
E014 1CFE             (   flexidedrv.asm):00150 [3]             CLC
E016 7EE01B           (   flexidedrv.asm):00151 [4]             JMP     PPIDE_PROBE_SUCCESS
E019                  (   flexidedrv.asm):00152         PPIDE_PROBE_FAIL:
E019 1A01             (   flexidedrv.asm):00153 [3]             SEC
E01B                  (   flexidedrv.asm):00154         PPIDE_PROBE_SUCCESS:
E01B 39               (   flexidedrv.asm):00155 [5]             RTS                                     ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00156         
                      (   flexidedrv.asm):00157         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00158         ;*
                      (   flexidedrv.asm):00159         ;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00160         ;*      CARRY SET ON ERROR
                      (   flexidedrv.asm):00161         ;*      A=MST/SLV
                      (   flexidedrv.asm):00162         ;*____________________________________________________________________________________________________
E01C                  (   flexidedrv.asm):00163         IDE_READ_INFO:
                      (   flexidedrv.asm):00164                         ; SET DRIVE BIT
E01C 8401             (   flexidedrv.asm):00165 [2]                     ANDA    #$01                    ; ONLY WANT THE 1 BIT (MST/SLV)
E01E 48               (   flexidedrv.asm):00166 [2]                     ASLA                            ; SHIFT 4
E01F 48               (   flexidedrv.asm):00167 [2]                     ASLA                            ;
E020 48               (   flexidedrv.asm):00168 [2]                     ASLA                            ;
E021 48               (   flexidedrv.asm):00169 [2]                     ASLA                            ;
E022 8AE0             (   flexidedrv.asm):00170 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E024 1F89             (   flexidedrv.asm):00171 [6]                     TFR     A,B
E026 8600             (   flexidedrv.asm):00172 [2]             LDA     #$00
E028 1F01             (   flexidedrv.asm):00173 [6]             TFR     D,X
E02A 860E             (   flexidedrv.asm):00174 [2]                     LDA         #PPIDE_DEVICE
E02C BDE2C6           (   flexidedrv.asm):00175 [8]                     JSR         IDE_WRITE
E02F BDE1A5           (   flexidedrv.asm):00176 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E032 2531             (   flexidedrv.asm):00177 [3]                     BCS         IDE_READ_INFO_ABORT
E034 860F             (   flexidedrv.asm):00178 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E036 8E00EC           (   flexidedrv.asm):00179 [3]                     LDX         #PPIDE_CMD_ID
E039 BDE2C6           (   flexidedrv.asm):00180 [8]                     JSR         IDE_WRITE           ;ASK THE DRIVE TO READ IT
E03C BDE1CE           (   flexidedrv.asm):00181 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E03F 2524             (   flexidedrv.asm):00182 [3]                     BCS         IDE_READ_INFO_ABORT
E041 BDE1FE           (   flexidedrv.asm):00183 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E044 8EE350           (   flexidedrv.asm):00184 [3]             LDX     #MESSAGE6
E047 BDCE7B           (   flexidedrv.asm):00185 [8]             JSR     >PDATA1
E04A B6E3D5           (   flexidedrv.asm):00186 [5]                     LDA     HSTBUF+123
E04D BDE304           (   flexidedrv.asm):00187 [8]                     JSR     OUTHEXA
E050 B6E3D4           (   flexidedrv.asm):00188 [5]                     LDA     HSTBUF+122
E053 BDE304           (   flexidedrv.asm):00189 [8]                     JSR     OUTHEXA
E056 B6E3D3           (   flexidedrv.asm):00190 [5]                     LDA     HSTBUF+121
E059 BDE304           (   flexidedrv.asm):00191 [8]                     JSR     OUTHEXA
E05C B6E3D2           (   flexidedrv.asm):00192 [5]                     LDA     HSTBUF+120
E05F BDE304           (   flexidedrv.asm):00193 [8]                     JSR     OUTHEXA
E062 7EE071           (   flexidedrv.asm):00194 [4]                     JMP     IDE_READ_INFO_OK
E065                  (   flexidedrv.asm):00195         IDE_READ_INFO_ABORT:
E065 8EE321           (   flexidedrv.asm):00196 [3]             LDX     #MESSAGE3
E068 BDCE7B           (   flexidedrv.asm):00197 [8]             JSR     >PDATA1         DO PROMPT
E06B BDCEB1           (   flexidedrv.asm):00198 [8]                     JSR     >PCRLF         AND CRLF
E06E 1A01             (   flexidedrv.asm):00199 [3]                     SEC
E070 39               (   flexidedrv.asm):00200 [5]                     RTS                             ;
E071                  (   flexidedrv.asm):00201         IDE_READ_INFO_OK:
E071 BDCEB1           (   flexidedrv.asm):00202 [8]                     JSR     >PCRLF         AND CRLF
E074 1CFE             (   flexidedrv.asm):00203 [3]                     CLC
E076 39               (   flexidedrv.asm):00204 [5]                     RTS
                      (   flexidedrv.asm):00205         
                      (   flexidedrv.asm):00206         
                      (   flexidedrv.asm):00207         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00208         ;
                      (   flexidedrv.asm):00209         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00210         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00211         ;
E077                  (   flexidedrv.asm):00212         IDE_PPIDETECT:
                      (   flexidedrv.asm):00213         ;
                      (   flexidedrv.asm):00214                 ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00215                 ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00216                 ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00217                 ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00218                 ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00219                 ; INTERFERE WITH THE VALUE BEING READ.
E077 BDE2F6           (   flexidedrv.asm):00220 [8]             JSR         SET_PPI_WR
                      (   flexidedrv.asm):00221         ;
E07A 8600             (   flexidedrv.asm):00222 [2]             LDA     #$00                    ; VALUE ZERO
E07C B7FE60           (   flexidedrv.asm):00223 [5]             STA         PPIDELO                     ; PUSH VALUE TO PORT
E07F B6FE60           (   flexidedrv.asm):00224 [5]             LDA         PPIDELO                     ; GET PORT VALUE
E082 8100             (   flexidedrv.asm):00225 [2]         CMPA    #$00
E084 39               (   flexidedrv.asm):00226 [5]             RTS                             ; AND RETURN
                      (   flexidedrv.asm):00227         ;
                      (   flexidedrv.asm):00228         
                      (   flexidedrv.asm):00229         
                      (   flexidedrv.asm):00230         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00231         ;*
                      (   flexidedrv.asm):00232         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00233         ;*
                      (   flexidedrv.asm):00234         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00235         ;                   (A) = Track Number
                      (   flexidedrv.asm):00236         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00237         ;
                      (   flexidedrv.asm):00238         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00239         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00240         ;                   (B) = Error condition
                      (   flexidedrv.asm):00241         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00242         ;                       = 0 if an error
                      (   flexidedrv.asm):00243         ;*____________________________________________________________________________________________________
E085                  (   flexidedrv.asm):00244         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00245                 ;       PRTDBG "IDE READ SECTOR$"
E085 5A               (   flexidedrv.asm):00246 [2]                     DECB                                                    ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
E086 B7E359           (   flexidedrv.asm):00247 [5]                     STA     PPIDETMP                                ; USING 1 BASED SECTOR COUNTING
E089 F0E359           (   flexidedrv.asm):00248 [5]                     SUBB    PPIDETMP                                ;
E08C 2401             (   flexidedrv.asm):00249 [3]                     BCC     >                                               ;
E08E 4A               (   flexidedrv.asm):00250 [2]                     DECA                                                    ;
                      (   flexidedrv.asm):00251         !                                                                               ;
E08F 3410             (   flexidedrv.asm):00252 [5+2]           PSHS    X
E091 F7E359           (   flexidedrv.asm):00253 [5]                     STB     PPIDETMP                ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E094 BDE0B8           (   flexidedrv.asm):00254 [8]                     JSR     IDE_READ_RAW_SECTOR
E097 3510             (   flexidedrv.asm):00255 [5+2]           PULS    X
E099 2619             (   flexidedrv.asm):00256 [3]             BNE     IDE_READ_SECTOR_ERROR
E09B B6E359           (   flexidedrv.asm):00257 [5]             LDA     PPIDETMP
E09E 8401             (   flexidedrv.asm):00258 [2]             ANDA    #$01
E0A0 C600             (   flexidedrv.asm):00259 [2]             LDB     #$00
E0A2 1F02             (   flexidedrv.asm):00260 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
                      (   flexidedrv.asm):00261         
E0A4 C600             (   flexidedrv.asm):00262 [2]             LDB     #$00                   ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00263         !
E0A6 A6A9E35A         (   flexidedrv.asm):00264 [4+4]           LDA     HSTBUF,Y
E0AA A780             (   flexidedrv.asm):00265 [4+2]           STA     ,X+
E0AC 3121             (   flexidedrv.asm):00266 [5]             INY
E0AE 5C               (   flexidedrv.asm):00267 [2]             INCB
E0AF C100             (   flexidedrv.asm):00268 [2]             CMPB    #$00
E0B1 26F3             (   flexidedrv.asm):00269 [3]             BNE <
E0B3 39               (   flexidedrv.asm):00270 [5]                     RTS
E0B4                  (   flexidedrv.asm):00271         IDE_READ_SECTOR_ERROR:
E0B4 C61F             (   flexidedrv.asm):00272 [2]                     LDB     #$1F
E0B6 57               (   flexidedrv.asm):00273 [2]             ASRB
E0B7 39               (   flexidedrv.asm):00274 [5]             RTS
                      (   flexidedrv.asm):00275         
E0B8                  (   flexidedrv.asm):00276         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00277                 ;       PRTDBG "IDE READ RAW SECTOR$"
E0B8 BDE27D           (   flexidedrv.asm):00278 [8]                     JSR         IDE_CONVERT_SECTOR  ;
E0BB B6E358           (   flexidedrv.asm):00279 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E0BE B1E355           (   flexidedrv.asm):00280 [5]                     CMPA    CDEBSEHD                ;
E0C1 2613             (   flexidedrv.asm):00281 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E0C3 B6E357           (   flexidedrv.asm):00282 [5]                     LDA         DEBCYLM                     ;
E0C6 B1E354           (   flexidedrv.asm):00283 [5]                     CMPA    CDEBCYLM                ;
E0C9 260B             (   flexidedrv.asm):00284 [3]                     BNE         IDE_READ_SECTOR_DIRTY
E0CB B6E356           (   flexidedrv.asm):00285 [5]                     LDA         DEBCYLL                     ;
E0CE B1E353           (   flexidedrv.asm):00286 [5]                     CMPA    CDEBCYLL                ;
E0D1 2603             (   flexidedrv.asm):00287 [3]                     BNE     IDE_READ_SECTOR_DIRTY
E0D3 C600             (   flexidedrv.asm):00288 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E0D5 39               (   flexidedrv.asm):00289 [5]                     RTS
                      (   flexidedrv.asm):00290         
E0D6                  (   flexidedrv.asm):00291         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00292                 ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E0D6 BDE1A5           (   flexidedrv.asm):00293 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E0D9 2528             (   flexidedrv.asm):00294 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E0DB                  (   flexidedrv.asm):00295         IDE_READ_SECTOR_DIRTY1:
E0DB BDE23A           (   flexidedrv.asm):00296 [8]                     JSR         IDE_SETUP_LBA               ;TELL IT WHICH SECTOR WE WANT
E0DE 860F             (   flexidedrv.asm):00297 [2]                     LDA         #PPIDE_COMMAND              ;SELECT IDE REGISTER
E0E0 8E0020           (   flexidedrv.asm):00298 [3]                     LDX         #PPIDE_CMD_READ
E0E3 BDE2C6           (   flexidedrv.asm):00299 [8]                     JSR         IDE_WRITE                   ;ASK THE DRIVE TO READ IT
E0E6 BDE1CE           (   flexidedrv.asm):00300 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNTIL IT'S GOT THE DATA
E0E9 2518             (   flexidedrv.asm):00301 [3]                     BCS     IDE_READ_SECTOR_DIRTY_ERROR     ; IF TIMEOUT, REPORT NO IDE PRESENT
E0EB BDE1FE           (   flexidedrv.asm):00302 [8]                     JSR         IDE_READ_BUFFER             ; GRAB THE 256 WORDS FROM THE BUFFER
E0EE B6E358           (   flexidedrv.asm):00303 [5]                     LDA         DEBSEHD                     ; STORE CURRENT PARMS
E0F1 B7E355           (   flexidedrv.asm):00304 [5]                     STA         CDEBSEHD            ;
E0F4 B6E356           (   flexidedrv.asm):00305 [5]                     LDA         DEBCYLL                     ;
E0F7 B7E353           (   flexidedrv.asm):00306 [5]                     STA         CDEBCYLL            ;
E0FA B6E357           (   flexidedrv.asm):00307 [5]                     LDA         DEBCYLM                     ;
E0FD B7E354           (   flexidedrv.asm):00308 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00309         
E100 C600             (   flexidedrv.asm):00310 [2]                     LDB         #$00                        ; RETURN = OPERATION OK
E102 39               (   flexidedrv.asm):00311 [5]                     RTS
E103                  (   flexidedrv.asm):00312         IDE_READ_SECTOR_DIRTY_ERROR:
E103 C60F             (   flexidedrv.asm):00313 [2]                     LDB         #$0F                        ; SET ERROR CONDITION
E105 39               (   flexidedrv.asm):00314 [5]                     RTS
                      (   flexidedrv.asm):00315         
                      (   flexidedrv.asm):00316         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00317         ;*
                      (   flexidedrv.asm):00318         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00319         ;*
                      (   flexidedrv.asm):00320         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00321         ;                   (A) = Track Number
                      (   flexidedrv.asm):00322         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00323         ;
                      (   flexidedrv.asm):00324         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00325         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00326         ;                   (B) = Error condition
                      (   flexidedrv.asm):00327         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00328         ;                       = 0 if an error
                      (   flexidedrv.asm):00329         ;*____________________________________________________________________________________________________
E106                  (   flexidedrv.asm):00330         IDE_WRITE_SECTOR:
E106 3420             (   flexidedrv.asm):00331 [5+2]                   PSHS    Y
E108 5A               (   flexidedrv.asm):00332 [2]                     DECB                                                    ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
E109 B7E359           (   flexidedrv.asm):00333 [5]                     STA     PPIDETMP                                ; USING 1 BASED SECTOR COUNTING
E10C F0E359           (   flexidedrv.asm):00334 [5]                     SUBB    PPIDETMP                                ;
E10F 2401             (   flexidedrv.asm):00335 [3]                     BCC     >                                               ;
E111 4A               (   flexidedrv.asm):00336 [2]                     DECA                                                    ;
                      (   flexidedrv.asm):00337         !                                                                               ;
E112 3410             (   flexidedrv.asm):00338 [5+2]           PSHS    X
E114 F7E359           (   flexidedrv.asm):00339 [5]                     STB     PPIDETMP                ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00340         
E117 BDE0B8           (   flexidedrv.asm):00341 [8]                     JSR     IDE_READ_RAW_SECTOR
E11A 1026004A         (   flexidedrv.asm):00342 [5+?]           LBNE     IDE_WRITE_SECTOR_ERROR1
E11E 3510             (   flexidedrv.asm):00343 [5+2]           PULS    X
                      (   flexidedrv.asm):00344         
E120 B6E359           (   flexidedrv.asm):00345 [5]             LDA             PPIDETMP
E123 8401             (   flexidedrv.asm):00346 [2]             ANDA    #$01
E125 C600             (   flexidedrv.asm):00347 [2]             LDB     #$00
E127 1F02             (   flexidedrv.asm):00348 [6]             TFR     D,Y                    ; Y NOW HAS HSTBUF OFFSET
E129 C600             (   flexidedrv.asm):00349 [2]             LDB     #$00                   ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00350         !
E12B A680             (   flexidedrv.asm):00351 [4+2]           LDA     ,X+
E12D A7A9E35A         (   flexidedrv.asm):00352 [4+4]           STA     HSTBUF,Y
E131 3121             (   flexidedrv.asm):00353 [5]             INY
E133 5C               (   flexidedrv.asm):00354 [2]             INCB
E134 C100             (   flexidedrv.asm):00355 [2]             CMPB    #$00
E136 26F3             (   flexidedrv.asm):00356 [3]             BNE <
                      (   flexidedrv.asm):00357         
E138 BDE1A5           (   flexidedrv.asm):00358 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;MAKE SURE DRIVE IS READY
E13B 252D             (   flexidedrv.asm):00359 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E13D 860F             (   flexidedrv.asm):00360 [2]                     LDA         #PPIDE_COMMAND
E13F 8E0030           (   flexidedrv.asm):00361 [3]                     LDX         #PPIDE_CMD_WRITE
E142 BDE2C6           (   flexidedrv.asm):00362 [8]                     JSR         IDE_WRITE           ;TELL DRIVE TO WRITE A SECTOR
E145 BDE1CE           (   flexidedrv.asm):00363 [8]                     JSR         IDE_WAIT_DRQ                ;WAIT UNIT IT WANTS THE DATA
E148 2520             (   flexidedrv.asm):00364 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E14A BDE21C           (   flexidedrv.asm):00365 [8]                     JSR         IDE_WRITE_BUFFER    ;GIVE THE DATA TO THE DRIVE
E14D BDE1A5           (   flexidedrv.asm):00366 [8]                     JSR         IDE_WAIT_NOT_BUSY   ;WAIT UNTIL THE WRITE IS COMPLETE
E150 2518             (   flexidedrv.asm):00367 [3]                     BCS     IDE_WRITE_SECTOR_ERROR  ; IF TIMEOUT, REPORT NO IDE PRESENT
E152 86FF             (   flexidedrv.asm):00368 [2]                     LDA         #$FF                        ; STORE CURRENT PARMS
E154 B7E355           (   flexidedrv.asm):00369 [5]                     STA         CDEBSEHD            ;
E157 B7E353           (   flexidedrv.asm):00370 [5]                     STA         CDEBCYLL            ;
E15A B7E354           (   flexidedrv.asm):00371 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00372         
E15D 3436             (   flexidedrv.asm):00373 [5+6]                   PSHS    A,B,X,Y
E15F BDE0D6           (   flexidedrv.asm):00374 [8]                     JSR     IDE_READ_SECTOR_DIRTY           ; NOT 100% SURE WHY THIS IS NECESSARY FOR A SUCCESSFUL WRITE  . .
E162 3536             (   flexidedrv.asm):00375 [5+6]                   PULS    A,B,X,Y                                         ; BUT I AM OUT OF TIME FOR TODAY
                      (   flexidedrv.asm):00376         
E164 C600             (   flexidedrv.asm):00377 [2]                     LDB         #$00                        ; ZERO ON RETURN = OPERATION OK
E166 35A0             (   flexidedrv.asm):00378 [5+4]                   PULS    Y,PC
E168                  (   flexidedrv.asm):00379         IDE_WRITE_SECTOR_ERROR1:
E168 3510             (   flexidedrv.asm):00380 [5+2]           PULS    X
E16A                  (   flexidedrv.asm):00381         IDE_WRITE_SECTOR_ERROR:
E16A C6FF             (   flexidedrv.asm):00382 [2]                     LDB         #$FF                        ; 1 ON RETURN = OPERATION FAIL
E16C F7E355           (   flexidedrv.asm):00383 [5]             STB         CDEBSEHD            ;
E16F F7E353           (   flexidedrv.asm):00384 [5]                     STB         CDEBCYLL            ;
E172 F7E354           (   flexidedrv.asm):00385 [5]                     STB         CDEBCYLM            ;
E175 C61F             (   flexidedrv.asm):00386 [2]                     LDB     #$1F
E177 57               (   flexidedrv.asm):00387 [2]             ASRB
E178 35A0             (   flexidedrv.asm):00388 [5+4]                   PULS    Y,PC
                      (   flexidedrv.asm):00389         
                      (   flexidedrv.asm):00390         ;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00391         ;*
                      (   flexidedrv.asm):00392         ;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00393         ;*
                      (   flexidedrv.asm):00394         ;*____________________________________________________________________________________________________
E17A                  (   flexidedrv.asm):00395         PPIDE_RESET:
                      (   flexidedrv.asm):00396           ;     PRTDBG "IDE RESET$"
E17A 8600             (   flexidedrv.asm):00397 [2]                     LDA         #$00
E17C B7E358           (   flexidedrv.asm):00398 [5]                     STA         DEBSEHD
E17F B7E356           (   flexidedrv.asm):00399 [5]                     STA         DEBCYLL
E182 B7E357           (   flexidedrv.asm):00400 [5]                     STA         DEBCYLM
E185 86FF             (   flexidedrv.asm):00401 [2]                     LDA         #$FF                        ;
E187 B7E355           (   flexidedrv.asm):00402 [5]                     STA         CDEBSEHD            ;
E18A B7E353           (   flexidedrv.asm):00403 [5]                     STA         CDEBCYLL            ;
E18D B7E354           (   flexidedrv.asm):00404 [5]                     STA         CDEBCYLM            ;
                      (   flexidedrv.asm):00405         
E190 8680             (   flexidedrv.asm):00406 [2]                     LDA         #PPIDE_RST_LINE
E192 B7FE62           (   flexidedrv.asm):00407 [5]                     STA         PPIDECNTRL                  ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00408         
E195 8E0100           (   flexidedrv.asm):00409 [3]                     LDX         #$0100
                      (   flexidedrv.asm):00410         ;       PRTDBG "IDE RESET DELAY$"
E198                  (   flexidedrv.asm):00411         RST_DLY:
E198 301F             (   flexidedrv.asm):00412 [5]                     DEX
E19A 8C0000           (   flexidedrv.asm):00413 [4]                     CPX         #$0000
E19D 26F9             (   flexidedrv.asm):00414 [3]                     BNE         RST_DLY
E19F 8600             (   flexidedrv.asm):00415 [2]                     LDA         #$00
E1A1 B7FE62           (   flexidedrv.asm):00416 [5]                     STA         PPIDECNTRL                  ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00417         
                      (   flexidedrv.asm):00418         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00419         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00420                 IF USEDSKYNG = 1
                      (   flexidedrv.asm):00421                         JSR     DSKY_REINIT
                      (   flexidedrv.asm):00422                 ENDC
                      (   flexidedrv.asm):00423         
E1A4 39               (   flexidedrv.asm):00424 [5]                     RTS
                      (   flexidedrv.asm):00425         
                      (   flexidedrv.asm):00426         
                      (   flexidedrv.asm):00427         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00428         ;*
                      (   flexidedrv.asm):00429         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00430         ;*
                      (   flexidedrv.asm):00431         ;*____________________________________________________________________________________________________
E1A5                  (   flexidedrv.asm):00432         IDE_WAIT_NOT_BUSY:
E1A5 3412             (   flexidedrv.asm):00433 [5+3]                   PSHS    X,A
E1A7 8600             (   flexidedrv.asm):00434 [2]                     LDA     #$00
E1A9 B7DF76           (   flexidedrv.asm):00435 [5]                     STA     PPIDETIMEOUT
E1AC B7DF77           (   flexidedrv.asm):00436 [5]                     STA     PPIDETIMEOUT+1
E1AF                  (   flexidedrv.asm):00437         IDE_WAIT_NOT_BUSY1:
E1AF 860F             (   flexidedrv.asm):00438 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR RDY BIT TO BE SET
E1B1 BDE2A1           (   flexidedrv.asm):00439 [8]                     JSR         IDE_READ
E1B4 1F18             (   flexidedrv.asm):00440 [6]             TFR     X,A
E1B6 8480             (   flexidedrv.asm):00441 [2]                     ANDA    #$80
E1B8 270F             (   flexidedrv.asm):00442 [3]                     BEQ         IDE_WAIT_NOT_BUSY2
E1BA 7CDF76           (   flexidedrv.asm):00443 [7]                     INC     PPIDETIMEOUT
E1BD 26F0             (   flexidedrv.asm):00444 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1BF 7CDF77           (   flexidedrv.asm):00445 [7]                     INC     PPIDETIMEOUT+1
E1C2 26EB             (   flexidedrv.asm):00446 [3]                     BNE     IDE_WAIT_NOT_BUSY1
E1C4 1A01             (   flexidedrv.asm):00447 [3]                     SEC
E1C6 7EE1CB           (   flexidedrv.asm):00448 [4]                     JMP         IDE_WAIT_NOT_BUSY3
E1C9                  (   flexidedrv.asm):00449         IDE_WAIT_NOT_BUSY2:
E1C9 1CFE             (   flexidedrv.asm):00450 [3]                     CLC
E1CB                  (   flexidedrv.asm):00451         IDE_WAIT_NOT_BUSY3:
E1CB 3592             (   flexidedrv.asm):00452 [5+5]           PULS    PC,X,A
E1CD 39               (   flexidedrv.asm):00453 [5]                     RTS
                      (   flexidedrv.asm):00454         
                      (   flexidedrv.asm):00455         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00456         ;*
                      (   flexidedrv.asm):00457         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00458         ;*
                      (   flexidedrv.asm):00459         ;*____________________________________________________________________________________________________
E1CE                  (   flexidedrv.asm):00460         IDE_WAIT_DRQ:
E1CE 3432             (   flexidedrv.asm):00461 [5+5]           PSHS    A,X,Y
E1D0 8600             (   flexidedrv.asm):00462 [2]                     LDA     #$00
E1D2 B7DF76           (   flexidedrv.asm):00463 [5]                     STA     PPIDETIMEOUT
E1D5 B7DF77           (   flexidedrv.asm):00464 [5]                     STA     PPIDETIMEOUT+1
E1D8                  (   flexidedrv.asm):00465         IDE_WAIT_DRQ1:
E1D8 860F             (   flexidedrv.asm):00466 [2]                     LDA         #PPIDE_STATUS               ;WAIT FOR DRQ BIT TO BE SET
E1DA BDE2A1           (   flexidedrv.asm):00467 [8]                     JSR         IDE_READ
E1DD 1F18             (   flexidedrv.asm):00468 [6]                     TFR     X,A
E1DF 8488             (   flexidedrv.asm):00469 [2]                     ANDA    #%10001000              ; MASK OFF BUSY(7) AND DRQ(3)
E1E1 8108             (   flexidedrv.asm):00470 [2]                     CMPA    #%00001000              ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E1E3 2715             (   flexidedrv.asm):00471 [3]                     BEQ         IDE_WAIT_DRQ2
E1E5 8401             (   flexidedrv.asm):00472 [2]                     ANDA    #%00000001              ; IS ERROR?
E1E7 8101             (   flexidedrv.asm):00473 [2]                     CMPA    #%00000001              ;
E1E9 270A             (   flexidedrv.asm):00474 [3]                     BEQ     IDE_WAIT_DRQE
E1EB 7CDF76           (   flexidedrv.asm):00475 [7]                     INC     PPIDETIMEOUT
E1EE 26E8             (   flexidedrv.asm):00476 [3]                     BNE     IDE_WAIT_DRQ1
E1F0 7CDF77           (   flexidedrv.asm):00477 [7]                     INC     PPIDETIMEOUT+1
E1F3 26E3             (   flexidedrv.asm):00478 [3]                     BNE     IDE_WAIT_DRQ1
E1F5                  (   flexidedrv.asm):00479         IDE_WAIT_DRQE:
E1F5 1A01             (   flexidedrv.asm):00480 [3]                     SEC
E1F7 7EE1FC           (   flexidedrv.asm):00481 [4]                     JMP     IDE_WAIT_DRQ3
E1FA                  (   flexidedrv.asm):00482         IDE_WAIT_DRQ2:
E1FA 1CFE             (   flexidedrv.asm):00483 [3]                     CLC
E1FC                  (   flexidedrv.asm):00484         IDE_WAIT_DRQ3:
E1FC 35B2             (   flexidedrv.asm):00485 [5+7]           PULS    PC,A,X,Y
                      (   flexidedrv.asm):00486         
                      (   flexidedrv.asm):00487         
                      (   flexidedrv.asm):00488         
                      (   flexidedrv.asm):00489         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00490         ;*
                      (   flexidedrv.asm):00491         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00492         ;*
                      (   flexidedrv.asm):00493         ;*____________________________________________________________________________________________________
E1FE                  (   flexidedrv.asm):00494         IDE_READ_BUFFER:
E1FE 108E0000         (   flexidedrv.asm):00495 [4]                     LDY     #$0000                  ; INDEX
E202                  (   flexidedrv.asm):00496         IDEBUFRD:
E202 8608             (   flexidedrv.asm):00497 [2]                     LDA         #PPIDE_DATA
E204 BDE2A4           (   flexidedrv.asm):00498 [8]                     JSR         IDE_READ_NO_SETUP
E207 1F10             (   flexidedrv.asm):00499 [6]                     TFR     X,D
E209 E7A9E35A         (   flexidedrv.asm):00500 [4+4]                   STB         HSTBUF,Y            ;
E20D 3121             (   flexidedrv.asm):00501 [5]             INY
E20F A7A9E35A         (   flexidedrv.asm):00502 [4+4]                   STA         HSTBUF,Y            ;
E213 3121             (   flexidedrv.asm):00503 [5]             INY
E215 108C0200         (   flexidedrv.asm):00504 [5]                     CMPY    #$0200                  ;
E219 26E7             (   flexidedrv.asm):00505 [3]                     BNE         IDEBUFRD            ;
E21B 39               (   flexidedrv.asm):00506 [5]                     RTS                             ;
                      (   flexidedrv.asm):00507         
                      (   flexidedrv.asm):00508         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00509         ;*
                      (   flexidedrv.asm):00510         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00511         ;*
                      (   flexidedrv.asm):00512         ;*____________________________________________________________________________________________________
E21C                  (   flexidedrv.asm):00513         IDE_WRITE_BUFFER:
E21C 108E0000         (   flexidedrv.asm):00514 [4]                     LDY     #$0000                  ; INDEX
E220                  (   flexidedrv.asm):00515         IDEBUFWT:
E220 E6A9E35A         (   flexidedrv.asm):00516 [4+4]                   LDB     HSTBUF,Y                ; SECTORS ARE LITTLE ENDIAN
E224 3121             (   flexidedrv.asm):00517 [5]                     INY                                     ;
E226 A6A9E35A         (   flexidedrv.asm):00518 [4+4]                   LDA     HSTBUF,Y                ; SECTORS ARE LITTLE ENDIAN
E22A 3121             (   flexidedrv.asm):00519 [5]                     INY
E22C 1F01             (   flexidedrv.asm):00520 [6]                     TFR     D,X
E22E 8608             (   flexidedrv.asm):00521 [2]                     LDA         #PPIDE_DATA
E230 BDE2C6           (   flexidedrv.asm):00522 [8]                     JSR         IDE_WRITE
E233 108C0200         (   flexidedrv.asm):00523 [5]                     CMPY    #$0200                  ;
E237 26E7             (   flexidedrv.asm):00524 [3]                     BNE         IDEBUFWT            ;
E239 39               (   flexidedrv.asm):00525 [5]                     RTS                                     ;
                      (   flexidedrv.asm):00526         
                      (   flexidedrv.asm):00527         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00528         ;*
                      (   flexidedrv.asm):00529         ;*  SETUP LBA DATA
                      (   flexidedrv.asm):00530         ;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00531         ;*____________________________________________________________________________________________________
E23A                  (   flexidedrv.asm):00532         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00533         ;               PRTDBG "PPIDE SETUP LBA$"
E23A B6DE20           (   flexidedrv.asm):00534 [5]             LDA     CURDRVADDRESS
E23D 8401             (   flexidedrv.asm):00535 [2]                     ANDA    #$01                    ; ONLY WANT DRIVE CFG
E23F 48               (   flexidedrv.asm):00536 [2]                     ASLA                                ; SHIFT 4
E240 48               (   flexidedrv.asm):00537 [2]                     ASLA                                ;
E241 48               (   flexidedrv.asm):00538 [2]                     ASLA                                ;
E242 48               (   flexidedrv.asm):00539 [2]                     ASLA                                ;
E243 8AE0             (   flexidedrv.asm):00540 [2]                     ORA     #$E0                    ; E0=MST  F0=SLV
E245 1F89             (   flexidedrv.asm):00541 [6]                     TFR     A,B
E247 8600             (   flexidedrv.asm):00542 [2]             LDA     #$00
E249 1F01             (   flexidedrv.asm):00543 [6]                     TFR     D,X
E24B 860E             (   flexidedrv.asm):00544 [2]                     LDA         #PPIDE_DEVICE
E24D BDE2C6           (   flexidedrv.asm):00545 [8]                     JSR         IDE_WRITE
E250 8600             (   flexidedrv.asm):00546 [2]             LDA     #$00
E252 F6E357           (   flexidedrv.asm):00547 [5]                     LDB     DEBCYLM
E255 1F01             (   flexidedrv.asm):00548 [6]                     TFR     D,X
E257 860D             (   flexidedrv.asm):00549 [2]                     LDA         #PPIDE_LBAHI
E259 BDE2C6           (   flexidedrv.asm):00550 [8]                     JSR         IDE_WRITE
E25C 8600             (   flexidedrv.asm):00551 [2]             LDA     #$00
E25E F6E356           (   flexidedrv.asm):00552 [5]                     LDB     DEBCYLL                 ;
E261 1F01             (   flexidedrv.asm):00553 [6]                     TFR     D,X
E263 860C             (   flexidedrv.asm):00554 [2]                     LDA         #PPIDE_LBAMID
E265 BDE2C6           (   flexidedrv.asm):00555 [8]                     JSR         IDE_WRITE
E268 8600             (   flexidedrv.asm):00556 [2]             LDA     #$00
E26A F6E358           (   flexidedrv.asm):00557 [5]                     LDB     DEBSEHD                 ;
E26D 1F01             (   flexidedrv.asm):00558 [6]                     TFR     D,X
E26F 860B             (   flexidedrv.asm):00559 [2]                     LDA         #PPIDE_LBALOW
E271 BDE2C6           (   flexidedrv.asm):00560 [8]                     JSR         IDE_WRITE
E274 8E0001           (   flexidedrv.asm):00561 [3]                     LDX         #$0001
E277 860A             (   flexidedrv.asm):00562 [2]                     LDA         #PPIDE_SEC_CNT
E279 BDE2C6           (   flexidedrv.asm):00563 [8]                     JSR         IDE_WRITE
                      (   flexidedrv.asm):00564         
E27C 39               (   flexidedrv.asm):00565 [5]                     RTS
                      (   flexidedrv.asm):00566         
                      (   flexidedrv.asm):00567         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00568         ;
                      (   flexidedrv.asm):00569         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00570         ;
                      (   flexidedrv.asm):00571         ;                   (A) = Track Number
                      (   flexidedrv.asm):00572         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00573         ;________________________________________________________________________________________________________
E27D                  (   flexidedrv.asm):00574         IDE_CONVERT_SECTOR:
E27D 54               (   flexidedrv.asm):00575 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E27E 44               (   flexidedrv.asm):00576 [2]             LSRA                    ;
E27F 2402             (   flexidedrv.asm):00577 [3]             BCC     >
E281 CA80             (   flexidedrv.asm):00578 [2]             ORB     #$80
                      (   flexidedrv.asm):00579         !
E283 F7E358           (   flexidedrv.asm):00580 [5]                 STB     DEBSEHD                     ; STORE IN SECTOR/HEAD
E286 B7E356           (   flexidedrv.asm):00581 [5]                 STA     DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00582         
                      (   flexidedrv.asm):00583         ;       ADD SLICE OFFSET
E289 FCDE21           (   flexidedrv.asm):00584 [6]                 LDD     CURDRVSLICE
E28C 54               (   flexidedrv.asm):00585 [2]                 LSRB                                ; DIVIDE BY 2 (FOR BLOCKING)
E28D 44               (   flexidedrv.asm):00586 [2]             LSRA                    ;
E28E 2402             (   flexidedrv.asm):00587 [3]             BCC     >
E290 CA80             (   flexidedrv.asm):00588 [2]             ORB     #$80
                      (   flexidedrv.asm):00589         !
E292 F7E357           (   flexidedrv.asm):00590 [5]             STB         DEBCYLM                     ; STORE IN TRACK (LSB)
E295 2408             (   flexidedrv.asm):00591 [3]             BCC     >
E297 B6E356           (   flexidedrv.asm):00592 [5]                 LDA     DEBCYLL                     ; STORE IN TRACK (LSB)
E29A 8A80             (   flexidedrv.asm):00593 [2]             ORA     #$80
E29C B7E356           (   flexidedrv.asm):00594 [5]             STA         DEBCYLL                     ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00595         !
E29F 39               (   flexidedrv.asm):00596 [5]             RTS
                      (   flexidedrv.asm):00597         
                      (   flexidedrv.asm):00598         
                      (   flexidedrv.asm):00599         
                      (   flexidedrv.asm):00600           IF USEDSKYNG = 1
                      (   flexidedrv.asm):00601         ;       PRTDBG "DSKY OUTPUT 1$"
                      (   flexidedrv.asm):00602                 LDA     SEKDSK
                      (   flexidedrv.asm):00603                 STA     DSKY_HEXBUF
                      (   flexidedrv.asm):00604                 LDA     DEBCYLM
                      (   flexidedrv.asm):00605                 STA     DSKY_HEXBUF+1
                      (   flexidedrv.asm):00606                 LDA     DEBCYLL
                      (   flexidedrv.asm):00607                 STA     DSKY_HEXBUF+2
                      (   flexidedrv.asm):00608                 LDA     DEBSEHD
                      (   flexidedrv.asm):00609                 STA     DSKY_HEXBUF+3
                      (   flexidedrv.asm):00610                 JSR     DSKY_BIN2SEG
                      (   flexidedrv.asm):00611                 JSR     DSKY_SHOW
                      (   flexidedrv.asm):00612           ENDC
E2A0 39               (   flexidedrv.asm):00613 [5]             RTS
                      (   flexidedrv.asm):00614         
                      (   flexidedrv.asm):00615         
                      (   flexidedrv.asm):00616         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00617         
                      (   flexidedrv.asm):00618         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00619         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00620         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00621         
                      (   flexidedrv.asm):00622                 ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00623                 ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00624                 ;OUTPUT X = WORD READ FROM IDE DRIVE
E2A1                  (   flexidedrv.asm):00625         IDE_READ:
E2A1 BDE2E8           (   flexidedrv.asm):00626 [8]             JSR         SET_PPI_RD          ; SETUP FOR A READ CYCLE
E2A4                  (   flexidedrv.asm):00627         IDE_READ_NO_SETUP:
E2A4 B7FE62           (   flexidedrv.asm):00628 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2A7 8A40             (   flexidedrv.asm):00629 [2]             ORA         #PPIDE_RD_LINE      ; ASSERT RD PIN
E2A9 B7FE62           (   flexidedrv.asm):00630 [5]             STA         PPIDECNTRL
E2AC 3402             (   flexidedrv.asm):00631 [5+1]       PSHS    A
E2AE F6FE60           (   flexidedrv.asm):00632 [5]             LDB         PPIDELO                     ; READ LOWER BYTE
E2B1 B6FE61           (   flexidedrv.asm):00633 [5]             LDA         PPIDEHI                     ; READ UPPER BYTE
E2B4 1F01             (   flexidedrv.asm):00634 [6]         TFR     D,X
E2B6 3502             (   flexidedrv.asm):00635 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2B8 B7FE62           (   flexidedrv.asm):00636 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2BB 8840             (   flexidedrv.asm):00637 [2]             EORA    #PPIDE_RD_LINE  ; ASSERT RD PIN
E2BD B7FE62           (   flexidedrv.asm):00638 [5]             STA         PPIDECNTRL
E2C0 8600             (   flexidedrv.asm):00639 [2]             LDA         #$00
E2C2 B7FE62           (   flexidedrv.asm):00640 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2C5 39               (   flexidedrv.asm):00641 [5]             RTS
                      (   flexidedrv.asm):00642         
                      (   flexidedrv.asm):00643                 ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00644                 ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00645                 ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00646                 ;
                      (   flexidedrv.asm):00647         
E2C6                  (   flexidedrv.asm):00648         IDE_WRITE:
E2C6 BDE2F6           (   flexidedrv.asm):00649 [8]             JSR         SET_PPI_WR          ; SETUP FOR A WRITE CYCLE
E2C9 3402             (   flexidedrv.asm):00650 [5+1]       PSHS    A
E2CB 1F10             (   flexidedrv.asm):00651 [6]         TFR     X,D
E2CD F7FE60           (   flexidedrv.asm):00652 [5]             STB         PPIDELO                     ; WRITE LOWER BYTE
E2D0 B7FE61           (   flexidedrv.asm):00653 [5]             STA         PPIDEHI                     ; WRITE UPPER BYTE
E2D3 3502             (   flexidedrv.asm):00654 [5+1]           PULS    A                               ; RESTORE REGISTER VALUE
E2D5 B7FE62           (   flexidedrv.asm):00655 [5]             STA         PPIDECNTRL          ;DRIVE ADDRESS ONTO CONTROL LINES
E2D8 8A20             (   flexidedrv.asm):00656 [2]             ORA         #PPIDE_WR_LINE              ; ASSERT WRITE PIN
E2DA B7FE62           (   flexidedrv.asm):00657 [5]             STA         PPIDECNTRL
E2DD 8820             (   flexidedrv.asm):00658 [2]             EORA    #PPIDE_WR_LINE          ; DE ASSERT WR PIN
E2DF B7FE62           (   flexidedrv.asm):00659 [5]             STA             PPIDECNTRL
E2E2 8600             (   flexidedrv.asm):00660 [2]             LDA         #$00
E2E4 B7FE62           (   flexidedrv.asm):00661 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2E7 39               (   flexidedrv.asm):00662 [5]             RTS
                      (   flexidedrv.asm):00663         
                      (   flexidedrv.asm):00664         
                      (   flexidedrv.asm):00665         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00666         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00667         ;
                      (   flexidedrv.asm):00668         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00669         
E2E8                  (   flexidedrv.asm):00670         SET_PPI_RD:
E2E8 3402             (   flexidedrv.asm):00671 [5+1]           PSHS    A
E2EA 8600             (   flexidedrv.asm):00672 [2]             LDA         #$00
E2EC B7FE62           (   flexidedrv.asm):00673 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2EF 8692             (   flexidedrv.asm):00674 [2]             LDA     #PPRD_IDE_8255
E2F1 B7FE63           (   flexidedrv.asm):00675 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, READ MODE
E2F4 3582             (   flexidedrv.asm):00676 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00677         
E2F6                  (   flexidedrv.asm):00678         SET_PPI_WR:
E2F6 3402             (   flexidedrv.asm):00679 [5+1]           PSHS    A
E2F8 8600             (   flexidedrv.asm):00680 [2]             LDA         #$00
E2FA B7FE62           (   flexidedrv.asm):00681 [5]             STA         PPIDECNTRL          ;DEASSERT ALL CONTROL PINS
E2FD 8680             (   flexidedrv.asm):00682 [2]             LDA     #PPWR_IDE_8255
E2FF B7FE63           (   flexidedrv.asm):00683 [5]             STA     PPIDEPPIC                               ;CONFIG 8255 CHIP, WRITE MODE
E302 3582             (   flexidedrv.asm):00684 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00685         
E304                  (   flexidedrv.asm):00686         OUTHEXA:
E304 3402             (   flexidedrv.asm):00687 [5+1]           PSHS    A
E306 3402             (   flexidedrv.asm):00688 [5+1]           PSHS    A
E308 BDCFD8           (   flexidedrv.asm):00689 [8]             JSR     OUTHL
E30B 3502             (   flexidedrv.asm):00690 [5+1]           PULS    A
E30D BDCFDC           (   flexidedrv.asm):00691 [8]             JSR     OUTHR
E310 3582             (   flexidedrv.asm):00692 [5+3]           PULS    A,PC
                      (   flexidedrv.asm):00693         
E312 5050494445203A   (   flexidedrv.asm):00694         MESSAGE1    FCC     "PPIDE :"
E319 04               (   flexidedrv.asm):00695                     FCB     EOT
E31A 20494F3D3078     (   flexidedrv.asm):00696         MESSAGE2    FCC     " IO=0x"
E320 04               (   flexidedrv.asm):00697                     FCB     EOT
E321 204E4F5420505245 (   flexidedrv.asm):00698         MESSAGE3    FCC     " NOT PRESENT"
     53454E54
E32D 04               (   flexidedrv.asm):00699                     FCB     EOT
E32E 205050494445303A (   flexidedrv.asm):00700         MESSAGE4    FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
E33E 04               (   flexidedrv.asm):00701                     FCB     EOT
E33F 205050494445313A (   flexidedrv.asm):00702         MESSAGE5    FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
E34F 04               (   flexidedrv.asm):00703                     FCB     EOT
E350 3078             (   flexidedrv.asm):00704         MESSAGE6    FCC     "0x"
E352 04               (   flexidedrv.asm):00705                     FCB     EOT
                      (   flexidedrv.asm):00706         
                      (   flexidedrv.asm):00707         
                      (   flexidedrv.asm):00708         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E353 00               (   flexidedrv.asm):00709         CDEBCYLL:       .BYTE 0         ; DEBLOCKED CYLINDER LSB
E354 00               (   flexidedrv.asm):00710         CDEBCYLM:       .BYTE 0         ; DEBLOCKED CYLINDER MSB
E355 00               (   flexidedrv.asm):00711         CDEBSEHD:       .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E356 00               (   flexidedrv.asm):00712         DEBCYLL:        .BYTE 0         ; DEBLOCKED CYLINDER LSB
E357 00               (   flexidedrv.asm):00713         DEBCYLM:        .BYTE 0         ; DEBLOCKED CYLINDER MSB
E358 00               (   flexidedrv.asm):00714         DEBSEHD:        .BYTE 0         ; DEBLOCKED SECTOR AND HEAD (HS)
E359 00               (   flexidedrv.asm):00715         PPIDETMP:       .BYTE 0         ; TEMP
                      (      drivers.asm):00513         
                      (      drivers.asm):00514         
                      (      drivers.asm):00515         
                      (      drivers.asm):00516         
                      (      drivers.asm):00517         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00518         
E35A                  (      drivers.asm):00519         HSTBUF:         RMB     512
                      (        flex9.asm):00011                         include "../software/monitor.asm"
                      (../software/monit):00001             PRAGMA CD
                      (../software/monit):00002         
                      (../software/monit):00003         ;__MONITOR_________________________________________________________________________________________
                      (../software/monit):00004         ;
                      (../software/monit):00005         ;       MINI ROM MONITOR FOR THE NHYODYNE 6809 PROCESSOR
                      (../software/monit):00006         ;
                      (../software/monit):00007         ;       WRITTEN BY: DAN WERNER -- 8/2/2022
                      (../software/monit):00008         ;       based on the ROM by Andrew Lynch
                      (../software/monit):00009         ;
                      (../software/monit):00010         ;___________________________________________________________________________________________________
                      (../software/monit):00011         ;
                      (../software/monit):00012         ; DATA CONSTANTS
                      (../software/monit):00013         ;___________________________________________________________________________________________________
                      (../software/monit):00014         ;
                      (../software/monit):00015         
     C000             (../software/monit):00016         MONSTACK                        EQU     $C000           ; STACK POINTER
                      (../software/monit):00017         
                      (../software/monit):00018         ; UART 16C550 SERIAL
     FE68             (../software/monit):00019         MONUART0        equ     $FE68           ; DATA IN/OUT
     FE69             (../software/monit):00020         MONUART1        equ     $FE69           ; CHECK RX
     FE6A             (../software/monit):00021         MONUART2        equ     $FE6A           ; INTERRUPTS
     FE6B             (../software/monit):00022         MONUART3        equ     $FE6B           ; LINE CONTROL
     FE6C             (../software/monit):00023         MONUART4        equ     $FE6C           ; MODEM CONTROL
     FE6D             (../software/monit):00024         MONUART5        equ     $FE6D           ; LINE STATUS
     FE6E             (../software/monit):00025         MONUART6        equ     $FE6E           ; MODEM STATUS
     FE6F             (../software/monit):00026         MONUART7        equ     $FE6F           ; SCRATCH REG.
                      (../software/monit):00027         
                      (../software/monit):00028         
                      (../software/monit):00029                       ORG       $EFE0
EFE0 F3               (../software/monit):00030                         FCB             $F3                             ;DI - DISABLE INTERRUPTS
EFE1 010010           (../software/monit):00031                         FCB             $01,$00,$10             ;LD     BC,$1000 -BYTES TO MOVE
EFE4 110070           (../software/monit):00032                         FCB             $11,$00,$70             ;LD     DE,$7000 -DESTINATION ADDRESS (6809 IS !A15)
EFE7 212001           (../software/monit):00033                         FCB             $21,$20,$01             ;LD     HL,$0120 -SOURCE ADDRESS
EFEA EDB0             (../software/monit):00034                         FCB             $ED,$B0                 ;LDIR            -COPY RAM
EFEC DBFE             (../software/monit):00035                         FCB             $DB,$FE                 ;IN     A,$FF    -ENABLE 6809
EFEE 0E00             (../software/monit):00036                         FCB             $0E,$00                 ;LD     C,00H    -CP/M SYSTEM RESET CALL
EFF0 CD0500           (../software/monit):00037                         FCB             $CD,$05,$00                     ;CALL   0005H    -RETURN TO PROMPT
                      (../software/monit):00038         ;
                      (../software/monit):00039         ;
                      (../software/monit):00040         ;
                      (../software/monit):00041         
                      (../software/monit):00042                 ORG     $FC00
                      (../software/monit):00043         
                      (../software/monit):00044         
                      (../software/monit):00045         ;___________________________________________________________________________________________________
                      (../software/monit):00046         ;
                      (../software/monit):00047         ;       INITIALIZE 6809
                      (../software/monit):00048         ;___________________________________________________________________________________________________
FC00                  (../software/monit):00049         MAIN:
FC00 10CEC000         (../software/monit):00050 [4]             LDS     #MONSTACK                       ; RESET STACK POINTER
FC04 4F               (../software/monit):00051 [2]             CLRA                            ; set direct page register to 0
FC05 1F8B             (../software/monit):00052 [6]             TFR     A,DP                    ;
                      (../software/monit):00053         
                      (../software/monit):00054         
FC07 4F               (../software/monit):00055 [2]             CLRA                            ; CLEAR ACCUMULATOR A
FC08 BDFD8C           (../software/monit):00056 [8]             JSR     SERIALINIT              ; INIT SERIAL PORT
                      (../software/monit):00057         
                      (../software/monit):00058         ;__CONTRL_________________________________________________________________________________________
                      (../software/monit):00059         ;
                      (../software/monit):00060         ;       MONITOR MAIN LOOP
                      (../software/monit):00061         ;__________________________________________________________________________________________________
FC0B                  (../software/monit):00062         CONTRL:
FC0B BDFD81           (../software/monit):00063 [8]             JSR         DISPLAY_CRLF                ; DISPLAY CRLF
FC0E 863E             (../software/monit):00064 [2]             LDA     #'>'                    ; CARRIAGE RETURN
FC10 BDFD8D           (../software/monit):00065 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC13 BDFD9E           (../software/monit):00066 [8]             JSR         IOF_CONINW          ;
FC16 BDFD8D           (../software/monit):00067 [8]             JSR         WRSER1                      ; OUTPUT CHAR TO CONSOLE
                      (../software/monit):00068                                                         ;
FC19 8144             (../software/monit):00069 [2]             CMPA    #'D'                    ; IS DUMP MEMORY?
FC1B 271E             (../software/monit):00070 [3]             BEQ         DUMP                        ;
FC1D 814C             (../software/monit):00071 [2]             CMPA    #'L'                    ; IS LOAD?
FC1F 2717             (../software/monit):00072 [3]             BEQ         MLOAD                       ; YES, JUMP
FC21 814D             (../software/monit):00073 [2]             CMPA    #'M'                    ; IS CHANGE?
FC23 273F             (../software/monit):00074 [3]             BEQ         CHANGE                      ; YES, JUMP
FC25 8150             (../software/monit):00075 [2]             CMPA    #'P'                    ; IS PRINT?
FC27 2752             (../software/monit):00076 [3]             BEQ         PRINT                       ; YES, JUMP
FC29 8147             (../software/monit):00077 [2]             CMPA    #'G'                    ; IS GO?
FC2B 272C             (../software/monit):00078 [3]             BEQ         GO                  ; YES JUMP
                      (../software/monit):00079                                                         ;
                      (../software/monit):00080                                                         ; COMMAND NOT FOUND ISSUE ERROR
FC2D 863F             (../software/monit):00081 [2]             LDA     #'?'                    ; PRINT '?'
FC2F BDFD8D           (../software/monit):00082 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC32 BDFD81           (../software/monit):00083 [8]             JSR         DISPLAY_CRLF        ; DISPLAY CRLF
FC35 7EFC0B           (../software/monit):00084 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00085         
FC38                  (../software/monit):00086         MLOAD:
FC38 7EFC8D           (../software/monit):00087 [4]             JMP         MONLOAD
                      (../software/monit):00088         
                      (../software/monit):00089         
FC3B                  (../software/monit):00090         DUMP:
FC3B BDFD7C           (../software/monit):00091 [8]             JSR     OUTS                    ;
FC3E BDFD1E           (../software/monit):00092 [8]             JSR         BADDR                       ;
FC41 3410             (../software/monit):00093 [5+2]           PSHS    X                           ;
FC43 BDFD7C           (../software/monit):00094 [8]             JSR         OUTS                        ;
FC46 BDFD1E           (../software/monit):00095 [8]             JSR         BADDR                       ;
FC49 3510             (../software/monit):00096 [5+2]           PULS    X                       ;
FC4B BDFD81           (../software/monit):00097 [8]             JSR         DISPLAY_CRLF    ;
FC4E                  (../software/monit):00098         DUMP_LOOP:
FC4E BDFCC7           (../software/monit):00099 [8]             JSR         DUMP_LINE           ;
FC51 BCFDB0           (../software/monit):00100 [7]             CMPX    XHI                     ;
FC54 2BF8             (../software/monit):00101 [3]             BMI         DUMP_LOOP           ;
FC56 7EFC0B           (../software/monit):00102 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00103         
                      (../software/monit):00104         
FC59                  (../software/monit):00105         GO:
FC59 BDFD1E           (../software/monit):00106 [8]             JSR         BADDR                       ; GET ADDRESS
FC5C BDFD7C           (../software/monit):00107 [8]             JSR         OUTS                        ; PRINT SPACE
FC5F BEFDB0           (../software/monit):00108 [6]             LDX         XHI                         ; LOAD X WITH ADDRESS
FC62 6E84             (../software/monit):00109 [3+0]           JMP         $0000,X                     ; JUMP TO ADDRESS
                      (../software/monit):00110         
                      (../software/monit):00111         ; CHANGE MEMORY(M AAAA DD NN)
FC64                  (../software/monit):00112         CHANGE:
FC64 BDFD1E           (../software/monit):00113 [8]             JSR         BADDR                       ; BUILD ADDRESS
FC67 BDFD7C           (../software/monit):00114 [8]             JSR         OUTS                        ; PRINT SPACE
FC6A BDFD7A           (../software/monit):00115 [8]             JSR         OUT2HS                      ;
FC6D BDFD2C           (../software/monit):00116 [8]             JSR         BYTE                        ;
FC70 301F             (../software/monit):00117 [4+1]           LEAX    -1,X                    ;
FC72 A784             (../software/monit):00118 [4+0]           STA     ,X                      ;
FC74 A184             (../software/monit):00119 [4+0]           CMPA    ,X                      ;
FC76 2647             (../software/monit):00120 [3]             BNE         LOAD19                      ; MEMORY DID NOT CHANGE
FC78 7EFC0B           (../software/monit):00121 [4]             JMP         CONTRL                      ;
                      (../software/monit):00122         
                      (../software/monit):00123         ; PRINT CONTENTS OF STACK
FC7B                  (../software/monit):00124         PRINT:
FC7B 10FFFDAC         (../software/monit):00125 [7]             STS         SP                          ;
FC7F BEFDAC           (../software/monit):00126 [6]             LDX         SP                  ;
FC82 C609             (../software/monit):00127 [2]             LDB         #$09                        ;
FC84                  (../software/monit):00128         PRINT2:                                 ;
FC84 BDFD7A           (../software/monit):00129 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FC87 5A               (../software/monit):00130 [2]             DECB                            ;
FC88 26FA             (../software/monit):00131 [3]             BNE         PRINT2                  ; DONE? IF NO DO MORE
FC8A 7EFC0B           (../software/monit):00132 [4]             JMP         CONTRL                  ; DONE? IF YES RETURN TO MAIN LOOP
                      (../software/monit):00133         
                      (../software/monit):00134         
FC8D                  (../software/monit):00135         MONLOAD:
                      (../software/monit):00136         
FC8D                  (../software/monit):00137         LOAD3:
FC8D BDFD9E           (../software/monit):00138 [8]             JSR         IOF_CONINW
FC90 8153             (../software/monit):00139 [2]             CMPA    #'S'
FC92 26F9             (../software/monit):00140 [3]             BNE         LOAD3               ; FIRST CHAR NOT (S)
FC94 BDFD9E           (../software/monit):00141 [8]             JSR         IOF_CONINW          ; READ CHAR
FC97 8139             (../software/monit):00142 [2]             CMPA    #'9'
FC99 2729             (../software/monit):00143 [3]             BEQ         LOAD21
FC9B 8131             (../software/monit):00144 [2]             CMPA    #'1'
FC9D 26EE             (../software/monit):00145 [3]             BNE         LOAD3               ; SECOND CHAR NOT (1)
FC9F 7FFDAE           (../software/monit):00146 [7]             CLR         CKSM                ; ZERO CHECKSUM
FCA2 BDFD2C           (../software/monit):00147 [8]             JSR         BYTE                ; READ BYTE
FCA5 8002             (../software/monit):00148 [2]             SUBA    #$02
FCA7 B7FDAF           (../software/monit):00149 [5]             STA         BYTECT              ; BYTE COUNT
                      (../software/monit):00150         ; BUILD ADDRESS
FCAA 8D72             (../software/monit):00151 [7]             BSR         BADDR
                      (../software/monit):00152         ; STORE DATA
FCAC                  (../software/monit):00153         LOAD11:
FCAC BDFD2C           (../software/monit):00154 [8]             JSR         BYTE
FCAF 7AFDAF           (../software/monit):00155 [7]             DEC         BYTECT
FCB2 2706             (../software/monit):00156 [3]             BEQ         LOAD15              ; ZERO BYTE COUNT
FCB4 A784             (../software/monit):00157 [4+0]           STA     ,X                      ; STORE DATA
FCB6 3001             (../software/monit):00158 [4+1]           LEAX    1,X
FCB8 20F2             (../software/monit):00159 [3]             BRA         LOAD11
                      (../software/monit):00160         
FCBA                  (../software/monit):00161         LOAD15:
FCBA 7CFDAE           (../software/monit):00162 [7]             INC         CKSM
FCBD 27CE             (../software/monit):00163 [3]             BEQ         LOAD3
FCBF                  (../software/monit):00164         LOAD19:
FCBF 863F             (../software/monit):00165 [2]             LDA         #'?'
FCC1 BDFD8D           (../software/monit):00166 [8]             JSR         WRSER1
FCC4                  (../software/monit):00167         LOAD21:
FCC4 7EFC0B           (../software/monit):00168 [4]     C1      JMP         CONTRL
                      (../software/monit):00169         
                      (../software/monit):00170         
                      (../software/monit):00171         
FCC7                  (../software/monit):00172         DUMP_LINE:
FCC7 BDFD63           (../software/monit):00173 [8]             JSR         OUTADDR                     ;
FCCA BDFD7C           (../software/monit):00174 [8]             JSR         OUTS                        ;
FCCD 3410             (../software/monit):00175 [5+2]           PSHS    X                       ;
FCCF C610             (../software/monit):00176 [2]             LDB         #$10                        ;
FCD1                  (../software/monit):00177         DUMP_LINE_LOOP:
FCD1 BDFD7A           (../software/monit):00178 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FCD4 5A               (../software/monit):00179 [2]             DECB                            ;
FCD5 26FA             (../software/monit):00180 [3]             BNE         DUMP_LINE_LOOP      ; DONE? IF NO DO MORE
FCD7 3510             (../software/monit):00181 [5+2]           PULS    X                           ;
FCD9 BDFD7C           (../software/monit):00182 [8]             JSR         OUTS                        ;
FCDC 863A             (../software/monit):00183 [2]             LDA         #':'                        ;
FCDE BDFD8D           (../software/monit):00184 [8]             JSR         WRSER1                      ;
FCE1 C610             (../software/monit):00185 [2]             LDB         #$10                        ;
FCE3                  (../software/monit):00186         DUMP_LINE_LOOPA:
FCE3 A600             (../software/monit):00187 [4+1]           LDA         0,X                 ;
FCE5 8120             (../software/monit):00188 [2]             CMPA    #32                     ;
FCE7 2B0A             (../software/monit):00189 [3]             BMI         DUMP_LINE_INVALID
FCE9 817F             (../software/monit):00190 [2]             CMPA    #127                    ;
FCEB 2A06             (../software/monit):00191 [3]             BPL         DUMP_LINE_INVALID
FCED BDFD8D           (../software/monit):00192 [8]             JSR         WRSER1                      ;
FCF0 7EFCF8           (../software/monit):00193 [4]             JMP         DUMP_LINE_VALID
FCF3                  (../software/monit):00194         DUMP_LINE_INVALID:                      ;
FCF3 862E             (../software/monit):00195 [2]             LDA         #'.'                        ;
FCF5 BDFD8D           (../software/monit):00196 [8]             JSR         WRSER1                      ;
FCF8                  (../software/monit):00197         DUMP_LINE_VALID:                        ;
FCF8 3001             (../software/monit):00198 [4+1]           LEAX    1,X                     ;
FCFA 5A               (../software/monit):00199 [2]             DECB                            ;
FCFB 26E6             (../software/monit):00200 [3]             BNE         DUMP_LINE_LOOPA     ; DONE? IF NO DO MORE
FCFD BDFD81           (../software/monit):00201 [8]             JSR         DISPLAY_CRLF        ;
FD00 39               (../software/monit):00202 [5]             RTS
                      (../software/monit):00203         
                      (../software/monit):00204         ; INPUT HEX CHAR
FD01                  (../software/monit):00205         INHEX:
FD01 BDFD9E           (../software/monit):00206 [8]             JSR         IOF_CONINW          ;
FD04 3402             (../software/monit):00207 [5+1]           PSHS    A                       ;
FD06 BDFD8D           (../software/monit):00208 [8]             JSR         WRSER1                      ;
FD09 3502             (../software/monit):00209 [5+1]           PULS    A                       ;
FD0B 8130             (../software/monit):00210 [2]             CMPA    #$30                    ;
FD0D 2BB5             (../software/monit):00211 [3]             BMI         C1                          ; NOT HEX
FD0F 8139             (../software/monit):00212 [2]             CMPA    #$39                    ;
FD11 2F0A             (../software/monit):00213 [3]             BLE         IN1HG                       ;
FD13 8141             (../software/monit):00214 [2]             CMPA    #$41                    ;
FD15 2BAD             (../software/monit):00215 [3]             BMI         C1                  ; NOT HEX
FD17 8146             (../software/monit):00216 [2]             CMPA    #$46                    ;
FD19 2EA9             (../software/monit):00217 [3]             BGT         C1                      ; NOT HEX
FD1B 8007             (../software/monit):00218 [2]             SUBA    #$07                    ;
FD1D                  (../software/monit):00219         IN1HG:                                  ;
FD1D 39               (../software/monit):00220 [5]             RTS                                     ;
                      (../software/monit):00221         
                      (../software/monit):00222         ; BUILD ADDRESS
FD1E                  (../software/monit):00223         BADDR:
FD1E 8D0C             (../software/monit):00224 [7]             BSR         BYTE                ; READ 2 FRAMES
FD20 B7FDB0           (../software/monit):00225 [5]             STA     XHI
FD23 8D07             (../software/monit):00226 [7]             BSR         BYTE
FD25 B7FDB1           (../software/monit):00227 [5]             STA     XLOW
FD28 BEFDB0           (../software/monit):00228 [6]             LDX         XHI                 ; (X) ADDRESS WE BUILT
FD2B 39               (../software/monit):00229 [5]             RTS
                      (../software/monit):00230         
                      (../software/monit):00231         ; INPUT BYTE (TWO FRAMES)
FD2C                  (../software/monit):00232         BYTE:
FD2C 8DD3             (../software/monit):00233 [7]             BSR         INHEX                   ; GET HEX CHAR
FD2E 48               (../software/monit):00234 [2]             ASLA
FD2F 48               (../software/monit):00235 [2]             ASLA
FD30 48               (../software/monit):00236 [2]             ASLA
FD31 48               (../software/monit):00237 [2]             ASLA
FD32 1F89             (../software/monit):00238 [6]             TFR     A,B         ; TAB
FD34 4D               (../software/monit):00239 [2]         TSTA                ; TAB
FD35 8DCA             (../software/monit):00240 [7]             BSR         INHEX
FD37 840F             (../software/monit):00241 [2]             ANDA    #$0F                    ; MASK TO 4 BITS
FD39 3404             (../software/monit):00242 [5+1]           PSHS    B           ; ABA
FD3B ABE0             (../software/monit):00243 [4+2]       ADDA    ,S+         ; ABA
FD3D 1F89             (../software/monit):00244 [6]             TFR     A,B         ; TAB
FD3F 4D               (../software/monit):00245 [2]         TSTA                ; TAB
FD40 FBFDAE           (../software/monit):00246 [5]             ADDB    CKSM
FD43 F7FDAE           (../software/monit):00247 [5]             STB     CKSM
FD46 39               (../software/monit):00248 [5]             RTS
                      (../software/monit):00249         
                      (../software/monit):00250         
                      (../software/monit):00251         
FD47                  (../software/monit):00252         MONOUTHL:
FD47 44               (../software/monit):00253 [2]             LSRA                            ; OUT HEX LEFT BCD DIGIT
FD48 44               (../software/monit):00254 [2]             LSRA                            ;
FD49 44               (../software/monit):00255 [2]             LSRA                            ;
FD4A 44               (../software/monit):00256 [2]             LSRA                            ;
                      (../software/monit):00257         
FD4B                  (../software/monit):00258         MONOUTHR:                                       ;
FD4B 840F             (../software/monit):00259 [2]             ANDA    #$0F                ; OUT HEC RIGHT DIGIT
FD4D 8B30             (../software/monit):00260 [2]             ADDA    #$30            ;
FD4F 8139             (../software/monit):00261 [2]             CMPA    #$39            ;
FD51 2302             (../software/monit):00262 [3]             BLS         OUTHR1              ;
FD53 8B07             (../software/monit):00263 [2]             ADDA    #$07                ;
FD55                  (../software/monit):00264         OUTHR1:
FD55 7EFD8D           (../software/monit):00265 [4]             JMP         WRSER1              ;
                      (../software/monit):00266         
FD58                  (../software/monit):00267         OUT2H:
FD58 A600             (../software/monit):00268 [4+1]           LDA     0,X                     ; OUTPUT 2 HEX CHAR
FD5A 8DEB             (../software/monit):00269 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD5C A600             (../software/monit):00270 [4+1]           LDA     0,X                     ;
FD5E 8DEB             (../software/monit):00271 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD60 3001             (../software/monit):00272 [4+1]           LEAX    1,X
FD62 39               (../software/monit):00273 [5]             RTS
                      (../software/monit):00274         
FD63                  (../software/monit):00275         OUTADDR:
FD63 3410             (../software/monit):00276 [5+2]           PSHS    X                       ;
FD65 3502             (../software/monit):00277 [5+1]           PULS    A                       ;
FD67 3402             (../software/monit):00278 [5+1]           PSHS    A                       ;
FD69 8DDC             (../software/monit):00279 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD6B 3502             (../software/monit):00280 [5+1]           PULS    A                       ;
FD6D 8DDC             (../software/monit):00281 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD6F 3502             (../software/monit):00282 [5+1]           PULS    A                       ;
FD71 3402             (../software/monit):00283 [5+1]           PSHS    A                       ;
FD73 8DD2             (../software/monit):00284 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD75 3502             (../software/monit):00285 [5+1]           PULS    A                       ;
FD77 8DD2             (../software/monit):00286 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD79 39               (../software/monit):00287 [5]             RTS
                      (../software/monit):00288         
FD7A                  (../software/monit):00289         OUT2HS:
FD7A 8DDC             (../software/monit):00290 [7]             BSR         OUT2H               ; OUTPUT 2 HEX CHAR + SPACE
FD7C                  (../software/monit):00291         OUTS:
FD7C 8620             (../software/monit):00292 [2]             LDA         #$20                ; SPACE
FD7E 7EFD8D           (../software/monit):00293 [4]             JMP         WRSER1              ;
                      (../software/monit):00294         
                      (../software/monit):00295         
                      (../software/monit):00296         
                      (../software/monit):00297         ;__________________________________________________________________________________________________________
                      (../software/monit):00298         
FD81                  (../software/monit):00299         DISPLAY_CRLF:
FD81 860D             (../software/monit):00300 [2]             LDA     #$0D                    ; PRINT CR
FD83 BDFD8D           (../software/monit):00301 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD86 860A             (../software/monit):00302 [2]             LDA     #$0A                    ; PRINT LF
FD88 BDFD8D           (../software/monit):00303 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD8B 39               (../software/monit):00304 [5]             RTS
                      (../software/monit):00305         
FD8C                  (../software/monit):00306         SERIALINIT:
                      (../software/monit):00307                 ;       LDA             #$80            ;
                      (../software/monit):00308                 ;       STA             UART3           ; SET DLAB FLAG
                      (../software/monit):00309                 ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../software/monit):00310                 ;       STA             UART0           ; save baud rate
                      (../software/monit):00311                 ;       LDA             #00                     ;
                      (../software/monit):00312                 ;       STA             UART1           ;
                      (../software/monit):00313                 ;       LDA             #03                     ;
                      (../software/monit):00314                 ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../software/monit):00315                 ;       STA             UART4           ;
FD8C 39               (../software/monit):00316 [5]             RTS
                      (../software/monit):00317         
FD8D                  (../software/monit):00318         WRSER1:
FD8D 3402             (../software/monit):00319 [5+1]           PSHS    A
FD8F                  (../software/monit):00320         TX_BUSYLP:
FD8F B6FE6D           (../software/monit):00321 [5]                     LDA             MONUART5                ; READ LINE STATUS REGISTER
FD92 8420             (../software/monit):00322 [2]                     ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
FD94 8100             (../software/monit):00323 [2]                     CMPA    #$00
FD96 27F7             (../software/monit):00324 [3]                     BEQ             TX_BUSYLP               ; IF NOT REPEAT
FD98 3502             (../software/monit):00325 [5+1]           PULS    A
FD9A B7FE68           (../software/monit):00326 [5]                     STA             MONUART0                ; THEN WRITE THE CHAR TO UART
FD9D 39               (../software/monit):00327 [5]             RTS
                      (../software/monit):00328         
                      (../software/monit):00329         
FD9E                  (../software/monit):00330         IOF_CONINW:                             ;
FD9E                  (../software/monit):00331         SERIAL_INCHW1:
FD9E B6FE6D           (../software/monit):00332 [5]                     LDA         MONUART5            ; READ LINE STATUS REGISTER
FDA1 8401             (../software/monit):00333 [2]                     ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
FDA3 8100             (../software/monit):00334 [2]                     CMPA    #$00
FDA5 27F7             (../software/monit):00335 [3]                     BEQ         SERIAL_INCHW1       ; LOOP UNTIL DATA IS READY
FDA7 B6FE68           (../software/monit):00336 [5]                     LDA         MONUART0            ; THEN READ THE CHAR FROM THE UART
FDAA 39               (../software/monit):00337 [5]                     RTS
                      (../software/monit):00338         
                      (../software/monit):00339         
                      (../software/monit):00340         ;_____________________________________________________________________________________________________
                      (../software/monit):00341         ;   Default ISRs.  Will be changed by OS Setup
FDAB                  (../software/monit):00342         SWIVEC:
FDAB                  (../software/monit):00343         IRQVEC:
FDAB 3B               (../software/monit):00344 [6+?]                   rti
                      (../software/monit):00345         
                      (../software/monit):00346         ; REGISTERS FOR GO
FDAC 0000             (../software/monit):00347         SP          FDB $0000           ; S-HIGH
                      (../software/monit):00348         ; END REGISTERS FOR GO
FDAE 00               (../software/monit):00349         CKSM    FCB     00                      ; CHECKSUM
FDAF 00               (../software/monit):00350         BYTECT  FCB     00                      ; BYTE COUNT
FDB0 00               (../software/monit):00351         XHI         FCB 00                      ; XREG HIGH
FDB1 00               (../software/monit):00352         XLOW    FCB     00                      ; XREG LOW
                      (../software/monit):00353         
                      (../software/monit):00354                 IFNDEF STARTOFFLEX
                      (../software/monit):00355                 ORG     $FFF2               ; SET RESET VECTOR TO MAIN PROGRAM
                      (../software/monit):00356                         FDB         SWIVEC
                      (../software/monit):00357                         FDB         MAIN
                      (../software/monit):00358                         FDB         MAIN
                      (../software/monit):00359                         FDB         IRQVEC
                      (../software/monit):00360                         FDB         MAIN
                      (../software/monit):00361                         FDB         MAIN
                      (../software/monit):00362                         FDB         MAIN
                      (../software/monit):00363         
                      (../software/monit):00364                 END
                      (../software/monit):00365                 ENDC
                      (        flex9.asm):00012         
                      (        flex9.asm):00013                                 ORG     $FFF2               ; SET RESET VECTOR TO MAIN PROGRAM
FFF2 FDAB             (        flex9.asm):00014                         FDB         SWIVEC
FFF4 CD00             (        flex9.asm):00015         SW2VECP FDB         COLDS
FFF6 CD00             (        flex9.asm):00016         FRQVECP FDB         COLDS
FFF8 FDAB             (        flex9.asm):00017                         FDB         IRQVEC
FFFA CD00             (        flex9.asm):00018         SW1VECP FDB         COLDS
FFFC CD00             (        flex9.asm):00019         NMIVECP FDB         COLDS
FFFE CD00             (        flex9.asm):00020         RESETV  FDB         COLDS

Symbol Table:
[ G] ADDBX                            D354
[ G] ADDDEV                           DE8E
[ G] ADER                             0011
[ G] ASNN65                           D7D0
[ G] ASNN85                           D803
[ G] ASNNX1                           D7A7
[ G] ASNNX2                           D7AA
[ G] ASNNX4                           D7B8
[ G] ASNNX6                           D7C0
[ G] ASNNX7                           D7EF
[ G] ASNNX8                           D7F7
[ G] ASNNX9                           D804
[ G] ASNNXT                           D7A1
[ G] AVLPNT                           D41B
[ G] BADDR                            FD1E
[ G] BKLN                             D418
[ G] BKREC                            DCFD
[ G] BKREC2                           DD10
[ G] BREAK                            CE88
[ G] BREAK1                           CE98
[ G] BREAK2                           CE9B
[ G] BUFPNT                           CC14
[ G] BYTE                             FD2C
[ G] BYTECT                           FDAF
[ G] C1                               FCC4
[ G] CDEBCYLL                         E353
[ G] CDEBCYLM                         E354
[ G] CDEBSEHD                         E355
[ G] CHANGE                           FC64
[ G] CHAR                             CC18
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DE0F
[ G] CHKWT                            DAB1
[ G] CHKWT2                           DABE
[ G] CHKWT4                           DAC5
[ G] CHPR                             C700
[ G] CINIT                            DE15
[ G] CKSM                             FDAE
[ G] CLASS                            CFE9
[ G] CLASS2                           D001
[ G] CLASS4                           D007
[ G] CLD                              D413
[ G] CLER                             0016
[ G] CLOS32                           DB05
[ G] CLOS35                           DB0D
[ G] CLOSE                            DADA
[ G] CLOSE1                           DAE2
[ G] CLOSE2                           DAEA
[ G] CLOSE3                           DAF4
[ G] CLOSE4                           DB0F
[ G] CLRFC2                           D544
[ G] CLRFCB                           D53B
[ G] CLRLRN                           D746
[ G] CLROFS                           D229
[ G] CLRTRY                           D670
[ G] CMFLG                            CC28
[ G] CMND                             D47F
[ G] CMND1                            D487
[ G] CMND15                           D49D
[ G] CMND2                            D4AB
[ G] CMND3                            D4B0
[ G] CMND4                            D4B4
[ G] CMND5                            D4BC
[ G] CMND7                            D4C8
[ G] CMND8                            D4CA
[ G] CMPNA1                           D562
[ G] CMPNA4                           D576
[ G] CMPNAM                           D55D
[ G] CODTBL                           D4D2
[ G] COLCNT                           CC04
[ G] COLDS                            CD00
[ G] COLMN                            CC29
[ G] COMTBL                           CC8C
[ G] CONTBL                           CC99
[ G] CONTRL                           FC0B
[ G] COPNA2                           D552
[ G] COPNAM                           D54D
[ G] COUNT                            CC4B
[ G] CP                               CC31
[ G] CPUTYP                           CC33
[ G] CRSAVE                           CC3F
[ G] CUD                              D415
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] CURFCB                           D40B
[ G] DADDBX                           CD36
[ G] DAER                             000E
[ G] DATAPT                           D40F
[ G] DATE                             CC0E
[ G] DATPNT                           CC41
[ G] DCHKRDY                          DF73
[ G] DCINIT                           DF15
[ G] DCLASS                           CD21
[ G] DDOCMD                           CD4B
[ G] DDRIVE                           DF33
[ G] DEBCYLL                          E356
[ G] DEBCYLM                          E357
[ G] DEBSEHD                          E358
[ G] DELC                             0018
[ G] DELDEV                           DE9A
[ G] DELET2                           DC1C
[ G] DELET4                           DC30
[ G] DELET5                           DC48
[ G] DELET6                           DC50
[ G] DELET7                           DC51
[ G] DELET8                           DC55
[ G] DELET9                           DC57
[ G] DELETE                           DBED
[ G] DELNA2                           DBC5
[ G] DELNAM                           DBBE
[ G] DEVARE                           DE98
[ G] DFER                             0007
[ G] DFILSP                           CD2D
[ G] DGETCH                           CD15
[ G] DGETHX                           CD42
[ G] DINBUF                           CD1B
[ G] DINDEC                           CD48
[ G] DIRDN                            D417
[ G] DISPLAY_CRLF                     FD81
[ G] DLOAD                            CD30
[ G] DNER                             000F
[ G] DNEXTC                           CD27
[ G] DOCMD                            D334
[ G] DOFMS                            D1F2
[ G] DOFMS4                           D20E
[ G] DOFMS6                           D215
[ G] DOS                              CD90
[ G] DOS2                             CD9D
[ G] DOS3                             CDAB
[ G] DOS4                             CDB2
[ G] DOS6                             CDCD
[ G] DOS8                             CDD0
[ G] DOSTA4                           DAD9
[ G] DOSTAT                           DAC8
[ G] DOUTAD                           CD45
[ G] DOUTDE                           CD39
[ G] DOUTHE                           CD3C
[ G] DPCRLF                           CD24
[ G] DPER                             000C
[ G] DPSTRN                           CD1E
[ G] DPUTCH                           CD18
[ G] DQUICK                           DF74
[ G] DREAD                            DEBB
[ G] DRER                             0005
[ G] DRESTORE                         DF1D
[ G] DRIVE                            DE0C
[ G] DRIVE1                           DF3D
[ G] DRIVEERR                         DF39
[ G] DRPTER                           CD3F
[ G] DRVADDRESS                       DE27
[ G] DRVINFO                          D436
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEC                             0005
[ G] DSEEK                            DF01
[ G] DSETEX                           CD33
[ G] DSKERS                           CC6F
[ G] DSPR2                            CD51
[ G] DSPR3                            CD54
[ G] DSTAT                            CD4E
[ G] DTRK                             0000
[ G] DUMP                             FC3B
[ G] DUMP_LINE                        FCC7
[ G] DUMP_LINE_INVALID                FCF3
[ G] DUMP_LINE_LOOP                   FCD1
[ G] DUMP_LINE_LOOPA                  FCE3
[ G] DUMP_LINE_VALID                  FCF8
[ G] DUMP_LOOP                        FC4E
[ G] DVERIFY                          DEED
[ G] DWARM                            DF19
[ G] DWRITE                           DED4
[ G] EFER                             0008
[ G] ENDOFFLEX                        DEFF
[ G] ENTRY                            CD67
[ G] ENTRY2                           CD8B
[ G] EOT                              0004
[ G] ERNM                             CCA1
[ G] ERRTYP                           CC20
[ G] ERRVEC                           CC2D
[ G] ETRIES                           D411
[ G] EXCLS                            D45D
[ G] EXCLS1                           D460
[ G] EXTTBL                           D10D
[ G] FAS                              0002
[ G] FBER                             0002
[ G] FCBBAS                           D409
[ G] FCBSTR                           D40B
[ G] FCD                              002F
[ G] FCS                              001E
[ G] FDI                              0022
[ G] FDN                              0003
[ G] FDT                              0019
[ G] FEA                              0013
[ G] FEER                             0003
[ G] FES                              0001
[ G] FFC                              0000
[ G] FFD                              0032
[ G] FFN                              0004
[ G] FID                              000F
[ G] FIER                             0014
[ G] FILEKO                           CC2F
[ G] FILIN                            CC26
[ G] FILIO                            CF1D
[ G] FILIO2                           CF25
[ G] FILIO4                           CF2B
[ G] FILIO6                           CF34
[ G] FILOUT                           CC24
[ G] FLP                              001C
[ G] FLR                              0035
[ G] FMP                              0017
[ G] FMS                              D406
[ G] FMSBSY                           CC30
[ G] FMSCLS                           D403
[ G] FMSINT                           D400
[ G] FMX                              003C
[ G] FNDENT                           DEB5
[ G] FNDFC3                           D529
[ G] FNDFC4                           D531
[ G] FNDFC6                           D537
[ G] FNDFCB                           D520
[ G] FNDN04                           D8B3
[ G] FNDN06                           D8C4
[ G] FNDN08                           D8CE
[ G] FNDNA1                           D8DC
[ G] FNDNA2                           D8E8
[ G] FNDNA3                           D8F3
[ G] FNDNA4                           D8F4
[ G] FNDNA6                           D8FF
[ G] FNDNA8                           D907
[ G] FNDNA9                           D909
[ G] FNDNAM                           D89B
[ G] FNE                              000C
[ G] FNK                              0038
[ G] FNU                              0010
[ G] FRI                              0023
[ G] FRN                              0020
[ G] FRQVECP                          FFF6
[ G] FSA                              0011
[ G] FSB                              0040
[ G] FSC                              003B
[ G] FSECMP                           D78F
[ G] FSER                             0017
[ G] FSP                              003C
[ G] FSZ                              0015
[ G] FWB                              0024
[ G] GET                              D21A
[ G] GETAV2                           D932
[ G] GETAV3                           D93C
[ G] GETAV4                           D93E
[ G] GETAVL                           D920
[ G] GETCH4                           CF11
[ G] GETCH5                           CF16
[ G] GETCH6                           CF19
[ G] GETCHR                           CEF7
[ G] GETCUR                           D666
[ G] GETDI2                           D94F
[ G] GETDIS                           D93F
[ G] GETF35                           D073
[ G] GETFI2                           D05B
[ G] GETFI3                           D070
[ G] GETFI4                           D075
[ G] GETFI5                           D078
[ G] GETFIL                           D032
[ G] GETFS2                           D78E
[ G] GETFSM                           DDB7
[ G] GETFST                           D78A
[ G] GETHE2                           D140
[ G] GETHE4                           D14D
[ G] GETHE6                           D161
[ G] GETHE8                           D167
[ G] GETHE9                           D16A
[ G] GETHEX                           D13D
[ G] GETIR                            D840
[ G] GETIR1                           D85B
[ G] GETIR2                           D866
[ G] GETIR4                           D86E
[ G] GETIR8                           D87E
[ G] GETOP2                           D25F
[ G] GETOP4                           D279
[ G] GETOPN                           D253
[ G] GETRAN                           D577
[ G] GETS1                            DDC2
[ G] GETS2                            DDC4
[ G] GO                               FC59
[ G] GOTFIL                           CC4C
[ G] HSTBUF                           E35A
[ G] ICER                             0001
[ G] IDE_ABORT                        DFAB
[ G] IDE_CONVERT_SECTOR               E27D
[ G] IDE_INITA                        DFCD
[ G] IDE_PPIDETECT                    E077
[ G] IDE_PRINT_INFO                   DFB4
[ G] IDE_READ                         E2A1
[ G] IDE_READ_BUFFER                  E1FE
[ G] IDE_READ_INFO                    E01C
[ G] IDE_READ_INFO_ABORT              E065
[ G] IDE_READ_INFO_OK                 E071
[ G] IDE_READ_NO_SETUP                E2A4
[ G] IDE_READ_RAW_SECTOR              E0B8
[ G] IDE_READ_SECTOR                  E085
[ G] IDE_READ_SECTOR_DIRTY            E0D6
[ G] IDE_READ_SECTOR_DIRTY1           E0DB
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E103
[ G] IDE_READ_SECTOR_ERROR            E0B4
[ G] IDE_SETUP_LBA                    E23A
[ G] IDE_WAIT_DRQ                     E1CE
[ G] IDE_WAIT_DRQ1                    E1D8
[ G] IDE_WAIT_DRQ2                    E1FA
[ G] IDE_WAIT_DRQ3                    E1FC
[ G] IDE_WAIT_DRQE                    E1F5
[ G] IDE_WAIT_NOT_BUSY                E1A5
[ G] IDE_WAIT_NOT_BUSY1               E1AF
[ G] IDE_WAIT_NOT_BUSY2               E1C9
[ G] IDE_WAIT_NOT_BUSY3               E1CB
[ G] IDE_WRITE                        E2C6
[ G] IDE_WRITE_BUFFER                 E21C
[ G] IDE_WRITE_SECTOR                 E106
[ G] IDE_WRITE_SECTOR_ERROR           E16A
[ G] IDE_WRITE_SECTOR_ERROR1          E168
[ G] IDEBUFRD                         E202
[ G] IDEBUFWT                         E220
[ G] IFER                             000D
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] IHNDLRP                          D3E7
[ G] IN1HG                            FD1D
[ G] INBU65                           CE6B
[ G] INBUF                            CE2A
[ G] INBUF2                           CE30
[ G] INBUF3                           CE49
[ G] INBUF4                           CE4E
[ G] INBUF6                           CE55
[ G] INBUF7                           CE70
[ G] INCH                             CD09
[ G] INCH2                            CD0C
[ G] INCHNE                           DE6D
[ G] INCHNEP                          D3E5
[ G] INCHNL                           CC23
[ G] INDEC                            D186
[ G] INDEC2                           D189
[ G] INDEX                            CC3D
[ G] INER                             0015
[ G] INHEX                            FD01
[ G] INIT                             D43A
[ G] INIT1                            CD5B
[ G] INIT2                            D450
[ G] INIT4                            D455
[ G] INITI                            CD57
[ G] IOF_CONINW                       FD9E
[ G] IOTEMP                           CC47
[ G] IRER                             0013
[ G] IRFAS                            0004
[ G] IRL                              0018
[ G] IRQLL                            DEB6
[ G] IRQVEC                           FDAB
[ G] IRQVECP                          D3EB
[ G] IRS                              0010
[ G] ISEC                             0003
[ G] LBL                              0080
[ G] LC400                            C400
[ G] LD0AE                            D0AE
[ G] LD20B                            D20B
[ G] LD287                            D287
[ G] LD3E1                            D3E1
[ G] LD9D6                            D9D6
[ G] LGO                              D239
[ G] LGO2                             D24B
[ G] LINBUF                           C080
[ G] LINE                             CC1A
[ G] LKNAM                            CE00
[ G] LKNAM3                           CE04
[ G] LKNAM4                           CE0C
[ G] LKNAM6                           CE18
[ G] LKNAM8                           CE24
[ G] LOAD                             D1B0
[ G] LOAD11                           FCAC
[ G] LOAD15                           FCBA
[ G] LOAD19                           FCBF
[ G] LOAD2                            D1B3
[ G] LOAD21                           FCC4
[ G] LOAD3                            FC8D
[ G] LOAD4                            D1CE
[ G] LOAD6                            D1E3
[ G] LOADADDR                         C400
[ G] LOCK                             C709
[ G] LSTFC                            0016
[ G] LSTSEC                           000F
[ G] LSTTRK                           004C
[ G] LSTTRM                           CC11
[ G] MAIN                             FC00
[ G] MAIND                            0005
[ G] MAPUP                            CC49
[ G] MAXSP                            007F
[ G] MEMEND                           CC2B
[ G] MESSAGE1                         E312
[ G] MESSAGE2                         E31A
[ G] MESSAGE3                         E321
[ G] MESSAGE4                         E32E
[ G] MESSAGE5                         E33F
[ G] MESSAGE6                         E350
[ G] MEXIT                            D356
[ G] MEXIT2                           D35F
[ G] MLOAD                            FC38
[ G] MONITR                           DE33
[ G] MONITRP                          D3F3
[ G] MONLOAD                          FC8D
[ G] MONOUTHL                         FD47
[ G] MONOUTHR                         FD4B
[ G] MONSTACK                         C000
[ G] MONUART0                         FE68
[ G] MONUART1                         FE69
[ G] MONUART2                         FE6A
[ G] MONUART3                         FE6B
[ G] MONUART4                         FE6C
[ G] MONUART5                         FE6D
[ G] MONUART6                         FE6E
[ G] MONUART7                         FE6F
[ G] NEXTS                            DA9E
[ G] NEXTS4                           DAB0
[ G] NFER                             0004
[ G] NFERR                            CDD3
[ G] NFERR1                           CDD8
[ G] NFERR2                           CDDB
[ G] NFERR4                           CDDE
[ G] NL                               000B
[ G] NMIVECP                          FFFC
[ G] NODEV                            DEA4
[ G] NODR                             0004
[ G] NOER                             0000
[ G] NONMER                           D32E
[ G] NONMST                           CC65
[ G] NOTRST                           CC56
[ G] NRER                             0010
[ G] NTRST                            CC7C
[ G] NUL                              0000
[ G] NXTCH                            D00A
[ G] NXTCH3                           D015
[ G] NXTCH4                           D02E
[ G] NXTRD2                           DDE8
[ G] NXTRD4                           DDEB
[ G] NXTRD6                           DDEE
[ G] NXTRDY                           DDD5
[ G] OFFSET                           CC1B
[ G] OPNCLD                           D825
[ G] OPNCUD                           D81F
[ G] OPNDIR                           D825
[ G] OPNERR                           D9D8
[ G] OPNIR                            D82D
[ G] OPNR12                           D9BC
[ G] OPNR15                           D9CF
[ G] OPNRD                            D98F
[ G] OPNRD1                           D9A9
[ G] OPNRD2                           D9D1
[ G] OPNRD3                           D9D2
[ G] OPNRW                            DB10
[ G] OPNSIR                           D818
[ G] OPNW85                           DA74
[ G] OPNWT                            D9E2
[ G] OPNWT3                           D9F1
[ G] OPNWT4                           DA09
[ G] OPNWT5                           DA13
[ G] OPNWT8                           DA56
[ G] OPNWT9                           DA77
[ G] OUT2H                            FD58
[ G] OUT2HS                           FD7A
[ G] OUTADDR                          FD63
[ G] OUTADR                           CFCC
[ G] OUTCH                            CD0F
[ G] OUTCH2                           CD12
[ G] OUTCHN                           CC22
[ G] OUTDE4                           CF92
[ G] OUTDEC                           CF82
[ G] OUTDI2                           CFA2
[ G] OUTDI5                           CFAE
[ G] OUTDI6                           CFC5
[ G] OUTDI8                           CFCA
[ G] OUTDIG                           CF9F
[ G] OUTHEX                           CFD0
[ G] OUTHEXA                          E304
[ G] OUTHL                            CFD8
[ G] OUTHR                            CFDC
[ G] OUTHR1                           FD55
[ G] OUTHR2                           CFE6
[ G] OUTNUM                           CC4A
[ G] OUTS                             FD7C
[ G] PCHK                             CCD8
[ G] PCRL15                           CED3
[ G] PCRL18                           CED8
[ G] PCRL19                           CEDA
[ G] PCRLF                            CEB1
[ G] PCRLF1                           CECC
[ G] PCRLF2                           CEDD
[ G] PCRLF4                           CEEC
[ G] PCRLF6                           CEF2
[ G] PCRLF8                           CEF4
[ G] PCRLF9                           CEF6
[ G] PDATA1                           CE7B
[ G] PINIT                            CCC0
[ G] POSI05                           DD26
[ G] POSI65                           DD92
[ G] POSI68                           DD97
[ G] POSI75                           DDAE
[ G] POSI82                           DDB4
[ G] POSI85                           DDB6
[ G] POSIT                            DD13
[ G] POSIT0                           DD22
[ G] POSIT1                           DD27
[ G] POSIT2                           DD33
[ G] POSIT3                           DD3A
[ G] POSIT4                           DD4E
[ G] POSIT5                           DD68
[ G] POSIT6                           DD7A
[ G] POSIT7                           DD9D
[ G] POSIT8                           DDB2
[ G] POUT                             CCE4
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       DF7A
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      DFD1
[ G] PPIDE_PROBE_FAIL                 E019
[ G] PPIDE_PROBE_SUCCESS              E01B
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E17A
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DF75
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DF76
[ G] PPIDETMP                         E359
[ G] PPIDEWORKVAR                     DF78
[ G] PPRD_IDE_8255                    0092
[ G] PPRMPT                           CC4E
[ G] PPWR_IDE_8255                    0080
[ G] PR0                              CCF8
[ G] PR1                              CCFC
[ G] PRCNT                            CC34
[ G] PRINT                            FC7B
[ G] PRINT2                           FC84
[ G] PRMPT                            CCAC
[ G] PRMTUSR                          CE25
[ G] PRSPL2                           C703
[ G] PRSPL3                           C706
[ G] PRSPL4                           C709
[ G] PRSPL5                           C70C
[ G] PRSPL6                           C70F
[ G] PRSPLI                           C700
[ G] PRTM                             D07C
[ G] PRTM1                            D094
[ G] PRTM2                            D099
[ G] PRTM3                            D0A7
[ G] PRTM5                            D0C0
[ G] PRTM6                            D0C3
[ G] PRTM7                            D0C6
[ G] PRVCHR                           CC19
[ G] PSTRNG                           CE79
[ G] PUTAV2                           D960
[ G] PUTAVL                           D950
[ G] PUTC68                           CF72
[ G] PUTC75                           CF7F
[ G] PUTCH2                           CF4B
[ G] PUTCH4                           CF60
[ G] PUTCH6                           CF62
[ G] PUTCH7                           CF7C
[ G] PUTCHR                           CF3D
[ G] PUTIR                            D87F
[ G] PUTIR2                           D88A
[ G] PUTNXT                           D585
[ G] PUTRA2                           D5B4
[ G] PUTRA4                           D5B7
[ G] PUTRAN                           D598
[ G] PUTSP2                           D704
[ G] PUTSP4                           D714
[ G] PUTSP6                           D71B
[ G] PUTSPC                           D6FA
[ G] QCNT                             C71B
[ G] QUICK                            DE12
[ G] RDER                             0009
[ G] RDNEX1                           D622
[ G] RDNEX2                           D628
[ G] RDNEX3                           D640
[ G] RDNEX4                           D644
[ G] RDNEX6                           D646
[ G] RDNEX8                           D648
[ G] RDNEXT                           D614
[ G] RDSEQ                            D5FD
[ G] RDSEQ0                           D608
[ G] RDSEQ1                           D60F
[ G] READ                             DE00
[ G] READERR                          DEC8
[ G] READFLOPPY                       DECD
[ G] READIDE                          DECF
[ G] READS2                           D653
[ G] READS4                           D65D
[ G] READS6                           D665
[ G] READSS                           D649
[ G] REMFC2                           D519
[ G] REMFCB                           D510
[ G] RENAM1                           DB51
[ G] RENAM4                           DB70
[ G] RENAM5                           DB74
[ G] RENAM6                           DB75
[ G] RENAME                           DB43
[ G] RENTER                           CD06
[ G] RESETV                           FFFE
[ G] RESTIO                           CDE4
[ G] RESTORE                          DE09
[ G] RESTOREERR                       DF2A
[ G] RESTOREFLOPPY                    DF2E
[ G] RESTOREIDE                       DF30
[ G] RETADR                           CC43
[ G] RETRN                            D346
[ G] RETRNR                           CC16
[ G] RETRY                            D678
[ G] RETRY2                           D68D
[ G] RETRY4                           D6A1
[ G] RETRY6                           D6A4
[ G] REWIN2                           D5F8
[ G] REWIND                           D5EA
[ G] RMER                             0019
[ G] RNFMSK                           0010
[ G] RPTE44                           D2F6
[ G] RPTE85                           D314
[ G] RPTER1                           D2A4
[ G] RPTER2                           D2B4
[ G] RPTER4                           D2E2
[ G] RPTER6                           D2F8
[ G] RPTER7                           D300
[ G] RPTER9                           D329
[ G] RPTERR                           D28A
[ G] RRER                             0018
[ G] RS                               0004
[ G] RSC                              0007
[ G] RST_DLY                          E198
[ G] RSTNA2                           DDCA
[ G] RSTNAM                           DDC5
[ G] RSTRIO                           CD2A
[ G] RTC                              0005
[ G] RTS                              CDFF
[ G] SBC                              0037
[ G] SCC                              0009
[ G] SCMSK                            007F
[ G] SECMAP                           D41D
[ G] SEEK                             DE1B
[ G] SEEKERR                          DF0C
[ G] SEEKFLOPPY                       DF10
[ G] SEEKIDE                          DF12
[ G] SERIAL_INCHW1                    FD9E
[ G] SERIALINIT                       FD8C
[ G] SET_PPI_RD                       E2E8
[ G] SET_PPI_WR                       E2F6
[ G] SETEX4                           D0FB
[ G] SETEX5                           D104
[ G] SETEX6                           D10B
[ G] SETEXT                           D0E7
[ G] SETFC2                           D507
[ G] SETFCB                           D4FE
[ G] SETFD                            D90E
[ G] SETFD2                           D91F
[ G] SETMA2                           DCEF
[ G] SETMAX                           DCD8
[ G] SETST                            DA8D
[ G] SINDIR                           D41A
[ G] SKPSP2                           D0D6
[ G] SKPSP4                           D0E0
[ G] SKPSPC                           D0D0
[ G] SL                               0100
[ G] SP                               FDAC
[ G] SPARES                           CC35
[ G] SPC                              0020
[ G] SPCLS                            CC21
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] SRDSE2                           D5CA
[ G] SRDSE6                           D5E4
[ G] SRDSE7                           D5E7
[ G] SRDSE8                           D5E9
[ G] SRDSEQ                           D5BC
[ G] STACK                            C07F
[ G] STAR                             C400
[ G] STAR0                            C407
[ G] STARTOFFLEX                      C000
[ G] STAT                             DE5D
[ G] STER                             0012
[ G] STIME                            D370
[ G] STKSTR                           CC45
[ G] STRIES                           D412
[ G] SW1VECP                          FFFA
[ G] SW2VECP                          FFF4
[ G] SWAP                             DB7A
[ G] SWAP2                            DB82
[ G] SWAP4                            DB9C
[ G] SWAP6                            DBA6
[ G] SWIVEC                           FDAB
[ G] SWIVECP                          D3E9
[ G] SWPNM                            DBAA
[ G] SWPNM2                           DBAC
[ G] SWPNM4                           DBB8
[ G] SWPNM5                           DBB9
[ G] SWTSE2                           D6ED
[ G] SWTSE4                           D6F2
[ G] SWTSE6                           D6F7
[ G] SWTSEQ                           D6D7
[ G] SYSDAY                           CC0F
[ G] SYSDRV                           CC0B
[ G] SYSFCB                           C840
[ G] SYSFLG                           CC0D
[ G] SYSMTH                           CC0E
[ G] SYSYR                            CC10
[ G] TADR                             CC1E
[ G] TAPPTR                           DEB9
[ G] Temp                             CC4D
[ G] TEMP                             D40D
[ G] TINIT                            DE3F
[ G] TINITP                           D3F5
[ G] TMER                             0006
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TMRFLG                           CC2A
[ G] TREDIR                           DE68
[ G] TRMSK                            007F
[ G] TSTHE2                           D173
[ G] TSTHE3                           D17F
[ G] TSTHE4                           D183
[ G] TSTHEX                           D16D
[ G] TSTNAM                           D22F
[ G] TSTSTR                           D3FD
[ G] TTYBE                            CC07
[ G] TTYBS                            CC00
[ G] TTYDEL                           CC01
[ G] TTYDP                            CC03
[ G] TTYEJ                            CC08
[ G] TTYEOL                           CC02
[ G] TTYESC                           CC0A
[ G] TTYNL                            CC05
[ G] TTYPS                            CC09
[ G] TTYTB                            CC06
[ G] TX_BUSYLP                        FD8F
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNLOCK                           C70C
[ G] UPDF75                           DC99
[ G] UPDFS2                           DC66
[ G] UPDFS4                           DC7A
[ G] UPDFS6                           DC91
[ G] UPDFS7                           DC96
[ G] UPDFS8                           DC9E
[ G] UPDFS9                           DCAE
[ G] UPDFSM                           DC5A
[ G] USEDSKYNG                        0000
[ G] USRTBL                           CC12
[ G] VERIFY                           DE06
[ G] VERIFYERR                        DEF8
[ G] VERIFYFLOPPY                     DEFC
[ G] VERIFYIDE                        DEFE
[ G] Vers                             C402
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] VRFYFG                           D435
[ G] WARM                             DE18
[ G] WARMS                            CD03
[ G] WHATST                           CC50
[ G] WPER                             000B
[ G] WRITE                            DE03
[ G] WRITEERR                         DEE1
[ G] WRITEFLOPPY                      DEE6
[ G] WRITEIDE                         DEE8
[ G] WRITIT                           DBD0
[ G] WRITS2                           D6B1
[ G] WRITS4                           D6C5
[ G] WRITS6                           D6D1
[ G] WRITS7                           D6D2
[ G] WRITS8                           D6D4
[ G] WRITSS                           D6A7
[ G] WRKDRV                           CC0C
[ G] WRSER1                           FD8D
[ G] WRTDI2                           D98C
[ G] WRTDI4                           D98E
[ G] WRTDIR                           D972
[ G] WRTER1                           DBE4
[ G] WRTER2                           DBE8
[ G] WRTER3                           DBEA
[ G] WRTER4                           DBEC
[ G] WRTERR                           DBD8
[ G] WTAPP                            DB1E
[ G] WTAPP2                           DB36
[ G] WTAPP4                           DB3D
[ G] WTAPP6                           DB3E
[ G] WTER                             000A
[ G] WTFSM                            DCAF
[ G] WTFSM2                           DCC3
[ G] WTNEX1                           D77A
[ G] WTNEXT                           D753
[ G] WTSEQ                            D71C
[ G] WTSEQ2                           D736
[ G] WTSEQ4                           D745
[ G] XFR                              CC1D
[ G] XHI                              FDB0
[ G] XLOW                             FDB1
[ G] XTEMP                            CC3B
[ G] ZC43A                            C425
[ G] ZC47E                            C47C
[ G] ZC488                            C486
[ G] ZC4A0                            C49E
[ G] ZC4AE                            C4B0
[ G] ZC4B0                            C4B2
[ G] ZC4B2                            C4B4
[ G] ZC4BB                            C4BD
[ G] ZC4C4                            C4C6
[ G] ZC4CA                            C4CC
[ G] ZC4D6                            C4D8
[ G] ZC555                            C4DE
[ G] ZC810                            C4F1
[ G] ZC82B                            C519
[ G] ZC82E                            C522
[ G] ZC951                            C549
